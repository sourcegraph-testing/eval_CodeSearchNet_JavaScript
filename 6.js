(function (global, factory) {
            typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('lapack'), require('wordnet-db')) :
            typeof define === 'function' && define.amd ? define(['exports', 'lapack', 'wordnet-db'], factory) :
            (factory((global.modelscript = {}),global.lapack,global.wordnetDb));
}(this, (function (exports,lapack,wordnetDb) { 'use strict';

            lapack = lapack && lapack.hasOwnProperty('default') ? lapack['default'] : lapack;
            wordnetDb = wordnetDb && wordnetDb.hasOwnProperty('default') ? wordnetDb['default'] : wordnetDb;

            var global$1 = (typeof global !== "undefined" ? global :
                        typeof self !== "undefined" ? self :
                        typeof window !== "undefined" ? window : {});

            var lookup = [];
            var revLookup = [];
            var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
            var inited = false;
            function init () {
              inited = true;
              var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
              for (var i = 0, len = code.length; i < len; ++i) {
                lookup[i] = code[i];
                revLookup[code.charCodeAt(i)] = i;
              }

              revLookup['-'.charCodeAt(0)] = 62;
              revLookup['_'.charCodeAt(0)] = 63;
            }

            function toByteArray (b64) {
              if (!inited) {
                init();
              }
              var i, j, l, tmp, placeHolders, arr;
              var len = b64.length;

              if (len % 4 > 0) {
                throw new Error('Invalid string. Length must be a multiple of 4')
              }

              // the number of equal signs (place holders)
              // if there are two placeholders, than the two characters before it
              // represent one byte
              // if there is only one, then the three characters before it represent 2 bytes
              // this is just a cheap hack to not do indexOf twice
              placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

              // base64 is 4/3 + up to two characters of the original data
              arr = new Arr(len * 3 / 4 - placeHolders);

              // if there are placeholders, only get up to the last complete 4 chars
              l = placeHolders > 0 ? len - 4 : len;

              var L = 0;

              for (i = 0, j = 0; i < l; i += 4, j += 3) {
                tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
                arr[L++] = (tmp >> 16) & 0xFF;
                arr[L++] = (tmp >> 8) & 0xFF;
                arr[L++] = tmp & 0xFF;
              }

              if (placeHolders === 2) {
                tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
                arr[L++] = tmp & 0xFF;
              } else if (placeHolders === 1) {
                tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
                arr[L++] = (tmp >> 8) & 0xFF;
                arr[L++] = tmp & 0xFF;
              }

              return arr
            }

            function tripletToBase64 (num) {
              return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
            }

            function encodeChunk (uint8, start, end) {
              var tmp;
              var output = [];
              for (var i = start; i < end; i += 3) {
                tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
                output.push(tripletToBase64(tmp));
              }
              return output.join('')
            }

            function fromByteArray (uint8) {
              if (!inited) {
                init();
              }
              var tmp;
              var len = uint8.length;
              var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
              var output = '';
              var parts = [];
              var maxChunkLength = 16383; // must be multiple of 3

              // go through the array every three bytes, we'll deal with trailing stuff later
              for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
              }

              // pad the end with zeros, but make sure to not forget the extra bytes
              if (extraBytes === 1) {
                tmp = uint8[len - 1];
                output += lookup[tmp >> 2];
                output += lookup[(tmp << 4) & 0x3F];
                output += '==';
              } else if (extraBytes === 2) {
                tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
                output += lookup[tmp >> 10];
                output += lookup[(tmp >> 4) & 0x3F];
                output += lookup[(tmp << 2) & 0x3F];
                output += '=';
              }

              parts.push(output);

              return parts.join('')
            }

            function read (buffer, offset, isLE, mLen, nBytes) {
              var e, m;
              var eLen = nBytes * 8 - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var nBits = -7;
              var i = isLE ? (nBytes - 1) : 0;
              var d = isLE ? -1 : 1;
              var s = buffer[offset + i];

              i += d;

              e = s & ((1 << (-nBits)) - 1);
              s >>= (-nBits);
              nBits += eLen;
              for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

              m = e & ((1 << (-nBits)) - 1);
              e >>= (-nBits);
              nBits += mLen;
              for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

              if (e === 0) {
                e = 1 - eBias;
              } else if (e === eMax) {
                return m ? NaN : ((s ? -1 : 1) * Infinity)
              } else {
                m = m + Math.pow(2, mLen);
                e = e - eBias;
              }
              return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
            }

            function write (buffer, value, offset, isLE, mLen, nBytes) {
              var e, m, c;
              var eLen = nBytes * 8 - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
              var i = isLE ? 0 : (nBytes - 1);
              var d = isLE ? 1 : -1;
              var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

              value = Math.abs(value);

              if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0;
                e = eMax;
              } else {
                e = Math.floor(Math.log(value) / Math.LN2);
                if (value * (c = Math.pow(2, -e)) < 1) {
                  e--;
                  c *= 2;
                }
                if (e + eBias >= 1) {
                  value += rt / c;
                } else {
                  value += rt * Math.pow(2, 1 - eBias);
                }
                if (value * c >= 2) {
                  e++;
                  c /= 2;
                }

                if (e + eBias >= eMax) {
                  m = 0;
                  e = eMax;
                } else if (e + eBias >= 1) {
                  m = (value * c - 1) * Math.pow(2, mLen);
                  e = e + eBias;
                } else {
                  m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                  e = 0;
                }
              }

              for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

              e = (e << mLen) | m;
              eLen += mLen;
              for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

              buffer[offset + i - d] |= s * 128;
            }

            var toString = {}.toString;

            var isArray = Array.isArray || function (arr) {
              return toString.call(arr) == '[object Array]';
            };

            var INSPECT_MAX_BYTES = 50;

            /**
             * If `Buffer.TYPED_ARRAY_SUPPORT`:
             *   === true    Use Uint8Array implementation (fastest)
             *   === false   Use Object implementation (most compatible, even IE6)
             *
             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
             * Opera 11.6+, iOS 4.2+.
             *
             * Due to various browser bugs, sometimes the Object implementation will be used even
             * when the browser supports typed arrays.
             *
             * Note:
             *
             *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
             *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
             *
             *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
             *
             *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
             *     incorrect length in some situations.

             * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
             * get the Object implementation, which is slower but behaves correctly.
             */
            Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
              ? global$1.TYPED_ARRAY_SUPPORT
              : true;

            function kMaxLength () {
              return Buffer.TYPED_ARRAY_SUPPORT
                ? 0x7fffffff
                : 0x3fffffff
            }

            function createBuffer (that, length) {
              if (kMaxLength() < length) {
                throw new RangeError('Invalid typed array length')
              }
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                // Return an augmented `Uint8Array` instance, for best performance
                that = new Uint8Array(length);
                that.__proto__ = Buffer.prototype;
              } else {
                // Fallback: Return an object instance of the Buffer class
                if (that === null) {
                  that = new Buffer(length);
                }
                that.length = length;
              }

              return that
            }

            /**
             * The Buffer constructor returns instances of `Uint8Array` that have their
             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
             * returns a single octet.
             *
             * The `Uint8Array` prototype remains unmodified.
             */

            function Buffer (arg, encodingOrOffset, length) {
              if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
                return new Buffer(arg, encodingOrOffset, length)
              }

              // Common case.
              if (typeof arg === 'number') {
                if (typeof encodingOrOffset === 'string') {
                  throw new Error(
                    'If encoding is specified then the first argument must be a string'
                  )
                }
                return allocUnsafe(this, arg)
              }
              return from(this, arg, encodingOrOffset, length)
            }

            Buffer.poolSize = 8192; // not used by this implementation

            // TODO: Legacy, not needed anymore. Remove in next major version.
            Buffer._augment = function (arr) {
              arr.__proto__ = Buffer.prototype;
              return arr
            };

            function from (that, value, encodingOrOffset, length) {
              if (typeof value === 'number') {
                throw new TypeError('"value" argument must not be a number')
              }

              if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
                return fromArrayBuffer(that, value, encodingOrOffset, length)
              }

              if (typeof value === 'string') {
                return fromString(that, value, encodingOrOffset)
              }

              return fromObject(that, value)
            }

            /**
             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
             * if value is a number.
             * Buffer.from(str[, encoding])
             * Buffer.from(array)
             * Buffer.from(buffer)
             * Buffer.from(arrayBuffer[, byteOffset[, length]])
             **/
            Buffer.from = function (value, encodingOrOffset, length) {
              return from(null, value, encodingOrOffset, length)
            };

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              Buffer.prototype.__proto__ = Uint8Array.prototype;
              Buffer.__proto__ = Uint8Array;
            }

            function assertSize (size) {
              if (typeof size !== 'number') {
                throw new TypeError('"size" argument must be a number')
              } else if (size < 0) {
                throw new RangeError('"size" argument must not be negative')
              }
            }

            function alloc (that, size, fill, encoding) {
              assertSize(size);
              if (size <= 0) {
                return createBuffer(that, size)
              }
              if (fill !== undefined) {
                // Only pay attention to encoding if it's a string. This
                // prevents accidentally sending in a number that would
                // be interpretted as a start offset.
                return typeof encoding === 'string'
                  ? createBuffer(that, size).fill(fill, encoding)
                  : createBuffer(that, size).fill(fill)
              }
              return createBuffer(that, size)
            }

            /**
             * Creates a new filled Buffer instance.
             * alloc(size[, fill[, encoding]])
             **/
            Buffer.alloc = function (size, fill, encoding) {
              return alloc(null, size, fill, encoding)
            };

            function allocUnsafe (that, size) {
              assertSize(size);
              that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
              if (!Buffer.TYPED_ARRAY_SUPPORT) {
                for (var i = 0; i < size; ++i) {
                  that[i] = 0;
                }
              }
              return that
            }

            /**
             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
             * */
            Buffer.allocUnsafe = function (size) {
              return allocUnsafe(null, size)
            };
            /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */
            Buffer.allocUnsafeSlow = function (size) {
              return allocUnsafe(null, size)
            };

            function fromString (that, string, encoding) {
              if (typeof encoding !== 'string' || encoding === '') {
                encoding = 'utf8';
              }

              if (!Buffer.isEncoding(encoding)) {
                throw new TypeError('"encoding" must be a valid string encoding')
              }

              var length = byteLength(string, encoding) | 0;
              that = createBuffer(that, length);

              var actual = that.write(string, encoding);

              if (actual !== length) {
                // Writing a hex string, for example, that contains invalid characters will
                // cause everything after the first invalid character to be ignored. (e.g.
                // 'abxxcd' will be treated as 'ab')
                that = that.slice(0, actual);
              }

              return that
            }

            function fromArrayLike (that, array) {
              var length = array.length < 0 ? 0 : checked(array.length) | 0;
              that = createBuffer(that, length);
              for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255;
              }
              return that
            }

            function fromArrayBuffer (that, array, byteOffset, length) {
              array.byteLength; // this throws if `array` is not a valid ArrayBuffer

              if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError('\'offset\' is out of bounds')
              }

              if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError('\'length\' is out of bounds')
              }

              if (byteOffset === undefined && length === undefined) {
                array = new Uint8Array(array);
              } else if (length === undefined) {
                array = new Uint8Array(array, byteOffset);
              } else {
                array = new Uint8Array(array, byteOffset, length);
              }

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                // Return an augmented `Uint8Array` instance, for best performance
                that = array;
                that.__proto__ = Buffer.prototype;
              } else {
                // Fallback: Return an object instance of the Buffer class
                that = fromArrayLike(that, array);
              }
              return that
            }

            function fromObject (that, obj) {
              if (internalIsBuffer(obj)) {
                var len = checked(obj.length) | 0;
                that = createBuffer(that, len);

                if (that.length === 0) {
                  return that
                }

                obj.copy(that, 0, 0, len);
                return that
              }

              if (obj) {
                if ((typeof ArrayBuffer !== 'undefined' &&
                    obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
                  if (typeof obj.length !== 'number' || isnan(obj.length)) {
                    return createBuffer(that, 0)
                  }
                  return fromArrayLike(that, obj)
                }

                if (obj.type === 'Buffer' && isArray(obj.data)) {
                  return fromArrayLike(that, obj.data)
                }
              }

              throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
            }

            function checked (length) {
              // Note: cannot use `length < kMaxLength()` here because that fails when
              // length is NaN (which is otherwise coerced to zero.)
              if (length >= kMaxLength()) {
                throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                                     'size: 0x' + kMaxLength().toString(16) + ' bytes')
              }
              return length | 0
            }
            Buffer.isBuffer = isBuffer;
            function internalIsBuffer (b) {
              return !!(b != null && b._isBuffer)
            }

            Buffer.compare = function compare (a, b) {
              if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
                throw new TypeError('Arguments must be Buffers')
              }

              if (a === b) return 0

              var x = a.length;
              var y = b.length;

              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break
                }
              }

              if (x < y) return -1
              if (y < x) return 1
              return 0
            };

            Buffer.isEncoding = function isEncoding (encoding) {
              switch (String(encoding).toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'latin1':
                case 'binary':
                case 'base64':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return true
                default:
                  return false
              }
            };

            Buffer.concat = function concat (list, length) {
              if (!isArray(list)) {
                throw new TypeError('"list" argument must be an Array of Buffers')
              }

              if (list.length === 0) {
                return Buffer.alloc(0)
              }

              var i;
              if (length === undefined) {
                length = 0;
                for (i = 0; i < list.length; ++i) {
                  length += list[i].length;
                }
              }

              var buffer = Buffer.allocUnsafe(length);
              var pos = 0;
              for (i = 0; i < list.length; ++i) {
                var buf = list[i];
                if (!internalIsBuffer(buf)) {
                  throw new TypeError('"list" argument must be an Array of Buffers')
                }
                buf.copy(buffer, pos);
                pos += buf.length;
              }
              return buffer
            };

            function byteLength (string, encoding) {
              if (internalIsBuffer(string)) {
                return string.length
              }
              if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
                  (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
                return string.byteLength
              }
              if (typeof string !== 'string') {
                string = '' + string;
              }

              var len = string.length;
              if (len === 0) return 0

              // Use a for loop to avoid recursion
              var loweredCase = false;
              for (;;) {
                switch (encoding) {
                  case 'ascii':
                  case 'latin1':
                  case 'binary':
                    return len
                  case 'utf8':
                  case 'utf-8':
                  case undefined:
                    return utf8ToBytes(string).length
                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return len * 2
                  case 'hex':
                    return len >>> 1
                  case 'base64':
                    return base64ToBytes(string).length
                  default:
                    if (loweredCase) return utf8ToBytes(string).length // assume utf8
                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer.byteLength = byteLength;

            function slowToString (encoding, start, end) {
              var loweredCase = false;

              // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
              // property of a typed array.

              // This behaves neither like String nor Uint8Array in that we set start/end
              // to their upper/lower bounds if the value passed is out of range.
              // undefined is handled specially as per ECMA-262 6th Edition,
              // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
              if (start === undefined || start < 0) {
                start = 0;
              }
              // Return early if start > this.length. Done here to prevent potential uint32
              // coercion fail below.
              if (start > this.length) {
                return ''
              }

              if (end === undefined || end > this.length) {
                end = this.length;
              }

              if (end <= 0) {
                return ''
              }

              // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
              end >>>= 0;
              start >>>= 0;

              if (end <= start) {
                return ''
              }

              if (!encoding) encoding = 'utf8';

              while (true) {
                switch (encoding) {
                  case 'hex':
                    return hexSlice(this, start, end)

                  case 'utf8':
                  case 'utf-8':
                    return utf8Slice(this, start, end)

                  case 'ascii':
                    return asciiSlice(this, start, end)

                  case 'latin1':
                  case 'binary':
                    return latin1Slice(this, start, end)

                  case 'base64':
                    return base64Slice(this, start, end)

                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return utf16leSlice(this, start, end)

                  default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                    encoding = (encoding + '').toLowerCase();
                    loweredCase = true;
                }
              }
            }

            // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
            // Buffer instances.
            Buffer.prototype._isBuffer = true;

            function swap (b, n, m) {
              var i = b[n];
              b[n] = b[m];
              b[m] = i;
            }

            Buffer.prototype.swap16 = function swap16 () {
              var len = this.length;
              if (len % 2 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 16-bits')
              }
              for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
              }
              return this
            };

            Buffer.prototype.swap32 = function swap32 () {
              var len = this.length;
              if (len % 4 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 32-bits')
              }
              for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
              }
              return this
            };

            Buffer.prototype.swap64 = function swap64 () {
              var len = this.length;
              if (len % 8 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 64-bits')
              }
              for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
              }
              return this
            };

            Buffer.prototype.toString = function toString () {
              var length = this.length | 0;
              if (length === 0) return ''
              if (arguments.length === 0) return utf8Slice(this, 0, length)
              return slowToString.apply(this, arguments)
            };

            Buffer.prototype.equals = function equals (b) {
              if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
              if (this === b) return true
              return Buffer.compare(this, b) === 0
            };

            Buffer.prototype.inspect = function inspect () {
              var str = '';
              var max = INSPECT_MAX_BYTES;
              if (this.length > 0) {
                str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
                if (this.length > max) str += ' ... ';
              }
              return '<Buffer ' + str + '>'
            };

            Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
              if (!internalIsBuffer(target)) {
                throw new TypeError('Argument must be a Buffer')
              }

              if (start === undefined) {
                start = 0;
              }
              if (end === undefined) {
                end = target ? target.length : 0;
              }
              if (thisStart === undefined) {
                thisStart = 0;
              }
              if (thisEnd === undefined) {
                thisEnd = this.length;
              }

              if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                throw new RangeError('out of range index')
              }

              if (thisStart >= thisEnd && start >= end) {
                return 0
              }
              if (thisStart >= thisEnd) {
                return -1
              }
              if (start >= end) {
                return 1
              }

              start >>>= 0;
              end >>>= 0;
              thisStart >>>= 0;
              thisEnd >>>= 0;

              if (this === target) return 0

              var x = thisEnd - thisStart;
              var y = end - start;
              var len = Math.min(x, y);

              var thisCopy = this.slice(thisStart, thisEnd);
              var targetCopy = target.slice(start, end);

              for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                  x = thisCopy[i];
                  y = targetCopy[i];
                  break
                }
              }

              if (x < y) return -1
              if (y < x) return 1
              return 0
            };

            // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
            // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
            //
            // Arguments:
            // - buffer - a Buffer to search
            // - val - a string, Buffer, or number
            // - byteOffset - an index into `buffer`; will be clamped to an int32
            // - encoding - an optional encoding, relevant is val is a string
            // - dir - true for indexOf, false for lastIndexOf
            function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
              // Empty buffer means no match
              if (buffer.length === 0) return -1

              // Normalize byteOffset
              if (typeof byteOffset === 'string') {
                encoding = byteOffset;
                byteOffset = 0;
              } else if (byteOffset > 0x7fffffff) {
                byteOffset = 0x7fffffff;
              } else if (byteOffset < -0x80000000) {
                byteOffset = -0x80000000;
              }
              byteOffset = +byteOffset;  // Coerce to Number.
              if (isNaN(byteOffset)) {
                // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                byteOffset = dir ? 0 : (buffer.length - 1);
              }

              // Normalize byteOffset: negative offsets start from the end of the buffer
              if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
              if (byteOffset >= buffer.length) {
                if (dir) return -1
                else byteOffset = buffer.length - 1;
              } else if (byteOffset < 0) {
                if (dir) byteOffset = 0;
                else return -1
              }

              // Normalize val
              if (typeof val === 'string') {
                val = Buffer.from(val, encoding);
              }

              // Finally, search either indexOf (if dir is true) or lastIndexOf
              if (internalIsBuffer(val)) {
                // Special case: looking for empty string/buffer always fails
                if (val.length === 0) {
                  return -1
                }
                return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
              } else if (typeof val === 'number') {
                val = val & 0xFF; // Search for a byte value [0-255]
                if (Buffer.TYPED_ARRAY_SUPPORT &&
                    typeof Uint8Array.prototype.indexOf === 'function') {
                  if (dir) {
                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                  } else {
                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                  }
                }
                return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
              }

              throw new TypeError('val must be string, number or Buffer')
            }

            function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
              var indexSize = 1;
              var arrLength = arr.length;
              var valLength = val.length;

              if (encoding !== undefined) {
                encoding = String(encoding).toLowerCase();
                if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                    encoding === 'utf16le' || encoding === 'utf-16le') {
                  if (arr.length < 2 || val.length < 2) {
                    return -1
                  }
                  indexSize = 2;
                  arrLength /= 2;
                  valLength /= 2;
                  byteOffset /= 2;
                }
              }

              function read$$1 (buf, i) {
                if (indexSize === 1) {
                  return buf[i]
                } else {
                  return buf.readUInt16BE(i * indexSize)
                }
              }

              var i;
              if (dir) {
                var foundIndex = -1;
                for (i = byteOffset; i < arrLength; i++) {
                  if (read$$1(arr, i) === read$$1(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                    if (foundIndex === -1) foundIndex = i;
                    if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                  } else {
                    if (foundIndex !== -1) i -= i - foundIndex;
                    foundIndex = -1;
                  }
                }
              } else {
                if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
                for (i = byteOffset; i >= 0; i--) {
                  var found = true;
                  for (var j = 0; j < valLength; j++) {
                    if (read$$1(arr, i + j) !== read$$1(val, j)) {
                      found = false;
                      break
                    }
                  }
                  if (found) return i
                }
              }

              return -1
            }

            Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
              return this.indexOf(val, byteOffset, encoding) !== -1
            };

            Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
            };

            Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
            };

            function hexWrite (buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;
              if (!length) {
                length = remaining;
              } else {
                length = Number(length);
                if (length > remaining) {
                  length = remaining;
                }
              }

              // must be an even number of digits
              var strLen = string.length;
              if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

              if (length > strLen / 2) {
                length = strLen / 2;
              }
              for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (isNaN(parsed)) return i
                buf[offset + i] = parsed;
              }
              return i
            }

            function utf8Write (buf, string, offset, length) {
              return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
            }

            function asciiWrite (buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length)
            }

            function latin1Write (buf, string, offset, length) {
              return asciiWrite(buf, string, offset, length)
            }

            function base64Write (buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length)
            }

            function ucs2Write (buf, string, offset, length) {
              return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
            }

            Buffer.prototype.write = function write$$1 (string, offset, length, encoding) {
              // Buffer#write(string)
              if (offset === undefined) {
                encoding = 'utf8';
                length = this.length;
                offset = 0;
              // Buffer#write(string, encoding)
              } else if (length === undefined && typeof offset === 'string') {
                encoding = offset;
                length = this.length;
                offset = 0;
              // Buffer#write(string, offset[, length][, encoding])
              } else if (isFinite(offset)) {
                offset = offset | 0;
                if (isFinite(length)) {
                  length = length | 0;
                  if (encoding === undefined) encoding = 'utf8';
                } else {
                  encoding = length;
                  length = undefined;
                }
              // legacy write(string, encoding, offset, length) - remove in v0.13
              } else {
                throw new Error(
                  'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                )
              }

              var remaining = this.length - offset;
              if (length === undefined || length > remaining) length = remaining;

              if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
                throw new RangeError('Attempt to write outside buffer bounds')
              }

              if (!encoding) encoding = 'utf8';

              var loweredCase = false;
              for (;;) {
                switch (encoding) {
                  case 'hex':
                    return hexWrite(this, string, offset, length)

                  case 'utf8':
                  case 'utf-8':
                    return utf8Write(this, string, offset, length)

                  case 'ascii':
                    return asciiWrite(this, string, offset, length)

                  case 'latin1':
                  case 'binary':
                    return latin1Write(this, string, offset, length)

                  case 'base64':
                    // Warning: maxLength not taken into account in base64Write
                    return base64Write(this, string, offset, length)

                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return ucs2Write(this, string, offset, length)

                  default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };

            Buffer.prototype.toJSON = function toJSON () {
              return {
                type: 'Buffer',
                data: Array.prototype.slice.call(this._arr || this, 0)
              }
            };

            function base64Slice (buf, start, end) {
              if (start === 0 && end === buf.length) {
                return fromByteArray(buf)
              } else {
                return fromByteArray(buf.slice(start, end))
              }
            }

            function utf8Slice (buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];

              var i = start;
              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence = (firstByte > 0xEF) ? 4
                  : (firstByte > 0xDF) ? 3
                  : (firstByte > 0xBF) ? 2
                  : 1;

                if (i + bytesPerSequence <= end) {
                  var secondByte, thirdByte, fourthByte, tempCodePoint;

                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 0x80) {
                        codePoint = firstByte;
                      }
                      break
                    case 2:
                      secondByte = buf[i + 1];
                      if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                        if (tempCodePoint > 0x7F) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break
                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break
                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];
                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                          codePoint = tempCodePoint;
                        }
                      }
                  }
                }

                if (codePoint === null) {
                  // we did not generate a valid codePoint so insert a
                  // replacement char (U+FFFD) and advance only 1 byte
                  codePoint = 0xFFFD;
                  bytesPerSequence = 1;
                } else if (codePoint > 0xFFFF) {
                  // encode to utf16 (surrogate pair dance)
                  codePoint -= 0x10000;
                  res.push(codePoint >>> 10 & 0x3FF | 0xD800);
                  codePoint = 0xDC00 | codePoint & 0x3FF;
                }

                res.push(codePoint);
                i += bytesPerSequence;
              }

              return decodeCodePointsArray(res)
            }

            // Based on http://stackoverflow.com/a/22747272/680742, the browser with
            // the lowest limit is Chrome, with 0x10000 args.
            // We go 1 magnitude less, for safety
            var MAX_ARGUMENTS_LENGTH = 0x1000;

            function decodeCodePointsArray (codePoints) {
              var len = codePoints.length;
              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
              }

              // Decode in chunks to avoid "call stack size exceeded".
              var res = '';
              var i = 0;
              while (i < len) {
                res += String.fromCharCode.apply(
                  String,
                  codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                );
              }
              return res
            }

            function asciiSlice (buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 0x7F);
              }
              return ret
            }

            function latin1Slice (buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i]);
              }
              return ret
            }

            function hexSlice (buf, start, end) {
              var len = buf.length;

              if (!start || start < 0) start = 0;
              if (!end || end < 0 || end > len) end = len;

              var out = '';
              for (var i = start; i < end; ++i) {
                out += toHex(buf[i]);
              }
              return out
            }

            function utf16leSlice (buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = '';
              for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
              }
              return res
            }

            Buffer.prototype.slice = function slice (start, end) {
              var len = this.length;
              start = ~~start;
              end = end === undefined ? len : ~~end;

              if (start < 0) {
                start += len;
                if (start < 0) start = 0;
              } else if (start > len) {
                start = len;
              }

              if (end < 0) {
                end += len;
                if (end < 0) end = 0;
              } else if (end > len) {
                end = len;
              }

              if (end < start) end = start;

              var newBuf;
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                newBuf = this.subarray(start, end);
                newBuf.__proto__ = Buffer.prototype;
              } else {
                var sliceLen = end - start;
                newBuf = new Buffer(sliceLen, undefined);
                for (var i = 0; i < sliceLen; ++i) {
                  newBuf[i] = this[i + start];
                }
              }

              return newBuf
            };

            /*
             * Need to make sure that buffer isn't trying to write out of bounds.
             */
            function checkOffset (offset, ext, length) {
              if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
              if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
            }

            Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }

              return val
            };

            Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) {
                checkOffset(offset, byteLength, this.length);
              }

              var val = this[offset + --byteLength];
              var mul = 1;
              while (byteLength > 0 && (mul *= 0x100)) {
                val += this[offset + --byteLength] * mul;
              }

              return val
            };

            Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 1, this.length);
              return this[offset]
            };

            Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              return this[offset] | (this[offset + 1] << 8)
            };

            Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              return (this[offset] << 8) | this[offset + 1]
            };

            Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);

              return ((this[offset]) |
                  (this[offset + 1] << 8) |
                  (this[offset + 2] << 16)) +
                  (this[offset + 3] * 0x1000000)
            };

            Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (this[offset] * 0x1000000) +
                ((this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3])
            };

            Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }
              mul *= 0x80;

              if (val >= mul) val -= Math.pow(2, 8 * byteLength);

              return val
            };

            Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var i = byteLength;
              var mul = 1;
              var val = this[offset + --i];
              while (i > 0 && (mul *= 0x100)) {
                val += this[offset + --i] * mul;
              }
              mul *= 0x80;

              if (val >= mul) val -= Math.pow(2, 8 * byteLength);

              return val
            };

            Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 1, this.length);
              if (!(this[offset] & 0x80)) return (this[offset])
              return ((0xff - this[offset] + 1) * -1)
            };

            Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset] | (this[offset + 1] << 8);
              return (val & 0x8000) ? val | 0xFFFF0000 : val
            };

            Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | (this[offset] << 8);
              return (val & 0x8000) ? val | 0xFFFF0000 : val
            };

            Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (this[offset]) |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16) |
                (this[offset + 3] << 24)
            };

            Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (this[offset] << 24) |
                (this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                (this[offset + 3])
            };

            Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return read(this, offset, true, 23, 4)
            };

            Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return read(this, offset, false, 23, 4)
            };

            Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 8, this.length);
              return read(this, offset, true, 52, 8)
            };

            Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 8, this.length);
              return read(this, offset, false, 52, 8)
            };

            function checkInt (buf, value, offset, ext, max, min) {
              if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
              if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
              if (offset + ext > buf.length) throw new RangeError('Index out of range')
            }

            Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var mul = 1;
              var i = 0;
              this[offset] = value & 0xFF;
              while (++i < byteLength && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xFF;
              }

              return offset + byteLength
            };

            Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var i = byteLength - 1;
              var mul = 1;
              this[offset + i] = value & 0xFF;
              while (--i >= 0 && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xFF;
              }

              return offset + byteLength
            };

            Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
              if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
              this[offset] = (value & 0xff);
              return offset + 1
            };

            function objectWriteUInt16 (buf, value, offset, littleEndian) {
              if (value < 0) value = 0xffff + value + 1;
              for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
                buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
                  (littleEndian ? i : 1 - i) * 8;
              }
            }

            Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value & 0xff);
                this[offset + 1] = (value >>> 8);
              } else {
                objectWriteUInt16(this, value, offset, true);
              }
              return offset + 2
            };

            Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 8);
                this[offset + 1] = (value & 0xff);
              } else {
                objectWriteUInt16(this, value, offset, false);
              }
              return offset + 2
            };

            function objectWriteUInt32 (buf, value, offset, littleEndian) {
              if (value < 0) value = 0xffffffff + value + 1;
              for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
                buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
              }
            }

            Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset + 3] = (value >>> 24);
                this[offset + 2] = (value >>> 16);
                this[offset + 1] = (value >>> 8);
                this[offset] = (value & 0xff);
              } else {
                objectWriteUInt32(this, value, offset, true);
              }
              return offset + 4
            };

            Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 24);
                this[offset + 1] = (value >>> 16);
                this[offset + 2] = (value >>> 8);
                this[offset + 3] = (value & 0xff);
              } else {
                objectWriteUInt32(this, value, offset, false);
              }
              return offset + 4
            };

            Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);

                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = 0;
              var mul = 1;
              var sub = 0;
              this[offset] = value & 0xFF;
              while (++i < byteLength && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
              }

              return offset + byteLength
            };

            Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);

                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = byteLength - 1;
              var mul = 1;
              var sub = 0;
              this[offset + i] = value & 0xFF;
              while (--i >= 0 && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
              }

              return offset + byteLength
            };

            Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
              if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
              if (value < 0) value = 0xff + value + 1;
              this[offset] = (value & 0xff);
              return offset + 1
            };

            Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value & 0xff);
                this[offset + 1] = (value >>> 8);
              } else {
                objectWriteUInt16(this, value, offset, true);
              }
              return offset + 2
            };

            Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 8);
                this[offset + 1] = (value & 0xff);
              } else {
                objectWriteUInt16(this, value, offset, false);
              }
              return offset + 2
            };

            Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value & 0xff);
                this[offset + 1] = (value >>> 8);
                this[offset + 2] = (value >>> 16);
                this[offset + 3] = (value >>> 24);
              } else {
                objectWriteUInt32(this, value, offset, true);
              }
              return offset + 4
            };

            Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              if (value < 0) value = 0xffffffff + value + 1;
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 24);
                this[offset + 1] = (value >>> 16);
                this[offset + 2] = (value >>> 8);
                this[offset + 3] = (value & 0xff);
              } else {
                objectWriteUInt32(this, value, offset, false);
              }
              return offset + 4
            };

            function checkIEEE754 (buf, value, offset, ext, max, min) {
              if (offset + ext > buf.length) throw new RangeError('Index out of range')
              if (offset < 0) throw new RangeError('Index out of range')
            }

            function writeFloat (buf, value, offset, littleEndian, noAssert) {
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
              }
              write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4
            }

            Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
              return writeFloat(this, value, offset, true, noAssert)
            };

            Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
              return writeFloat(this, value, offset, false, noAssert)
            };

            function writeDouble (buf, value, offset, littleEndian, noAssert) {
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
              }
              write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8
            }

            Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
              return writeDouble(this, value, offset, true, noAssert)
            };

            Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
              return writeDouble(this, value, offset, false, noAssert)
            };

            // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
            Buffer.prototype.copy = function copy (target, targetStart, start, end) {
              if (!start) start = 0;
              if (!end && end !== 0) end = this.length;
              if (targetStart >= target.length) targetStart = target.length;
              if (!targetStart) targetStart = 0;
              if (end > 0 && end < start) end = start;

              // Copy 0 bytes; we're done
              if (end === start) return 0
              if (target.length === 0 || this.length === 0) return 0

              // Fatal error conditions
              if (targetStart < 0) {
                throw new RangeError('targetStart out of bounds')
              }
              if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
              if (end < 0) throw new RangeError('sourceEnd out of bounds')

              // Are we oob?
              if (end > this.length) end = this.length;
              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }

              var len = end - start;
              var i;

              if (this === target && start < targetStart && targetStart < end) {
                // descending copy from end
                for (i = len - 1; i >= 0; --i) {
                  target[i + targetStart] = this[i + start];
                }
              } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
                // ascending copy from start
                for (i = 0; i < len; ++i) {
                  target[i + targetStart] = this[i + start];
                }
              } else {
                Uint8Array.prototype.set.call(
                  target,
                  this.subarray(start, start + len),
                  targetStart
                );
              }

              return len
            };

            // Usage:
            //    buffer.fill(number[, offset[, end]])
            //    buffer.fill(buffer[, offset[, end]])
            //    buffer.fill(string[, offset[, end]][, encoding])
            Buffer.prototype.fill = function fill (val, start, end, encoding) {
              // Handle string cases:
              if (typeof val === 'string') {
                if (typeof start === 'string') {
                  encoding = start;
                  start = 0;
                  end = this.length;
                } else if (typeof end === 'string') {
                  encoding = end;
                  end = this.length;
                }
                if (val.length === 1) {
                  var code = val.charCodeAt(0);
                  if (code < 256) {
                    val = code;
                  }
                }
                if (encoding !== undefined && typeof encoding !== 'string') {
                  throw new TypeError('encoding must be a string')
                }
                if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                  throw new TypeError('Unknown encoding: ' + encoding)
                }
              } else if (typeof val === 'number') {
                val = val & 255;
              }

              // Invalid ranges are not set to a default, so can range check early.
              if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError('Out of range index')
              }

              if (end <= start) {
                return this
              }

              start = start >>> 0;
              end = end === undefined ? this.length : end >>> 0;

              if (!val) val = 0;

              var i;
              if (typeof val === 'number') {
                for (i = start; i < end; ++i) {
                  this[i] = val;
                }
              } else {
                var bytes = internalIsBuffer(val)
                  ? val
                  : utf8ToBytes(new Buffer(val, encoding).toString());
                var len = bytes.length;
                for (i = 0; i < end - start; ++i) {
                  this[i + start] = bytes[i % len];
                }
              }

              return this
            };

            // HELPER FUNCTIONS
            // ================

            var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

            function base64clean (str) {
              // Node strips out invalid characters like \n and \t from the string, base64-js does not
              str = stringtrim(str).replace(INVALID_BASE64_RE, '');
              // Node converts strings with length < 2 to ''
              if (str.length < 2) return ''
              // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
              while (str.length % 4 !== 0) {
                str = str + '=';
              }
              return str
            }

            function stringtrim (str) {
              if (str.trim) return str.trim()
              return str.replace(/^\s+|\s+$/g, '')
            }

            function toHex (n) {
              if (n < 16) return '0' + n.toString(16)
              return n.toString(16)
            }

            function utf8ToBytes (string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];

              for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i);

                // is surrogate component
                if (codePoint > 0xD7FF && codePoint < 0xE000) {
                  // last char was a lead
                  if (!leadSurrogate) {
                    // no lead yet
                    if (codePoint > 0xDBFF) {
                      // unexpected trail
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      continue
                    } else if (i + 1 === length) {
                      // unpaired lead
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      continue
                    }

                    // valid lead
                    leadSurrogate = codePoint;

                    continue
                  }

                  // 2 leads in a row
                  if (codePoint < 0xDC00) {
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    leadSurrogate = codePoint;
                    continue
                  }

                  // valid surrogate pair
                  codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
                } else if (leadSurrogate) {
                  // valid bmp char, but last char was a lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                }

                leadSurrogate = null;

                // encode utf8
                if (codePoint < 0x80) {
                  if ((units -= 1) < 0) break
                  bytes.push(codePoint);
                } else if (codePoint < 0x800) {
                  if ((units -= 2) < 0) break
                  bytes.push(
                    codePoint >> 0x6 | 0xC0,
                    codePoint & 0x3F | 0x80
                  );
                } else if (codePoint < 0x10000) {
                  if ((units -= 3) < 0) break
                  bytes.push(
                    codePoint >> 0xC | 0xE0,
                    codePoint >> 0x6 & 0x3F | 0x80,
                    codePoint & 0x3F | 0x80
                  );
                } else if (codePoint < 0x110000) {
                  if ((units -= 4) < 0) break
                  bytes.push(
                    codePoint >> 0x12 | 0xF0,
                    codePoint >> 0xC & 0x3F | 0x80,
                    codePoint >> 0x6 & 0x3F | 0x80,
                    codePoint & 0x3F | 0x80
                  );
                } else {
                  throw new Error('Invalid code point')
                }
              }

              return bytes
            }

            function asciiToBytes (str) {
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                // Node's code seems to be doing this and not & 0x7F..
                byteArray.push(str.charCodeAt(i) & 0xFF);
              }
              return byteArray
            }

            function utf16leToBytes (str, units) {
              var c, hi, lo;
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0) break

                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }

              return byteArray
            }


            function base64ToBytes (str) {
              return toByteArray(base64clean(str))
            }

            function blitBuffer (src, dst, offset, length) {
              for (var i = 0; i < length; ++i) {
                if ((i + offset >= dst.length) || (i >= src.length)) break
                dst[i + offset] = src[i];
              }
              return i
            }

            function isnan (val) {
              return val !== val // eslint-disable-line no-self-compare
            }


            // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
            // The _isBuffer check is for Safari 5-7 support, because it's missing
            // Object.prototype.constructor. Remove this eventually
            function isBuffer(obj) {
              return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
            }

            function isFastBuffer (obj) {
              return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
            }

            // For Node v0.10 support. Remove this eventually.
            function isSlowBuffer (obj) {
              return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
            }

            // shim for using process in browser
            // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

            function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
            }
            function defaultClearTimeout () {
                throw new Error('clearTimeout has not been defined');
            }
            var cachedSetTimeout = defaultSetTimout;
            var cachedClearTimeout = defaultClearTimeout;
            if (typeof global$1.setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            }
            if (typeof global$1.clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            }

            function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                    //normal enviroments in sane situations
                    return setTimeout(fun, 0);
                }
                // if setTimeout wasn't available but was latter defined
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                    cachedSetTimeout = setTimeout;
                    return setTimeout(fun, 0);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedSetTimeout(fun, 0);
                } catch(e){
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                        return cachedSetTimeout.call(null, fun, 0);
                    } catch(e){
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                        return cachedSetTimeout.call(this, fun, 0);
                    }
                }


            }
            function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                    //normal enviroments in sane situations
                    return clearTimeout(marker);
                }
                // if clearTimeout wasn't available but was latter defined
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                    cachedClearTimeout = clearTimeout;
                    return clearTimeout(marker);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedClearTimeout(marker);
                } catch (e){
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                        return cachedClearTimeout.call(null, marker);
                    } catch (e){
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                        return cachedClearTimeout.call(this, marker);
                    }
                }



            }
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;

            function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                    return;
                }
                draining = false;
                if (currentQueue.length) {
                    queue = currentQueue.concat(queue);
                } else {
                    queueIndex = -1;
                }
                if (queue.length) {
                    drainQueue();
                }
            }

            function drainQueue() {
                if (draining) {
                    return;
                }
                var timeout = runTimeout(cleanUpNextTick);
                draining = true;

                var len = queue.length;
                while(len) {
                    currentQueue = queue;
                    queue = [];
                    while (++queueIndex < len) {
                        if (currentQueue) {
                            currentQueue[queueIndex].run();
                        }
                    }
                    queueIndex = -1;
                    len = queue.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
            }
            function nextTick(fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for (var i = 1; i < arguments.length; i++) {
                        args[i - 1] = arguments[i];
                    }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                    runTimeout(drainQueue);
                }
            }
            // v8 likes predictible objects
            function Item(fun, array) {
                this.fun = fun;
                this.array = array;
            }
            Item.prototype.run = function () {
                this.fun.apply(null, this.array);
            };
            var title = 'browser';
            var platform = 'browser';
            var browser = true;
            var env = {};
            var argv = [];
            var version = ''; // empty string to avoid regexp issues
            var versions = {};
            var release = {};
            var config = {};

            function noop() {}

            var on = noop;
            var addListener = noop;
            var once = noop;
            var off = noop;
            var removeListener = noop;
            var removeAllListeners = noop;
            var emit = noop;

            function binding(name) {
                throw new Error('process.binding is not supported');
            }

            function cwd () { return '/' }
            function chdir (dir) {
                throw new Error('process.chdir is not supported');
            }function umask() { return 0; }

            // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
            var performance = global$1.performance || {};
            var performanceNow =
              performance.now        ||
              performance.mozNow     ||
              performance.msNow      ||
              performance.oNow       ||
              performance.webkitNow  ||
              function(){ return (new Date()).getTime() };

            // generate timestamp or delta
            // see http://nodejs.org/api/process.html#process_process_hrtime
            function hrtime(previousTimestamp){
              var clocktime = performanceNow.call(performance)*1e-3;
              var seconds = Math.floor(clocktime);
              var nanoseconds = Math.floor((clocktime%1)*1e9);
              if (previousTimestamp) {
                seconds = seconds - previousTimestamp[0];
                nanoseconds = nanoseconds - previousTimestamp[1];
                if (nanoseconds<0) {
                  seconds--;
                  nanoseconds += 1e9;
                }
              }
              return [seconds,nanoseconds]
            }

            var startTime = new Date();
            function uptime() {
              var currentTime = new Date();
              var dif = currentTime - startTime;
              return dif / 1000;
            }

            var process = {
              nextTick: nextTick,
              title: title,
              browser: browser,
              env: env,
              argv: argv,
              version: version,
              versions: versions,
              on: on,
              addListener: addListener,
              once: once,
              off: off,
              removeListener: removeListener,
              removeAllListeners: removeAllListeners,
              emit: emit,
              binding: binding,
              cwd: cwd,
              chdir: chdir,
              umask: umask,
              hrtime: hrtime,
              platform: platform,
              release: release,
              config: config,
              uptime: uptime
            };

            var hasFetch = isFunction(global$1.fetch) && isFunction(global$1.ReadableStream);

            var _blobConstructor;
            function blobConstructor() {
              if (typeof _blobConstructor !== 'undefined') {
                return _blobConstructor;
              }
              try {
                new global$1.Blob([new ArrayBuffer(1)]);
                _blobConstructor = true;
              } catch (e) {
                _blobConstructor = false;
              }
              return _blobConstructor
            }
            var xhr;

            function checkTypeSupport(type) {
              if (!xhr) {
                xhr = new global$1.XMLHttpRequest();
                // If location.host is empty, e.g. if this page/worker was loaded
                // from a Blob, then use example.com to avoid an error
                xhr.open('GET', global$1.location.host ? '/' : 'https://example.com');
              }
              try {
                xhr.responseType = type;
                return xhr.responseType === type
              } catch (e) {
                return false
              }

            }

            // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
            // Safari 7.1 appears to have fixed this bug.
            var haveArrayBuffer = typeof global$1.ArrayBuffer !== 'undefined';
            var haveSlice = haveArrayBuffer && isFunction(global$1.ArrayBuffer.prototype.slice);

            var arraybuffer = haveArrayBuffer && checkTypeSupport('arraybuffer');
              // These next two tests unavoidably show warnings in Chrome. Since fetch will always
              // be used if it's available, just return false for these to avoid the warnings.
            var msstream = !hasFetch && haveSlice && checkTypeSupport('ms-stream');
            var mozchunkedarraybuffer = !hasFetch && haveArrayBuffer &&
              checkTypeSupport('moz-chunked-arraybuffer');
            var overrideMimeType = isFunction(xhr.overrideMimeType);
            var vbArray = isFunction(global$1.VBArray);

            function isFunction(value) {
              return typeof value === 'function'
            }

            xhr = null; // Help gc

            var inherits;
            if (typeof Object.create === 'function'){
              inherits = function inherits(ctor, superCtor) {
                // implementation from standard node.js 'util' module
                ctor.super_ = superCtor;
                ctor.prototype = Object.create(superCtor.prototype, {
                  constructor: {
                    value: ctor,
                    enumerable: false,
                    writable: true,
                    configurable: true
                  }
                });
              };
            } else {
              inherits = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor;
                var TempCtor = function () {};
                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor();
                ctor.prototype.constructor = ctor;
              };
            }
            var inherits$1 = inherits;

            var formatRegExp = /%[sdj%]/g;
            function format(f) {
              if (!isString(f)) {
                var objects = [];
                for (var i = 0; i < arguments.length; i++) {
                  objects.push(inspect(arguments[i]));
                }
                return objects.join(' ');
              }

              var i = 1;
              var args = arguments;
              var len = args.length;
              var str = String(f).replace(formatRegExp, function(x) {
                if (x === '%%') return '%';
                if (i >= len) return x;
                switch (x) {
                  case '%s': return String(args[i++]);
                  case '%d': return Number(args[i++]);
                  case '%j':
                    try {
                      return JSON.stringify(args[i++]);
                    } catch (_) {
                      return '[Circular]';
                    }
                  default:
                    return x;
                }
              });
              for (var x = args[i]; i < len; x = args[++i]) {
                if (isNull(x) || !isObject(x)) {
                  str += ' ' + x;
                } else {
                  str += ' ' + inspect(x);
                }
              }
              return str;
            }

            // Mark that a method should not be used.
            // Returns a modified function which warns once by default.
            // If --no-deprecation is set, then it is a no-op.
            function deprecate(fn, msg) {
              // Allow for deprecating things in the process of starting up.
              if (isUndefined(global$1.process)) {
                return function() {
                  return deprecate(fn, msg).apply(this, arguments);
                };
              }

              var warned = false;
              function deprecated() {
                if (!warned) {
                  {
                    console.error(msg);
                  }
                  warned = true;
                }
                return fn.apply(this, arguments);
              }

              return deprecated;
            }

            var debugs = {};
            var debugEnviron;
            function debuglog(set) {
              if (isUndefined(debugEnviron))
                debugEnviron = '';
              set = set.toUpperCase();
              if (!debugs[set]) {
                if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                  var pid = 0;
                  debugs[set] = function() {
                    var msg = format.apply(null, arguments);
                    console.error('%s %d: %s', set, pid, msg);
                  };
                } else {
                  debugs[set] = function() {};
                }
              }
              return debugs[set];
            }

            /**
             * Echos the value of a value. Trys to print the value out
             * in the best way possible given the different types.
             *
             * @param {Object} obj The object to print out.
             * @param {Object} opts Optional options object that alters the output.
             */
            /* legacy: obj, showHidden, depth, colors*/
            function inspect(obj, opts) {
              // default options
              var ctx = {
                seen: [],
                stylize: stylizeNoColor
              };
              // legacy...
              if (arguments.length >= 3) ctx.depth = arguments[2];
              if (arguments.length >= 4) ctx.colors = arguments[3];
              if (isBoolean(opts)) {
                // legacy...
                ctx.showHidden = opts;
              } else if (opts) {
                // got an "options" object
                _extend(ctx, opts);
              }
              // set default options
              if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
              if (isUndefined(ctx.depth)) ctx.depth = 2;
              if (isUndefined(ctx.colors)) ctx.colors = false;
              if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
              if (ctx.colors) ctx.stylize = stylizeWithColor;
              return formatValue(ctx, obj, ctx.depth);
            }

            // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
            inspect.colors = {
              'bold' : [1, 22],
              'italic' : [3, 23],
              'underline' : [4, 24],
              'inverse' : [7, 27],
              'white' : [37, 39],
              'grey' : [90, 39],
              'black' : [30, 39],
              'blue' : [34, 39],
              'cyan' : [36, 39],
              'green' : [32, 39],
              'magenta' : [35, 39],
              'red' : [31, 39],
              'yellow' : [33, 39]
            };

            // Don't use 'blue' not visible on cmd.exe
            inspect.styles = {
              'special': 'cyan',
              'number': 'yellow',
              'boolean': 'yellow',
              'undefined': 'grey',
              'null': 'bold',
              'string': 'green',
              'date': 'magenta',
              // "name": intentionally not styling
              'regexp': 'red'
            };


            function stylizeWithColor(str, styleType) {
              var style = inspect.styles[styleType];

              if (style) {
                return '\u001b[' + inspect.colors[style][0] + 'm' + str +
                       '\u001b[' + inspect.colors[style][1] + 'm';
              } else {
                return str;
              }
            }


            function stylizeNoColor(str, styleType) {
              return str;
            }


            function arrayToHash(array) {
              var hash = {};

              array.forEach(function(val, idx) {
                hash[val] = true;
              });

              return hash;
            }


            function formatValue(ctx, value, recurseTimes) {
              // Provide a hook for user-specified inspect functions.
              // Check that value is an object with an inspect function on it
              if (ctx.customInspect &&
                  value &&
                  isFunction$1(value.inspect) &&
                  // Filter out the util module, it's inspect function is special
                  value.inspect !== inspect &&
                  // Also filter out any prototype objects using the circular check.
                  !(value.constructor && value.constructor.prototype === value)) {
                var ret = value.inspect(recurseTimes, ctx);
                if (!isString(ret)) {
                  ret = formatValue(ctx, ret, recurseTimes);
                }
                return ret;
              }

              // Primitive types cannot have properties
              var primitive = formatPrimitive(ctx, value);
              if (primitive) {
                return primitive;
              }

              // Look up the keys of the object.
              var keys = Object.keys(value);
              var visibleKeys = arrayToHash(keys);

              if (ctx.showHidden) {
                keys = Object.getOwnPropertyNames(value);
              }

              // IE doesn't make error fields non-enumerable
              // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
              if (isError(value)
                  && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                return formatError(value);
              }

              // Some type of object without properties can be shortcutted.
              if (keys.length === 0) {
                if (isFunction$1(value)) {
                  var name = value.name ? ': ' + value.name : '';
                  return ctx.stylize('[Function' + name + ']', 'special');
                }
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                }
                if (isDate(value)) {
                  return ctx.stylize(Date.prototype.toString.call(value), 'date');
                }
                if (isError(value)) {
                  return formatError(value);
                }
              }

              var base = '', array = false, braces = ['{', '}'];

              // Make Array say that they are Array
              if (isArray$1(value)) {
                array = true;
                braces = ['[', ']'];
              }

              // Make functions say that they are functions
              if (isFunction$1(value)) {
                var n = value.name ? ': ' + value.name : '';
                base = ' [Function' + n + ']';
              }

              // Make RegExps say that they are RegExps
              if (isRegExp(value)) {
                base = ' ' + RegExp.prototype.toString.call(value);
              }

              // Make dates with properties first say the date
              if (isDate(value)) {
                base = ' ' + Date.prototype.toUTCString.call(value);
              }

              // Make error with message first say the error
              if (isError(value)) {
                base = ' ' + formatError(value);
              }

              if (keys.length === 0 && (!array || value.length == 0)) {
                return braces[0] + base + braces[1];
              }

              if (recurseTimes < 0) {
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                } else {
                  return ctx.stylize('[Object]', 'special');
                }
              }

              ctx.seen.push(value);

              var output;
              if (array) {
                output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
              } else {
                output = keys.map(function(key) {
                  return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                });
              }

              ctx.seen.pop();

              return reduceToSingleString(output, base, braces);
            }


            function formatPrimitive(ctx, value) {
              if (isUndefined(value))
                return ctx.stylize('undefined', 'undefined');
              if (isString(value)) {
                var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                         .replace(/'/g, "\\'")
                                                         .replace(/\\"/g, '"') + '\'';
                return ctx.stylize(simple, 'string');
              }
              if (isNumber(value))
                return ctx.stylize('' + value, 'number');
              if (isBoolean(value))
                return ctx.stylize('' + value, 'boolean');
              // For some reason typeof null is "object", so special case here.
              if (isNull(value))
                return ctx.stylize('null', 'null');
            }


            function formatError(value) {
              return '[' + Error.prototype.toString.call(value) + ']';
            }


            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
              var output = [];
              for (var i = 0, l = value.length; i < l; ++i) {
                if (hasOwnProperty(value, String(i))) {
                  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                      String(i), true));
                } else {
                  output.push('');
                }
              }
              keys.forEach(function(key) {
                if (!key.match(/^\d+$/)) {
                  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                      key, true));
                }
              });
              return output;
            }


            function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
              var name, str, desc;
              desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
              if (desc.get) {
                if (desc.set) {
                  str = ctx.stylize('[Getter/Setter]', 'special');
                } else {
                  str = ctx.stylize('[Getter]', 'special');
                }
              } else {
                if (desc.set) {
                  str = ctx.stylize('[Setter]', 'special');
                }
              }
              if (!hasOwnProperty(visibleKeys, key)) {
                name = '[' + key + ']';
              }
              if (!str) {
                if (ctx.seen.indexOf(desc.value) < 0) {
                  if (isNull(recurseTimes)) {
                    str = formatValue(ctx, desc.value, null);
                  } else {
                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                  }
                  if (str.indexOf('\n') > -1) {
                    if (array) {
                      str = str.split('\n').map(function(line) {
                        return '  ' + line;
                      }).join('\n').substr(2);
                    } else {
                      str = '\n' + str.split('\n').map(function(line) {
                        return '   ' + line;
                      }).join('\n');
                    }
                  }
                } else {
                  str = ctx.stylize('[Circular]', 'special');
                }
              }
              if (isUndefined(name)) {
                if (array && key.match(/^\d+$/)) {
                  return str;
                }
                name = JSON.stringify('' + key);
                if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                  name = name.substr(1, name.length - 2);
                  name = ctx.stylize(name, 'name');
                } else {
                  name = name.replace(/'/g, "\\'")
                             .replace(/\\"/g, '"')
                             .replace(/(^"|"$)/g, "'");
                  name = ctx.stylize(name, 'string');
                }
              }

              return name + ': ' + str;
            }


            function reduceToSingleString(output, base, braces) {
              var length = output.reduce(function(prev, cur) {
                if (cur.indexOf('\n') >= 0) ;
                return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
              }, 0);

              if (length > 60) {
                return braces[0] +
                       (base === '' ? '' : base + '\n ') +
                       ' ' +
                       output.join(',\n  ') +
                       ' ' +
                       braces[1];
              }

              return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
            }


            // NOTE: These type checking functions intentionally don't use `instanceof`
            // because it is fragile and can be easily faked with `Object.create()`.
            function isArray$1(ar) {
              return Array.isArray(ar);
            }

            function isBoolean(arg) {
              return typeof arg === 'boolean';
            }

            function isNull(arg) {
              return arg === null;
            }

            function isNullOrUndefined(arg) {
              return arg == null;
            }

            function isNumber(arg) {
              return typeof arg === 'number';
            }

            function isString(arg) {
              return typeof arg === 'string';
            }

            function isSymbol(arg) {
              return typeof arg === 'symbol';
            }

            function isUndefined(arg) {
              return arg === void 0;
            }

            function isRegExp(re) {
              return isObject(re) && objectToString(re) === '[object RegExp]';
            }

            function isObject(arg) {
              return typeof arg === 'object' && arg !== null;
            }

            function isDate(d) {
              return isObject(d) && objectToString(d) === '[object Date]';
            }

            function isError(e) {
              return isObject(e) &&
                  (objectToString(e) === '[object Error]' || e instanceof Error);
            }

            function isFunction$1(arg) {
              return typeof arg === 'function';
            }

            function isPrimitive(arg) {
              return arg === null ||
                     typeof arg === 'boolean' ||
                     typeof arg === 'number' ||
                     typeof arg === 'string' ||
                     typeof arg === 'symbol' ||  // ES6 symbol
                     typeof arg === 'undefined';
            }

            function isBuffer$1(maybeBuf) {
              return isBuffer(maybeBuf);
            }

            function objectToString(o) {
              return Object.prototype.toString.call(o);
            }


            function pad(n) {
              return n < 10 ? '0' + n.toString(10) : n.toString(10);
            }


            var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                          'Oct', 'Nov', 'Dec'];

            // 26 Feb 16:19:34
            function timestamp() {
              var d = new Date();
              var time = [pad(d.getHours()),
                          pad(d.getMinutes()),
                          pad(d.getSeconds())].join(':');
              return [d.getDate(), months[d.getMonth()], time].join(' ');
            }


            // log is just a thin wrapper to console.log that prepends a timestamp
            function log() {
              console.log('%s - %s', timestamp(), format.apply(null, arguments));
            }

            function _extend(origin, add) {
              // Don't do anything if add isn't an object
              if (!add || !isObject(add)) return origin;

              var keys = Object.keys(add);
              var i = keys.length;
              while (i--) {
                origin[keys[i]] = add[keys[i]];
              }
              return origin;
            }
            function hasOwnProperty(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            }

            var util = {
              inherits: inherits$1,
              _extend: _extend,
              log: log,
              isBuffer: isBuffer$1,
              isPrimitive: isPrimitive,
              isFunction: isFunction$1,
              isError: isError,
              isDate: isDate,
              isObject: isObject,
              isRegExp: isRegExp,
              isUndefined: isUndefined,
              isSymbol: isSymbol,
              isString: isString,
              isNumber: isNumber,
              isNullOrUndefined: isNullOrUndefined,
              isNull: isNull,
              isBoolean: isBoolean,
              isArray: isArray$1,
              inspect: inspect,
              deprecate: deprecate,
              format: format,
              debuglog: debuglog
            };

            var util$1 = /*#__PURE__*/Object.freeze({
                        format: format,
                        deprecate: deprecate,
                        debuglog: debuglog,
                        inspect: inspect,
                        isArray: isArray$1,
                        isBoolean: isBoolean,
                        isNull: isNull,
                        isNullOrUndefined: isNullOrUndefined,
                        isNumber: isNumber,
                        isString: isString,
                        isSymbol: isSymbol,
                        isUndefined: isUndefined,
                        isRegExp: isRegExp,
                        isObject: isObject,
                        isDate: isDate,
                        isError: isError,
                        isFunction: isFunction$1,
                        isPrimitive: isPrimitive,
                        isBuffer: isBuffer$1,
                        log: log,
                        inherits: inherits$1,
                        _extend: _extend,
                        default: util
            });

            var domain;

            // This constructor is used to store event handlers. Instantiating this is
            // faster than explicitly calling `Object.create(null)` to get a "clean" empty
            // object (tested with v8 v4.9).
            function EventHandlers() {}
            EventHandlers.prototype = Object.create(null);

            function EventEmitter() {
              EventEmitter.init.call(this);
            }

            // nodejs oddity
            // require('events') === require('events').EventEmitter
            EventEmitter.EventEmitter = EventEmitter;

            EventEmitter.usingDomains = false;

            EventEmitter.prototype.domain = undefined;
            EventEmitter.prototype._events = undefined;
            EventEmitter.prototype._maxListeners = undefined;

            // By default EventEmitters will print a warning if more than 10 listeners are
            // added to it. This is a useful default which helps finding memory leaks.
            EventEmitter.defaultMaxListeners = 10;

            EventEmitter.init = function() {
              this.domain = null;
              if (EventEmitter.usingDomains) {
                // if there is an active domain, then attach to it.
                if (domain.active && !(this instanceof domain.Domain)) ;
              }

              if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
                this._events = new EventHandlers();
                this._eventsCount = 0;
              }

              this._maxListeners = this._maxListeners || undefined;
            };

            // Obviously not all Emitters should be limited to 10. This function allows
            // that to be increased. Set to zero for unlimited.
            EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
              if (typeof n !== 'number' || n < 0 || isNaN(n))
                throw new TypeError('"n" argument must be a positive number');
              this._maxListeners = n;
              return this;
            };

            function $getMaxListeners(that) {
              if (that._maxListeners === undefined)
                return EventEmitter.defaultMaxListeners;
              return that._maxListeners;
            }

            EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
              return $getMaxListeners(this);
            };

            // These standalone emit* functions are used to optimize calling of event
            // handlers for fast cases because emit() itself often has a variable number of
            // arguments and can be deoptimized because of that. These functions always have
            // the same number of arguments and thus do not get deoptimized, so the code
            // inside them can execute faster.
            function emitNone(handler, isFn, self) {
              if (isFn)
                handler.call(self);
              else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                  listeners[i].call(self);
              }
            }
            function emitOne(handler, isFn, self, arg1) {
              if (isFn)
                handler.call(self, arg1);
              else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                  listeners[i].call(self, arg1);
              }
            }
            function emitTwo(handler, isFn, self, arg1, arg2) {
              if (isFn)
                handler.call(self, arg1, arg2);
              else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                  listeners[i].call(self, arg1, arg2);
              }
            }
            function emitThree(handler, isFn, self, arg1, arg2, arg3) {
              if (isFn)
                handler.call(self, arg1, arg2, arg3);
              else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                  listeners[i].call(self, arg1, arg2, arg3);
              }
            }

            function emitMany(handler, isFn, self, args) {
              if (isFn)
                handler.apply(self, args);
              else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                  listeners[i].apply(self, args);
              }
            }

            EventEmitter.prototype.emit = function emit(type) {
              var er, handler, len, args, i, events, domain;
              var doError = (type === 'error');

              events = this._events;
              if (events)
                doError = (doError && events.error == null);
              else if (!doError)
                return false;

              domain = this.domain;

              // If there is no 'error' event listener then throw.
              if (doError) {
                er = arguments[1];
                if (domain) {
                  if (!er)
                    er = new Error('Uncaught, unspecified "error" event');
                  er.domainEmitter = this;
                  er.domain = domain;
                  er.domainThrown = false;
                  domain.emit('error', er);
                } else if (er instanceof Error) {
                  throw er; // Unhandled 'error' event
                } else {
                  // At least give some kind of context to the user
                  var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
                  err.context = er;
                  throw err;
                }
                return false;
              }

              handler = events[type];

              if (!handler)
                return false;

              var isFn = typeof handler === 'function';
              len = arguments.length;
              switch (len) {
                // fast cases
                case 1:
                  emitNone(handler, isFn, this);
                  break;
                case 2:
                  emitOne(handler, isFn, this, arguments[1]);
                  break;
                case 3:
                  emitTwo(handler, isFn, this, arguments[1], arguments[2]);
                  break;
                case 4:
                  emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
                  break;
                // slower
                default:
                  args = new Array(len - 1);
                  for (i = 1; i < len; i++)
                    args[i - 1] = arguments[i];
                  emitMany(handler, isFn, this, args);
              }

              return true;
            };

            function _addListener(target, type, listener, prepend) {
              var m;
              var events;
              var existing;

              if (typeof listener !== 'function')
                throw new TypeError('"listener" argument must be a function');

              events = target._events;
              if (!events) {
                events = target._events = new EventHandlers();
                target._eventsCount = 0;
              } else {
                // To avoid recursion in the case that type === "newListener"! Before
                // adding it to the listeners, first emit "newListener".
                if (events.newListener) {
                  target.emit('newListener', type,
                              listener.listener ? listener.listener : listener);

                  // Re-assign `events` because a newListener handler could have caused the
                  // this._events to be assigned to a new object
                  events = target._events;
                }
                existing = events[type];
              }

              if (!existing) {
                // Optimize the case of one listener. Don't need the extra array object.
                existing = events[type] = listener;
                ++target._eventsCount;
              } else {
                if (typeof existing === 'function') {
                  // Adding the second element, need to change to array.
                  existing = events[type] = prepend ? [listener, existing] :
                                                      [existing, listener];
                } else {
                  // If we've already got an array, just append.
                  if (prepend) {
                    existing.unshift(listener);
                  } else {
                    existing.push(listener);
                  }
                }

                // Check for listener leak
                if (!existing.warned) {
                  m = $getMaxListeners(target);
                  if (m && m > 0 && existing.length > m) {
                    existing.warned = true;
                    var w = new Error('Possible EventEmitter memory leak detected. ' +
                                        existing.length + ' ' + type + ' listeners added. ' +
                                        'Use emitter.setMaxListeners() to increase limit');
                    w.name = 'MaxListenersExceededWarning';
                    w.emitter = target;
                    w.type = type;
                    w.count = existing.length;
                    emitWarning(w);
                  }
                }
              }

              return target;
            }
            function emitWarning(e) {
              typeof console.warn === 'function' ? console.warn(e) : console.log(e);
            }
            EventEmitter.prototype.addListener = function addListener(type, listener) {
              return _addListener(this, type, listener, false);
            };

            EventEmitter.prototype.on = EventEmitter.prototype.addListener;

            EventEmitter.prototype.prependListener =
                function prependListener(type, listener) {
                  return _addListener(this, type, listener, true);
                };

            function _onceWrap(target, type, listener) {
              var fired = false;
              function g() {
                target.removeListener(type, g);
                if (!fired) {
                  fired = true;
                  listener.apply(target, arguments);
                }
              }
              g.listener = listener;
              return g;
            }

            EventEmitter.prototype.once = function once(type, listener) {
              if (typeof listener !== 'function')
                throw new TypeError('"listener" argument must be a function');
              this.on(type, _onceWrap(this, type, listener));
              return this;
            };

            EventEmitter.prototype.prependOnceListener =
                function prependOnceListener(type, listener) {
                  if (typeof listener !== 'function')
                    throw new TypeError('"listener" argument must be a function');
                  this.prependListener(type, _onceWrap(this, type, listener));
                  return this;
                };

            // emits a 'removeListener' event iff the listener was removed
            EventEmitter.prototype.removeListener =
                function removeListener(type, listener) {
                  var list, events, position, i, originalListener;

                  if (typeof listener !== 'function')
                    throw new TypeError('"listener" argument must be a function');

                  events = this._events;
                  if (!events)
                    return this;

                  list = events[type];
                  if (!list)
                    return this;

                  if (list === listener || (list.listener && list.listener === listener)) {
                    if (--this._eventsCount === 0)
                      this._events = new EventHandlers();
                    else {
                      delete events[type];
                      if (events.removeListener)
                        this.emit('removeListener', type, list.listener || listener);
                    }
                  } else if (typeof list !== 'function') {
                    position = -1;

                    for (i = list.length; i-- > 0;) {
                      if (list[i] === listener ||
                          (list[i].listener && list[i].listener === listener)) {
                        originalListener = list[i].listener;
                        position = i;
                        break;
                      }
                    }

                    if (position < 0)
                      return this;

                    if (list.length === 1) {
                      list[0] = undefined;
                      if (--this._eventsCount === 0) {
                        this._events = new EventHandlers();
                        return this;
                      } else {
                        delete events[type];
                      }
                    } else {
                      spliceOne(list, position);
                    }

                    if (events.removeListener)
                      this.emit('removeListener', type, originalListener || listener);
                  }

                  return this;
                };

            EventEmitter.prototype.removeAllListeners =
                function removeAllListeners(type) {
                  var listeners, events;

                  events = this._events;
                  if (!events)
                    return this;

                  // not listening for removeListener, no need to emit
                  if (!events.removeListener) {
                    if (arguments.length === 0) {
                      this._events = new EventHandlers();
                      this._eventsCount = 0;
                    } else if (events[type]) {
                      if (--this._eventsCount === 0)
                        this._events = new EventHandlers();
                      else
                        delete events[type];
                    }
                    return this;
                  }

                  // emit removeListener for all listeners on all events
                  if (arguments.length === 0) {
                    var keys = Object.keys(events);
                    for (var i = 0, key; i < keys.length; ++i) {
                      key = keys[i];
                      if (key === 'removeListener') continue;
                      this.removeAllListeners(key);
                    }
                    this.removeAllListeners('removeListener');
                    this._events = new EventHandlers();
                    this._eventsCount = 0;
                    return this;
                  }

                  listeners = events[type];

                  if (typeof listeners === 'function') {
                    this.removeListener(type, listeners);
                  } else if (listeners) {
                    // LIFO order
                    do {
                      this.removeListener(type, listeners[listeners.length - 1]);
                    } while (listeners[0]);
                  }

                  return this;
                };

            EventEmitter.prototype.listeners = function listeners(type) {
              var evlistener;
              var ret;
              var events = this._events;

              if (!events)
                ret = [];
              else {
                evlistener = events[type];
                if (!evlistener)
                  ret = [];
                else if (typeof evlistener === 'function')
                  ret = [evlistener.listener || evlistener];
                else
                  ret = unwrapListeners(evlistener);
              }

              return ret;
            };

            EventEmitter.listenerCount = function(emitter, type) {
              if (typeof emitter.listenerCount === 'function') {
                return emitter.listenerCount(type);
              } else {
                return listenerCount.call(emitter, type);
              }
            };

            EventEmitter.prototype.listenerCount = listenerCount;
            function listenerCount(type) {
              var events = this._events;

              if (events) {
                var evlistener = events[type];

                if (typeof evlistener === 'function') {
                  return 1;
                } else if (evlistener) {
                  return evlistener.length;
                }
              }

              return 0;
            }

            EventEmitter.prototype.eventNames = function eventNames() {
              return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
            };

            // About 1.5x faster than the two-arg version of Array#splice().
            function spliceOne(list, index) {
              for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
                list[i] = list[k];
              list.pop();
            }

            function arrayClone(arr, i) {
              var copy = new Array(i);
              while (i--)
                copy[i] = arr[i];
              return copy;
            }

            function unwrapListeners(arr) {
              var ret = new Array(arr.length);
              for (var i = 0; i < ret.length; ++i) {
                ret[i] = arr[i].listener || arr[i];
              }
              return ret;
            }

            var events = /*#__PURE__*/Object.freeze({
                        default: EventEmitter,
                        EventEmitter: EventEmitter
            });

            function BufferList() {
              this.head = null;
              this.tail = null;
              this.length = 0;
            }

            BufferList.prototype.push = function (v) {
              var entry = { data: v, next: null };
              if (this.length > 0) this.tail.next = entry;else this.head = entry;
              this.tail = entry;
              ++this.length;
            };

            BufferList.prototype.unshift = function (v) {
              var entry = { data: v, next: this.head };
              if (this.length === 0) this.tail = entry;
              this.head = entry;
              ++this.length;
            };

            BufferList.prototype.shift = function () {
              if (this.length === 0) return;
              var ret = this.head.data;
              if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
              --this.length;
              return ret;
            };

            BufferList.prototype.clear = function () {
              this.head = this.tail = null;
              this.length = 0;
            };

            BufferList.prototype.join = function (s) {
              if (this.length === 0) return '';
              var p = this.head;
              var ret = '' + p.data;
              while (p = p.next) {
                ret += s + p.data;
              }return ret;
            };

            BufferList.prototype.concat = function (n) {
              if (this.length === 0) return Buffer.alloc(0);
              if (this.length === 1) return this.head.data;
              var ret = Buffer.allocUnsafe(n >>> 0);
              var p = this.head;
              var i = 0;
              while (p) {
                p.data.copy(ret, i);
                i += p.data.length;
                p = p.next;
              }
              return ret;
            };

            // Copyright Joyent, Inc. and other Node contributors.
            var isBufferEncoding = Buffer.isEncoding
              || function(encoding) {
                   switch (encoding && encoding.toLowerCase()) {
                     case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
                     default: return false;
                   }
                 };


            function assertEncoding(encoding) {
              if (encoding && !isBufferEncoding(encoding)) {
                throw new Error('Unknown encoding: ' + encoding);
              }
            }

            // StringDecoder provides an interface for efficiently splitting a series of
            // buffers into a series of JS strings without breaking apart multi-byte
            // characters. CESU-8 is handled as part of the UTF-8 encoding.
            //
            // @TODO Handling all encodings inside a single object makes it very difficult
            // to reason about this code, so it should be split up in the future.
            // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
            // points as used by CESU-8.
            function StringDecoder(encoding) {
              this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
              assertEncoding(encoding);
              switch (this.encoding) {
                case 'utf8':
                  // CESU-8 represents each of Surrogate Pair by 3-bytes
                  this.surrogateSize = 3;
                  break;
                case 'ucs2':
                case 'utf16le':
                  // UTF-16 represents each of Surrogate Pair by 2-bytes
                  this.surrogateSize = 2;
                  this.detectIncompleteChar = utf16DetectIncompleteChar;
                  break;
                case 'base64':
                  // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
                  this.surrogateSize = 3;
                  this.detectIncompleteChar = base64DetectIncompleteChar;
                  break;
                default:
                  this.write = passThroughWrite;
                  return;
              }

              // Enough space to store all bytes of a single character. UTF-8 needs 4
              // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
              this.charBuffer = new Buffer(6);
              // Number of bytes received for the current incomplete multi-byte character.
              this.charReceived = 0;
              // Number of bytes expected for the current incomplete multi-byte character.
              this.charLength = 0;
            }

            // write decodes the given buffer and returns it as JS string that is
            // guaranteed to not contain any partial multi-byte characters. Any partial
            // character found at the end of the buffer is buffered up, and will be
            // returned when calling write again with the remaining bytes.
            //
            // Note: Converting a Buffer containing an orphan surrogate to a String
            // currently works, but converting a String to a Buffer (via `new Buffer`, or
            // Buffer#write) will replace incomplete surrogates with the unicode
            // replacement character. See https://codereview.chromium.org/121173009/ .
            StringDecoder.prototype.write = function(buffer) {
              var charStr = '';
              // if our last write ended with an incomplete multibyte character
              while (this.charLength) {
                // determine how many remaining bytes this buffer has to offer for this char
                var available = (buffer.length >= this.charLength - this.charReceived) ?
                    this.charLength - this.charReceived :
                    buffer.length;

                // add the new bytes to the char buffer
                buffer.copy(this.charBuffer, this.charReceived, 0, available);
                this.charReceived += available;

                if (this.charReceived < this.charLength) {
                  // still not enough chars in this buffer? wait for more ...
                  return '';
                }

                // remove bytes belonging to the current character from the buffer
                buffer = buffer.slice(available, buffer.length);

                // get the character that was split
                charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

                // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
                var charCode = charStr.charCodeAt(charStr.length - 1);
                if (charCode >= 0xD800 && charCode <= 0xDBFF) {
                  this.charLength += this.surrogateSize;
                  charStr = '';
                  continue;
                }
                this.charReceived = this.charLength = 0;

                // if there are no more bytes in this buffer, just emit our char
                if (buffer.length === 0) {
                  return charStr;
                }
                break;
              }

              // determine and set charLength / charReceived
              this.detectIncompleteChar(buffer);

              var end = buffer.length;
              if (this.charLength) {
                // buffer the incomplete character bytes we got
                buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
                end -= this.charReceived;
              }

              charStr += buffer.toString(this.encoding, 0, end);

              var end = charStr.length - 1;
              var charCode = charStr.charCodeAt(end);
              // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
              if (charCode >= 0xD800 && charCode <= 0xDBFF) {
                var size = this.surrogateSize;
                this.charLength += size;
                this.charReceived += size;
                this.charBuffer.copy(this.charBuffer, size, 0, size);
                buffer.copy(this.charBuffer, 0, 0, size);
                return charStr.substring(0, end);
              }

              // or just emit the charStr
              return charStr;
            };

            // detectIncompleteChar determines if there is an incomplete UTF-8 character at
            // the end of the given buffer. If so, it sets this.charLength to the byte
            // length that character, and sets this.charReceived to the number of bytes
            // that are available for this character.
            StringDecoder.prototype.detectIncompleteChar = function(buffer) {
              // determine how many bytes we have to check at the end of this buffer
              var i = (buffer.length >= 3) ? 3 : buffer.length;

              // Figure out if one of the last i bytes of our buffer announces an
              // incomplete char.
              for (; i > 0; i--) {
                var c = buffer[buffer.length - i];

                // See http://en.wikipedia.org/wiki/UTF-8#Description

                // 110XXXXX
                if (i == 1 && c >> 5 == 0x06) {
                  this.charLength = 2;
                  break;
                }

                // 1110XXXX
                if (i <= 2 && c >> 4 == 0x0E) {
                  this.charLength = 3;
                  break;
                }

                // 11110XXX
                if (i <= 3 && c >> 3 == 0x1E) {
                  this.charLength = 4;
                  break;
                }
              }
              this.charReceived = i;
            };

            StringDecoder.prototype.end = function(buffer) {
              var res = '';
              if (buffer && buffer.length)
                res = this.write(buffer);

              if (this.charReceived) {
                var cr = this.charReceived;
                var buf = this.charBuffer;
                var enc = this.encoding;
                res += buf.slice(0, cr).toString(enc);
              }

              return res;
            };

            function passThroughWrite(buffer) {
              return buffer.toString(this.encoding);
            }

            function utf16DetectIncompleteChar(buffer) {
              this.charReceived = buffer.length % 2;
              this.charLength = this.charReceived ? 2 : 0;
            }

            function base64DetectIncompleteChar(buffer) {
              this.charReceived = buffer.length % 3;
              this.charLength = this.charReceived ? 3 : 0;
            }

            Readable.ReadableState = ReadableState;

            var debug = debuglog('stream');
            inherits$1(Readable, EventEmitter);

            function prependListener(emitter, event, fn) {
              // Sadly this is not cacheable as some libraries bundle their own
              // event emitter implementation with them.
              if (typeof emitter.prependListener === 'function') {
                return emitter.prependListener(event, fn);
              } else {
                // This is a hack to make sure that our error handler is attached before any
                // userland ones.  NEVER DO THIS. This is here only because this code needs
                // to continue to work with older versions of Node.js that do not include
                // the prependListener() method. The goal is to eventually remove this hack.
                if (!emitter._events || !emitter._events[event])
                  emitter.on(event, fn);
                else if (Array.isArray(emitter._events[event]))
                  emitter._events[event].unshift(fn);
                else
                  emitter._events[event] = [fn, emitter._events[event]];
              }
            }
            function listenerCount$1 (emitter, type) {
              return emitter.listeners(type).length;
            }
            function ReadableState(options, stream) {

              options = options || {};

              // object stream flag. Used to make read(n) ignore n and to
              // make all the buffer merging and length checks go away
              this.objectMode = !!options.objectMode;

              if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

              // the point at which it stops calling _read() to fill the buffer
              // Note: 0 is a valid value, means "don't call _read preemptively ever"
              var hwm = options.highWaterMark;
              var defaultHwm = this.objectMode ? 16 : 16 * 1024;
              this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

              // cast to ints.
              this.highWaterMark = ~ ~this.highWaterMark;

              // A linked list is used to store data chunks instead of an array because the
              // linked list can remove elements from the beginning faster than
              // array.shift()
              this.buffer = new BufferList();
              this.length = 0;
              this.pipes = null;
              this.pipesCount = 0;
              this.flowing = null;
              this.ended = false;
              this.endEmitted = false;
              this.reading = false;

              // a flag to be able to tell if the onwrite cb is called immediately,
              // or on a later tick.  We set this to true at first, because any
              // actions that shouldn't happen until "later" should generally also
              // not happen before the first write call.
              this.sync = true;

              // whenever we return null, then we set a flag to say
              // that we're awaiting a 'readable' event emission.
              this.needReadable = false;
              this.emittedReadable = false;
              this.readableListening = false;
              this.resumeScheduled = false;

              // Crypto is kind of old and crusty.  Historically, its default string
              // encoding is 'binary' so we have to make this configurable.
              // Everything else in the universe uses 'utf8', though.
              this.defaultEncoding = options.defaultEncoding || 'utf8';

              // when piping, we only care about 'readable' events that happen
              // after read()ing all the bytes and not getting any pushback.
              this.ranOut = false;

              // the number of writers that are awaiting a drain event in .pipe()s
              this.awaitDrain = 0;

              // if true, a maybeReadMore has been scheduled
              this.readingMore = false;

              this.decoder = null;
              this.encoding = null;
              if (options.encoding) {
                this.decoder = new StringDecoder(options.encoding);
                this.encoding = options.encoding;
              }
            }
            function Readable(options) {

              if (!(this instanceof Readable)) return new Readable(options);

              this._readableState = new ReadableState(options, this);

              // legacy
              this.readable = true;

              if (options && typeof options.read === 'function') this._read = options.read;

              EventEmitter.call(this);
            }

            // Manually shove something into the read() buffer.
            // This returns true if the highWaterMark has not been hit yet,
            // similar to how Writable.write() returns true if you should
            // write() some more.
            Readable.prototype.push = function (chunk, encoding) {
              var state = this._readableState;

              if (!state.objectMode && typeof chunk === 'string') {
                encoding = encoding || state.defaultEncoding;
                if (encoding !== state.encoding) {
                  chunk = Buffer.from(chunk, encoding);
                  encoding = '';
                }
              }

              return readableAddChunk(this, state, chunk, encoding, false);
            };

            // Unshift should *always* be something directly out of read()
            Readable.prototype.unshift = function (chunk) {
              var state = this._readableState;
              return readableAddChunk(this, state, chunk, '', true);
            };

            Readable.prototype.isPaused = function () {
              return this._readableState.flowing === false;
            };

            function readableAddChunk(stream, state, chunk, encoding, addToFront) {
              var er = chunkInvalid(state, chunk);
              if (er) {
                stream.emit('error', er);
              } else if (chunk === null) {
                state.reading = false;
                onEofChunk(stream, state);
              } else if (state.objectMode || chunk && chunk.length > 0) {
                if (state.ended && !addToFront) {
                  var e = new Error('stream.push() after EOF');
                  stream.emit('error', e);
                } else if (state.endEmitted && addToFront) {
                  var _e = new Error('stream.unshift() after end event');
                  stream.emit('error', _e);
                } else {
                  var skipAdd;
                  if (state.decoder && !addToFront && !encoding) {
                    chunk = state.decoder.write(chunk);
                    skipAdd = !state.objectMode && chunk.length === 0;
                  }

                  if (!addToFront) state.reading = false;

                  // Don't add to the buffer if we've decoded to an empty string chunk and
                  // we're not in object mode
                  if (!skipAdd) {
                    // if we want the data now, just emit it.
                    if (state.flowing && state.length === 0 && !state.sync) {
                      stream.emit('data', chunk);
                      stream.read(0);
                    } else {
                      // update the buffer info.
                      state.length += state.objectMode ? 1 : chunk.length;
                      if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

                      if (state.needReadable) emitReadable(stream);
                    }
                  }

                  maybeReadMore(stream, state);
                }
              } else if (!addToFront) {
                state.reading = false;
              }

              return needMoreData(state);
            }

            // if it's past the high water mark, we can push in some more.
            // Also, if we have no data yet, we can stand some
            // more bytes.  This is to work around cases where hwm=0,
            // such as the repl.  Also, if the push() triggered a
            // readable event, and the user called read(largeNumber) such that
            // needReadable was set, then we ought to push more, so that another
            // 'readable' event will be triggered.
            function needMoreData(state) {
              return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
            }

            // backwards compatibility.
            Readable.prototype.setEncoding = function (enc) {
              this._readableState.decoder = new StringDecoder(enc);
              this._readableState.encoding = enc;
              return this;
            };

            // Don't raise the hwm > 8MB
            var MAX_HWM = 0x800000;
            function computeNewHighWaterMark(n) {
              if (n >= MAX_HWM) {
                n = MAX_HWM;
              } else {
                // Get the next highest power of 2 to prevent increasing hwm excessively in
                // tiny amounts
                n--;
                n |= n >>> 1;
                n |= n >>> 2;
                n |= n >>> 4;
                n |= n >>> 8;
                n |= n >>> 16;
                n++;
              }
              return n;
            }

            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.
            function howMuchToRead(n, state) {
              if (n <= 0 || state.length === 0 && state.ended) return 0;
              if (state.objectMode) return 1;
              if (n !== n) {
                // Only flow one buffer at a time
                if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
              }
              // If we're asking for more than the current hwm, then raise the hwm.
              if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
              if (n <= state.length) return n;
              // Don't have enough
              if (!state.ended) {
                state.needReadable = true;
                return 0;
              }
              return state.length;
            }

            // you can override either this method, or the async _read(n) below.
            Readable.prototype.read = function (n) {
              debug('read', n);
              n = parseInt(n, 10);
              var state = this._readableState;
              var nOrig = n;

              if (n !== 0) state.emittedReadable = false;

              // if we're doing read(0) to trigger a readable event, but we
              // already have a bunch of data in the buffer, then just trigger
              // the 'readable' event and move on.
              if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                debug('read: emitReadable', state.length, state.ended);
                if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
                return null;
              }

              n = howMuchToRead(n, state);

              // if we've ended, and we're now clear, then finish it up.
              if (n === 0 && state.ended) {
                if (state.length === 0) endReadable(this);
                return null;
              }

              // All the actual chunk generation logic needs to be
              // *below* the call to _read.  The reason is that in certain
              // synthetic stream cases, such as passthrough streams, _read
              // may be a completely synchronous operation which may change
              // the state of the read buffer, providing enough data when
              // before there was *not* enough.
              //
              // So, the steps are:
              // 1. Figure out what the state of things will be after we do
              // a read from the buffer.
              //
              // 2. If that resulting state will trigger a _read, then call _read.
              // Note that this may be asynchronous, or synchronous.  Yes, it is
              // deeply ugly to write APIs this way, but that still doesn't mean
              // that the Readable class should behave improperly, as streams are
              // designed to be sync/async agnostic.
              // Take note if the _read call is sync or async (ie, if the read call
              // has returned yet), so that we know whether or not it's safe to emit
              // 'readable' etc.
              //
              // 3. Actually pull the requested chunks out of the buffer and return.

              // if we need a readable event, then we need to do some reading.
              var doRead = state.needReadable;
              debug('need readable', doRead);

              // if we currently have less than the highWaterMark, then also read some
              if (state.length === 0 || state.length - n < state.highWaterMark) {
                doRead = true;
                debug('length less than watermark', doRead);
              }

              // however, if we've ended, then there's no point, and if we're already
              // reading, then it's unnecessary.
              if (state.ended || state.reading) {
                doRead = false;
                debug('reading or ended', doRead);
              } else if (doRead) {
                debug('do read');
                state.reading = true;
                state.sync = true;
                // if the length is currently zero, then we *need* a readable event.
                if (state.length === 0) state.needReadable = true;
                // call internal read method
                this._read(state.highWaterMark);
                state.sync = false;
                // If _read pushed data synchronously, then `reading` will be false,
                // and we need to re-evaluate how much data we can return to the user.
                if (!state.reading) n = howMuchToRead(nOrig, state);
              }

              var ret;
              if (n > 0) ret = fromList(n, state);else ret = null;

              if (ret === null) {
                state.needReadable = true;
                n = 0;
              } else {
                state.length -= n;
              }

              if (state.length === 0) {
                // If we have nothing in the buffer, then we want to know
                // as soon as we *do* get something into the buffer.
                if (!state.ended) state.needReadable = true;

                // If we tried to read() past the EOF, then emit end on the next tick.
                if (nOrig !== n && state.ended) endReadable(this);
              }

              if (ret !== null) this.emit('data', ret);

              return ret;
            };

            function chunkInvalid(state, chunk) {
              var er = null;
              if (!isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
                er = new TypeError('Invalid non-string/buffer chunk');
              }
              return er;
            }

            function onEofChunk(stream, state) {
              if (state.ended) return;
              if (state.decoder) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) {
                  state.buffer.push(chunk);
                  state.length += state.objectMode ? 1 : chunk.length;
                }
              }
              state.ended = true;

              // emit 'readable' now to make sure it gets picked up.
              emitReadable(stream);
            }

            // Don't emit readable right away in sync mode, because this can trigger
            // another read() call => stack overflow.  This way, it might trigger
            // a nextTick recursion warning, but that's not so bad.
            function emitReadable(stream) {
              var state = stream._readableState;
              state.needReadable = false;
              if (!state.emittedReadable) {
                debug('emitReadable', state.flowing);
                state.emittedReadable = true;
                if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
              }
            }

            function emitReadable_(stream) {
              debug('emit readable');
              stream.emit('readable');
              flow(stream);
            }

            // at this point, the user has presumably seen the 'readable' event,
            // and called read() to consume some data.  that may have triggered
            // in turn another _read(n) call, in which case reading = true if
            // it's in progress.
            // However, if we're not ended, or reading, and the length < hwm,
            // then go ahead and try to read some more preemptively.
            function maybeReadMore(stream, state) {
              if (!state.readingMore) {
                state.readingMore = true;
                nextTick(maybeReadMore_, stream, state);
              }
            }

            function maybeReadMore_(stream, state) {
              var len = state.length;
              while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                debug('maybeReadMore read 0');
                stream.read(0);
                if (len === state.length)
                  // didn't get any data, stop spinning.
                  break;else len = state.length;
              }
              state.readingMore = false;
            }

            // abstract method.  to be overridden in specific implementation classes.
            // call cb(er, data) where data is <= n in length.
            // for virtual (non-string, non-buffer) streams, "length" is somewhat
            // arbitrary, and perhaps not very meaningful.
            Readable.prototype._read = function (n) {
              this.emit('error', new Error('not implemented'));
            };

            Readable.prototype.pipe = function (dest, pipeOpts) {
              var src = this;
              var state = this._readableState;

              switch (state.pipesCount) {
                case 0:
                  state.pipes = dest;
                  break;
                case 1:
                  state.pipes = [state.pipes, dest];
                  break;
                default:
                  state.pipes.push(dest);
                  break;
              }
              state.pipesCount += 1;
              debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

              var doEnd = (!pipeOpts || pipeOpts.end !== false);

              var endFn = doEnd ? onend : cleanup;
              if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

              dest.on('unpipe', onunpipe);
              function onunpipe(readable) {
                debug('onunpipe');
                if (readable === src) {
                  cleanup();
                }
              }

              function onend() {
                debug('onend');
                dest.end();
              }

              // when the dest drains, it reduces the awaitDrain counter
              // on the source.  This would be more elegant with a .once()
              // handler in flow(), but adding and removing repeatedly is
              // too slow.
              var ondrain = pipeOnDrain(src);
              dest.on('drain', ondrain);

              var cleanedUp = false;
              function cleanup() {
                debug('cleanup');
                // cleanup event handlers once the pipe is broken
                dest.removeListener('close', onclose);
                dest.removeListener('finish', onfinish);
                dest.removeListener('drain', ondrain);
                dest.removeListener('error', onerror);
                dest.removeListener('unpipe', onunpipe);
                src.removeListener('end', onend);
                src.removeListener('end', cleanup);
                src.removeListener('data', ondata);

                cleanedUp = true;

                // if the reader is waiting for a drain event from this
                // specific writer, then it would cause it to never start
                // flowing again.
                // So, if this is awaiting a drain, then we just call it now.
                // If we don't know, then assume that we are waiting for one.
                if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
              }

              // If the user pushes more data while we're writing to dest then we'll end up
              // in ondata again. However, we only want to increase awaitDrain once because
              // dest will only emit one 'drain' event for the multiple writes.
              // => Introduce a guard on increasing awaitDrain.
              var increasedAwaitDrain = false;
              src.on('data', ondata);
              function ondata(chunk) {
                debug('ondata');
                increasedAwaitDrain = false;
                var ret = dest.write(chunk);
                if (false === ret && !increasedAwaitDrain) {
                  // If the user unpiped during `dest.write()`, it is possible
                  // to get stuck in a permanently paused state if that write
                  // also returned false.
                  // => Check whether `dest` is still a piping destination.
                  if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                    debug('false write response, pause', src._readableState.awaitDrain);
                    src._readableState.awaitDrain++;
                    increasedAwaitDrain = true;
                  }
                  src.pause();
                }
              }

              // if the dest has an error, then stop piping into it.
              // however, don't suppress the throwing behavior for this.
              function onerror(er) {
                debug('onerror', er);
                unpipe();
                dest.removeListener('error', onerror);
                if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
              }

              // Make sure our error handler is attached before userland ones.
              prependListener(dest, 'error', onerror);

              // Both close and finish should trigger unpipe, but only once.
              function onclose() {
                dest.removeListener('finish', onfinish);
                unpipe();
              }
              dest.once('close', onclose);
              function onfinish() {
                debug('onfinish');
                dest.removeListener('close', onclose);
                unpipe();
              }
              dest.once('finish', onfinish);

              function unpipe() {
                debug('unpipe');
                src.unpipe(dest);
              }

              // tell the dest that it's being piped to
              dest.emit('pipe', src);

              // start the flow if it hasn't been started already.
              if (!state.flowing) {
                debug('pipe resume');
                src.resume();
              }

              return dest;
            };

            function pipeOnDrain(src) {
              return function () {
                var state = src._readableState;
                debug('pipeOnDrain', state.awaitDrain);
                if (state.awaitDrain) state.awaitDrain--;
                if (state.awaitDrain === 0 && src.listeners('data').length) {
                  state.flowing = true;
                  flow(src);
                }
              };
            }

            Readable.prototype.unpipe = function (dest) {
              var state = this._readableState;

              // if we're not piping anywhere, then do nothing.
              if (state.pipesCount === 0) return this;

              // just one destination.  most common case.
              if (state.pipesCount === 1) {
                // passed in one, but it's not the right one.
                if (dest && dest !== state.pipes) return this;

                if (!dest) dest = state.pipes;

                // got a match.
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                if (dest) dest.emit('unpipe', this);
                return this;
              }

              // slow case. multiple pipe destinations.

              if (!dest) {
                // remove all.
                var dests = state.pipes;
                var len = state.pipesCount;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;

                for (var _i = 0; _i < len; _i++) {
                  dests[_i].emit('unpipe', this);
                }return this;
              }

              // try to find the right one.
              var i = indexOf(state.pipes, dest);
              if (i === -1) return this;

              state.pipes.splice(i, 1);
              state.pipesCount -= 1;
              if (state.pipesCount === 1) state.pipes = state.pipes[0];

              dest.emit('unpipe', this);

              return this;
            };

            // set up data events if they are asked for
            // Ensure readable listeners eventually get something
            Readable.prototype.on = function (ev, fn) {
              var res = EventEmitter.prototype.on.call(this, ev, fn);

              if (ev === 'data') {
                // Start flowing on next tick if stream isn't explicitly paused
                if (this._readableState.flowing !== false) this.resume();
              } else if (ev === 'readable') {
                var state = this._readableState;
                if (!state.endEmitted && !state.readableListening) {
                  state.readableListening = state.needReadable = true;
                  state.emittedReadable = false;
                  if (!state.reading) {
                    nextTick(nReadingNextTick, this);
                  } else if (state.length) {
                    emitReadable(this, state);
                  }
                }
              }

              return res;
            };
            Readable.prototype.addListener = Readable.prototype.on;

            function nReadingNextTick(self) {
              debug('readable nexttick read 0');
              self.read(0);
            }

            // pause() and resume() are remnants of the legacy readable stream API
            // If the user uses them, then switch into old mode.
            Readable.prototype.resume = function () {
              var state = this._readableState;
              if (!state.flowing) {
                debug('resume');
                state.flowing = true;
                resume(this, state);
              }
              return this;
            };

            function resume(stream, state) {
              if (!state.resumeScheduled) {
                state.resumeScheduled = true;
                nextTick(resume_, stream, state);
              }
            }

            function resume_(stream, state) {
              if (!state.reading) {
                debug('resume read 0');
                stream.read(0);
              }

              state.resumeScheduled = false;
              state.awaitDrain = 0;
              stream.emit('resume');
              flow(stream);
              if (state.flowing && !state.reading) stream.read(0);
            }

            Readable.prototype.pause = function () {
              debug('call pause flowing=%j', this._readableState.flowing);
              if (false !== this._readableState.flowing) {
                debug('pause');
                this._readableState.flowing = false;
                this.emit('pause');
              }
              return this;
            };

            function flow(stream) {
              var state = stream._readableState;
              debug('flow', state.flowing);
              while (state.flowing && stream.read() !== null) {}
            }

            // wrap an old-style stream as the async data source.
            // This is *not* part of the readable stream interface.
            // It is an ugly unfortunate mess of history.
            Readable.prototype.wrap = function (stream) {
              var state = this._readableState;
              var paused = false;

              var self = this;
              stream.on('end', function () {
                debug('wrapped end');
                if (state.decoder && !state.ended) {
                  var chunk = state.decoder.end();
                  if (chunk && chunk.length) self.push(chunk);
                }

                self.push(null);
              });

              stream.on('data', function (chunk) {
                debug('wrapped data');
                if (state.decoder) chunk = state.decoder.write(chunk);

                // don't skip over falsy values in objectMode
                if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

                var ret = self.push(chunk);
                if (!ret) {
                  paused = true;
                  stream.pause();
                }
              });

              // proxy all the other methods.
              // important when wrapping filters and duplexes.
              for (var i in stream) {
                if (this[i] === undefined && typeof stream[i] === 'function') {
                  this[i] = function (method) {
                    return function () {
                      return stream[method].apply(stream, arguments);
                    };
                  }(i);
                }
              }

              // proxy certain important events.
              var events = ['error', 'close', 'destroy', 'pause', 'resume'];
              forEach(events, function (ev) {
                stream.on(ev, self.emit.bind(self, ev));
              });

              // when we try to consume some more bytes, simply unpause the
              // underlying stream.
              self._read = function (n) {
                debug('wrapped _read', n);
                if (paused) {
                  paused = false;
                  stream.resume();
                }
              };

              return self;
            };

            // exposed for testing purposes only.
            Readable._fromList = fromList;

            // Pluck off n bytes from an array of buffers.
            // Length is the combined lengths of all the buffers in the list.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.
            function fromList(n, state) {
              // nothing buffered
              if (state.length === 0) return null;

              var ret;
              if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
                // read it all, truncate the list
                if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
                state.buffer.clear();
              } else {
                // read part of list
                ret = fromListPartial(n, state.buffer, state.decoder);
              }

              return ret;
            }

            // Extracts only enough buffered data to satisfy the amount requested.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.
            function fromListPartial(n, list, hasStrings) {
              var ret;
              if (n < list.head.data.length) {
                // slice is the same for buffers and strings
                ret = list.head.data.slice(0, n);
                list.head.data = list.head.data.slice(n);
              } else if (n === list.head.data.length) {
                // first chunk is a perfect match
                ret = list.shift();
              } else {
                // result spans more than one buffer
                ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
              }
              return ret;
            }

            // Copies a specified amount of characters from the list of buffered data
            // chunks.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.
            function copyFromBufferString(n, list) {
              var p = list.head;
              var c = 1;
              var ret = p.data;
              n -= ret.length;
              while (p = p.next) {
                var str = p.data;
                var nb = n > str.length ? str.length : n;
                if (nb === str.length) ret += str;else ret += str.slice(0, n);
                n -= nb;
                if (n === 0) {
                  if (nb === str.length) {
                    ++c;
                    if (p.next) list.head = p.next;else list.head = list.tail = null;
                  } else {
                    list.head = p;
                    p.data = str.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              list.length -= c;
              return ret;
            }

            // Copies a specified amount of bytes from the list of buffered data chunks.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.
            function copyFromBuffer(n, list) {
              var ret = Buffer.allocUnsafe(n);
              var p = list.head;
              var c = 1;
              p.data.copy(ret);
              n -= p.data.length;
              while (p = p.next) {
                var buf = p.data;
                var nb = n > buf.length ? buf.length : n;
                buf.copy(ret, ret.length - n, 0, nb);
                n -= nb;
                if (n === 0) {
                  if (nb === buf.length) {
                    ++c;
                    if (p.next) list.head = p.next;else list.head = list.tail = null;
                  } else {
                    list.head = p;
                    p.data = buf.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              list.length -= c;
              return ret;
            }

            function endReadable(stream) {
              var state = stream._readableState;

              // If we get here before consuming all the bytes, then that is a
              // bug in node.  Should never happen.
              if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

              if (!state.endEmitted) {
                state.ended = true;
                nextTick(endReadableNT, state, stream);
              }
            }

            function endReadableNT(state, stream) {
              // Check that we didn't get one last unshift.
              if (!state.endEmitted && state.length === 0) {
                state.endEmitted = true;
                stream.readable = false;
                stream.emit('end');
              }
            }

            function forEach(xs, f) {
              for (var i = 0, l = xs.length; i < l; i++) {
                f(xs[i], i);
              }
            }

            function indexOf(xs, x) {
              for (var i = 0, l = xs.length; i < l; i++) {
                if (xs[i] === x) return i;
              }
              return -1;
            }

            // A bit simpler than readable streams.
            Writable.WritableState = WritableState;
            inherits$1(Writable, EventEmitter);

            function nop() {}

            function WriteReq(chunk, encoding, cb) {
              this.chunk = chunk;
              this.encoding = encoding;
              this.callback = cb;
              this.next = null;
            }

            function WritableState(options, stream) {
              Object.defineProperty(this, 'buffer', {
                get: deprecate(function () {
                  return this.getBuffer();
                }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
              });
              options = options || {};

              // object stream flag to indicate whether or not this stream
              // contains buffers or objects.
              this.objectMode = !!options.objectMode;

              if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

              // the point at which write() starts returning false
              // Note: 0 is a valid value, means that we always return false if
              // the entire buffer is not flushed immediately on write()
              var hwm = options.highWaterMark;
              var defaultHwm = this.objectMode ? 16 : 16 * 1024;
              this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

              // cast to ints.
              this.highWaterMark = ~ ~this.highWaterMark;

              this.needDrain = false;
              // at the start of calling end()
              this.ending = false;
              // when end() has been called, and returned
              this.ended = false;
              // when 'finish' is emitted
              this.finished = false;

              // should we decode strings into buffers before passing to _write?
              // this is here so that some node-core streams can optimize string
              // handling at a lower level.
              var noDecode = options.decodeStrings === false;
              this.decodeStrings = !noDecode;

              // Crypto is kind of old and crusty.  Historically, its default string
              // encoding is 'binary' so we have to make this configurable.
              // Everything else in the universe uses 'utf8', though.
              this.defaultEncoding = options.defaultEncoding || 'utf8';

              // not an actual buffer we keep track of, but a measurement
              // of how much we're waiting to get pushed to some underlying
              // socket or file.
              this.length = 0;

              // a flag to see when we're in the middle of a write.
              this.writing = false;

              // when true all writes will be buffered until .uncork() call
              this.corked = 0;

              // a flag to be able to tell if the onwrite cb is called immediately,
              // or on a later tick.  We set this to true at first, because any
              // actions that shouldn't happen until "later" should generally also
              // not happen before the first write call.
              this.sync = true;

              // a flag to know if we're processing previously buffered items, which
              // may call the _write() callback in the same tick, so that we don't
              // end up in an overlapped onwrite situation.
              this.bufferProcessing = false;

              // the callback that's passed to _write(chunk,cb)
              this.onwrite = function (er) {
                onwrite(stream, er);
              };

              // the callback that the user supplies to write(chunk,encoding,cb)
              this.writecb = null;

              // the amount that is being written when _write is called.
              this.writelen = 0;

              this.bufferedRequest = null;
              this.lastBufferedRequest = null;

              // number of pending user-supplied write callbacks
              // this must be 0 before 'finish' can be emitted
              this.pendingcb = 0;

              // emit prefinish if the only thing we're waiting for is _write cbs
              // This is relevant for synchronous Transform streams
              this.prefinished = false;

              // True if the error was already emitted and should not be thrown again
              this.errorEmitted = false;

              // count buffered requests
              this.bufferedRequestCount = 0;

              // allocate the first CorkedRequest, there is always
              // one allocated and free to use, and we maintain at most two
              this.corkedRequestsFree = new CorkedRequest(this);
            }

            WritableState.prototype.getBuffer = function writableStateGetBuffer() {
              var current = this.bufferedRequest;
              var out = [];
              while (current) {
                out.push(current);
                current = current.next;
              }
              return out;
            };
            function Writable(options) {

              // Writable ctor is applied to Duplexes, though they're not
              // instanceof Writable, they're instanceof Readable.
              if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

              this._writableState = new WritableState(options, this);

              // legacy.
              this.writable = true;

              if (options) {
                if (typeof options.write === 'function') this._write = options.write;

                if (typeof options.writev === 'function') this._writev = options.writev;
              }

              EventEmitter.call(this);
            }

            // Otherwise people can pipe Writable streams, which is just wrong.
            Writable.prototype.pipe = function () {
              this.emit('error', new Error('Cannot pipe, not readable'));
            };

            function writeAfterEnd(stream, cb) {
              var er = new Error('write after end');
              // TODO: defer error events consistently everywhere, not just the cb
              stream.emit('error', er);
              nextTick(cb, er);
            }

            // If we get something that is not a buffer, string, null, or undefined,
            // and we're not in objectMode, then that's an error.
            // Otherwise stream chunks are all considered to be of length=1, and the
            // watermarks determine how many objects to keep in the buffer, rather than
            // how many bytes or characters.
            function validChunk(stream, state, chunk, cb) {
              var valid = true;
              var er = false;
              // Always throw error if a null is written
              // if we are not in object mode then throw
              // if it is not a buffer, string, or undefined.
              if (chunk === null) {
                er = new TypeError('May not write null values to stream');
              } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                er = new TypeError('Invalid non-string/buffer chunk');
              }
              if (er) {
                stream.emit('error', er);
                nextTick(cb, er);
                valid = false;
              }
              return valid;
            }

            Writable.prototype.write = function (chunk, encoding, cb) {
              var state = this._writableState;
              var ret = false;

              if (typeof encoding === 'function') {
                cb = encoding;
                encoding = null;
              }

              if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

              if (typeof cb !== 'function') cb = nop;

              if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
                state.pendingcb++;
                ret = writeOrBuffer(this, state, chunk, encoding, cb);
              }

              return ret;
            };

            Writable.prototype.cork = function () {
              var state = this._writableState;

              state.corked++;
            };

            Writable.prototype.uncork = function () {
              var state = this._writableState;

              if (state.corked) {
                state.corked--;

                if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
              }
            };

            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
              // node::ParseEncoding() requires lower case.
              if (typeof encoding === 'string') encoding = encoding.toLowerCase();
              if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
              this._writableState.defaultEncoding = encoding;
              return this;
            };

            function decodeChunk(state, chunk, encoding) {
              if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                chunk = Buffer.from(chunk, encoding);
              }
              return chunk;
            }

            // if we're already writing something, then just put this
            // in the queue, and wait our turn.  Otherwise, call _write
            // If we return false, then we need a drain event, so set that flag.
            function writeOrBuffer(stream, state, chunk, encoding, cb) {
              chunk = decodeChunk(state, chunk, encoding);

              if (Buffer.isBuffer(chunk)) encoding = 'buffer';
              var len = state.objectMode ? 1 : chunk.length;

              state.length += len;

              var ret = state.length < state.highWaterMark;
              // we must ensure that previous needDrain will not be reset to false.
              if (!ret) state.needDrain = true;

              if (state.writing || state.corked) {
                var last = state.lastBufferedRequest;
                state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
                if (last) {
                  last.next = state.lastBufferedRequest;
                } else {
                  state.bufferedRequest = state.lastBufferedRequest;
                }
                state.bufferedRequestCount += 1;
              } else {
                doWrite(stream, state, false, len, chunk, encoding, cb);
              }

              return ret;
            }

            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
              state.writelen = len;
              state.writecb = cb;
              state.writing = true;
              state.sync = true;
              if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
              state.sync = false;
            }

            function onwriteError(stream, state, sync, er, cb) {
              --state.pendingcb;
              if (sync) nextTick(cb, er);else cb(er);

              stream._writableState.errorEmitted = true;
              stream.emit('error', er);
            }

            function onwriteStateUpdate(state) {
              state.writing = false;
              state.writecb = null;
              state.length -= state.writelen;
              state.writelen = 0;
            }

            function onwrite(stream, er) {
              var state = stream._writableState;
              var sync = state.sync;
              var cb = state.writecb;

              onwriteStateUpdate(state);

              if (er) onwriteError(stream, state, sync, er, cb);else {
                // Check if we're actually ready to finish, but don't emit yet
                var finished = needFinish(state);

                if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                  clearBuffer(stream, state);
                }

                if (sync) {
                  /*<replacement>*/
                    nextTick(afterWrite, stream, state, finished, cb);
                  /*</replacement>*/
                } else {
                    afterWrite(stream, state, finished, cb);
                  }
              }
            }

            function afterWrite(stream, state, finished, cb) {
              if (!finished) onwriteDrain(stream, state);
              state.pendingcb--;
              cb();
              finishMaybe(stream, state);
            }

            // Must force callback to be called on nextTick, so that we don't
            // emit 'drain' before the write() consumer gets the 'false' return
            // value, and has a chance to attach a 'drain' listener.
            function onwriteDrain(stream, state) {
              if (state.length === 0 && state.needDrain) {
                state.needDrain = false;
                stream.emit('drain');
              }
            }

            // if there's something in the buffer waiting, then process it
            function clearBuffer(stream, state) {
              state.bufferProcessing = true;
              var entry = state.bufferedRequest;

              if (stream._writev && entry && entry.next) {
                // Fast case, write everything using _writev()
                var l = state.bufferedRequestCount;
                var buffer = new Array(l);
                var holder = state.corkedRequestsFree;
                holder.entry = entry;

                var count = 0;
                while (entry) {
                  buffer[count] = entry;
                  entry = entry.next;
                  count += 1;
                }

                doWrite(stream, state, true, state.length, buffer, '', holder.finish);

                // doWrite is almost always async, defer these to save a bit of time
                // as the hot path ends with doWrite
                state.pendingcb++;
                state.lastBufferedRequest = null;
                if (holder.next) {
                  state.corkedRequestsFree = holder.next;
                  holder.next = null;
                } else {
                  state.corkedRequestsFree = new CorkedRequest(state);
                }
              } else {
                // Slow case, write chunks one-by-one
                while (entry) {
                  var chunk = entry.chunk;
                  var encoding = entry.encoding;
                  var cb = entry.callback;
                  var len = state.objectMode ? 1 : chunk.length;

                  doWrite(stream, state, false, len, chunk, encoding, cb);
                  entry = entry.next;
                  // if we didn't call the onwrite immediately, then
                  // it means that we need to wait until it does.
                  // also, that means that the chunk and cb are currently
                  // being processed, so move the buffer counter past them.
                  if (state.writing) {
                    break;
                  }
                }

                if (entry === null) state.lastBufferedRequest = null;
              }

              state.bufferedRequestCount = 0;
              state.bufferedRequest = entry;
              state.bufferProcessing = false;
            }

            Writable.prototype._write = function (chunk, encoding, cb) {
              cb(new Error('not implemented'));
            };

            Writable.prototype._writev = null;

            Writable.prototype.end = function (chunk, encoding, cb) {
              var state = this._writableState;

              if (typeof chunk === 'function') {
                cb = chunk;
                chunk = null;
                encoding = null;
              } else if (typeof encoding === 'function') {
                cb = encoding;
                encoding = null;
              }

              if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

              // .end() fully uncorks
              if (state.corked) {
                state.corked = 1;
                this.uncork();
              }

              // ignore unnecessary end() calls.
              if (!state.ending && !state.finished) endWritable(this, state, cb);
            };

            function needFinish(state) {
              return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }

            function prefinish(stream, state) {
              if (!state.prefinished) {
                state.prefinished = true;
                stream.emit('prefinish');
              }
            }

            function finishMaybe(stream, state) {
              var need = needFinish(state);
              if (need) {
                if (state.pendingcb === 0) {
                  prefinish(stream, state);
                  state.finished = true;
                  stream.emit('finish');
                } else {
                  prefinish(stream, state);
                }
              }
              return need;
            }

            function endWritable(stream, state, cb) {
              state.ending = true;
              finishMaybe(stream, state);
              if (cb) {
                if (state.finished) nextTick(cb);else stream.once('finish', cb);
              }
              state.ended = true;
              stream.writable = false;
            }

            // It seems a linked list but it is not
            // there will be only 2 of these for each stream
            function CorkedRequest(state) {
              var _this = this;

              this.next = null;
              this.entry = null;

              this.finish = function (err) {
                var entry = _this.entry;
                _this.entry = null;
                while (entry) {
                  var cb = entry.callback;
                  state.pendingcb--;
                  cb(err);
                  entry = entry.next;
                }
                if (state.corkedRequestsFree) {
                  state.corkedRequestsFree.next = _this;
                } else {
                  state.corkedRequestsFree = _this;
                }
              };
            }

            inherits$1(Duplex, Readable);

            var keys = Object.keys(Writable.prototype);
            for (var v = 0; v < keys.length; v++) {
              var method = keys[v];
              if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
            }
            function Duplex(options) {
              if (!(this instanceof Duplex)) return new Duplex(options);

              Readable.call(this, options);
              Writable.call(this, options);

              if (options && options.readable === false) this.readable = false;

              if (options && options.writable === false) this.writable = false;

              this.allowHalfOpen = true;
              if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

              this.once('end', onend);
            }

            // the no-half-open enforcer
            function onend() {
              // if we allow half-open state, or if the writable side ended,
              // then we're ok.
              if (this.allowHalfOpen || this._writableState.ended) return;

              // no more data can be written.
              // But allow more writes to happen in this tick.
              nextTick(onEndNT, this);
            }

            function onEndNT(self) {
              self.end();
            }

            // a transform stream is a readable/writable stream where you do
            inherits$1(Transform, Duplex);

            function TransformState(stream) {
              this.afterTransform = function (er, data) {
                return afterTransform(stream, er, data);
              };

              this.needTransform = false;
              this.transforming = false;
              this.writecb = null;
              this.writechunk = null;
              this.writeencoding = null;
            }

            function afterTransform(stream, er, data) {
              var ts = stream._transformState;
              ts.transforming = false;

              var cb = ts.writecb;

              if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

              ts.writechunk = null;
              ts.writecb = null;

              if (data !== null && data !== undefined) stream.push(data);

              cb(er);

              var rs = stream._readableState;
              rs.reading = false;
              if (rs.needReadable || rs.length < rs.highWaterMark) {
                stream._read(rs.highWaterMark);
              }
            }
            function Transform(options) {
              if (!(this instanceof Transform)) return new Transform(options);

              Duplex.call(this, options);

              this._transformState = new TransformState(this);

              // when the writable side finishes, then flush out anything remaining.
              var stream = this;

              // start out asking for a readable event once data is transformed.
              this._readableState.needReadable = true;

              // we have implemented the _read method, and done the other things
              // that Readable wants before the first _read call, so unset the
              // sync guard flag.
              this._readableState.sync = false;

              if (options) {
                if (typeof options.transform === 'function') this._transform = options.transform;

                if (typeof options.flush === 'function') this._flush = options.flush;
              }

              this.once('prefinish', function () {
                if (typeof this._flush === 'function') this._flush(function (er) {
                  done(stream, er);
                });else done(stream);
              });
            }

            Transform.prototype.push = function (chunk, encoding) {
              this._transformState.needTransform = false;
              return Duplex.prototype.push.call(this, chunk, encoding);
            };

            // This is the part where you do stuff!
            // override this function in implementation classes.
            // 'chunk' is an input chunk.
            //
            // Call `push(newChunk)` to pass along transformed output
            // to the readable side.  You may call 'push' zero or more times.
            //
            // Call `cb(err)` when you are done with this chunk.  If you pass
            // an error, then that'll put the hurt on the whole operation.  If you
            // never call cb(), then you'll never get another chunk.
            Transform.prototype._transform = function (chunk, encoding, cb) {
              throw new Error('Not implemented');
            };

            Transform.prototype._write = function (chunk, encoding, cb) {
              var ts = this._transformState;
              ts.writecb = cb;
              ts.writechunk = chunk;
              ts.writeencoding = encoding;
              if (!ts.transforming) {
                var rs = this._readableState;
                if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
              }
            };

            // Doesn't matter what the args are here.
            // _transform does all the work.
            // That we got here means that the readable side wants more data.
            Transform.prototype._read = function (n) {
              var ts = this._transformState;

              if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                ts.transforming = true;
                this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
              } else {
                // mark that we need a transform, so that any data that comes in
                // will get processed, now that we've asked for it.
                ts.needTransform = true;
              }
            };

            function done(stream, er) {
              if (er) return stream.emit('error', er);

              // if there's nothing in the write buffer, then that means
              // that nothing more will ever be provided
              var ws = stream._writableState;
              var ts = stream._transformState;

              if (ws.length) throw new Error('Calling transform done when ws.length != 0');

              if (ts.transforming) throw new Error('Calling transform done when still transforming');

              return stream.push(null);
            }

            inherits$1(PassThrough, Transform);
            function PassThrough(options) {
              if (!(this instanceof PassThrough)) return new PassThrough(options);

              Transform.call(this, options);
            }

            PassThrough.prototype._transform = function (chunk, encoding, cb) {
              cb(null, chunk);
            };

            inherits$1(Stream, EventEmitter);
            Stream.Readable = Readable;
            Stream.Writable = Writable;
            Stream.Duplex = Duplex;
            Stream.Transform = Transform;
            Stream.PassThrough = PassThrough;

            // Backwards-compat with node 0.4.x
            Stream.Stream = Stream;

            // old-style streams.  Note that the pipe method (the only relevant
            // part of this class) is overridden in the Readable class.

            function Stream() {
              EventEmitter.call(this);
            }

            Stream.prototype.pipe = function(dest, options) {
              var source = this;

              function ondata(chunk) {
                if (dest.writable) {
                  if (false === dest.write(chunk) && source.pause) {
                    source.pause();
                  }
                }
              }

              source.on('data', ondata);

              function ondrain() {
                if (source.readable && source.resume) {
                  source.resume();
                }
              }

              dest.on('drain', ondrain);

              // If the 'end' option is not supplied, dest.end() will be called when
              // source gets the 'end' or 'close' events.  Only dest.end() once.
              if (!dest._isStdio && (!options || options.end !== false)) {
                source.on('end', onend);
                source.on('close', onclose);
              }

              var didOnEnd = false;
              function onend() {
                if (didOnEnd) return;
                didOnEnd = true;

                dest.end();
              }


              function onclose() {
                if (didOnEnd) return;
                didOnEnd = true;

                if (typeof dest.destroy === 'function') dest.destroy();
              }

              // don't leave dangling pipes when there are errors.
              function onerror(er) {
                cleanup();
                if (EventEmitter.listenerCount(this, 'error') === 0) {
                  throw er; // Unhandled stream error in pipe.
                }
              }

              source.on('error', onerror);
              dest.on('error', onerror);

              // remove all the event listeners that were added.
              function cleanup() {
                source.removeListener('data', ondata);
                dest.removeListener('drain', ondrain);

                source.removeListener('end', onend);
                source.removeListener('close', onclose);

                source.removeListener('error', onerror);
                dest.removeListener('error', onerror);

                source.removeListener('end', cleanup);
                source.removeListener('close', cleanup);

                dest.removeListener('close', cleanup);
              }

              source.on('end', cleanup);
              source.on('close', cleanup);

              dest.on('close', cleanup);

              dest.emit('pipe', source);

              // Allow for unix-like usage: A.pipe(B).pipe(C)
              return dest;
            };

            var stream = /*#__PURE__*/Object.freeze({
                        default: Stream,
                        Readable: Readable,
                        Writable: Writable,
                        Duplex: Duplex,
                        Transform: Transform,
                        PassThrough: PassThrough,
                        Stream: Stream
            });

            var rStates = {
              UNSENT: 0,
              OPENED: 1,
              HEADERS_RECEIVED: 2,
              LOADING: 3,
              DONE: 4
            };
            function IncomingMessage(xhr, response, mode) {
              var self = this;
              Readable.call(self);

              self._mode = mode;
              self.headers = {};
              self.rawHeaders = [];
              self.trailers = {};
              self.rawTrailers = [];

              // Fake the 'close' event, but only once 'end' fires
              self.on('end', function() {
                // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
                nextTick(function() {
                  self.emit('close');
                });
              });
              var read;
              if (mode === 'fetch') {
                self._fetchResponse = response;

                self.url = response.url;
                self.statusCode = response.status;
                self.statusMessage = response.statusText;
                  // backwards compatible version of for (<item> of <iterable>):
                  // for (var <item>,_i,_it = <iterable>[Symbol.iterator](); <item> = (_i = _it.next()).value,!_i.done;)
                for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done;) {
                  self.headers[header[0].toLowerCase()] = header[1];
                  self.rawHeaders.push(header[0], header[1]);
                }

                // TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
                var reader = response.body.getReader();

                read = function () {
                  reader.read().then(function(result) {
                    if (self._destroyed)
                      return
                    if (result.done) {
                      self.push(null);
                      return
                    }
                    self.push(new Buffer(result.value));
                    read();
                  });
                };
                read();

              } else {
                self._xhr = xhr;
                self._pos = 0;

                self.url = xhr.responseURL;
                self.statusCode = xhr.status;
                self.statusMessage = xhr.statusText;
                var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
                headers.forEach(function(header) {
                  var matches = header.match(/^([^:]+):\s*(.*)/);
                  if (matches) {
                    var key = matches[1].toLowerCase();
                    if (key === 'set-cookie') {
                      if (self.headers[key] === undefined) {
                        self.headers[key] = [];
                      }
                      self.headers[key].push(matches[2]);
                    } else if (self.headers[key] !== undefined) {
                      self.headers[key] += ', ' + matches[2];
                    } else {
                      self.headers[key] = matches[2];
                    }
                    self.rawHeaders.push(matches[1], matches[2]);
                  }
                });

                self._charset = 'x-user-defined';
                if (!overrideMimeType) {
                  var mimeType = self.rawHeaders['mime-type'];
                  if (mimeType) {
                    var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
                    if (charsetMatch) {
                      self._charset = charsetMatch[1].toLowerCase();
                    }
                  }
                  if (!self._charset)
                    self._charset = 'utf-8'; // best guess
                }
              }
            }

            inherits$1(IncomingMessage, Readable);

            IncomingMessage.prototype._read = function() {};

            IncomingMessage.prototype._onXHRProgress = function() {
              var self = this;

              var xhr = self._xhr;

              var response = null;
              switch (self._mode) {
              case 'text:vbarray': // For IE9
                if (xhr.readyState !== rStates.DONE)
                  break
                try {
                  // This fails in IE8
                  response = new global$1.VBArray(xhr.responseBody).toArray();
                } catch (e) {
                  // pass
                }
                if (response !== null) {
                  self.push(new Buffer(response));
                  break
                }
                // Falls through in IE8
              case 'text':
                try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
                  response = xhr.responseText;
                } catch (e) {
                  self._mode = 'text:vbarray';
                  break
                }
                if (response.length > self._pos) {
                  var newData = response.substr(self._pos);
                  if (self._charset === 'x-user-defined') {
                    var buffer = new Buffer(newData.length);
                    for (var i = 0; i < newData.length; i++)
                      buffer[i] = newData.charCodeAt(i) & 0xff;

                    self.push(buffer);
                  } else {
                    self.push(newData, self._charset);
                  }
                  self._pos = response.length;
                }
                break
              case 'arraybuffer':
                if (xhr.readyState !== rStates.DONE || !xhr.response)
                  break
                response = xhr.response;
                self.push(new Buffer(new Uint8Array(response)));
                break
              case 'moz-chunked-arraybuffer': // take whole
                response = xhr.response;
                if (xhr.readyState !== rStates.LOADING || !response)
                  break
                self.push(new Buffer(new Uint8Array(response)));
                break
              case 'ms-stream':
                response = xhr.response;
                if (xhr.readyState !== rStates.LOADING)
                  break
                var reader = new global$1.MSStreamReader();
                reader.onprogress = function() {
                  if (reader.result.byteLength > self._pos) {
                    self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
                    self._pos = reader.result.byteLength;
                  }
                };
                reader.onload = function() {
                  self.push(null);
                };
                  // reader.onerror = ??? // TODO: this
                reader.readAsArrayBuffer(response);
                break
              }

              // The ms-stream case handles end separately in reader.onload()
              if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
                self.push(null);
              }
            };

            // from https://github.com/jhiesey/to-arraybuffer/blob/6502d9850e70ba7935a7df4ad86b358fc216f9f0/index.js
            function toArrayBuffer (buf) {
              // If the buffer is backed by a Uint8Array, a faster version will work
              if (buf instanceof Uint8Array) {
                // If the buffer isn't a subarray, return the underlying ArrayBuffer
                if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
                  return buf.buffer
                } else if (typeof buf.buffer.slice === 'function') {
                  // Otherwise we need to get a proper copy
                  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
                }
              }

              if (isBuffer(buf)) {
                // This is the slow version that will work with any Buffer
                // implementation (even in old browsers)
                var arrayCopy = new Uint8Array(buf.length);
                var len = buf.length;
                for (var i = 0; i < len; i++) {
                  arrayCopy[i] = buf[i];
                }
                return arrayCopy.buffer
              } else {
                throw new Error('Argument must be a Buffer')
              }
            }

            function decideMode(preferBinary, useFetch) {
              if (hasFetch && useFetch) {
                return 'fetch'
              } else if (mozchunkedarraybuffer) {
                return 'moz-chunked-arraybuffer'
              } else if (msstream) {
                return 'ms-stream'
              } else if (arraybuffer && preferBinary) {
                return 'arraybuffer'
              } else if (vbArray && preferBinary) {
                return 'text:vbarray'
              } else {
                return 'text'
              }
            }

            function ClientRequest(opts) {
              var self = this;
              Writable.call(self);

              self._opts = opts;
              self._body = [];
              self._headers = {};
              if (opts.auth)
                self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
              Object.keys(opts.headers).forEach(function(name) {
                self.setHeader(name, opts.headers[name]);
              });

              var preferBinary;
              var useFetch = true;
              if (opts.mode === 'disable-fetch') {
                // If the use of XHR should be preferred and includes preserving the 'content-type' header
                useFetch = false;
                preferBinary = true;
              } else if (opts.mode === 'prefer-streaming') {
                // If streaming is a high priority but binary compatibility and
                // the accuracy of the 'content-type' header aren't
                preferBinary = false;
              } else if (opts.mode === 'allow-wrong-content-type') {
                // If streaming is more important than preserving the 'content-type' header
                preferBinary = !overrideMimeType;
              } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
                // Use binary if text streaming may corrupt data or the content-type header, or for speed
                preferBinary = true;
              } else {
                throw new Error('Invalid value for opts.mode')
              }
              self._mode = decideMode(preferBinary, useFetch);

              self.on('finish', function() {
                self._onFinish();
              });
            }

            inherits$1(ClientRequest, Writable);
            // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
            var unsafeHeaders = [
              'accept-charset',
              'accept-encoding',
              'access-control-request-headers',
              'access-control-request-method',
              'connection',
              'content-length',
              'cookie',
              'cookie2',
              'date',
              'dnt',
              'expect',
              'host',
              'keep-alive',
              'origin',
              'referer',
              'te',
              'trailer',
              'transfer-encoding',
              'upgrade',
              'user-agent',
              'via'
            ];
            ClientRequest.prototype.setHeader = function(name, value) {
              var self = this;
              var lowerName = name.toLowerCase();
                // This check is not necessary, but it prevents warnings from browsers about setting unsafe
                // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
                // http-browserify did it, so I will too.
              if (unsafeHeaders.indexOf(lowerName) !== -1)
                return

              self._headers[lowerName] = {
                name: name,
                value: value
              };
            };

            ClientRequest.prototype.getHeader = function(name) {
              var self = this;
              return self._headers[name.toLowerCase()].value
            };

            ClientRequest.prototype.removeHeader = function(name) {
              var self = this;
              delete self._headers[name.toLowerCase()];
            };

            ClientRequest.prototype._onFinish = function() {
              var self = this;

              if (self._destroyed)
                return
              var opts = self._opts;

              var headersObj = self._headers;
              var body;
              if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH') {
                if (blobConstructor()) {
                  body = new global$1.Blob(self._body.map(function(buffer) {
                    return toArrayBuffer(buffer)
                  }), {
                    type: (headersObj['content-type'] || {}).value || ''
                  });
                } else {
                  // get utf8 string
                  body = Buffer.concat(self._body).toString();
                }
              }

              if (self._mode === 'fetch') {
                var headers = Object.keys(headersObj).map(function(name) {
                  return [headersObj[name].name, headersObj[name].value]
                });

                global$1.fetch(self._opts.url, {
                  method: self._opts.method,
                  headers: headers,
                  body: body,
                  mode: 'cors',
                  credentials: opts.withCredentials ? 'include' : 'same-origin'
                }).then(function(response) {
                  self._fetchResponse = response;
                  self._connect();
                }, function(reason) {
                  self.emit('error', reason);
                });
              } else {
                var xhr = self._xhr = new global$1.XMLHttpRequest();
                try {
                  xhr.open(self._opts.method, self._opts.url, true);
                } catch (err) {
                  nextTick(function() {
                    self.emit('error', err);
                  });
                  return
                }

                // Can't set responseType on really old browsers
                if ('responseType' in xhr)
                  xhr.responseType = self._mode.split(':')[0];

                if ('withCredentials' in xhr)
                  xhr.withCredentials = !!opts.withCredentials;

                if (self._mode === 'text' && 'overrideMimeType' in xhr)
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');

                Object.keys(headersObj).forEach(function(name) {
                  xhr.setRequestHeader(headersObj[name].name, headersObj[name].value);
                });

                self._response = null;
                xhr.onreadystatechange = function() {
                  switch (xhr.readyState) {
                  case rStates.LOADING:
                  case rStates.DONE:
                    self._onXHRProgress();
                    break
                  }
                };
                  // Necessary for streaming in Firefox, since xhr.response is ONLY defined
                  // in onprogress, not in onreadystatechange with xhr.readyState = 3
                if (self._mode === 'moz-chunked-arraybuffer') {
                  xhr.onprogress = function() {
                    self._onXHRProgress();
                  };
                }

                xhr.onerror = function() {
                  if (self._destroyed)
                    return
                  self.emit('error', new Error('XHR error'));
                };

                try {
                  xhr.send(body);
                } catch (err) {
                  nextTick(function() {
                    self.emit('error', err);
                  });
                  return
                }
              }
            };

            /**
             * Checks if xhr.status is readable and non-zero, indicating no error.
             * Even though the spec says it should be available in readyState 3,
             * accessing it throws an exception in IE8
             */
            function statusValid(xhr) {
              try {
                var status = xhr.status;
                return (status !== null && status !== 0)
              } catch (e) {
                return false
              }
            }

            ClientRequest.prototype._onXHRProgress = function() {
              var self = this;

              if (!statusValid(self._xhr) || self._destroyed)
                return

              if (!self._response)
                self._connect();

              self._response._onXHRProgress();
            };

            ClientRequest.prototype._connect = function() {
              var self = this;

              if (self._destroyed)
                return

              self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);
              self.emit('response', self._response);
            };

            ClientRequest.prototype._write = function(chunk, encoding, cb) {
              var self = this;

              self._body.push(chunk);
              cb();
            };

            ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function() {
              var self = this;
              self._destroyed = true;
              if (self._response)
                self._response._destroyed = true;
              if (self._xhr)
                self._xhr.abort();
                // Currently, there isn't a way to truly abort a fetch.
                // If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
            };

            ClientRequest.prototype.end = function(data, encoding, cb) {
              var self = this;
              if (typeof data === 'function') {
                cb = data;
                data = undefined;
              }

              Writable.prototype.end.call(self, data, encoding, cb);
            };

            ClientRequest.prototype.flushHeaders = function() {};
            ClientRequest.prototype.setTimeout = function() {};
            ClientRequest.prototype.setNoDelay = function() {};
            ClientRequest.prototype.setSocketKeepAlive = function() {};

            /*! https://mths.be/punycode v1.4.1 by @mathias */


            /** Highest positive signed 32-bit float value */
            var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

            /** Bootstring parameters */
            var base = 36;
            var tMin = 1;
            var tMax = 26;
            var skew = 38;
            var damp = 700;
            var initialBias = 72;
            var initialN = 128; // 0x80
            var delimiter = '-'; // '\x2D'
            var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars
            var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

            /** Error messages */
            var errors = {
              'overflow': 'Overflow: input needs wider integers to process',
              'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
              'invalid-input': 'Invalid input'
            };

            /** Convenience shortcuts */
            var baseMinusTMin = base - tMin;
            var floor = Math.floor;
            var stringFromCharCode = String.fromCharCode;

            /*--------------------------------------------------------------------------*/

            /**
             * A generic error utility function.
             * @private
             * @param {String} type The error type.
             * @returns {Error} Throws a `RangeError` with the applicable error message.
             */
            function error(type) {
              throw new RangeError(errors[type]);
            }

            /**
             * A generic `Array#map` utility function.
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} callback The function that gets called for every array
             * item.
             * @returns {Array} A new array of values returned by the callback function.
             */
            function map(array, fn) {
              var length = array.length;
              var result = [];
              while (length--) {
                result[length] = fn(array[length]);
              }
              return result;
            }

            /**
             * A simple `Array#map`-like wrapper to work with domain name strings or email
             * addresses.
             * @private
             * @param {String} domain The domain name or email address.
             * @param {Function} callback The function that gets called for every
             * character.
             * @returns {Array} A new string of characters returned by the callback
             * function.
             */
            function mapDomain(string, fn) {
              var parts = string.split('@');
              var result = '';
              if (parts.length > 1) {
                // In email addresses, only the domain name should be punycoded. Leave
                // the local part (i.e. everything up to `@`) intact.
                result = parts[0] + '@';
                string = parts[1];
              }
              // Avoid `split(regex)` for IE8 compatibility. See #17.
              string = string.replace(regexSeparators, '\x2E');
              var labels = string.split('.');
              var encoded = map(labels, fn).join('.');
              return result + encoded;
            }

            /**
             * Creates an array containing the numeric code points of each Unicode
             * character in the string. While JavaScript uses UCS-2 internally,
             * this function will convert a pair of surrogate halves (each of which
             * UCS-2 exposes as separate characters) into a single code point,
             * matching UTF-16.
             * @see `punycode.ucs2.encode`
             * @see <https://mathiasbynens.be/notes/javascript-encoding>
             * @memberOf punycode.ucs2
             * @name decode
             * @param {String} string The Unicode input string (UCS-2).
             * @returns {Array} The new array of code points.
             */
            function ucs2decode(string) {
              var output = [],
                counter = 0,
                length = string.length,
                value,
                extra;
              while (counter < length) {
                value = string.charCodeAt(counter++);
                if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                  // high surrogate, and there is a next character
                  extra = string.charCodeAt(counter++);
                  if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                  } else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                  }
                } else {
                  output.push(value);
                }
              }
              return output;
            }

            /**
             * Converts a digit/integer into a basic code point.
             * @see `basicToDigit()`
             * @private
             * @param {Number} digit The numeric value of a basic code point.
             * @returns {Number} The basic code point whose value (when used for
             * representing integers) is `digit`, which needs to be in the range
             * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
             * used; else, the lowercase form is used. The behavior is undefined
             * if `flag` is non-zero and `digit` has no uppercase form.
             */
            function digitToBasic(digit, flag) {
              //  0..25 map to ASCII a..z or A..Z
              // 26..35 map to ASCII 0..9
              return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
            }

            /**
             * Bias adaptation function as per section 3.4 of RFC 3492.
             * https://tools.ietf.org/html/rfc3492#section-3.4
             * @private
             */
            function adapt(delta, numPoints, firstTime) {
              var k = 0;
              delta = firstTime ? floor(delta / damp) : delta >> 1;
              delta += floor(delta / numPoints);
              for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {
                delta = floor(delta / baseMinusTMin);
              }
              return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
            }

            /**
             * Converts a string of Unicode symbols (e.g. a domain name label) to a
             * Punycode string of ASCII-only symbols.
             * @memberOf punycode
             * @param {String} input The string of Unicode symbols.
             * @returns {String} The resulting Punycode string of ASCII-only symbols.
             */
            function encode(input) {
              var n,
                delta,
                handledCPCount,
                basicLength,
                bias,
                j,
                m,
                q,
                k,
                t,
                currentValue,
                output = [],
                /** `inputLength` will hold the number of code points in `input`. */
                inputLength,
                /** Cached calculation results */
                handledCPCountPlusOne,
                baseMinusT,
                qMinusT;

              // Convert the input in UCS-2 to Unicode
              input = ucs2decode(input);

              // Cache the length
              inputLength = input.length;

              // Initialize the state
              n = initialN;
              delta = 0;
              bias = initialBias;

              // Handle the basic code points
              for (j = 0; j < inputLength; ++j) {
                currentValue = input[j];
                if (currentValue < 0x80) {
                  output.push(stringFromCharCode(currentValue));
                }
              }

              handledCPCount = basicLength = output.length;

              // `handledCPCount` is the number of code points that have been handled;
              // `basicLength` is the number of basic code points.

              // Finish the basic string - if it is not empty - with a delimiter
              if (basicLength) {
                output.push(delimiter);
              }

              // Main encoding loop:
              while (handledCPCount < inputLength) {

                // All non-basic code points < n have been handled already. Find the next
                // larger one:
                for (m = maxInt, j = 0; j < inputLength; ++j) {
                  currentValue = input[j];
                  if (currentValue >= n && currentValue < m) {
                    m = currentValue;
                  }
                }

                // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
                // but guard against overflow
                handledCPCountPlusOne = handledCPCount + 1;
                if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                  error('overflow');
                }

                delta += (m - n) * handledCPCountPlusOne;
                n = m;

                for (j = 0; j < inputLength; ++j) {
                  currentValue = input[j];

                  if (currentValue < n && ++delta > maxInt) {
                    error('overflow');
                  }

                  if (currentValue == n) {
                    // Represent delta as a generalized variable-length integer
                    for (q = delta, k = base; /* no condition */ ; k += base) {
                      t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
                      if (q < t) {
                        break;
                      }
                      qMinusT = q - t;
                      baseMinusT = base - t;
                      output.push(
                        stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                      );
                      q = floor(qMinusT / baseMinusT);
                    }

                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                  }
                }

                ++delta;
                ++n;

              }
              return output.join('');
            }

            /**
             * Converts a Unicode string representing a domain name or an email address to
             * Punycode. Only the non-ASCII parts of the domain name will be converted,
             * i.e. it doesn't matter if you call it with a domain that's already in
             * ASCII.
             * @memberOf punycode
             * @param {String} input The domain name or email address to convert, as a
             * Unicode string.
             * @returns {String} The Punycode representation of the given domain name or
             * email address.
             */
            function toASCII(input) {
              return mapDomain(input, function(string) {
                return regexNonASCII.test(string) ?
                  'xn--' + encode(string) :
                  string;
              });
            }

            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.


            // If obj.hasOwnProperty has been overridden, then calling
            // obj.hasOwnProperty(prop) will break.
            // See: https://github.com/joyent/node/issues/1707
            function hasOwnProperty$1(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            }
            var isArray$2 = Array.isArray || function (xs) {
              return Object.prototype.toString.call(xs) === '[object Array]';
            };
            function stringifyPrimitive(v) {
              switch (typeof v) {
                case 'string':
                  return v;

                case 'boolean':
                  return v ? 'true' : 'false';

                case 'number':
                  return isFinite(v) ? v : '';

                default:
                  return '';
              }
            }

            function stringify (obj, sep, eq, name) {
              sep = sep || '&';
              eq = eq || '=';
              if (obj === null) {
                obj = undefined;
              }

              if (typeof obj === 'object') {
                return map$1(objectKeys(obj), function(k) {
                  var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
                  if (isArray$2(obj[k])) {
                    return map$1(obj[k], function(v) {
                      return ks + encodeURIComponent(stringifyPrimitive(v));
                    }).join(sep);
                  } else {
                    return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
                  }
                }).join(sep);

              }

              if (!name) return '';
              return encodeURIComponent(stringifyPrimitive(name)) + eq +
                     encodeURIComponent(stringifyPrimitive(obj));
            }
            function map$1 (xs, f) {
              if (xs.map) return xs.map(f);
              var res = [];
              for (var i = 0; i < xs.length; i++) {
                res.push(f(xs[i], i));
              }
              return res;
            }

            var objectKeys = Object.keys || function (obj) {
              var res = [];
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
              }
              return res;
            };

            function parse(qs, sep, eq, options) {
              sep = sep || '&';
              eq = eq || '=';
              var obj = {};

              if (typeof qs !== 'string' || qs.length === 0) {
                return obj;
              }

              var regexp = /\+/g;
              qs = qs.split(sep);

              var maxKeys = 1000;
              if (options && typeof options.maxKeys === 'number') {
                maxKeys = options.maxKeys;
              }

              var len = qs.length;
              // maxKeys <= 0 means that we should not limit keys count
              if (maxKeys > 0 && len > maxKeys) {
                len = maxKeys;
              }

              for (var i = 0; i < len; ++i) {
                var x = qs[i].replace(regexp, '%20'),
                    idx = x.indexOf(eq),
                    kstr, vstr, k, v;

                if (idx >= 0) {
                  kstr = x.substr(0, idx);
                  vstr = x.substr(idx + 1);
                } else {
                  kstr = x;
                  vstr = '';
                }

                k = decodeURIComponent(kstr);
                v = decodeURIComponent(vstr);

                if (!hasOwnProperty$1(obj, k)) {
                  obj[k] = v;
                } else if (isArray$2(obj[k])) {
                  obj[k].push(v);
                } else {
                  obj[k] = [obj[k], v];
                }
              }

              return obj;
            }

            // Copyright Joyent, Inc. and other Node contributors.
            function Url() {
              this.protocol = null;
              this.slashes = null;
              this.auth = null;
              this.host = null;
              this.port = null;
              this.hostname = null;
              this.hash = null;
              this.search = null;
              this.query = null;
              this.pathname = null;
              this.path = null;
              this.href = null;
            }

            // Reference: RFC 3986, RFC 1808, RFC 2396

            // define these here so at least they only have to be
            // compiled once on the first module load.
            var protocolPattern = /^([a-z0-9.+-]+:)/i,
              portPattern = /:[0-9]*$/,

              // Special case for a simple path URL
              simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

              // RFC 2396: characters reserved for delimiting URLs.
              // We actually just auto-escape these.
              delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

              // RFC 2396: characters not allowed for various reasons.
              unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

              // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
              autoEscape = ['\''].concat(unwise),
              // Characters that are never ever allowed in a hostname.
              // Note that any invalid chars are also handled, but these
              // are the ones that are *expected* to be seen, so we fast-path
              // them.
              nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
              hostEndingChars = ['/', '?', '#'],
              hostnameMaxLen = 255,
              hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
              hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
              // protocols that can allow "unsafe" and "unwise" chars.
              unsafeProtocol = {
                'javascript': true,
                'javascript:': true
              },
              // protocols that never have a hostname.
              hostlessProtocol = {
                'javascript': true,
                'javascript:': true
              },
              // protocols that always contain a // bit.
              slashedProtocol = {
                'http': true,
                'https': true,
                'ftp': true,
                'gopher': true,
                'file': true,
                'http:': true,
                'https:': true,
                'ftp:': true,
                'gopher:': true,
                'file:': true
              };

            function urlParse(url, parseQueryString, slashesDenoteHost) {
              if (url && isObject(url) && url instanceof Url) return url;

              var u = new Url;
              u.parse(url, parseQueryString, slashesDenoteHost);
              return u;
            }
            Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
              return parse$1(this, url, parseQueryString, slashesDenoteHost);
            };

            function parse$1(self, url, parseQueryString, slashesDenoteHost) {
              if (!isString(url)) {
                throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
              }

              // Copy chrome, IE, opera backslash-handling behavior.
              // Back slashes before the query string get converted to forward slashes
              // See: https://code.google.com/p/chromium/issues/detail?id=25916
              var queryIndex = url.indexOf('?'),
                splitter =
                (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
                uSplit = url.split(splitter),
                slashRegex = /\\/g;
              uSplit[0] = uSplit[0].replace(slashRegex, '/');
              url = uSplit.join(splitter);

              var rest = url;

              // trim before proceeding.
              // This is to support parse stuff like "  http://foo.com  \n"
              rest = rest.trim();

              if (!slashesDenoteHost && url.split('#').length === 1) {
                // Try fast path regexp
                var simplePath = simplePathPattern.exec(rest);
                if (simplePath) {
                  self.path = rest;
                  self.href = rest;
                  self.pathname = simplePath[1];
                  if (simplePath[2]) {
                    self.search = simplePath[2];
                    if (parseQueryString) {
                      self.query = parse(self.search.substr(1));
                    } else {
                      self.query = self.search.substr(1);
                    }
                  } else if (parseQueryString) {
                    self.search = '';
                    self.query = {};
                  }
                  return self;
                }
              }

              var proto = protocolPattern.exec(rest);
              if (proto) {
                proto = proto[0];
                var lowerProto = proto.toLowerCase();
                self.protocol = lowerProto;
                rest = rest.substr(proto.length);
              }

              // figure out if it's got a host
              // user@server is *always* interpreted as a hostname, and url
              // resolution will treat //foo/bar as host=foo,path=bar because that's
              // how the browser resolves relative URLs.
              if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
                var slashes = rest.substr(0, 2) === '//';
                if (slashes && !(proto && hostlessProtocol[proto])) {
                  rest = rest.substr(2);
                  self.slashes = true;
                }
              }
              var i, hec, l, p;
              if (!hostlessProtocol[proto] &&
                (slashes || (proto && !slashedProtocol[proto]))) {

                // there's a hostname.
                // the first instance of /, ?, ;, or # ends the host.
                //
                // If there is an @ in the hostname, then non-host chars *are* allowed
                // to the left of the last @ sign, unless some host-ending character
                // comes *before* the @-sign.
                // URLs are obnoxious.
                //
                // ex:
                // http://a@b@c/ => user:a@b host:c
                // http://a@b?@c => user:a host:c path:/?@c

                // v0.12 TODO(isaacs): This is not quite how Chrome does things.
                // Review our test case against browsers more comprehensively.

                // find the first instance of any hostEndingChars
                var hostEnd = -1;
                for (i = 0; i < hostEndingChars.length; i++) {
                  hec = rest.indexOf(hostEndingChars[i]);
                  if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                    hostEnd = hec;
                }

                // at this point, either we have an explicit point where the
                // auth portion cannot go past, or the last @ char is the decider.
                var auth, atSign;
                if (hostEnd === -1) {
                  // atSign can be anywhere.
                  atSign = rest.lastIndexOf('@');
                } else {
                  // atSign must be in auth portion.
                  // http://a@b/c@d => host:b auth:a path:/c@d
                  atSign = rest.lastIndexOf('@', hostEnd);
                }

                // Now we have a portion which is definitely the auth.
                // Pull that off.
                if (atSign !== -1) {
                  auth = rest.slice(0, atSign);
                  rest = rest.slice(atSign + 1);
                  self.auth = decodeURIComponent(auth);
                }

                // the host is the remaining to the left of the first non-host char
                hostEnd = -1;
                for (i = 0; i < nonHostChars.length; i++) {
                  hec = rest.indexOf(nonHostChars[i]);
                  if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                    hostEnd = hec;
                }
                // if we still have not hit it, then the entire thing is a host.
                if (hostEnd === -1)
                  hostEnd = rest.length;

                self.host = rest.slice(0, hostEnd);
                rest = rest.slice(hostEnd);

                // pull out port.
                parseHost(self);

                // we've indicated that there is a hostname,
                // so even if it's empty, it has to be present.
                self.hostname = self.hostname || '';

                // if hostname begins with [ and ends with ]
                // assume that it's an IPv6 address.
                var ipv6Hostname = self.hostname[0] === '[' &&
                  self.hostname[self.hostname.length - 1] === ']';

                // validate a little.
                if (!ipv6Hostname) {
                  var hostparts = self.hostname.split(/\./);
                  for (i = 0, l = hostparts.length; i < l; i++) {
                    var part = hostparts[i];
                    if (!part) continue;
                    if (!part.match(hostnamePartPattern)) {
                      var newpart = '';
                      for (var j = 0, k = part.length; j < k; j++) {
                        if (part.charCodeAt(j) > 127) {
                          // we replace non-ASCII char with a temporary placeholder
                          // we need this to make sure size of hostname is not
                          // broken by replacing non-ASCII by nothing
                          newpart += 'x';
                        } else {
                          newpart += part[j];
                        }
                      }
                      // we test again with ASCII char only
                      if (!newpart.match(hostnamePartPattern)) {
                        var validParts = hostparts.slice(0, i);
                        var notHost = hostparts.slice(i + 1);
                        var bit = part.match(hostnamePartStart);
                        if (bit) {
                          validParts.push(bit[1]);
                          notHost.unshift(bit[2]);
                        }
                        if (notHost.length) {
                          rest = '/' + notHost.join('.') + rest;
                        }
                        self.hostname = validParts.join('.');
                        break;
                      }
                    }
                  }
                }

                if (self.hostname.length > hostnameMaxLen) {
                  self.hostname = '';
                } else {
                  // hostnames are always lower case.
                  self.hostname = self.hostname.toLowerCase();
                }

                if (!ipv6Hostname) {
                  // IDNA Support: Returns a punycoded representation of "domain".
                  // It only converts parts of the domain name that
                  // have non-ASCII characters, i.e. it doesn't matter if
                  // you call it with a domain that already is ASCII-only.
                  self.hostname = toASCII(self.hostname);
                }

                p = self.port ? ':' + self.port : '';
                var h = self.hostname || '';
                self.host = h + p;
                self.href += self.host;

                // strip [ and ] from the hostname
                // the host field still retains them, though
                if (ipv6Hostname) {
                  self.hostname = self.hostname.substr(1, self.hostname.length - 2);
                  if (rest[0] !== '/') {
                    rest = '/' + rest;
                  }
                }
              }

              // now rest is set to the post-host stuff.
              // chop off any delim chars.
              if (!unsafeProtocol[lowerProto]) {

                // First, make 100% sure that any "autoEscape" chars get
                // escaped, even if encodeURIComponent doesn't think they
                // need to be.
                for (i = 0, l = autoEscape.length; i < l; i++) {
                  var ae = autoEscape[i];
                  if (rest.indexOf(ae) === -1)
                    continue;
                  var esc = encodeURIComponent(ae);
                  if (esc === ae) {
                    esc = escape(ae);
                  }
                  rest = rest.split(ae).join(esc);
                }
              }


              // chop off from the tail first.
              var hash = rest.indexOf('#');
              if (hash !== -1) {
                // got a fragment string.
                self.hash = rest.substr(hash);
                rest = rest.slice(0, hash);
              }
              var qm = rest.indexOf('?');
              if (qm !== -1) {
                self.search = rest.substr(qm);
                self.query = rest.substr(qm + 1);
                if (parseQueryString) {
                  self.query = parse(self.query);
                }
                rest = rest.slice(0, qm);
              } else if (parseQueryString) {
                // no query string, but parseQueryString still requested
                self.search = '';
                self.query = {};
              }
              if (rest) self.pathname = rest;
              if (slashedProtocol[lowerProto] &&
                self.hostname && !self.pathname) {
                self.pathname = '/';
              }

              //to support http.request
              if (self.pathname || self.search) {
                p = self.pathname || '';
                var s = self.search || '';
                self.path = p + s;
              }

              // finally, reconstruct the href based on what has been validated.
              self.href = format$1(self);
              return self;
            }

            function format$1(self) {
              var auth = self.auth || '';
              if (auth) {
                auth = encodeURIComponent(auth);
                auth = auth.replace(/%3A/i, ':');
                auth += '@';
              }

              var protocol = self.protocol || '',
                pathname = self.pathname || '',
                hash = self.hash || '',
                host = false,
                query = '';

              if (self.host) {
                host = auth + self.host;
              } else if (self.hostname) {
                host = auth + (self.hostname.indexOf(':') === -1 ?
                  self.hostname :
                  '[' + this.hostname + ']');
                if (self.port) {
                  host += ':' + self.port;
                }
              }

              if (self.query &&
                isObject(self.query) &&
                Object.keys(self.query).length) {
                query = stringify(self.query);
              }

              var search = self.search || (query && ('?' + query)) || '';

              if (protocol && protocol.substr(-1) !== ':') protocol += ':';

              // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
              // unless they had them to begin with.
              if (self.slashes ||
                (!protocol || slashedProtocol[protocol]) && host !== false) {
                host = '//' + (host || '');
                if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
              } else if (!host) {
                host = '';
              }

              if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
              if (search && search.charAt(0) !== '?') search = '?' + search;

              pathname = pathname.replace(/[?#]/g, function(match) {
                return encodeURIComponent(match);
              });
              search = search.replace('#', '%23');

              return protocol + host + pathname + search + hash;
            }

            Url.prototype.format = function() {
              return format$1(this);
            };

            Url.prototype.resolve = function(relative) {
              return this.resolveObject(urlParse(relative, false, true)).format();
            };

            Url.prototype.resolveObject = function(relative) {
              if (isString(relative)) {
                var rel = new Url();
                rel.parse(relative, false, true);
                relative = rel;
              }

              var result = new Url();
              var tkeys = Object.keys(this);
              for (var tk = 0; tk < tkeys.length; tk++) {
                var tkey = tkeys[tk];
                result[tkey] = this[tkey];
              }

              // hash is always overridden, no matter what.
              // even href="" will remove it.
              result.hash = relative.hash;

              // if the relative url is empty, then there's nothing left to do here.
              if (relative.href === '') {
                result.href = result.format();
                return result;
              }

              // hrefs like //foo/bar always cut to the protocol.
              if (relative.slashes && !relative.protocol) {
                // take everything except the protocol from relative
                var rkeys = Object.keys(relative);
                for (var rk = 0; rk < rkeys.length; rk++) {
                  var rkey = rkeys[rk];
                  if (rkey !== 'protocol')
                    result[rkey] = relative[rkey];
                }

                //urlParse appends trailing / to urls like http://www.example.com
                if (slashedProtocol[result.protocol] &&
                  result.hostname && !result.pathname) {
                  result.path = result.pathname = '/';
                }

                result.href = result.format();
                return result;
              }
              var relPath;
              if (relative.protocol && relative.protocol !== result.protocol) {
                // if it's a known url protocol, then changing
                // the protocol does weird things
                // first, if it's not file:, then we MUST have a host,
                // and if there was a path
                // to begin with, then we MUST have a path.
                // if it is file:, then the host is dropped,
                // because that's known to be hostless.
                // anything else is assumed to be absolute.
                if (!slashedProtocol[relative.protocol]) {
                  var keys = Object.keys(relative);
                  for (var v = 0; v < keys.length; v++) {
                    var k = keys[v];
                    result[k] = relative[k];
                  }
                  result.href = result.format();
                  return result;
                }

                result.protocol = relative.protocol;
                if (!relative.host && !hostlessProtocol[relative.protocol]) {
                  relPath = (relative.pathname || '').split('/');
                  while (relPath.length && !(relative.host = relPath.shift()));
                  if (!relative.host) relative.host = '';
                  if (!relative.hostname) relative.hostname = '';
                  if (relPath[0] !== '') relPath.unshift('');
                  if (relPath.length < 2) relPath.unshift('');
                  result.pathname = relPath.join('/');
                } else {
                  result.pathname = relative.pathname;
                }
                result.search = relative.search;
                result.query = relative.query;
                result.host = relative.host || '';
                result.auth = relative.auth;
                result.hostname = relative.hostname || relative.host;
                result.port = relative.port;
                // to support http.request
                if (result.pathname || result.search) {
                  var p = result.pathname || '';
                  var s = result.search || '';
                  result.path = p + s;
                }
                result.slashes = result.slashes || relative.slashes;
                result.href = result.format();
                return result;
              }

              var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
                isRelAbs = (
                  relative.host ||
                  relative.pathname && relative.pathname.charAt(0) === '/'
                ),
                mustEndAbs = (isRelAbs || isSourceAbs ||
                  (result.host && relative.pathname)),
                removeAllDots = mustEndAbs,
                srcPath = result.pathname && result.pathname.split('/') || [],
                psychotic = result.protocol && !slashedProtocol[result.protocol];
              relPath = relative.pathname && relative.pathname.split('/') || [];
              // if the url is a non-slashed url, then relative
              // links like ../.. should be able
              // to crawl up to the hostname, as well.  This is strange.
              // result.protocol has already been set by now.
              // Later on, put the first path part into the host field.
              if (psychotic) {
                result.hostname = '';
                result.port = null;
                if (result.host) {
                  if (srcPath[0] === '') srcPath[0] = result.host;
                  else srcPath.unshift(result.host);
                }
                result.host = '';
                if (relative.protocol) {
                  relative.hostname = null;
                  relative.port = null;
                  if (relative.host) {
                    if (relPath[0] === '') relPath[0] = relative.host;
                    else relPath.unshift(relative.host);
                  }
                  relative.host = null;
                }
                mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
              }
              var authInHost;
              if (isRelAbs) {
                // it's absolute.
                result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
                result.hostname = (relative.hostname || relative.hostname === '') ?
                  relative.hostname : result.hostname;
                result.search = relative.search;
                result.query = relative.query;
                srcPath = relPath;
                // fall through to the dot-handling below.
              } else if (relPath.length) {
                // it's relative
                // throw away the existing file, and take the new path instead.
                if (!srcPath) srcPath = [];
                srcPath.pop();
                srcPath = srcPath.concat(relPath);
                result.search = relative.search;
                result.query = relative.query;
              } else if (!isNullOrUndefined(relative.search)) {
                // just pull out the search.
                // like href='?foo'.
                // Put this after the other two cases because it simplifies the booleans
                if (psychotic) {
                  result.hostname = result.host = srcPath.shift();
                  //occationaly the auth can get stuck only in host
                  //this especially happens in cases like
                  //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
                  authInHost = result.host && result.host.indexOf('@') > 0 ?
                    result.host.split('@') : false;
                  if (authInHost) {
                    result.auth = authInHost.shift();
                    result.host = result.hostname = authInHost.shift();
                  }
                }
                result.search = relative.search;
                result.query = relative.query;
                //to support http.request
                if (!isNull(result.pathname) || !isNull(result.search)) {
                  result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
                }
                result.href = result.format();
                return result;
              }

              if (!srcPath.length) {
                // no path at all.  easy.
                // we've already handled the other stuff above.
                result.pathname = null;
                //to support http.request
                if (result.search) {
                  result.path = '/' + result.search;
                } else {
                  result.path = null;
                }
                result.href = result.format();
                return result;
              }

              // if a url ENDs in . or .., then it must get a trailing slash.
              // however, if it ends in anything else non-slashy,
              // then it must NOT get a trailing slash.
              var last = srcPath.slice(-1)[0];
              var hasTrailingSlash = (
                (result.host || relative.host || srcPath.length > 1) &&
                (last === '.' || last === '..') || last === '');

              // strip single dots, resolve double dots to parent dir
              // if the path tries to go above the root, `up` ends up > 0
              var up = 0;
              for (var i = srcPath.length; i >= 0; i--) {
                last = srcPath[i];
                if (last === '.') {
                  srcPath.splice(i, 1);
                } else if (last === '..') {
                  srcPath.splice(i, 1);
                  up++;
                } else if (up) {
                  srcPath.splice(i, 1);
                  up--;
                }
              }

              // if the path is allowed to go above the root, restore leading ..s
              if (!mustEndAbs && !removeAllDots) {
                for (; up--; up) {
                  srcPath.unshift('..');
                }
              }

              if (mustEndAbs && srcPath[0] !== '' &&
                (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
                srcPath.unshift('');
              }

              if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
                srcPath.push('');
              }

              var isAbsolute = srcPath[0] === '' ||
                (srcPath[0] && srcPath[0].charAt(0) === '/');

              // put the host back
              if (psychotic) {
                result.hostname = result.host = isAbsolute ? '' :
                  srcPath.length ? srcPath.shift() : '';
                //occationaly the auth can get stuck only in host
                //this especially happens in cases like
                //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
                authInHost = result.host && result.host.indexOf('@') > 0 ?
                  result.host.split('@') : false;
                if (authInHost) {
                  result.auth = authInHost.shift();
                  result.host = result.hostname = authInHost.shift();
                }
              }

              mustEndAbs = mustEndAbs || (result.host && srcPath.length);

              if (mustEndAbs && !isAbsolute) {
                srcPath.unshift('');
              }

              if (!srcPath.length) {
                result.pathname = null;
                result.path = null;
              } else {
                result.pathname = srcPath.join('/');
              }

              //to support request.http
              if (!isNull(result.pathname) || !isNull(result.search)) {
                result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
              }
              result.auth = relative.auth || result.auth;
              result.slashes = result.slashes || relative.slashes;
              result.href = result.format();
              return result;
            };

            Url.prototype.parseHost = function() {
              return parseHost(this);
            };

            function parseHost(self) {
              var host = self.host;
              var port = portPattern.exec(host);
              if (port) {
                port = port[0];
                if (port !== ':') {
                  self.port = port.substr(1);
                }
                host = host.substr(0, host.length - port.length);
              }
              if (host) self.hostname = host;
            }

            function request(opts, cb) {
              if (typeof opts === 'string')
                opts = urlParse(opts);


              // Normally, the page is loaded from http or https, so not specifying a protocol
              // will result in a (valid) protocol-relative url. However, this won't work if
              // the protocol is something else, like 'file:'
              var defaultProtocol = global$1.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

              var protocol = opts.protocol || defaultProtocol;
              var host = opts.hostname || opts.host;
              var port = opts.port;
              var path = opts.path || '/';

              // Necessary for IPv6 addresses
              if (host && host.indexOf(':') !== -1)
                host = '[' + host + ']';

              // This may be a relative url. The browser should always be able to interpret it correctly.
              opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;
              opts.method = (opts.method || 'GET').toUpperCase();
              opts.headers = opts.headers || {};

              // Also valid opts.auth, opts.mode

              var req = new ClientRequest(opts);
              if (cb)
                req.on('response', cb);
              return req
            }

            function get(opts, cb) {
              var req = request(opts, cb);
              req.end();
              return req
            }

            function Agent() {}
            Agent.defaultMaxSockets = 4;

            var METHODS = [
              'CHECKOUT',
              'CONNECT',
              'COPY',
              'DELETE',
              'GET',
              'HEAD',
              'LOCK',
              'M-SEARCH',
              'MERGE',
              'MKACTIVITY',
              'MKCOL',
              'MOVE',
              'NOTIFY',
              'OPTIONS',
              'PATCH',
              'POST',
              'PROPFIND',
              'PROPPATCH',
              'PURGE',
              'PUT',
              'REPORT',
              'SEARCH',
              'SUBSCRIBE',
              'TRACE',
              'UNLOCK',
              'UNSUBSCRIBE'
            ];
            var STATUS_CODES = {
              100: 'Continue',
              101: 'Switching Protocols',
              102: 'Processing', // RFC 2518, obsoleted by RFC 4918
              200: 'OK',
              201: 'Created',
              202: 'Accepted',
              203: 'Non-Authoritative Information',
              204: 'No Content',
              205: 'Reset Content',
              206: 'Partial Content',
              207: 'Multi-Status', // RFC 4918
              300: 'Multiple Choices',
              301: 'Moved Permanently',
              302: 'Moved Temporarily',
              303: 'See Other',
              304: 'Not Modified',
              305: 'Use Proxy',
              307: 'Temporary Redirect',
              400: 'Bad Request',
              401: 'Unauthorized',
              402: 'Payment Required',
              403: 'Forbidden',
              404: 'Not Found',
              405: 'Method Not Allowed',
              406: 'Not Acceptable',
              407: 'Proxy Authentication Required',
              408: 'Request Time-out',
              409: 'Conflict',
              410: 'Gone',
              411: 'Length Required',
              412: 'Precondition Failed',
              413: 'Request Entity Too Large',
              414: 'Request-URI Too Large',
              415: 'Unsupported Media Type',
              416: 'Requested Range Not Satisfiable',
              417: 'Expectation Failed',
              418: 'I\'m a teapot', // RFC 2324
              422: 'Unprocessable Entity', // RFC 4918
              423: 'Locked', // RFC 4918
              424: 'Failed Dependency', // RFC 4918
              425: 'Unordered Collection', // RFC 4918
              426: 'Upgrade Required', // RFC 2817
              428: 'Precondition Required', // RFC 6585
              429: 'Too Many Requests', // RFC 6585
              431: 'Request Header Fields Too Large', // RFC 6585
              500: 'Internal Server Error',
              501: 'Not Implemented',
              502: 'Bad Gateway',
              503: 'Service Unavailable',
              504: 'Gateway Time-out',
              505: 'HTTP Version Not Supported',
              506: 'Variant Also Negotiates', // RFC 2295
              507: 'Insufficient Storage', // RFC 4918
              509: 'Bandwidth Limit Exceeded',
              510: 'Not Extended', // RFC 2774
              511: 'Network Authentication Required' // RFC 6585
            };

            var http = {
              request,
              get,
              Agent,
              METHODS,
              STATUS_CODES
            };

            var http$1 = /*#__PURE__*/Object.freeze({
                        request: request,
                        get: get,
                        Agent: Agent,
                        METHODS: METHODS,
                        STATUS_CODES: STATUS_CODES,
                        default: http
            });

            var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

            function commonjsRequire () {
            	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
            }

            function unwrapExports (x) {
            	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
            }

            function createCommonjsModule(fn, module) {
            	return module = { exports: {} }, fn(module, module.exports), module.exports;
            }

            var validUrl = createCommonjsModule(function (module) {
            (function(module) {

                module.exports.is_uri = is_iri;
                module.exports.is_http_uri = is_http_iri;
                module.exports.is_https_uri = is_https_iri;
                module.exports.is_web_uri = is_web_iri;
                // Create aliases
                module.exports.isUri = is_iri;
                module.exports.isHttpUri = is_http_iri;
                module.exports.isHttpsUri = is_https_iri;
                module.exports.isWebUri = is_web_iri;


                // private function
                // internal URI spitter method - direct from RFC 3986
                var splitUri = function(uri) {
                    var splitted = uri.match(/(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/);
                    return splitted;
                };

                function is_iri(value) {
                    if (!value) {
                        return;
                    }

                    // check for illegal characters
                    if (/[^a-z0-9\:\/\?\#\[\]\@\!\$\&\'\(\)\*\+\,\;\=\.\-\_\~\%]/i.test(value)) return;

                    // check for hex escapes that aren't complete
                    if (/%[^0-9a-f]/i.test(value)) return;
                    if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;

                    var splitted = [];
                    var scheme = '';
                    var authority = '';
                    var path = '';
                    var query = '';
                    var fragment = '';
                    var out = '';

                    // from RFC 3986
                    splitted = splitUri(value);
                    scheme = splitted[1]; 
                    authority = splitted[2];
                    path = splitted[3];
                    query = splitted[4];
                    fragment = splitted[5];

                    // scheme and path are required, though the path can be empty
                    if (!(scheme && scheme.length && path.length >= 0)) return;

                    // if authority is present, the path must be empty or begin with a /
                    if (authority && authority.length) {
                        if (!(path.length === 0 || /^\//.test(path))) return;
                    } else {
                        // if authority is not present, the path must not start with //
                        if (/^\/\//.test(path)) return;
                    }

                    // scheme must begin with a letter, then consist of letters, digits, +, ., or -
                    if (!/^[a-z][a-z0-9\+\-\.]*$/.test(scheme.toLowerCase()))  return;

                    // re-assemble the URL per section 5.3 in RFC 3986
                    out += scheme + ':';
                    if (authority && authority.length) {
                        out += '//' + authority;
                    }

                    out += path;

                    if (query && query.length) {
                        out += '?' + query;
                    }

                    if (fragment && fragment.length) {
                        out += '#' + fragment;
                    }

                    return out;
                }

                function is_http_iri(value, allowHttps) {
                    if (!is_iri(value)) {
                        return;
                    }

                    var splitted = [];
                    var scheme = '';
                    var authority = '';
                    var path = '';
                    var port = '';
                    var query = '';
                    var fragment = '';
                    var out = '';

                    // from RFC 3986
                    splitted = splitUri(value);
                    scheme = splitted[1]; 
                    authority = splitted[2];
                    path = splitted[3];
                    query = splitted[4];
                    fragment = splitted[5];

                    if (!scheme)  return;

                    if(allowHttps) {
                        if (scheme.toLowerCase() != 'https') return;
                    } else {
                        if (scheme.toLowerCase() != 'http') return;
                    }

                    // fully-qualified URIs must have an authority section that is
                    // a valid host
                    if (!authority) {
                        return;
                    }

                    // enable port component
                    if (/:(\d+)$/.test(authority)) {
                        port = authority.match(/:(\d+)$/)[0];
                        authority = authority.replace(/:\d+$/, '');
                    }

                    out += scheme + ':';
                    out += '//' + authority;
                    
                    if (port) {
                        out += port;
                    }
                    
                    out += path;
                    
                    if(query && query.length){
                        out += '?' + query;
                    }

                    if(fragment && fragment.length){
                        out += '#' + fragment;
                    }
                    
                    return out;
                }

                function is_https_iri(value) {
                    return is_http_iri(value, true);
                }

                function is_web_iri(value) {
                    return (is_http_iri(value) || is_https_iri(value));
                }

            })(module);
            });

            /*
            The MIT License (MIT)

            Copyright (c) 2016 CoderPuppy

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in all
            copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
            SOFTWARE.

            */
            var _endianness;
            function endianness() {
              if (typeof _endianness === 'undefined') {
                var a = new ArrayBuffer(2);
                var b = new Uint8Array(a);
                var c = new Uint16Array(a);
                b[0] = 1;
                b[1] = 2;
                if (c[0] === 258) {
                  _endianness = 'BE';
                } else if (c[0] === 513){
                  _endianness = 'LE';
                } else {
                  throw new Error('unable to figure out endianess');
                }
              }
              return _endianness;
            }

            function hostname() {
              if (typeof global$1.location !== 'undefined') {
                return global$1.location.hostname
              } else return '';
            }

            function loadavg() {
              return [];
            }

            function uptime$1() {
              return 0;
            }

            function freemem() {
              return Number.MAX_VALUE;
            }

            function totalmem() {
              return Number.MAX_VALUE;
            }

            function cpus() {
              return [];
            }

            function type() {
              return 'Browser';
            }

            function release$1 () {
              if (typeof global$1.navigator !== 'undefined') {
                return global$1.navigator.appVersion;
              }
              return '';
            }

            function networkInterfaces(){}
            function getNetworkInterfaces(){}

            function arch() {
              return 'javascript';
            }

            function platform$1() {
              return 'browser';
            }

            function tmpDir() {
              return '/tmp';
            }
            var tmpdir = tmpDir;

            var EOL = '\n';
            var os = {
              EOL: EOL,
              tmpdir: tmpdir,
              tmpDir: tmpDir,
              networkInterfaces:networkInterfaces,
              getNetworkInterfaces: getNetworkInterfaces,
              release: release$1,
              type: type,
              cpus: cpus,
              totalmem: totalmem,
              freemem: freemem,
              uptime: uptime$1,
              loadavg: loadavg,
              hostname: hostname,
              endianness: endianness,
            };

            var os$1 = /*#__PURE__*/Object.freeze({
                        endianness: endianness,
                        hostname: hostname,
                        loadavg: loadavg,
                        uptime: uptime$1,
                        freemem: freemem,
                        totalmem: totalmem,
                        cpus: cpus,
                        type: type,
                        release: release$1,
                        networkInterfaces: networkInterfaces,
                        getNetworkInterfaces: getNetworkInterfaces,
                        arch: arch,
                        platform: platform$1,
                        tmpDir: tmpDir,
                        tmpdir: tmpdir,
                        EOL: EOL,
                        default: os
            });

            var isUtf8 = createCommonjsModule(function (module, exports) {
            exports = module.exports = function(bytes)
            {
                var i = 0;
                while(i < bytes.length)
                {
                    if(     (// ASCII
                                bytes[i] == 0x09 ||
                                bytes[i] == 0x0A ||
                                bytes[i] == 0x0D ||
                                (0x20 <= bytes[i] && bytes[i] <= 0x7E)
                            )
                      ) {
                          i += 1;
                          continue;
                      }

                    if(     (// non-overlong 2-byte
                                (0xC2 <= bytes[i] && bytes[i] <= 0xDF) &&
                                (0x80 <= bytes[i+1] && bytes[i+1] <= 0xBF)
                            )
                      ) {
                          i += 2;
                          continue;
                      }

                    if(     (// excluding overlongs
                                bytes[i] == 0xE0 &&
                                (0xA0 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&
                                (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF)
                            ) ||
                            (// straight 3-byte
                             ((0xE1 <= bytes[i] && bytes[i] <= 0xEC) ||
                              bytes[i] == 0xEE ||
                              bytes[i] == 0xEF) &&
                             (0x80 <= bytes[i + 1] && bytes[i+1] <= 0xBF) &&
                             (0x80 <= bytes[i+2] && bytes[i+2] <= 0xBF)
                            ) ||
                            (// excluding surrogates
                             bytes[i] == 0xED &&
                             (0x80 <= bytes[i+1] && bytes[i+1] <= 0x9F) &&
                             (0x80 <= bytes[i+2] && bytes[i+2] <= 0xBF)
                            )
                      ) {
                          i += 3;
                          continue;
                      }

                    if(     (// planes 1-3
                                bytes[i] == 0xF0 &&
                                (0x90 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&
                                (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&
                                (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)
                            ) ||
                            (// planes 4-15
                             (0xF1 <= bytes[i] && bytes[i] <= 0xF3) &&
                             (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&
                             (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&
                             (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)
                            ) ||
                            (// plane 16
                             bytes[i] == 0xF4 &&
                             (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0x8F) &&
                             (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&
                             (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)
                            )
                      ) {
                          i += 4;
                          continue;
                      }

                    return false;
                }

                return true;
            };
            });

            var util$2 = ( util$1 && util ) || util$1;

            var require$$0 = ( stream && Stream ) || stream;

            var Transform$1 = require$$0.Transform;

            function ctor(options, transform) {
            	util$2.inherits(FirstChunk, Transform$1);

            	if (typeof options === 'function') {
            		transform = options;
            		options = {};
            	}

            	if (typeof transform !== 'function') {
            		throw new Error('transform function required');
            	}

            	function FirstChunk(options2) {
            		if (!(this instanceof FirstChunk)) {
            			return new FirstChunk(options2);
            		}

            		Transform$1.call(this, options2);

            		this._firstChunk = true;
            		this._transformCalled = false;
            		this._minSize = options.minSize;
            	}

            	FirstChunk.prototype._transform = function (chunk, enc, cb) {
            		this._enc = enc;

            		if (this._firstChunk) {
            			this._firstChunk = false;

            			if (this._minSize == null) {
            				transform.call(this, chunk, enc, cb);
            				this._transformCalled = true;
            				return;
            			}

            			this._buffer = chunk;
            			cb();
            			return;
            		}

            		if (this._minSize == null) {
            			this.push(chunk);
            			cb();
            			return;
            		}

            		if (this._buffer.length < this._minSize) {
            			this._buffer = Buffer.concat([this._buffer, chunk]);
            			cb();
            			return;
            		}

            		if (this._buffer.length >= this._minSize) {
            			transform.call(this, this._buffer.slice(), enc, function () {
            				this.push(chunk);
            				cb();
            			}.bind(this));
            			this._transformCalled = true;
            			this._buffer = false;
            			return;
            		}

            		this.push(chunk);
            		cb();
            	};

            	FirstChunk.prototype._flush = function (cb) {
            		if (!this._buffer) {
            			cb();
            			return;
            		}

            		if (this._transformCalled) {
            			this.push(this._buffer);
            			cb();
            		} else {
            			transform.call(this, this._buffer.slice(), this._enc, cb);
            		}
            	};

            	return FirstChunk;
            }

            var firstChunkStream = function () {
            	return ctor.apply(ctor, arguments)();
            };

            var ctor_1 = ctor;
            firstChunkStream.ctor = ctor_1;

            var stripBom_1 = createCommonjsModule(function (module) {


            var stripBom = module.exports = function (arg) {
            	if (typeof arg === 'string') {
            		return arg.replace(/^\ufeff/g, '');
            	}

            	if (isBuffer(arg) && isUtf8(arg) &&
            		arg[0] === 0xef && arg[1] === 0xbb && arg[2] === 0xbf) {
            		return arg.slice(3);
            	}

            	return arg;
            };

            stripBom.stream = function () {
            	var firstChunk = firstChunkStream;

            	return firstChunk({minSize: 3}, function (chunk, enc, cb) {
            		this.push(stripBom(chunk));
            		cb();
            	});
            };
            });

            var numExp = /^[0-9]+$/;
            var defParam = function (params) {
              var _param = {
                constructResult: true, //set to false to not construct result in memory. suitable for big csv data
                delimiter: ',', // change the delimiter of csv columns. It is able to use an array to specify potencial delimiters. e.g. [",","|",";"]
                ignoreColumns: [], // columns to ignore upon input.
                includeColumns: [], // columns to include upon input.
                quote: '"', //quote for a column containing delimiter.
                trim: true, //trim column's space charcters
                checkType: false, //whether check column type
                toArrayString: false, //stream down stringified json array instead of string of json. (useful if downstream is file writer etc)
                ignoreEmpty: false, //Ignore empty value while parsing. if a value of the column is empty, it will be skipped parsing.
                workerNum: getEnv("CSV_WORKER", 1), //number of parallel workers. If multi-core CPU available, increase the number will get better performance for large csv data.
                fork: false, //use another CPU core to convert the csv stream
                noheader: false, //indicate if first line of CSV file is header or not.
                headers: null, //an array of header strings. If noheader is false and headers is array, csv header will be ignored.
                flatKeys: false, // Don't interpret dots and square brackets in header fields as nested object or array identifiers at all.
                maxRowLength: 0, //the max character a csv row could have. 0 means infinite. If max number exceeded, parser will emit "error" of "row_exceed". if a possibly corrupted csv data provided, give it a number like 65535 so the parser wont consume memory. default: 0
                checkColumn: false, //whether check column number of a row is the same as headers. If column number mismatched headers number, an error of "mismatched_column" will be emitted.. default: false
                escape: '"', //escape char for quoted column
                colParser:{}, //flags on columns to alter field processing.

                /**below are internal params */
                _columnConv:[],
                _headerType: [],
                _headerTitle: [],
                _headerFlag: [],
                _headers: null,
                _needFilterRow: false
              };
              if (!params) {
                params = {};
              }
              for (var key in params) {
                if (params.hasOwnProperty(key)) {
                  _param[key] = params[key];
                }
              }
              if (_param.ignoreColumns.length > 0 && !numExp.test(_param.ignoreColumns.join(""))) {
                _param._postIgnoreColumns = true;
              }
              if (_param.includeColumns.length > 0 && !numExp.test(_param.includeColumns.join(""))) {
                _param._postIncludeColumns = true;
              }

              if (_param.ignoreColumns.length || _param.includeColumns.length) {
                _param._needFilterRow = true;
                if (!_param._postIgnoreColumns){
                  _param.ignoreColumns.sort(function (a, b) { return b-a;});
                }
              }


              return _param;
            };

            function getEnv(key, def) {
              if (process.env[key]) {
                return process.env[key];
              } else {
                return def;
              }
            }

            var require$$0$1 = ( os$1 && os ) || os$1;

            //return eol from a data chunk.
            var eol = require$$0$1.EOL;
            var getEol = function(data, param) {
              if (!param.eol && data) {
                for (var i = 0, len = data.length; i < len; i++) {
                  if (data[i] === "\r") {
                    if (data[i + 1] === "\n") {
                      param.eol = "\r\n";
                    } else if (data[i + 1]) {
                      param.eol = "\r";
                    }
                    return param.eol;
                  } else if (data[i] === "\n") {
                    param.eol = "\n";
                    return param.eol;
                  }
                }
              }
              return param.eol;
            };

            /**
             * convert data chunk to file lines array
             * @param  {string} data  data chunk as utf8 string
             * @param  {object} param Converter param object
             * @return {Object}   {lines:[line1,line2...],partial:String}
             */
            var fileline = function(data, param) {
              var eol = getEol(data,param);
              var lines = data.split(eol);
              var partial = lines.pop();
              return {lines: lines, partial: partial};
            };

            var getDelimiter_1 = getDelimiter;
            var defaulDelimiters = [",", "|", "\t", ";", ":"];
            function getDelimiter(rowStr,param) {
              var checker;
              if (param.delimiter === "auto"){
                checker = defaulDelimiters;
              } else if (param.delimiter instanceof Array) {
                checker = param.delimiter;
              } else {
                return param.delimiter;
              }
              var count = 0;
              var rtn = ",";
              checker.forEach(function(delim) {
                var delimCount = rowStr.split(delim).length;
                if (delimCount > count) {
                  rtn = delim;
                  count = delimCount;
                }
              });
              return rtn;
            }

            var filterRow=function filterRow(row, param) {
              if (param.ignoreColumns instanceof Array && param.ignoreColumns.length > 0) {
                for (var igRow = 0, igColLen = param.ignoreColumns.length; igRow < igColLen; igRow++) {
                  if (param.ignoreColumns[igRow] >= 0) {
                    row.splice(param.ignoreColumns[igRow], 1);
                  }
                }
              }
              if (param.includeColumns instanceof Array && param.includeColumns.length > 0) {
                var cleanRowArr = [];
                for (var inRow = 0, inColLen = param.includeColumns.length; inRow < inColLen; inRow++) {
                  if (param.includeColumns[inRow] >= 0) {
                    cleanRowArr.push(row[param.includeColumns[inRow]]);
                  }
                }
                row = cleanRowArr;
              }
              return row;
            };

            /**
             * Convert a line of string to csv columns according to its delimiter
             * the param._header may not be ready when this is called.
             * @param  {[type]} rowStr [description]
             * @param  {[type]} param  [Converter param]
             * @return {[type]}        {cols:["a","b","c"],closed:boolean} the closed field indicate if the row is a complete row
             */
            var rowSplit = function rowSplit(rowStr, param) {
              if (rowStr === "") {
                return { cols: [], closed: true };
              }
              var quote = param.quote;
              var trim = param.trim;
              var escape = param.escape;
              if (param.delimiter instanceof Array || param.delimiter.toLowerCase() === "auto") {
                param.delimiter = getDelimiter_1(rowStr, param);
              }
              var delimiter = param.delimiter;
              var rowArr = rowStr.split(delimiter);
              if (quote === "off") {
                return { cols: rowArr, closed: true };
              }
              var row = [];
              var inquote = false;
              var quoteBuff = '';
              for (var i = 0, rowLen = rowArr.length; i < rowLen; i++) {
                var e = rowArr[i];
                if (!inquote && trim) {
                  e = e.trim();
                }
                var len = e.length;
                if (!inquote) {
                  if (isQuoteOpen(e, param)) { //quote open
                    e = e.substr(1);
                    if (isQuoteClose(e, param)) { //quote close
                      e = e.substring(0, e.length - 1);
                      e = _escapeQuote(e, quote, escape);
                      row.push(e);
                      continue;
                    } else {
                      inquote = true;
                      quoteBuff += e;
                      continue;
                    }
                  } else {
                    row.push(e);
                    continue;
                  }
                } else { //previous quote not closed
                  if (isQuoteClose(e, param)) { //close double quote
                    inquote = false;
                    e = e.substr(0, len - 1);
                    quoteBuff += delimiter + e;
                    quoteBuff = _escapeQuote(quoteBuff, quote, escape);
                    if (trim) {
                      quoteBuff = quoteBuff.trimRight();
                    }
                    row.push(quoteBuff);
                    quoteBuff = "";
                  } else {
                    quoteBuff += delimiter + e;
                  }
                }
              }

              if (!inquote && param._needFilterRow) {
                row = filterRow(row, param);
              }

              return { cols: row, closed: !inquote };
              // if (param.workerNum<=1){
              // }else{
              //   if (inquote && quoteBuff.length>0){//for multi core, quote will be closed at the end of line
              //     quoteBuff=_escapeQuote(quoteBuff,quote,escape);;
              //     if (trim){
              //       quoteBuff=quoteBuff.trimRight();
              //     }
              //     row.push(quoteBuff);
              //   }
              //   return {cols:row,closed:true};
              // }

            };



            function isQuoteOpen(str, param) {
              var quote = param.quote;
              var escape = param.escape;
              return str[0] === quote && (
                str[1] !== quote ||
                str[1] === escape && (str[2] === quote || str.length === 2));
            }
            function isQuoteClose(str, param) {
              var quote = param.quote;
              var count = 0;
              var idx = str.length - 1;
              var escape = param.escape;
              while (str[idx] === quote || str[idx] === escape) {
                idx--;
                count++;
              }
              return count % 2 !== 0;
            }

            var cachedRegExp = {};
            function _escapeQuote(segment, quote, escape) {

              var key = "es|" + quote + "|" + escape;
              if (cachedRegExp[key] === undefined) {

                // if (escape === "\\") {
                //   escape = "\\\\";
                // }
                cachedRegExp[key] = new RegExp('\\'+escape + '\\'+quote, 'g');
              }
              var regExp = cachedRegExp[key];
              // console.log(regExp,segment);
              return segment.replace(regExp, quote);
            }

            /**
             * Convert lines to csv columns
             * @param  {[type]} lines [file lines]
             * @param  {[type]} param [Converter param]
             * @return {[type]}  {lines:[[col1,col2,col3...]],partial:String}
             */
            var csvline = function(lines, param) {
              var csvLines = [];
              var left = "";
              while (lines.length) {
                var line = left + lines.shift();
                var row = rowSplit(line, param);
                if (row.closed) {
                  csvLines.push(row.cols);
                  left = "";
                } else {
                  left = line + (getEol(line, param) || "\n"); // if unable to getEol from data, assume "\n"
                }
              }
              return {lines: csvLines, partial: left};
            };

            /**
             * Convert data chunk to csv lines with cols
             * @param  {[type]} data   [description]
             * @param  {[type]} params [description]
             * @return {[type]}    {lines:[[col1,col2,col3]],partial:String}
             */
            var fileLineToCSVLine = function(fileLine, params) {
              var lines = fileLine.lines;
              var csvLines = csvline(lines,params);
              return {
                lines: csvLines.lines,
                partial: csvLines.partial + fileLine.partial
              };
            };

            var explicitTypes = ["number", "string"];

            function Parser(name, regExp, parser, processSafe) {
              this.name = typeof name === "undefined" ? "Default" : name;
              this.regExp = null;
              this.type = "";
              this.processSafe = processSafe;
              if (typeof regExp !== "undefined") {
                if (typeof regExp === "string") {
                  this.regExp = new RegExp(regExp);
                } else {
                  this.regExp = regExp;
                }
              }
              if (typeof parser !== "undefined") {
                this.parse = parser;
              }
            }
            // var numReg = /^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$/;
            Parser.prototype.convertType = function(item) {
              var type=this.type;
              if (type === 'number') {
                var rtn = parseFloat(item);
                if (isNaN(rtn)) {
                  return 0;
                } else {
                  return rtn;
                }
              } else if (this.param && this.param.checkType && type === '') {
                var trimed = item.trim();
                if (trimed === ""){
                  return trimed;
                }
                if (!isNaN(trimed)) {
                  return parseFloat(trimed);
                } else if (trimed.length === 5 && trimed.toLowerCase() === "false") {
                  return false;
                } else if (trimed.length === 4 && trimed.toLowerCase() === "true") {
                  return true;
                } else if (trimed[0] === "{" && trimed[trimed.length - 1] === "}" || trimed[0] === "[" && trimed[trimed.length - 1]==="]") {
                  try {
                    return JSON.parse(trimed);
                  } catch (e) {
                    return item;
                  }
                } else {
                  return item;
                }
              }
              return item;
            };

            Parser.prototype.setParam = function(param) {
              this.param = param;
            };

            Parser.prototype.test = function(str) {
              return this.regExp && this.regExp.test(str);
            };

            Parser.prototype.parse = function(params) {
              params.resultRow[params.head] = params.item;
            };

            Parser.prototype.getHeadStr = function() {
              if (this.headStr) {
                return this.headStr;
              } else {
                var head = this.head;
                this.headStr = head.replace(this.regExp, '');
                if (!this.headStr) {
                  this.headStr = "Unknown Header";
                }
                return this.getHeadStr();
              }
            };

            Parser.prototype.getHead = function() {
              return this.head;
            };

            Parser.prototype.initHead = function(columnTitle) {
              this.head = columnTitle;
              var wholeHead = columnTitle.replace(this.regExp, '');
              //init type && headStr
              var splitArr = wholeHead.split("#!");
              if (splitArr.length === 1) { //no explicit type
                this.headStr = splitArr[0];
              } else {
                var type = splitArr.shift();
                if (explicitTypes.indexOf(type.toLowerCase()) > -1) {
                  this.type = type;
                  this.headStr = splitArr.join("#!");
                } else { //no explicit type
                  this.headStr = wholeHead;
                }
              }
              if (!this.headStr) {
                this.headStr = wholeHead ? wholeHead : "Unknown Head";
              }
            };

            Parser.prototype.clone = function() {
              var obj = Object.create(this);
              var newParser = new Parser();
              for (var key in obj) {
                newParser[key] = obj[key];
              }
              return newParser;
            };

            Parser.prototype.getName = function() {
              return this.name;
            };

            var parser = Parser;

            var parser_array = {
              "name": "array",
              "processSafe":true,
              "regExp": /^\*array\*/,
              "parserFunc": function parser_array(params) {
                var fieldName = params.head.replace(this.regExp, '');
                if (params.resultRow[fieldName] === undefined) {
                  params.resultRow[fieldName] = [];
                }
                params.resultRow[fieldName].push(params.item);
              }
            };

            var arrReg = /\[([0-9]*)\]/;


            function processHead(pointer, headArr, arrReg, flatKeys) {
              var headStr, match, index;
              while (headArr.length > 1) {
                headStr = headArr.shift();
                // match = headStr.match(arrReg);
                match = flatKeys ? false : headStr.match(arrReg);
                if (match) { //if its array, we need add an empty json object into specified index.
                  if (pointer[headStr.replace(match[0], '')] === undefined) {
                    pointer[headStr.replace(match[0], '')] = [];
                  }
                  index = match[1]; //get index where json object should stay
                  pointer = pointer[headStr.replace(match[0], '')];
                  if (index === '') { //if its dynamic array index, push to the end
                    index = pointer.length;
                  }
                  if (!pointer[index]) { //current index in the array is empty. we need create a new json object.
                    pointer[index] = {};
                  }
                  pointer = pointer[index];
                } else { //not array, just normal JSON object. we get the reference of it
                  if (pointer[headStr] === undefined) {
                    pointer[headStr] = {};
                  }
                  pointer = pointer[headStr];
                }
              }
              return pointer;
            }
            var parser_json = {
              "name": "json",
              "processSafe": true,
              "regExp": /^\*json\*/,
              "parserFunc": function parser_json(params) {
                var fieldStr = this.getHeadStr();
                var headArr = (params.config && params.config.flatKeys) ? [fieldStr] : fieldStr.split('.');
                var match, index, key;
                //now the pointer is pointing the position to add a key/value pair.
                var pointer = processHead(params.resultRow, headArr, arrReg, params.config && params.config.flatKeys);
                key = headArr.shift();
                match = (params.config && params.config.flatKeys) ? false : key.match(arrReg);
                if (match) { // the last element is an array, we need check and treat it as an array.
                  try {
                    key = key.replace(match[0], '');
                    if (!pointer[key] || !(pointer[key] instanceof Array)) {
                      pointer[key] = [];
                    }
                    if (pointer[key]) {
                      index = match[1];
                      if (index === '') {
                        index = pointer[key].length;
                      }
                      pointer[key][index] = params.item;
                    } else {
                      params.resultRow[fieldStr] = params.item;
                    }
                  } catch (e) {
                    params.resultRow[fieldStr] = params.item;
                  }
                } else {
                  if (typeof pointer === "string"){
                    params.resultRow[fieldStr] = params.item;
                  }else{
                    pointer[key] = params.item;
                  }
                }
              }
            };

            var parser_omit = {
              "name": "omit",
              "regExp": /^\*omit\*/,
              "processSafe":true,
              "parserFunc": function parser_omit() {}
            };

            var parser_jsonarray = {
              "name": "jsonarray",
              "processSafe":true,
              "regExp": /^\*jsonarray\*/,
              "parserFunc": function parser_jsonarray (params) {
                var fieldStr = params.head.replace(this.regExp, "");
                var headArr = fieldStr.split('.');
                var pointer = params.resultRow;
                while (headArr.length > 1) {
                  var headStr = headArr.shift();
                  if (pointer[headStr] === undefined) {
                    pointer[headStr] = {};
                  }
                  pointer = pointer[headStr];
                }
                var arrFieldName = headArr.shift();
                if (pointer[arrFieldName] === undefined) {
                  pointer[arrFieldName] = [];
                }
                pointer[arrFieldName].push(params.item);
              }
            };

            var parser_flat = {
              "name": "flat",
              "processSafe": true,
              "regExp": /^\*flat\*/,
              "parserFunc": function parser_flat (params) {
                 var key = this.getHeadStr();
                 var val = params.item;
                 params.resultRow[key] = val;
              }
            };

            var defaultParsers = [
              parser_array,
              parser_json,
              parser_omit,
              parser_jsonarray,
              parser_flat
            ];

            //implementation
            var registeredParsers = [];



            function registerParser (parser$$1) {
              if (parser$$1 instanceof parser && registeredParsers.indexOf(parser$$1) === -1) {
                registeredParsers.push(parser$$1); // TODO indexOf doesn't work with object references
              }
            }

            function getParser(columnTitle, param) {
              var inst, parser$$1;
              function getParserByName(parserName) {
                var parser$$1;
                registeredParsers.forEach(function(p){
                  if (p.getName() === parserName){
                    parser$$1 = p;
                  }
                });
                if (parser$$1) {
                  var inst = parser$$1.clone();
                  return inst;
                }
                return new parser(); //TODO remove new
              }
              columnTitle = columnTitle ? columnTitle : '';
              registeredParsers.forEach(function(p) {
                if (p.test(columnTitle)) {
                  parser$$1=p;
                }
              });
              if (parser$$1) {
                inst = parser$$1.clone();
                inst.head = columnTitle;
              } else {
                inst = getParserByName("json", columnTitle);
              }
              inst.setParam(param);
              inst.initHead(columnTitle);
              return inst;
            }

            function addParser(name, regExp, parseFunc) {
              var parser$$1 = new parser(name, regExp, parseFunc,false); //TODO remove new
              registerParser(parser$$1);
            }

            function initParsers(row, param) {
              var parsers = [];
              row.forEach(function (columnTitle) {
                parsers.push(getParser(columnTitle, param));
              });
              return parsers;
            }

            defaultParsers.forEach(function (parserCfg){
              //TODO refactor this
              addParser(parserCfg.name, parserCfg.regExp, parserCfg.parserFunc, parserCfg.processSafe);
            });

            //module interfaces
            var addParser_1 = addParser;
            var initParsers_1 = initParsers;
            var getParser_1 = getParser;

            var parserMgr = {
            	addParser: addParser_1,
            	initParsers: initParsers_1,
            	getParser: getParser_1
            };

            var CSVError_1 = CSVError;
            function CSVError(err, index, extra) {
              Error.call(this, "");
              this.err = err;
              this.line = index;
              this.extra = extra;
              this.message = "Error: " + err + ". JSON Line number: " + index + (extra ? " near: " + extra : "");
              this.name = "CSV Error";
            }
            util$2.inherits(CSVError, Error);

            CSVError.prototype.toString = function() {
              return JSON.stringify([this.err, this.line, this.extra]);
            };

            CSVError.column_mismatched = function(index, extra) {
              return new CSVError("column_mismatched", index, extra);
            };

            CSVError.unclosed_quote = function(index, extra) {
              return new CSVError("unclosed_quote", index, extra);
            };

            CSVError.fromArray = function(arr) {
              return new CSVError(arr[0], arr[1], arr[2]);
            };

            /** Detect free variable `global` from Node.js. */
            var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

            var _freeGlobal = freeGlobal;

            /** Detect free variable `self`. */
            var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

            /** Used as a reference to the global object. */
            var root = _freeGlobal || freeSelf || Function('return this')();

            var _root = root;

            /** Built-in value references. */
            var Symbol$1 = _root.Symbol;

            var _Symbol = Symbol$1;

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty$2 = objectProto.hasOwnProperty;

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /** Built-in value references. */
            var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */
            function getRawTag(value) {
              var isOwn = hasOwnProperty$2.call(value, symToStringTag),
                  tag = value[symToStringTag];

              try {
                value[symToStringTag] = undefined;
              } catch (e) {}

              var result = nativeObjectToString.call(value);
              {
                if (isOwn) {
                  value[symToStringTag] = tag;
                } else {
                  delete value[symToStringTag];
                }
              }
              return result;
            }

            var _getRawTag = getRawTag;

            /** Used for built-in method references. */
            var objectProto$1 = Object.prototype;

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString$1 = objectProto$1.toString;

            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */
            function objectToString$1(value) {
              return nativeObjectToString$1.call(value);
            }

            var _objectToString = objectToString$1;

            /** `Object#toString` result references. */
            var nullTag = '[object Null]',
                undefinedTag = '[object Undefined]';

            /** Built-in value references. */
            var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            function baseGetTag(value) {
              if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
              }
              return (symToStringTag$1 && symToStringTag$1 in Object(value))
                ? _getRawTag(value)
                : _objectToString(value);
            }

            var _baseGetTag = baseGetTag;

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject$1(value) {
              var type = typeof value;
              return value != null && (type == 'object' || type == 'function');
            }

            var isObject_1 = isObject$1;

            /** `Object#toString` result references. */
            var asyncTag = '[object AsyncFunction]',
                funcTag = '[object Function]',
                genTag = '[object GeneratorFunction]',
                proxyTag = '[object Proxy]';

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction$2(value) {
              if (!isObject_1(value)) {
                return false;
              }
              // The use of `Object#toString` avoids issues with the `typeof` operator
              // in Safari 9 which returns 'object' for typed arrays and other constructors.
              var tag = _baseGetTag(value);
              return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
            }

            var isFunction_1 = isFunction$2;

            /** Used to detect overreaching core-js shims. */
            var coreJsData = _root['__core-js_shared__'];

            var _coreJsData = coreJsData;

            /** Used to detect methods masquerading as native. */
            var maskSrcKey = (function() {
              var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
              return uid ? ('Symbol(src)_1.' + uid) : '';
            }());

            /**
             * Checks if `func` has its source masked.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
             */
            function isMasked(func) {
              return !!maskSrcKey && (maskSrcKey in func);
            }

            var _isMasked = isMasked;

            /** Used for built-in method references. */
            var funcProto = Function.prototype;

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /**
             * Converts `func` to its source code.
             *
             * @private
             * @param {Function} func The function to convert.
             * @returns {string} Returns the source code.
             */
            function toSource(func) {
              if (func != null) {
                try {
                  return funcToString.call(func);
                } catch (e) {}
                try {
                  return (func + '');
                } catch (e) {}
              }
              return '';
            }

            var _toSource = toSource;

            /**
             * Used to match `RegExp`
             * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
             */
            var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

            /** Used to detect host constructors (Safari). */
            var reIsHostCtor = /^\[object .+?Constructor\]$/;

            /** Used for built-in method references. */
            var funcProto$1 = Function.prototype,
                objectProto$2 = Object.prototype;

            /** Used to resolve the decompiled source of functions. */
            var funcToString$1 = funcProto$1.toString;

            /** Used to check objects for own properties. */
            var hasOwnProperty$3 = objectProto$2.hasOwnProperty;

            /** Used to detect if a method is native. */
            var reIsNative = RegExp('^' +
              funcToString$1.call(hasOwnProperty$3).replace(reRegExpChar, '\\$&')
              .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
            );

            /**
             * The base implementation of `_.isNative` without bad shim checks.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             */
            function baseIsNative(value) {
              if (!isObject_1(value) || _isMasked(value)) {
                return false;
              }
              var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
              return pattern.test(_toSource(value));
            }

            var _baseIsNative = baseIsNative;

            /**
             * Gets the value at `key` of `object`.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function getValue(object, key) {
              return object == null ? undefined : object[key];
            }

            var _getValue = getValue;

            /**
             * Gets the native function at `key` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the method to get.
             * @returns {*} Returns the function if it's native, else `undefined`.
             */
            function getNative(object, key) {
              var value = _getValue(object, key);
              return _baseIsNative(value) ? value : undefined;
            }

            var _getNative = getNative;

            var defineProperty = (function() {
              try {
                var func = _getNative(Object, 'defineProperty');
                func({}, '', {});
                return func;
              } catch (e) {}
            }());

            var _defineProperty = defineProperty;

            /**
             * The base implementation of `assignValue` and `assignMergeValue` without
             * value checks.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function baseAssignValue(object, key, value) {
              if (key == '__proto__' && _defineProperty) {
                _defineProperty(object, key, {
                  'configurable': true,
                  'enumerable': true,
                  'value': value,
                  'writable': true
                });
              } else {
                object[key] = value;
              }
            }

            var _baseAssignValue = baseAssignValue;

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq(value, other) {
              return value === other || (value !== value && other !== other);
            }

            var eq_1 = eq;

            /** Used for built-in method references. */
            var objectProto$3 = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty$4 = objectProto$3.hasOwnProperty;

            /**
             * Assigns `value` to `key` of `object` if the existing value is not equivalent
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignValue(object, key, value) {
              var objValue = object[key];
              if (!(hasOwnProperty$4.call(object, key) && eq_1(objValue, value)) ||
                  (value === undefined && !(key in object))) {
                _baseAssignValue(object, key, value);
              }
            }

            var _assignValue = assignValue;

            /**
             * Checks if `value` is classified as an `Array` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
             * @example
             *
             * _.isArray([1, 2, 3]);
             * // => true
             *
             * _.isArray(document.body.children);
             * // => false
             *
             * _.isArray('abc');
             * // => false
             *
             * _.isArray(_.noop);
             * // => false
             */
            var isArray$3 = Array.isArray;

            var isArray_1 = isArray$3;

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike(value) {
              return value != null && typeof value == 'object';
            }

            var isObjectLike_1 = isObjectLike;

            /** `Object#toString` result references. */
            var symbolTag = '[object Symbol]';

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol$1(value) {
              return typeof value == 'symbol' ||
                (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);
            }

            var isSymbol_1 = isSymbol$1;

            /** Used to match property names within property paths. */
            var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                reIsPlainProp = /^\w*$/;

            /**
             * Checks if `value` is a property name and not a property path.
             *
             * @private
             * @param {*} value The value to check.
             * @param {Object} [object] The object to query keys on.
             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
             */
            function isKey(value, object) {
              if (isArray_1(value)) {
                return false;
              }
              var type = typeof value;
              if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                  value == null || isSymbol_1(value)) {
                return true;
              }
              return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                (object != null && value in Object(object));
            }

            var _isKey = isKey;

            /* Built-in method references that are verified to be native. */
            var nativeCreate = _getNative(Object, 'create');

            var _nativeCreate = nativeCreate;

            /**
             * Removes all key-value entries from the hash.
             *
             * @private
             * @name clear
             * @memberOf Hash
             */
            function hashClear() {
              this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
              this.size = 0;
            }

            var _hashClear = hashClear;

            /**
             * Removes `key` and its value from the hash.
             *
             * @private
             * @name delete
             * @memberOf Hash
             * @param {Object} hash The hash to modify.
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function hashDelete(key) {
              var result = this.has(key) && delete this.__data__[key];
              this.size -= result ? 1 : 0;
              return result;
            }

            var _hashDelete = hashDelete;

            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED = '__lodash_hash_undefined__';

            /** Used for built-in method references. */
            var objectProto$4 = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty$5 = objectProto$4.hasOwnProperty;

            /**
             * Gets the hash value for `key`.
             *
             * @private
             * @name get
             * @memberOf Hash
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function hashGet(key) {
              var data = this.__data__;
              if (_nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
              }
              return hasOwnProperty$5.call(data, key) ? data[key] : undefined;
            }

            var _hashGet = hashGet;

            /** Used for built-in method references. */
            var objectProto$5 = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty$6 = objectProto$5.hasOwnProperty;

            /**
             * Checks if a hash value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Hash
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function hashHas(key) {
              var data = this.__data__;
              return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$6.call(data, key);
            }

            var _hashHas = hashHas;

            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

            /**
             * Sets the hash `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Hash
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the hash instance.
             */
            function hashSet(key, value) {
              var data = this.__data__;
              this.size += this.has(key) ? 0 : 1;
              data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
              return this;
            }

            var _hashSet = hashSet;

            /**
             * Creates a hash object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Hash(entries) {
              var index = -1,
                  length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            // Add methods to `Hash`.
            Hash.prototype.clear = _hashClear;
            Hash.prototype['delete'] = _hashDelete;
            Hash.prototype.get = _hashGet;
            Hash.prototype.has = _hashHas;
            Hash.prototype.set = _hashSet;

            var _Hash = Hash;

            /**
             * Removes all key-value entries from the list cache.
             *
             * @private
             * @name clear
             * @memberOf ListCache
             */
            function listCacheClear() {
              this.__data__ = [];
              this.size = 0;
            }

            var _listCacheClear = listCacheClear;

            /**
             * Gets the index at which the `key` is found in `array` of key-value pairs.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} key The key to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function assocIndexOf(array, key) {
              var length = array.length;
              while (length--) {
                if (eq_1(array[length][0], key)) {
                  return length;
                }
              }
              return -1;
            }

            var _assocIndexOf = assocIndexOf;

            /** Used for built-in method references. */
            var arrayProto = Array.prototype;

            /** Built-in value references. */
            var splice = arrayProto.splice;

            /**
             * Removes `key` and its value from the list cache.
             *
             * @private
             * @name delete
             * @memberOf ListCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function listCacheDelete(key) {
              var data = this.__data__,
                  index = _assocIndexOf(data, key);

              if (index < 0) {
                return false;
              }
              var lastIndex = data.length - 1;
              if (index == lastIndex) {
                data.pop();
              } else {
                splice.call(data, index, 1);
              }
              --this.size;
              return true;
            }

            var _listCacheDelete = listCacheDelete;

            /**
             * Gets the list cache value for `key`.
             *
             * @private
             * @name get
             * @memberOf ListCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function listCacheGet(key) {
              var data = this.__data__,
                  index = _assocIndexOf(data, key);

              return index < 0 ? undefined : data[index][1];
            }

            var _listCacheGet = listCacheGet;

            /**
             * Checks if a list cache value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf ListCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function listCacheHas(key) {
              return _assocIndexOf(this.__data__, key) > -1;
            }

            var _listCacheHas = listCacheHas;

            /**
             * Sets the list cache `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf ListCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the list cache instance.
             */
            function listCacheSet(key, value) {
              var data = this.__data__,
                  index = _assocIndexOf(data, key);

              if (index < 0) {
                ++this.size;
                data.push([key, value]);
              } else {
                data[index][1] = value;
              }
              return this;
            }

            var _listCacheSet = listCacheSet;

            /**
             * Creates an list cache object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function ListCache(entries) {
              var index = -1,
                  length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            // Add methods to `ListCache`.
            ListCache.prototype.clear = _listCacheClear;
            ListCache.prototype['delete'] = _listCacheDelete;
            ListCache.prototype.get = _listCacheGet;
            ListCache.prototype.has = _listCacheHas;
            ListCache.prototype.set = _listCacheSet;

            var _ListCache = ListCache;

            /* Built-in method references that are verified to be native. */
            var Map$1 = _getNative(_root, 'Map');

            var _Map = Map$1;

            /**
             * Removes all key-value entries from the map.
             *
             * @private
             * @name clear
             * @memberOf MapCache
             */
            function mapCacheClear() {
              this.size = 0;
              this.__data__ = {
                'hash': new _Hash,
                'map': new (_Map || _ListCache),
                'string': new _Hash
              };
            }

            var _mapCacheClear = mapCacheClear;

            /**
             * Checks if `value` is suitable for use as unique object key.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
             */
            function isKeyable(value) {
              var type = typeof value;
              return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
                ? (value !== '__proto__')
                : (value === null);
            }

            var _isKeyable = isKeyable;

            /**
             * Gets the data for `map`.
             *
             * @private
             * @param {Object} map The map to query.
             * @param {string} key The reference key.
             * @returns {*} Returns the map data.
             */
            function getMapData(map, key) {
              var data = map.__data__;
              return _isKeyable(key)
                ? data[typeof key == 'string' ? 'string' : 'hash']
                : data.map;
            }

            var _getMapData = getMapData;

            /**
             * Removes `key` and its value from the map.
             *
             * @private
             * @name delete
             * @memberOf MapCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function mapCacheDelete(key) {
              var result = _getMapData(this, key)['delete'](key);
              this.size -= result ? 1 : 0;
              return result;
            }

            var _mapCacheDelete = mapCacheDelete;

            /**
             * Gets the map value for `key`.
             *
             * @private
             * @name get
             * @memberOf MapCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function mapCacheGet(key) {
              return _getMapData(this, key).get(key);
            }

            var _mapCacheGet = mapCacheGet;

            /**
             * Checks if a map value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf MapCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function mapCacheHas(key) {
              return _getMapData(this, key).has(key);
            }

            var _mapCacheHas = mapCacheHas;

            /**
             * Sets the map `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf MapCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the map cache instance.
             */
            function mapCacheSet(key, value) {
              var data = _getMapData(this, key),
                  size = data.size;

              data.set(key, value);
              this.size += data.size == size ? 0 : 1;
              return this;
            }

            var _mapCacheSet = mapCacheSet;

            /**
             * Creates a map cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function MapCache(entries) {
              var index = -1,
                  length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            // Add methods to `MapCache`.
            MapCache.prototype.clear = _mapCacheClear;
            MapCache.prototype['delete'] = _mapCacheDelete;
            MapCache.prototype.get = _mapCacheGet;
            MapCache.prototype.has = _mapCacheHas;
            MapCache.prototype.set = _mapCacheSet;

            var _MapCache = MapCache;

            /** Error message constants. */
            var FUNC_ERROR_TEXT = 'Expected a function';

            /**
             * Creates a function that memoizes the result of `func`. If `resolver` is
             * provided, it determines the cache key for storing the result based on the
             * arguments provided to the memoized function. By default, the first argument
             * provided to the memoized function is used as the map cache key. The `func`
             * is invoked with the `this` binding of the memoized function.
             *
             * **Note:** The cache is exposed as the `cache` property on the memoized
             * function. Its creation may be customized by replacing the `_.memoize.Cache`
             * constructor with one whose instances implement the
             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to have its output memoized.
             * @param {Function} [resolver] The function to resolve the cache key.
             * @returns {Function} Returns the new memoized function.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             * var other = { 'c': 3, 'd': 4 };
             *
             * var values = _.memoize(_.values);
             * values(object);
             * // => [1, 2]
             *
             * values(other);
             * // => [3, 4]
             *
             * object.a = 2;
             * values(object);
             * // => [1, 2]
             *
             * // Modify the result cache.
             * values.cache.set(object, ['a', 'b']);
             * values(object);
             * // => ['a', 'b']
             *
             * // Replace `_.memoize.Cache`.
             * _.memoize.Cache = WeakMap;
             */
            function memoize(func, resolver) {
              if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              var memoized = function() {
                var args = arguments,
                    key = resolver ? resolver.apply(this, args) : args[0],
                    cache = memoized.cache;

                if (cache.has(key)) {
                  return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
              };
              memoized.cache = new (memoize.Cache || _MapCache);
              return memoized;
            }

            // Expose `MapCache`.
            memoize.Cache = _MapCache;

            var memoize_1 = memoize;

            /** Used as the maximum memoize cache size. */
            var MAX_MEMOIZE_SIZE = 500;

            /**
             * A specialized version of `_.memoize` which clears the memoized function's
             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
             *
             * @private
             * @param {Function} func The function to have its output memoized.
             * @returns {Function} Returns the new memoized function.
             */
            function memoizeCapped(func) {
              var result = memoize_1(func, function(key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                  cache.clear();
                }
                return key;
              });

              var cache = result.cache;
              return result;
            }

            var _memoizeCapped = memoizeCapped;

            /** Used to match property names within property paths. */
            var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

            /** Used to match backslashes in property paths. */
            var reEscapeChar = /\\(\\)?/g;

            /**
             * Converts `string` to a property path array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the property path array.
             */
            var stringToPath = _memoizeCapped(function(string) {
              var result = [];
              if (string.charCodeAt(0) === 46 /* . */) {
                result.push('');
              }
              string.replace(rePropName, function(match, number, quote, subString) {
                result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
              });
              return result;
            });

            var _stringToPath = stringToPath;

            /**
             * A specialized version of `_.map` for arrays without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function arrayMap(array, iteratee) {
              var index = -1,
                  length = array == null ? 0 : array.length,
                  result = Array(length);

              while (++index < length) {
                result[index] = iteratee(array[index], index, array);
              }
              return result;
            }

            var _arrayMap = arrayMap;

            /** Used as references for various `Number` constants. */
            var INFINITY = 1 / 0;

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = _Symbol ? _Symbol.prototype : undefined,
                symbolToString = symbolProto ? symbolProto.toString : undefined;

            /**
             * The base implementation of `_.toString` which doesn't convert nullish
             * values to empty strings.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {string} Returns the string.
             */
            function baseToString(value) {
              // Exit early for strings to avoid a performance hit in some environments.
              if (typeof value == 'string') {
                return value;
              }
              if (isArray_1(value)) {
                // Recursively convert values (susceptible to call stack limits).
                return _arrayMap(value, baseToString) + '';
              }
              if (isSymbol_1(value)) {
                return symbolToString ? symbolToString.call(value) : '';
              }
              var result = (value + '');
              return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
            }

            var _baseToString = baseToString;

            /**
             * Converts `value` to a string. An empty string is returned for `null`
             * and `undefined` values. The sign of `-0` is preserved.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.toString(null);
             * // => ''
             *
             * _.toString(-0);
             * // => '-0'
             *
             * _.toString([1, 2, 3]);
             * // => '1,2,3'
             */
            function toString$1(value) {
              return value == null ? '' : _baseToString(value);
            }

            var toString_1 = toString$1;

            /**
             * Casts `value` to a path array if it's not one.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {Object} [object] The object to query keys on.
             * @returns {Array} Returns the cast property path array.
             */
            function castPath(value, object) {
              if (isArray_1(value)) {
                return value;
              }
              return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
            }

            var _castPath = castPath;

            /** Used as references for various `Number` constants. */
            var MAX_SAFE_INTEGER = 9007199254740991;

            /** Used to detect unsigned integer values. */
            var reIsUint = /^(?:0|[1-9]\d*)$/;

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex(value, length) {
              var type = typeof value;
              length = length == null ? MAX_SAFE_INTEGER : length;

              return !!length &&
                (type == 'number' ||
                  (type != 'symbol' && reIsUint.test(value))) &&
                    (value > -1 && value % 1 == 0 && value < length);
            }

            var _isIndex = isIndex;

            /** Used as references for various `Number` constants. */
            var INFINITY$1 = 1 / 0;

            /**
             * Converts `value` to a string key if it's not a string or symbol.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {string|symbol} Returns the key.
             */
            function toKey(value) {
              if (typeof value == 'string' || isSymbol_1(value)) {
                return value;
              }
              var result = (value + '');
              return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
            }

            var _toKey = toKey;

            /**
             * The base implementation of `_.set`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseSet(object, path, value, customizer) {
              if (!isObject_1(object)) {
                return object;
              }
              path = _castPath(path, object);

              var index = -1,
                  length = path.length,
                  lastIndex = length - 1,
                  nested = object;

              while (nested != null && ++index < length) {
                var key = _toKey(path[index]),
                    newValue = value;

                if (index != lastIndex) {
                  var objValue = nested[key];
                  newValue = customizer ? customizer(objValue, key, nested) : undefined;
                  if (newValue === undefined) {
                    newValue = isObject_1(objValue)
                      ? objValue
                      : (_isIndex(path[index + 1]) ? [] : {});
                  }
                }
                _assignValue(nested, key, newValue);
                nested = nested[key];
              }
              return object;
            }

            var _baseSet = baseSet;

            /**
             * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
             * it's created. Arrays are created for missing index properties while objects
             * are created for all other missing properties. Use `_.setWith` to customize
             * `path` creation.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.set(object, 'a[0].b.c', 4);
             * console.log(object.a[0].b.c);
             * // => 4
             *
             * _.set(object, ['x', '0', 'y', 'z'], 5);
             * console.log(object.x[0].y.z);
             * // => 5
             */
            function set(object, path, value) {
              return object == null ? object : _baseSet(object, path, value);
            }

            var set_1 = set;

            var numReg = /^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$/;
            /**
             * Convert lines of csv array into json
             * @param  {[type]} lines  [[col1,col2,col3]]
             * @param  {[type]} params Converter params with _headers field populated
             * @param  {[type]} idx start pos of the lines
             * @return {[type]}   [{err:null,json:obj,index:line,row:[csv row]}]
             */
            var linesToJson = function (lines, params, idx) {
              if (params._needParseJson) {
                if (!params._headers) {
                  params._headers = [];
                }
                if (!params.parseRules) {
                  var row = params._headers;
                  params.parseRules = parserMgr.initParsers(row, params);
                }
                return processRows(lines, params, idx);
              } else {
                return justReturnRows(lines, params, idx);
              }
            };

            function justReturnRows(lines, params, idx) {
              var rtn = [];
              for (var i = 0, len = lines.length; i < len; i++) {
                rtn.push({
                  err: null,
                  json: {},
                  index: idx++,
                  row: lines[i]
                });
              }
              return rtn;
            }

            function processRows(csvRows, params, startIndex) {
              var res = [];
              for (var i = 0, len = csvRows.length; i < len; i++) {
                var r = processRow(csvRows[i], params, startIndex++);
                if (r) {
                  res.push(r);
                }
              }
              return res;
            }

            function processRow(row, param, index) {
              var parseRules = param.parseRules;
              if (param.checkColumn && row.length !== parseRules.length) {
                return {
                  err: CSVError_1.column_mismatched(index)
                };
              }

              var headRow = param._headers;
              var resultRow = convertRowToJson(row, headRow, param);
              if (resultRow) {
                return {
                  json: resultRow,
                  index: index,
                  row: row
                };
              } else {
                return null;
              }
            }

            function convertRowToJson(row, headRow, param) {
              var hasValue = false;
              var resultRow = {};

              for (var i = 0, len = row.length; i < len; i++) {
                var convertFunc, head, item;
                item = row[i];

                if (param.ignoreEmpty && item === '') {
                  continue;
                }
                hasValue = true;

                head = headRow[i];
                if (!head || head === "") {
                  head = headRow[i] = "field" + (i + 1);
                }
                var convFunc = getConvFunc(head, i, param);
                if (convFunc) {
                  var convRes = convFunc(item, head, resultRow,row,i);
                  if (convRes !== undefined) {
                    setPath(resultRow, head, convRes);
                  }
                } else {
                  var flag = getFlag(head, i, param);
                  if (flag === 'omit') {
                    continue;
                  }
                  if (param.checkType) {
                    convertFunc = checkType(item, head, i, param);
                    item = convertFunc(item);
                  }
                  var title = getTitle(head, i, param);
                  if (flag === 'flat' || param.flatKeys) {
                    resultRow[title] = item;
                  } else {
                    setPath(resultRow, title, item);
                  }
                }
              }
              if (hasValue) {
                return resultRow;
              } else {
                return false;
              }
            }

            var builtInConv={
              "string":stringType,
              "number":numberType,
              "omit":function(){}
            };
            function getConvFunc(head,i,param){
              if (param._columnConv[i] !== undefined){
                return param._columnConv[i];
              }else{
                var flag=param.colParser[head];
                if (flag === undefined){
                  return param._columnConv[i]=false;
                }
                if (typeof flag ==="string"){
                  flag=flag.trim().toLowerCase();
                  var builtInFunc=builtInConv[flag];
                  if (builtInFunc){
                    return param._columnConv[i]=builtInFunc;
                  }else{
                    return param._columnConv[i]=false;  
                  }
                }else if (typeof flag ==="function"){
                  return param._columnConv[i]=flag;
                }else{
                  return param._columnConv[i]=false;
                }
              }
            }
            function setPath(json, path, value) {
              var _set = set_1;
              var pathArr = path.split('.');
              if (pathArr.length === 1) {
                json[path] = value;
              } else {
                _set(json, path, value);
              }
            }

            function getFlag(head, i, param) {
              if (typeof param._headerFlag[i] === "string") {
                return param._headerFlag[i];
              } else if (head.indexOf('*omit*') > -1) {
                return param._headerFlag[i] = 'omit';
              } else if (head.indexOf('*flat*') > -1) {
                return param._headerFlag[i] = 'flat';
              } else {
                return param._headerFlag[i] = '';
              }
            }

            function getTitle(head, i, param) {
              if (param._headerTitle[i]) {
                return param._headerTitle[i];
              }

              var flag = getFlag(head, i, param);
              var str = head.replace('*flat*', '').replace('string#!', '').replace('number#!', '');
              return param._headerTitle[i] = str;
            }

            function checkType(item, head, headIdx, param) {
              if (param._headerType[headIdx]) {
                return param._headerType[headIdx];
              } else if (head.indexOf('number#!') > -1) {
                return param._headerType[headIdx] = numberType;
              } else if (head.indexOf('string#!') > -1) {
                return param._headerType[headIdx] = stringType;
              } else if (param.checkType) {
                return param._headerType[headIdx] = dynamicType;
              } else {
                return param._headerType[headIdx] = stringType;
              }
            }

            function numberType(item) {
              var rtn = parseFloat(item);
              if (isNaN(rtn)) {
                return item;
              }
              return rtn;
            }

            function stringType(item) {
              return item.toString();
            }

            function dynamicType(item) {
              var trimed = item.trim();
              if (trimed === "") {
                return stringType(item);
              }
              if (numReg.test(trimed)) {
                return numberType(item);
              } else if (trimed.length === 5 && trimed.toLowerCase() === "false" || trimed.length === 4 && trimed.toLowerCase() === "true") {
                return booleanType(item);
              } else if (trimed[0] === "{" && trimed[trimed.length - 1] === "}" || trimed[0] === "[" && trimed[trimed.length - 1] === "]") {
                return jsonType(item);
              } else {
                return stringType(item);
              }
            }

            function booleanType(item) {
              var trimed = item.trim();
              if (trimed.length === 5 && trimed.toLowerCase() === "false") {
                return false;
              } else {
                return true;
              }
            }

            function jsonType(item) {
              try {
                return JSON.parse(item);
              } catch (e) {
                return item;
              }
            }

            var lodash = createCommonjsModule(function (module, exports) {
            (function() {

              /** Used as a safe reference for `undefined` in pre-ES5 environments. */
              var undefined;

              /** Used as the semantic version number. */
              var VERSION = '4.17.10';

              /** Used as the size to enable large array optimizations. */
              var LARGE_ARRAY_SIZE = 200;

              /** Error message constants. */
              var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
                  FUNC_ERROR_TEXT = 'Expected a function';

              /** Used to stand-in for `undefined` hash values. */
              var HASH_UNDEFINED = '__lodash_hash_undefined__';

              /** Used as the maximum memoize cache size. */
              var MAX_MEMOIZE_SIZE = 500;

              /** Used as the internal argument placeholder. */
              var PLACEHOLDER = '__lodash_placeholder__';

              /** Used to compose bitmasks for cloning. */
              var CLONE_DEEP_FLAG = 1,
                  CLONE_FLAT_FLAG = 2,
                  CLONE_SYMBOLS_FLAG = 4;

              /** Used to compose bitmasks for value comparisons. */
              var COMPARE_PARTIAL_FLAG = 1,
                  COMPARE_UNORDERED_FLAG = 2;

              /** Used to compose bitmasks for function metadata. */
              var WRAP_BIND_FLAG = 1,
                  WRAP_BIND_KEY_FLAG = 2,
                  WRAP_CURRY_BOUND_FLAG = 4,
                  WRAP_CURRY_FLAG = 8,
                  WRAP_CURRY_RIGHT_FLAG = 16,
                  WRAP_PARTIAL_FLAG = 32,
                  WRAP_PARTIAL_RIGHT_FLAG = 64,
                  WRAP_ARY_FLAG = 128,
                  WRAP_REARG_FLAG = 256,
                  WRAP_FLIP_FLAG = 512;

              /** Used as default options for `_.truncate`. */
              var DEFAULT_TRUNC_LENGTH = 30,
                  DEFAULT_TRUNC_OMISSION = '...';

              /** Used to detect hot functions by number of calls within a span of milliseconds. */
              var HOT_COUNT = 800,
                  HOT_SPAN = 16;

              /** Used to indicate the type of lazy iteratees. */
              var LAZY_FILTER_FLAG = 1,
                  LAZY_MAP_FLAG = 2,
                  LAZY_WHILE_FLAG = 3;

              /** Used as references for various `Number` constants. */
              var INFINITY = 1 / 0,
                  MAX_SAFE_INTEGER = 9007199254740991,
                  MAX_INTEGER = 1.7976931348623157e+308,
                  NAN = 0 / 0;

              /** Used as references for the maximum length and index of an array. */
              var MAX_ARRAY_LENGTH = 4294967295,
                  MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
                  HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

              /** Used to associate wrap methods with their bit flags. */
              var wrapFlags = [
                ['ary', WRAP_ARY_FLAG],
                ['bind', WRAP_BIND_FLAG],
                ['bindKey', WRAP_BIND_KEY_FLAG],
                ['curry', WRAP_CURRY_FLAG],
                ['curryRight', WRAP_CURRY_RIGHT_FLAG],
                ['flip', WRAP_FLIP_FLAG],
                ['partial', WRAP_PARTIAL_FLAG],
                ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
                ['rearg', WRAP_REARG_FLAG]
              ];

              /** `Object#toString` result references. */
              var argsTag = '[object Arguments]',
                  arrayTag = '[object Array]',
                  asyncTag = '[object AsyncFunction]',
                  boolTag = '[object Boolean]',
                  dateTag = '[object Date]',
                  domExcTag = '[object DOMException]',
                  errorTag = '[object Error]',
                  funcTag = '[object Function]',
                  genTag = '[object GeneratorFunction]',
                  mapTag = '[object Map]',
                  numberTag = '[object Number]',
                  nullTag = '[object Null]',
                  objectTag = '[object Object]',
                  promiseTag = '[object Promise]',
                  proxyTag = '[object Proxy]',
                  regexpTag = '[object RegExp]',
                  setTag = '[object Set]',
                  stringTag = '[object String]',
                  symbolTag = '[object Symbol]',
                  undefinedTag = '[object Undefined]',
                  weakMapTag = '[object WeakMap]',
                  weakSetTag = '[object WeakSet]';

              var arrayBufferTag = '[object ArrayBuffer]',
                  dataViewTag = '[object DataView]',
                  float32Tag = '[object Float32Array]',
                  float64Tag = '[object Float64Array]',
                  int8Tag = '[object Int8Array]',
                  int16Tag = '[object Int16Array]',
                  int32Tag = '[object Int32Array]',
                  uint8Tag = '[object Uint8Array]',
                  uint8ClampedTag = '[object Uint8ClampedArray]',
                  uint16Tag = '[object Uint16Array]',
                  uint32Tag = '[object Uint32Array]';

              /** Used to match empty string literals in compiled template source. */
              var reEmptyStringLeading = /\b__p \+= '';/g,
                  reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
                  reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

              /** Used to match HTML entities and HTML characters. */
              var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
                  reUnescapedHtml = /[&<>"']/g,
                  reHasEscapedHtml = RegExp(reEscapedHtml.source),
                  reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

              /** Used to match template delimiters. */
              var reEscape = /<%-([\s\S]+?)%>/g,
                  reEvaluate = /<%([\s\S]+?)%>/g,
                  reInterpolate = /<%=([\s\S]+?)%>/g;

              /** Used to match property names within property paths. */
              var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                  reIsPlainProp = /^\w*$/,
                  rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

              /**
               * Used to match `RegExp`
               * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
               */
              var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
                  reHasRegExpChar = RegExp(reRegExpChar.source);

              /** Used to match leading and trailing whitespace. */
              var reTrim = /^\s+|\s+$/g,
                  reTrimStart = /^\s+/,
                  reTrimEnd = /\s+$/;

              /** Used to match wrap detail comments. */
              var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
                  reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
                  reSplitDetails = /,? & /;

              /** Used to match words composed of alphanumeric characters. */
              var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

              /** Used to match backslashes in property paths. */
              var reEscapeChar = /\\(\\)?/g;

              /**
               * Used to match
               * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
               */
              var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

              /** Used to match `RegExp` flags from their coerced string values. */
              var reFlags = /\w*$/;

              /** Used to detect bad signed hexadecimal string values. */
              var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

              /** Used to detect binary string values. */
              var reIsBinary = /^0b[01]+$/i;

              /** Used to detect host constructors (Safari). */
              var reIsHostCtor = /^\[object .+?Constructor\]$/;

              /** Used to detect octal string values. */
              var reIsOctal = /^0o[0-7]+$/i;

              /** Used to detect unsigned integer values. */
              var reIsUint = /^(?:0|[1-9]\d*)$/;

              /** Used to match Latin Unicode letters (excluding mathematical operators). */
              var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

              /** Used to ensure capturing order of template delimiters. */
              var reNoMatch = /($^)/;

              /** Used to match unescaped characters in compiled string literals. */
              var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

              /** Used to compose unicode character classes. */
              var rsAstralRange = '\\ud800-\\udfff',
                  rsComboMarksRange = '\\u0300-\\u036f',
                  reComboHalfMarksRange = '\\ufe20-\\ufe2f',
                  rsComboSymbolsRange = '\\u20d0-\\u20ff',
                  rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
                  rsDingbatRange = '\\u2700-\\u27bf',
                  rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
                  rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
                  rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
                  rsPunctuationRange = '\\u2000-\\u206f',
                  rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
                  rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
                  rsVarRange = '\\ufe0e\\ufe0f',
                  rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

              /** Used to compose unicode capture groups. */
              var rsApos = "['\u2019]",
                  rsAstral = '[' + rsAstralRange + ']',
                  rsBreak = '[' + rsBreakRange + ']',
                  rsCombo = '[' + rsComboRange + ']',
                  rsDigits = '\\d+',
                  rsDingbat = '[' + rsDingbatRange + ']',
                  rsLower = '[' + rsLowerRange + ']',
                  rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
                  rsFitz = '\\ud83c[\\udffb-\\udfff]',
                  rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
                  rsNonAstral = '[^' + rsAstralRange + ']',
                  rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
                  rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
                  rsUpper = '[' + rsUpperRange + ']',
                  rsZWJ = '\\u200d';

              /** Used to compose unicode regexes. */
              var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
                  rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
                  rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
                  rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
                  reOptMod = rsModifier + '?',
                  rsOptVar = '[' + rsVarRange + ']?',
                  rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
                  rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
                  rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
                  rsSeq = rsOptVar + reOptMod + rsOptJoin,
                  rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
                  rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

              /** Used to match apostrophes. */
              var reApos = RegExp(rsApos, 'g');

              /**
               * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
               * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
               */
              var reComboMark = RegExp(rsCombo, 'g');

              /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
              var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

              /** Used to match complex or compound words. */
              var reUnicodeWord = RegExp([
                rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
                rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
                rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
                rsUpper + '+' + rsOptContrUpper,
                rsOrdUpper,
                rsOrdLower,
                rsDigits,
                rsEmoji
              ].join('|'), 'g');

              /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
              var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

              /** Used to detect strings that need a more robust regexp to match words. */
              var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

              /** Used to assign default `context` object properties. */
              var contextProps = [
                'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
                'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
                'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
                'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
                '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
              ];

              /** Used to make template sourceURLs easier to identify. */
              var templateCounter = -1;

              /** Used to identify `toStringTag` values of typed arrays. */
              var typedArrayTags = {};
              typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
              typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
              typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
              typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
              typedArrayTags[uint32Tag] = true;
              typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
              typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
              typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
              typedArrayTags[errorTag] = typedArrayTags[funcTag] =
              typedArrayTags[mapTag] = typedArrayTags[numberTag] =
              typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
              typedArrayTags[setTag] = typedArrayTags[stringTag] =
              typedArrayTags[weakMapTag] = false;

              /** Used to identify `toStringTag` values supported by `_.clone`. */
              var cloneableTags = {};
              cloneableTags[argsTag] = cloneableTags[arrayTag] =
              cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
              cloneableTags[boolTag] = cloneableTags[dateTag] =
              cloneableTags[float32Tag] = cloneableTags[float64Tag] =
              cloneableTags[int8Tag] = cloneableTags[int16Tag] =
              cloneableTags[int32Tag] = cloneableTags[mapTag] =
              cloneableTags[numberTag] = cloneableTags[objectTag] =
              cloneableTags[regexpTag] = cloneableTags[setTag] =
              cloneableTags[stringTag] = cloneableTags[symbolTag] =
              cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
              cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
              cloneableTags[errorTag] = cloneableTags[funcTag] =
              cloneableTags[weakMapTag] = false;

              /** Used to map Latin Unicode letters to basic Latin letters. */
              var deburredLetters = {
                // Latin-1 Supplement block.
                '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
                '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
                '\xc7': 'C',  '\xe7': 'c',
                '\xd0': 'D',  '\xf0': 'd',
                '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
                '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
                '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
                '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
                '\xd1': 'N',  '\xf1': 'n',
                '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
                '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
                '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
                '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
                '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
                '\xc6': 'Ae', '\xe6': 'ae',
                '\xde': 'Th', '\xfe': 'th',
                '\xdf': 'ss',
                // Latin Extended-A block.
                '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
                '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
                '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
                '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
                '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
                '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
                '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
                '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
                '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
                '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
                '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
                '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
                '\u0134': 'J',  '\u0135': 'j',
                '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
                '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
                '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
                '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
                '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
                '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
                '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
                '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
                '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
                '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
                '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
                '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
                '\u0163': 't',  '\u0165': 't', '\u0167': 't',
                '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
                '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
                '\u0174': 'W',  '\u0175': 'w',
                '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
                '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
                '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
                '\u0132': 'IJ', '\u0133': 'ij',
                '\u0152': 'Oe', '\u0153': 'oe',
                '\u0149': "'n", '\u017f': 's'
              };

              /** Used to map characters to HTML entities. */
              var htmlEscapes = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#39;'
              };

              /** Used to map HTML entities to characters. */
              var htmlUnescapes = {
                '&amp;': '&',
                '&lt;': '<',
                '&gt;': '>',
                '&quot;': '"',
                '&#39;': "'"
              };

              /** Used to escape characters for inclusion in compiled string literals. */
              var stringEscapes = {
                '\\': '\\',
                "'": "'",
                '\n': 'n',
                '\r': 'r',
                '\u2028': 'u2028',
                '\u2029': 'u2029'
              };

              /** Built-in method references without a dependency on `root`. */
              var freeParseFloat = parseFloat,
                  freeParseInt = parseInt;

              /** Detect free variable `global` from Node.js. */
              var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

              /** Detect free variable `self`. */
              var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

              /** Used as a reference to the global object. */
              var root = freeGlobal || freeSelf || Function('return this')();

              /** Detect free variable `exports`. */
              var freeExports = exports && !exports.nodeType && exports;

              /** Detect free variable `module`. */
              var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

              /** Detect the popular CommonJS extension `module.exports`. */
              var moduleExports = freeModule && freeModule.exports === freeExports;

              /** Detect free variable `process` from Node.js. */
              var freeProcess = moduleExports && freeGlobal.process;

              /** Used to access faster Node.js helpers. */
              var nodeUtil = (function() {
                try {
                  // Use `util.types` for Node.js 10+.
                  var types = freeModule && freeModule.require && freeModule.require('util').types;

                  if (types) {
                    return types;
                  }

                  // Legacy `process.binding('util')` for Node.js < 10.
                  return freeProcess && freeProcess.binding && freeProcess.binding('util');
                } catch (e) {}
              }());

              /* Node.js helper references. */
              var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
                  nodeIsDate = nodeUtil && nodeUtil.isDate,
                  nodeIsMap = nodeUtil && nodeUtil.isMap,
                  nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
                  nodeIsSet = nodeUtil && nodeUtil.isSet,
                  nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

              /*--------------------------------------------------------------------------*/

              /**
               * A faster alternative to `Function#apply`, this function invokes `func`
               * with the `this` binding of `thisArg` and the arguments of `args`.
               *
               * @private
               * @param {Function} func The function to invoke.
               * @param {*} thisArg The `this` binding of `func`.
               * @param {Array} args The arguments to invoke `func` with.
               * @returns {*} Returns the result of `func`.
               */
              function apply(func, thisArg, args) {
                switch (args.length) {
                  case 0: return func.call(thisArg);
                  case 1: return func.call(thisArg, args[0]);
                  case 2: return func.call(thisArg, args[0], args[1]);
                  case 3: return func.call(thisArg, args[0], args[1], args[2]);
                }
                return func.apply(thisArg, args);
              }

              /**
               * A specialized version of `baseAggregator` for arrays.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} setter The function to set `accumulator` values.
               * @param {Function} iteratee The iteratee to transform keys.
               * @param {Object} accumulator The initial aggregated object.
               * @returns {Function} Returns `accumulator`.
               */
              function arrayAggregator(array, setter, iteratee, accumulator) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                  var value = array[index];
                  setter(accumulator, value, iteratee(value), array);
                }
                return accumulator;
              }

              /**
               * A specialized version of `_.forEach` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns `array`.
               */
              function arrayEach(array, iteratee) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (iteratee(array[index], index, array) === false) {
                    break;
                  }
                }
                return array;
              }

              /**
               * A specialized version of `_.forEachRight` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns `array`.
               */
              function arrayEachRight(array, iteratee) {
                var length = array == null ? 0 : array.length;

                while (length--) {
                  if (iteratee(array[length], length, array) === false) {
                    break;
                  }
                }
                return array;
              }

              /**
               * A specialized version of `_.every` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {boolean} Returns `true` if all elements pass the predicate check,
               *  else `false`.
               */
              function arrayEvery(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (!predicate(array[index], index, array)) {
                    return false;
                  }
                }
                return true;
              }

              /**
               * A specialized version of `_.filter` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {Array} Returns the new filtered array.
               */
              function arrayFilter(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length,
                    resIndex = 0,
                    result = [];

                while (++index < length) {
                  var value = array[index];
                  if (predicate(value, index, array)) {
                    result[resIndex++] = value;
                  }
                }
                return result;
              }

              /**
               * A specialized version of `_.includes` for arrays without support for
               * specifying an index to search from.
               *
               * @private
               * @param {Array} [array] The array to inspect.
               * @param {*} target The value to search for.
               * @returns {boolean} Returns `true` if `target` is found, else `false`.
               */
              function arrayIncludes(array, value) {
                var length = array == null ? 0 : array.length;
                return !!length && baseIndexOf(array, value, 0) > -1;
              }

              /**
               * This function is like `arrayIncludes` except that it accepts a comparator.
               *
               * @private
               * @param {Array} [array] The array to inspect.
               * @param {*} target The value to search for.
               * @param {Function} comparator The comparator invoked per element.
               * @returns {boolean} Returns `true` if `target` is found, else `false`.
               */
              function arrayIncludesWith(array, value, comparator) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (comparator(value, array[index])) {
                    return true;
                  }
                }
                return false;
              }

              /**
               * A specialized version of `_.map` for arrays without support for iteratee
               * shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns the new mapped array.
               */
              function arrayMap(array, iteratee) {
                var index = -1,
                    length = array == null ? 0 : array.length,
                    result = Array(length);

                while (++index < length) {
                  result[index] = iteratee(array[index], index, array);
                }
                return result;
              }

              /**
               * Appends the elements of `values` to `array`.
               *
               * @private
               * @param {Array} array The array to modify.
               * @param {Array} values The values to append.
               * @returns {Array} Returns `array`.
               */
              function arrayPush(array, values) {
                var index = -1,
                    length = values.length,
                    offset = array.length;

                while (++index < length) {
                  array[offset + index] = values[index];
                }
                return array;
              }

              /**
               * A specialized version of `_.reduce` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @param {*} [accumulator] The initial value.
               * @param {boolean} [initAccum] Specify using the first element of `array` as
               *  the initial value.
               * @returns {*} Returns the accumulated value.
               */
              function arrayReduce(array, iteratee, accumulator, initAccum) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                if (initAccum && length) {
                  accumulator = array[++index];
                }
                while (++index < length) {
                  accumulator = iteratee(accumulator, array[index], index, array);
                }
                return accumulator;
              }

              /**
               * A specialized version of `_.reduceRight` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @param {*} [accumulator] The initial value.
               * @param {boolean} [initAccum] Specify using the last element of `array` as
               *  the initial value.
               * @returns {*} Returns the accumulated value.
               */
              function arrayReduceRight(array, iteratee, accumulator, initAccum) {
                var length = array == null ? 0 : array.length;
                if (initAccum && length) {
                  accumulator = array[--length];
                }
                while (length--) {
                  accumulator = iteratee(accumulator, array[length], length, array);
                }
                return accumulator;
              }

              /**
               * A specialized version of `_.some` for arrays without support for iteratee
               * shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {boolean} Returns `true` if any element passes the predicate check,
               *  else `false`.
               */
              function arraySome(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (predicate(array[index], index, array)) {
                    return true;
                  }
                }
                return false;
              }

              /**
               * Gets the size of an ASCII `string`.
               *
               * @private
               * @param {string} string The string inspect.
               * @returns {number} Returns the string size.
               */
              var asciiSize = baseProperty('length');

              /**
               * Converts an ASCII `string` to an array.
               *
               * @private
               * @param {string} string The string to convert.
               * @returns {Array} Returns the converted array.
               */
              function asciiToArray(string) {
                return string.split('');
              }

              /**
               * Splits an ASCII `string` into an array of its words.
               *
               * @private
               * @param {string} The string to inspect.
               * @returns {Array} Returns the words of `string`.
               */
              function asciiWords(string) {
                return string.match(reAsciiWord) || [];
              }

              /**
               * The base implementation of methods like `_.findKey` and `_.findLastKey`,
               * without support for iteratee shorthands, which iterates over `collection`
               * using `eachFunc`.
               *
               * @private
               * @param {Array|Object} collection The collection to inspect.
               * @param {Function} predicate The function invoked per iteration.
               * @param {Function} eachFunc The function to iterate over `collection`.
               * @returns {*} Returns the found element or its key, else `undefined`.
               */
              function baseFindKey(collection, predicate, eachFunc) {
                var result;
                eachFunc(collection, function(value, key, collection) {
                  if (predicate(value, key, collection)) {
                    result = key;
                    return false;
                  }
                });
                return result;
              }

              /**
               * The base implementation of `_.findIndex` and `_.findLastIndex` without
               * support for iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {Function} predicate The function invoked per iteration.
               * @param {number} fromIndex The index to search from.
               * @param {boolean} [fromRight] Specify iterating from right to left.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function baseFindIndex(array, predicate, fromIndex, fromRight) {
                var length = array.length,
                    index = fromIndex + (fromRight ? 1 : -1);

                while ((fromRight ? index-- : ++index < length)) {
                  if (predicate(array[index], index, array)) {
                    return index;
                  }
                }
                return -1;
              }

              /**
               * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function baseIndexOf(array, value, fromIndex) {
                return value === value
                  ? strictIndexOf(array, value, fromIndex)
                  : baseFindIndex(array, baseIsNaN, fromIndex);
              }

              /**
               * This function is like `baseIndexOf` except that it accepts a comparator.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @param {Function} comparator The comparator invoked per element.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function baseIndexOfWith(array, value, fromIndex, comparator) {
                var index = fromIndex - 1,
                    length = array.length;

                while (++index < length) {
                  if (comparator(array[index], value)) {
                    return index;
                  }
                }
                return -1;
              }

              /**
               * The base implementation of `_.isNaN` without support for number objects.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
               */
              function baseIsNaN(value) {
                return value !== value;
              }

              /**
               * The base implementation of `_.mean` and `_.meanBy` without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {number} Returns the mean.
               */
              function baseMean(array, iteratee) {
                var length = array == null ? 0 : array.length;
                return length ? (baseSum(array, iteratee) / length) : NAN;
              }

              /**
               * The base implementation of `_.property` without support for deep paths.
               *
               * @private
               * @param {string} key The key of the property to get.
               * @returns {Function} Returns the new accessor function.
               */
              function baseProperty(key) {
                return function(object) {
                  return object == null ? undefined : object[key];
                };
              }

              /**
               * The base implementation of `_.propertyOf` without support for deep paths.
               *
               * @private
               * @param {Object} object The object to query.
               * @returns {Function} Returns the new accessor function.
               */
              function basePropertyOf(object) {
                return function(key) {
                  return object == null ? undefined : object[key];
                };
              }

              /**
               * The base implementation of `_.reduce` and `_.reduceRight`, without support
               * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
               *
               * @private
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @param {*} accumulator The initial value.
               * @param {boolean} initAccum Specify using the first or last element of
               *  `collection` as the initial value.
               * @param {Function} eachFunc The function to iterate over `collection`.
               * @returns {*} Returns the accumulated value.
               */
              function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                eachFunc(collection, function(value, index, collection) {
                  accumulator = initAccum
                    ? (initAccum = false, value)
                    : iteratee(accumulator, value, index, collection);
                });
                return accumulator;
              }

              /**
               * The base implementation of `_.sortBy` which uses `comparer` to define the
               * sort order of `array` and replaces criteria objects with their corresponding
               * values.
               *
               * @private
               * @param {Array} array The array to sort.
               * @param {Function} comparer The function to define sort order.
               * @returns {Array} Returns `array`.
               */
              function baseSortBy(array, comparer) {
                var length = array.length;

                array.sort(comparer);
                while (length--) {
                  array[length] = array[length].value;
                }
                return array;
              }

              /**
               * The base implementation of `_.sum` and `_.sumBy` without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {number} Returns the sum.
               */
              function baseSum(array, iteratee) {
                var result,
                    index = -1,
                    length = array.length;

                while (++index < length) {
                  var current = iteratee(array[index]);
                  if (current !== undefined) {
                    result = result === undefined ? current : (result + current);
                  }
                }
                return result;
              }

              /**
               * The base implementation of `_.times` without support for iteratee shorthands
               * or max array length checks.
               *
               * @private
               * @param {number} n The number of times to invoke `iteratee`.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns the array of results.
               */
              function baseTimes(n, iteratee) {
                var index = -1,
                    result = Array(n);

                while (++index < n) {
                  result[index] = iteratee(index);
                }
                return result;
              }

              /**
               * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
               * of key-value pairs for `object` corresponding to the property names of `props`.
               *
               * @private
               * @param {Object} object The object to query.
               * @param {Array} props The property names to get values for.
               * @returns {Object} Returns the key-value pairs.
               */
              function baseToPairs(object, props) {
                return arrayMap(props, function(key) {
                  return [key, object[key]];
                });
              }

              /**
               * The base implementation of `_.unary` without support for storing metadata.
               *
               * @private
               * @param {Function} func The function to cap arguments for.
               * @returns {Function} Returns the new capped function.
               */
              function baseUnary(func) {
                return function(value) {
                  return func(value);
                };
              }

              /**
               * The base implementation of `_.values` and `_.valuesIn` which creates an
               * array of `object` property values corresponding to the property names
               * of `props`.
               *
               * @private
               * @param {Object} object The object to query.
               * @param {Array} props The property names to get values for.
               * @returns {Object} Returns the array of property values.
               */
              function baseValues(object, props) {
                return arrayMap(props, function(key) {
                  return object[key];
                });
              }

              /**
               * Checks if a `cache` value for `key` exists.
               *
               * @private
               * @param {Object} cache The cache to query.
               * @param {string} key The key of the entry to check.
               * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
               */
              function cacheHas(cache, key) {
                return cache.has(key);
              }

              /**
               * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
               * that is not found in the character symbols.
               *
               * @private
               * @param {Array} strSymbols The string symbols to inspect.
               * @param {Array} chrSymbols The character symbols to find.
               * @returns {number} Returns the index of the first unmatched string symbol.
               */
              function charsStartIndex(strSymbols, chrSymbols) {
                var index = -1,
                    length = strSymbols.length;

                while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
                return index;
              }

              /**
               * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
               * that is not found in the character symbols.
               *
               * @private
               * @param {Array} strSymbols The string symbols to inspect.
               * @param {Array} chrSymbols The character symbols to find.
               * @returns {number} Returns the index of the last unmatched string symbol.
               */
              function charsEndIndex(strSymbols, chrSymbols) {
                var index = strSymbols.length;

                while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
                return index;
              }

              /**
               * Gets the number of `placeholder` occurrences in `array`.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} placeholder The placeholder to search for.
               * @returns {number} Returns the placeholder count.
               */
              function countHolders(array, placeholder) {
                var length = array.length,
                    result = 0;

                while (length--) {
                  if (array[length] === placeholder) {
                    ++result;
                  }
                }
                return result;
              }

              /**
               * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
               * letters to basic Latin letters.
               *
               * @private
               * @param {string} letter The matched letter to deburr.
               * @returns {string} Returns the deburred letter.
               */
              var deburrLetter = basePropertyOf(deburredLetters);

              /**
               * Used by `_.escape` to convert characters to HTML entities.
               *
               * @private
               * @param {string} chr The matched character to escape.
               * @returns {string} Returns the escaped character.
               */
              var escapeHtmlChar = basePropertyOf(htmlEscapes);

              /**
               * Used by `_.template` to escape characters for inclusion in compiled string literals.
               *
               * @private
               * @param {string} chr The matched character to escape.
               * @returns {string} Returns the escaped character.
               */
              function escapeStringChar(chr) {
                return '\\' + stringEscapes[chr];
              }

              /**
               * Gets the value at `key` of `object`.
               *
               * @private
               * @param {Object} [object] The object to query.
               * @param {string} key The key of the property to get.
               * @returns {*} Returns the property value.
               */
              function getValue(object, key) {
                return object == null ? undefined : object[key];
              }

              /**
               * Checks if `string` contains Unicode symbols.
               *
               * @private
               * @param {string} string The string to inspect.
               * @returns {boolean} Returns `true` if a symbol is found, else `false`.
               */
              function hasUnicode(string) {
                return reHasUnicode.test(string);
              }

              /**
               * Checks if `string` contains a word composed of Unicode symbols.
               *
               * @private
               * @param {string} string The string to inspect.
               * @returns {boolean} Returns `true` if a word is found, else `false`.
               */
              function hasUnicodeWord(string) {
                return reHasUnicodeWord.test(string);
              }

              /**
               * Converts `iterator` to an array.
               *
               * @private
               * @param {Object} iterator The iterator to convert.
               * @returns {Array} Returns the converted array.
               */
              function iteratorToArray(iterator) {
                var data,
                    result = [];

                while (!(data = iterator.next()).done) {
                  result.push(data.value);
                }
                return result;
              }

              /**
               * Converts `map` to its key-value pairs.
               *
               * @private
               * @param {Object} map The map to convert.
               * @returns {Array} Returns the key-value pairs.
               */
              function mapToArray(map) {
                var index = -1,
                    result = Array(map.size);

                map.forEach(function(value, key) {
                  result[++index] = [key, value];
                });
                return result;
              }

              /**
               * Creates a unary function that invokes `func` with its argument transformed.
               *
               * @private
               * @param {Function} func The function to wrap.
               * @param {Function} transform The argument transform.
               * @returns {Function} Returns the new function.
               */
              function overArg(func, transform) {
                return function(arg) {
                  return func(transform(arg));
                };
              }

              /**
               * Replaces all `placeholder` elements in `array` with an internal placeholder
               * and returns an array of their indexes.
               *
               * @private
               * @param {Array} array The array to modify.
               * @param {*} placeholder The placeholder to replace.
               * @returns {Array} Returns the new array of placeholder indexes.
               */
              function replaceHolders(array, placeholder) {
                var index = -1,
                    length = array.length,
                    resIndex = 0,
                    result = [];

                while (++index < length) {
                  var value = array[index];
                  if (value === placeholder || value === PLACEHOLDER) {
                    array[index] = PLACEHOLDER;
                    result[resIndex++] = index;
                  }
                }
                return result;
              }

              /**
               * Gets the value at `key`, unless `key` is "__proto__".
               *
               * @private
               * @param {Object} object The object to query.
               * @param {string} key The key of the property to get.
               * @returns {*} Returns the property value.
               */
              function safeGet(object, key) {
                return key == '__proto__'
                  ? undefined
                  : object[key];
              }

              /**
               * Converts `set` to an array of its values.
               *
               * @private
               * @param {Object} set The set to convert.
               * @returns {Array} Returns the values.
               */
              function setToArray(set) {
                var index = -1,
                    result = Array(set.size);

                set.forEach(function(value) {
                  result[++index] = value;
                });
                return result;
              }

              /**
               * Converts `set` to its value-value pairs.
               *
               * @private
               * @param {Object} set The set to convert.
               * @returns {Array} Returns the value-value pairs.
               */
              function setToPairs(set) {
                var index = -1,
                    result = Array(set.size);

                set.forEach(function(value) {
                  result[++index] = [value, value];
                });
                return result;
              }

              /**
               * A specialized version of `_.indexOf` which performs strict equality
               * comparisons of values, i.e. `===`.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function strictIndexOf(array, value, fromIndex) {
                var index = fromIndex - 1,
                    length = array.length;

                while (++index < length) {
                  if (array[index] === value) {
                    return index;
                  }
                }
                return -1;
              }

              /**
               * A specialized version of `_.lastIndexOf` which performs strict equality
               * comparisons of values, i.e. `===`.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function strictLastIndexOf(array, value, fromIndex) {
                var index = fromIndex + 1;
                while (index--) {
                  if (array[index] === value) {
                    return index;
                  }
                }
                return index;
              }

              /**
               * Gets the number of symbols in `string`.
               *
               * @private
               * @param {string} string The string to inspect.
               * @returns {number} Returns the string size.
               */
              function stringSize(string) {
                return hasUnicode(string)
                  ? unicodeSize(string)
                  : asciiSize(string);
              }

              /**
               * Converts `string` to an array.
               *
               * @private
               * @param {string} string The string to convert.
               * @returns {Array} Returns the converted array.
               */
              function stringToArray(string) {
                return hasUnicode(string)
                  ? unicodeToArray(string)
                  : asciiToArray(string);
              }

              /**
               * Used by `_.unescape` to convert HTML entities to characters.
               *
               * @private
               * @param {string} chr The matched character to unescape.
               * @returns {string} Returns the unescaped character.
               */
              var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

              /**
               * Gets the size of a Unicode `string`.
               *
               * @private
               * @param {string} string The string inspect.
               * @returns {number} Returns the string size.
               */
              function unicodeSize(string) {
                var result = reUnicode.lastIndex = 0;
                while (reUnicode.test(string)) {
                  ++result;
                }
                return result;
              }

              /**
               * Converts a Unicode `string` to an array.
               *
               * @private
               * @param {string} string The string to convert.
               * @returns {Array} Returns the converted array.
               */
              function unicodeToArray(string) {
                return string.match(reUnicode) || [];
              }

              /**
               * Splits a Unicode `string` into an array of its words.
               *
               * @private
               * @param {string} The string to inspect.
               * @returns {Array} Returns the words of `string`.
               */
              function unicodeWords(string) {
                return string.match(reUnicodeWord) || [];
              }

              /*--------------------------------------------------------------------------*/

              /**
               * Create a new pristine `lodash` function using the `context` object.
               *
               * @static
               * @memberOf _
               * @since 1.1.0
               * @category Util
               * @param {Object} [context=root] The context object.
               * @returns {Function} Returns a new `lodash` function.
               * @example
               *
               * _.mixin({ 'foo': _.constant('foo') });
               *
               * var lodash = _.runInContext();
               * lodash.mixin({ 'bar': lodash.constant('bar') });
               *
               * _.isFunction(_.foo);
               * // => true
               * _.isFunction(_.bar);
               * // => false
               *
               * lodash.isFunction(lodash.foo);
               * // => false
               * lodash.isFunction(lodash.bar);
               * // => true
               *
               * // Create a suped-up `defer` in Node.js.
               * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
               */
              var runInContext = (function runInContext(context) {
                context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

                /** Built-in constructor references. */
                var Array = context.Array,
                    Date = context.Date,
                    Error = context.Error,
                    Function = context.Function,
                    Math = context.Math,
                    Object = context.Object,
                    RegExp = context.RegExp,
                    String = context.String,
                    TypeError = context.TypeError;

                /** Used for built-in method references. */
                var arrayProto = Array.prototype,
                    funcProto = Function.prototype,
                    objectProto = Object.prototype;

                /** Used to detect overreaching core-js shims. */
                var coreJsData = context['__core-js_shared__'];

                /** Used to resolve the decompiled source of functions. */
                var funcToString = funcProto.toString;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /** Used to generate unique IDs. */
                var idCounter = 0;

                /** Used to detect methods masquerading as native. */
                var maskSrcKey = (function() {
                  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                  return uid ? ('Symbol(src)_1.' + uid) : '';
                }());

                /**
                 * Used to resolve the
                 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                 * of values.
                 */
                var nativeObjectToString = objectProto.toString;

                /** Used to infer the `Object` constructor. */
                var objectCtorString = funcToString.call(Object);

                /** Used to restore the original `_` reference in `_.noConflict`. */
                var oldDash = root._;

                /** Used to detect if a method is native. */
                var reIsNative = RegExp('^' +
                  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
                  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
                );

                /** Built-in value references. */
                var Buffer = moduleExports ? context.Buffer : undefined,
                    Symbol = context.Symbol,
                    Uint8Array = context.Uint8Array,
                    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
                    getPrototype = overArg(Object.getPrototypeOf, Object),
                    objectCreate = Object.create,
                    propertyIsEnumerable = objectProto.propertyIsEnumerable,
                    splice = arrayProto.splice,
                    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
                    symIterator = Symbol ? Symbol.iterator : undefined,
                    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

                var defineProperty = (function() {
                  try {
                    var func = getNative(Object, 'defineProperty');
                    func({}, '', {});
                    return func;
                  } catch (e) {}
                }());

                /** Mocked built-ins. */
                var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
                    ctxNow = Date && Date.now !== root.Date.now && Date.now,
                    ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

                /* Built-in method references for those with the same name as other `lodash` methods. */
                var nativeCeil = Math.ceil,
                    nativeFloor = Math.floor,
                    nativeGetSymbols = Object.getOwnPropertySymbols,
                    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
                    nativeIsFinite = context.isFinite,
                    nativeJoin = arrayProto.join,
                    nativeKeys = overArg(Object.keys, Object),
                    nativeMax = Math.max,
                    nativeMin = Math.min,
                    nativeNow = Date.now,
                    nativeParseInt = context.parseInt,
                    nativeRandom = Math.random,
                    nativeReverse = arrayProto.reverse;

                /* Built-in method references that are verified to be native. */
                var DataView = getNative(context, 'DataView'),
                    Map = getNative(context, 'Map'),
                    Promise = getNative(context, 'Promise'),
                    Set = getNative(context, 'Set'),
                    WeakMap = getNative(context, 'WeakMap'),
                    nativeCreate = getNative(Object, 'create');

                /** Used to store function metadata. */
                var metaMap = WeakMap && new WeakMap;

                /** Used to lookup unminified function names. */
                var realNames = {};

                /** Used to detect maps, sets, and weakmaps. */
                var dataViewCtorString = toSource(DataView),
                    mapCtorString = toSource(Map),
                    promiseCtorString = toSource(Promise),
                    setCtorString = toSource(Set),
                    weakMapCtorString = toSource(WeakMap);

                /** Used to convert symbols to primitives and strings. */
                var symbolProto = Symbol ? Symbol.prototype : undefined,
                    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
                    symbolToString = symbolProto ? symbolProto.toString : undefined;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a `lodash` object which wraps `value` to enable implicit method
                 * chain sequences. Methods that operate on and return arrays, collections,
                 * and functions can be chained together. Methods that retrieve a single value
                 * or may return a primitive value will automatically end the chain sequence
                 * and return the unwrapped value. Otherwise, the value must be unwrapped
                 * with `_#value`.
                 *
                 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
                 * enabled using `_.chain`.
                 *
                 * The execution of chained methods is lazy, that is, it's deferred until
                 * `_#value` is implicitly or explicitly called.
                 *
                 * Lazy evaluation allows several methods to support shortcut fusion.
                 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
                 * the creation of intermediate arrays and can greatly reduce the number of
                 * iteratee executions. Sections of a chain sequence qualify for shortcut
                 * fusion if the section is applied to an array and iteratees accept only
                 * one argument. The heuristic for whether a section qualifies for shortcut
                 * fusion is subject to change.
                 *
                 * Chaining is supported in custom builds as long as the `_#value` method is
                 * directly or indirectly included in the build.
                 *
                 * In addition to lodash methods, wrappers have `Array` and `String` methods.
                 *
                 * The wrapper `Array` methods are:
                 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
                 *
                 * The wrapper `String` methods are:
                 * `replace` and `split`
                 *
                 * The wrapper methods that support shortcut fusion are:
                 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
                 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
                 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
                 *
                 * The chainable wrapper methods are:
                 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
                 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
                 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
                 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
                 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
                 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
                 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
                 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
                 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
                 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
                 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
                 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
                 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
                 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
                 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
                 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
                 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
                 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
                 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
                 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
                 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
                 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
                 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
                 * `zipObject`, `zipObjectDeep`, and `zipWith`
                 *
                 * The wrapper methods that are **not** chainable by default are:
                 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
                 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
                 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
                 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
                 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
                 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
                 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
                 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
                 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
                 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
                 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
                 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
                 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
                 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
                 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
                 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
                 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
                 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
                 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
                 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
                 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
                 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
                 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
                 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
                 * `upperFirst`, `value`, and `words`
                 *
                 * @name _
                 * @constructor
                 * @category Seq
                 * @param {*} value The value to wrap in a `lodash` instance.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var wrapped = _([1, 2, 3]);
                 *
                 * // Returns an unwrapped value.
                 * wrapped.reduce(_.add);
                 * // => 6
                 *
                 * // Returns a wrapped value.
                 * var squares = wrapped.map(square);
                 *
                 * _.isArray(squares);
                 * // => false
                 *
                 * _.isArray(squares.value());
                 * // => true
                 */
                function lodash(value) {
                  if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                    if (value instanceof LodashWrapper) {
                      return value;
                    }
                    if (hasOwnProperty.call(value, '__wrapped__')) {
                      return wrapperClone(value);
                    }
                  }
                  return new LodashWrapper(value);
                }

                /**
                 * The base implementation of `_.create` without support for assigning
                 * properties to the created object.
                 *
                 * @private
                 * @param {Object} proto The object to inherit from.
                 * @returns {Object} Returns the new object.
                 */
                var baseCreate = (function() {
                  function object() {}
                  return function(proto) {
                    if (!isObject(proto)) {
                      return {};
                    }
                    if (objectCreate) {
                      return objectCreate(proto);
                    }
                    object.prototype = proto;
                    var result = new object;
                    object.prototype = undefined;
                    return result;
                  };
                }());

                /**
                 * The function whose prototype chain sequence wrappers inherit from.
                 *
                 * @private
                 */
                function baseLodash() {
                  // No operation performed.
                }

                /**
                 * The base constructor for creating `lodash` wrapper objects.
                 *
                 * @private
                 * @param {*} value The value to wrap.
                 * @param {boolean} [chainAll] Enable explicit method chain sequences.
                 */
                function LodashWrapper(value, chainAll) {
                  this.__wrapped__ = value;
                  this.__actions__ = [];
                  this.__chain__ = !!chainAll;
                  this.__index__ = 0;
                  this.__values__ = undefined;
                }

                /**
                 * By default, the template delimiters used by lodash are like those in
                 * embedded Ruby (ERB) as well as ES2015 template strings. Change the
                 * following template settings to use alternative delimiters.
                 *
                 * @static
                 * @memberOf _
                 * @type {Object}
                 */
                lodash.templateSettings = {

                  /**
                   * Used to detect `data` property values to be HTML-escaped.
                   *
                   * @memberOf _.templateSettings
                   * @type {RegExp}
                   */
                  'escape': reEscape,

                  /**
                   * Used to detect code to be evaluated.
                   *
                   * @memberOf _.templateSettings
                   * @type {RegExp}
                   */
                  'evaluate': reEvaluate,

                  /**
                   * Used to detect `data` property values to inject.
                   *
                   * @memberOf _.templateSettings
                   * @type {RegExp}
                   */
                  'interpolate': reInterpolate,

                  /**
                   * Used to reference the data object in the template text.
                   *
                   * @memberOf _.templateSettings
                   * @type {string}
                   */
                  'variable': '',

                  /**
                   * Used to import variables into the compiled template.
                   *
                   * @memberOf _.templateSettings
                   * @type {Object}
                   */
                  'imports': {

                    /**
                     * A reference to the `lodash` function.
                     *
                     * @memberOf _.templateSettings.imports
                     * @type {Function}
                     */
                    '_': lodash
                  }
                };

                // Ensure wrappers are instances of `baseLodash`.
                lodash.prototype = baseLodash.prototype;
                lodash.prototype.constructor = lodash;

                LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                LodashWrapper.prototype.constructor = LodashWrapper;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
                 *
                 * @private
                 * @constructor
                 * @param {*} value The value to wrap.
                 */
                function LazyWrapper(value) {
                  this.__wrapped__ = value;
                  this.__actions__ = [];
                  this.__dir__ = 1;
                  this.__filtered__ = false;
                  this.__iteratees__ = [];
                  this.__takeCount__ = MAX_ARRAY_LENGTH;
                  this.__views__ = [];
                }

                /**
                 * Creates a clone of the lazy wrapper object.
                 *
                 * @private
                 * @name clone
                 * @memberOf LazyWrapper
                 * @returns {Object} Returns the cloned `LazyWrapper` object.
                 */
                function lazyClone() {
                  var result = new LazyWrapper(this.__wrapped__);
                  result.__actions__ = copyArray(this.__actions__);
                  result.__dir__ = this.__dir__;
                  result.__filtered__ = this.__filtered__;
                  result.__iteratees__ = copyArray(this.__iteratees__);
                  result.__takeCount__ = this.__takeCount__;
                  result.__views__ = copyArray(this.__views__);
                  return result;
                }

                /**
                 * Reverses the direction of lazy iteration.
                 *
                 * @private
                 * @name reverse
                 * @memberOf LazyWrapper
                 * @returns {Object} Returns the new reversed `LazyWrapper` object.
                 */
                function lazyReverse() {
                  if (this.__filtered__) {
                    var result = new LazyWrapper(this);
                    result.__dir__ = -1;
                    result.__filtered__ = true;
                  } else {
                    result = this.clone();
                    result.__dir__ *= -1;
                  }
                  return result;
                }

                /**
                 * Extracts the unwrapped value from its lazy wrapper.
                 *
                 * @private
                 * @name value
                 * @memberOf LazyWrapper
                 * @returns {*} Returns the unwrapped value.
                 */
                function lazyValue() {
                  var array = this.__wrapped__.value(),
                      dir = this.__dir__,
                      isArr = isArray(array),
                      isRight = dir < 0,
                      arrLength = isArr ? array.length : 0,
                      view = getView(0, arrLength, this.__views__),
                      start = view.start,
                      end = view.end,
                      length = end - start,
                      index = isRight ? end : (start - 1),
                      iteratees = this.__iteratees__,
                      iterLength = iteratees.length,
                      resIndex = 0,
                      takeCount = nativeMin(length, this.__takeCount__);

                  if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
                    return baseWrapperValue(array, this.__actions__);
                  }
                  var result = [];

                  outer:
                  while (length-- && resIndex < takeCount) {
                    index += dir;

                    var iterIndex = -1,
                        value = array[index];

                    while (++iterIndex < iterLength) {
                      var data = iteratees[iterIndex],
                          iteratee = data.iteratee,
                          type = data.type,
                          computed = iteratee(value);

                      if (type == LAZY_MAP_FLAG) {
                        value = computed;
                      } else if (!computed) {
                        if (type == LAZY_FILTER_FLAG) {
                          continue outer;
                        } else {
                          break outer;
                        }
                      }
                    }
                    result[resIndex++] = value;
                  }
                  return result;
                }

                // Ensure `LazyWrapper` is an instance of `baseLodash`.
                LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                LazyWrapper.prototype.constructor = LazyWrapper;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a hash object.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function Hash(entries) {
                  var index = -1,
                      length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the hash.
                 *
                 * @private
                 * @name clear
                 * @memberOf Hash
                 */
                function hashClear() {
                  this.__data__ = nativeCreate ? nativeCreate(null) : {};
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the hash.
                 *
                 * @private
                 * @name delete
                 * @memberOf Hash
                 * @param {Object} hash The hash to modify.
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function hashDelete(key) {
                  var result = this.has(key) && delete this.__data__[key];
                  this.size -= result ? 1 : 0;
                  return result;
                }

                /**
                 * Gets the hash value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf Hash
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function hashGet(key) {
                  var data = this.__data__;
                  if (nativeCreate) {
                    var result = data[key];
                    return result === HASH_UNDEFINED ? undefined : result;
                  }
                  return hasOwnProperty.call(data, key) ? data[key] : undefined;
                }

                /**
                 * Checks if a hash value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf Hash
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function hashHas(key) {
                  var data = this.__data__;
                  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
                }

                /**
                 * Sets the hash `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf Hash
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the hash instance.
                 */
                function hashSet(key, value) {
                  var data = this.__data__;
                  this.size += this.has(key) ? 0 : 1;
                  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
                  return this;
                }

                // Add methods to `Hash`.
                Hash.prototype.clear = hashClear;
                Hash.prototype['delete'] = hashDelete;
                Hash.prototype.get = hashGet;
                Hash.prototype.has = hashHas;
                Hash.prototype.set = hashSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an list cache object.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function ListCache(entries) {
                  var index = -1,
                      length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the list cache.
                 *
                 * @private
                 * @name clear
                 * @memberOf ListCache
                 */
                function listCacheClear() {
                  this.__data__ = [];
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the list cache.
                 *
                 * @private
                 * @name delete
                 * @memberOf ListCache
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function listCacheDelete(key) {
                  var data = this.__data__,
                      index = assocIndexOf(data, key);

                  if (index < 0) {
                    return false;
                  }
                  var lastIndex = data.length - 1;
                  if (index == lastIndex) {
                    data.pop();
                  } else {
                    splice.call(data, index, 1);
                  }
                  --this.size;
                  return true;
                }

                /**
                 * Gets the list cache value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf ListCache
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function listCacheGet(key) {
                  var data = this.__data__,
                      index = assocIndexOf(data, key);

                  return index < 0 ? undefined : data[index][1];
                }

                /**
                 * Checks if a list cache value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf ListCache
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function listCacheHas(key) {
                  return assocIndexOf(this.__data__, key) > -1;
                }

                /**
                 * Sets the list cache `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf ListCache
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the list cache instance.
                 */
                function listCacheSet(key, value) {
                  var data = this.__data__,
                      index = assocIndexOf(data, key);

                  if (index < 0) {
                    ++this.size;
                    data.push([key, value]);
                  } else {
                    data[index][1] = value;
                  }
                  return this;
                }

                // Add methods to `ListCache`.
                ListCache.prototype.clear = listCacheClear;
                ListCache.prototype['delete'] = listCacheDelete;
                ListCache.prototype.get = listCacheGet;
                ListCache.prototype.has = listCacheHas;
                ListCache.prototype.set = listCacheSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a map cache object to store key-value pairs.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function MapCache(entries) {
                  var index = -1,
                      length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the map.
                 *
                 * @private
                 * @name clear
                 * @memberOf MapCache
                 */
                function mapCacheClear() {
                  this.size = 0;
                  this.__data__ = {
                    'hash': new Hash,
                    'map': new (Map || ListCache),
                    'string': new Hash
                  };
                }

                /**
                 * Removes `key` and its value from the map.
                 *
                 * @private
                 * @name delete
                 * @memberOf MapCache
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function mapCacheDelete(key) {
                  var result = getMapData(this, key)['delete'](key);
                  this.size -= result ? 1 : 0;
                  return result;
                }

                /**
                 * Gets the map value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf MapCache
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function mapCacheGet(key) {
                  return getMapData(this, key).get(key);
                }

                /**
                 * Checks if a map value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf MapCache
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function mapCacheHas(key) {
                  return getMapData(this, key).has(key);
                }

                /**
                 * Sets the map `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf MapCache
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the map cache instance.
                 */
                function mapCacheSet(key, value) {
                  var data = getMapData(this, key),
                      size = data.size;

                  data.set(key, value);
                  this.size += data.size == size ? 0 : 1;
                  return this;
                }

                // Add methods to `MapCache`.
                MapCache.prototype.clear = mapCacheClear;
                MapCache.prototype['delete'] = mapCacheDelete;
                MapCache.prototype.get = mapCacheGet;
                MapCache.prototype.has = mapCacheHas;
                MapCache.prototype.set = mapCacheSet;

                /*------------------------------------------------------------------------*/

                /**
                 *
                 * Creates an array cache object to store unique values.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [values] The values to cache.
                 */
                function SetCache(values) {
                  var index = -1,
                      length = values == null ? 0 : values.length;

                  this.__data__ = new MapCache;
                  while (++index < length) {
                    this.add(values[index]);
                  }
                }

                /**
                 * Adds `value` to the array cache.
                 *
                 * @private
                 * @name add
                 * @memberOf SetCache
                 * @alias push
                 * @param {*} value The value to cache.
                 * @returns {Object} Returns the cache instance.
                 */
                function setCacheAdd(value) {
                  this.__data__.set(value, HASH_UNDEFINED);
                  return this;
                }

                /**
                 * Checks if `value` is in the array cache.
                 *
                 * @private
                 * @name has
                 * @memberOf SetCache
                 * @param {*} value The value to search for.
                 * @returns {number} Returns `true` if `value` is found, else `false`.
                 */
                function setCacheHas(value) {
                  return this.__data__.has(value);
                }

                // Add methods to `SetCache`.
                SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
                SetCache.prototype.has = setCacheHas;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a stack cache object to store key-value pairs.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function Stack(entries) {
                  var data = this.__data__ = new ListCache(entries);
                  this.size = data.size;
                }

                /**
                 * Removes all key-value entries from the stack.
                 *
                 * @private
                 * @name clear
                 * @memberOf Stack
                 */
                function stackClear() {
                  this.__data__ = new ListCache;
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the stack.
                 *
                 * @private
                 * @name delete
                 * @memberOf Stack
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function stackDelete(key) {
                  var data = this.__data__,
                      result = data['delete'](key);

                  this.size = data.size;
                  return result;
                }

                /**
                 * Gets the stack value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf Stack
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function stackGet(key) {
                  return this.__data__.get(key);
                }

                /**
                 * Checks if a stack value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf Stack
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function stackHas(key) {
                  return this.__data__.has(key);
                }

                /**
                 * Sets the stack `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf Stack
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the stack cache instance.
                 */
                function stackSet(key, value) {
                  var data = this.__data__;
                  if (data instanceof ListCache) {
                    var pairs = data.__data__;
                    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                      pairs.push([key, value]);
                      this.size = ++data.size;
                      return this;
                    }
                    data = this.__data__ = new MapCache(pairs);
                  }
                  data.set(key, value);
                  this.size = data.size;
                  return this;
                }

                // Add methods to `Stack`.
                Stack.prototype.clear = stackClear;
                Stack.prototype['delete'] = stackDelete;
                Stack.prototype.get = stackGet;
                Stack.prototype.has = stackHas;
                Stack.prototype.set = stackSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an array of the enumerable property names of the array-like `value`.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @param {boolean} inherited Specify returning inherited property names.
                 * @returns {Array} Returns the array of property names.
                 */
                function arrayLikeKeys(value, inherited) {
                  var isArr = isArray(value),
                      isArg = !isArr && isArguments(value),
                      isBuff = !isArr && !isArg && isBuffer(value),
                      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                      skipIndexes = isArr || isArg || isBuff || isType,
                      result = skipIndexes ? baseTimes(value.length, String) : [],
                      length = result.length;

                  for (var key in value) {
                    if ((inherited || hasOwnProperty.call(value, key)) &&
                        !(skipIndexes && (
                           // Safari 9 has enumerable `arguments.length` in strict mode.
                           key == 'length' ||
                           // Node.js 0.10 has enumerable non-index properties on buffers.
                           (isBuff && (key == 'offset' || key == 'parent')) ||
                           // PhantomJS 2 has enumerable non-index properties on typed arrays.
                           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                           // Skip index properties.
                           isIndex(key, length)
                        ))) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * A specialized version of `_.sample` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to sample.
                 * @returns {*} Returns the random element.
                 */
                function arraySample(array) {
                  var length = array.length;
                  return length ? array[baseRandom(0, length - 1)] : undefined;
                }

                /**
                 * A specialized version of `_.sampleSize` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to sample.
                 * @param {number} n The number of elements to sample.
                 * @returns {Array} Returns the random elements.
                 */
                function arraySampleSize(array, n) {
                  return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
                }

                /**
                 * A specialized version of `_.shuffle` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 */
                function arrayShuffle(array) {
                  return shuffleSelf(copyArray(array));
                }

                /**
                 * This function is like `assignValue` except that it doesn't assign
                 * `undefined` values.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function assignMergeValue(object, key, value) {
                  if ((value !== undefined && !eq(object[key], value)) ||
                      (value === undefined && !(key in object))) {
                    baseAssignValue(object, key, value);
                  }
                }

                /**
                 * Assigns `value` to `key` of `object` if the existing value is not equivalent
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function assignValue(object, key, value) {
                  var objValue = object[key];
                  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                      (value === undefined && !(key in object))) {
                    baseAssignValue(object, key, value);
                  }
                }

                /**
                 * Gets the index at which the `key` is found in `array` of key-value pairs.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} key The key to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function assocIndexOf(array, key) {
                  var length = array.length;
                  while (length--) {
                    if (eq(array[length][0], key)) {
                      return length;
                    }
                  }
                  return -1;
                }

                /**
                 * Aggregates elements of `collection` on `accumulator` with keys transformed
                 * by `iteratee` and values set by `setter`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} setter The function to set `accumulator` values.
                 * @param {Function} iteratee The iteratee to transform keys.
                 * @param {Object} accumulator The initial aggregated object.
                 * @returns {Function} Returns `accumulator`.
                 */
                function baseAggregator(collection, setter, iteratee, accumulator) {
                  baseEach(collection, function(value, key, collection) {
                    setter(accumulator, value, iteratee(value), collection);
                  });
                  return accumulator;
                }

                /**
                 * The base implementation of `_.assign` without support for multiple sources
                 * or `customizer` functions.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @returns {Object} Returns `object`.
                 */
                function baseAssign(object, source) {
                  return object && copyObject(source, keys(source), object);
                }

                /**
                 * The base implementation of `_.assignIn` without support for multiple sources
                 * or `customizer` functions.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @returns {Object} Returns `object`.
                 */
                function baseAssignIn(object, source) {
                  return object && copyObject(source, keysIn(source), object);
                }

                /**
                 * The base implementation of `assignValue` and `assignMergeValue` without
                 * value checks.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function baseAssignValue(object, key, value) {
                  if (key == '__proto__' && defineProperty) {
                    defineProperty(object, key, {
                      'configurable': true,
                      'enumerable': true,
                      'value': value,
                      'writable': true
                    });
                  } else {
                    object[key] = value;
                  }
                }

                /**
                 * The base implementation of `_.at` without support for individual paths.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {string[]} paths The property paths to pick.
                 * @returns {Array} Returns the picked elements.
                 */
                function baseAt(object, paths) {
                  var index = -1,
                      length = paths.length,
                      result = Array(length),
                      skip = object == null;

                  while (++index < length) {
                    result[index] = skip ? undefined : get(object, paths[index]);
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.clamp` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {number} number The number to clamp.
                 * @param {number} [lower] The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the clamped number.
                 */
                function baseClamp(number, lower, upper) {
                  if (number === number) {
                    if (upper !== undefined) {
                      number = number <= upper ? number : upper;
                    }
                    if (lower !== undefined) {
                      number = number >= lower ? number : lower;
                    }
                  }
                  return number;
                }

                /**
                 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
                 * traversed objects.
                 *
                 * @private
                 * @param {*} value The value to clone.
                 * @param {boolean} bitmask The bitmask flags.
                 *  1 - Deep clone
                 *  2 - Flatten inherited properties
                 *  4 - Clone symbols
                 * @param {Function} [customizer] The function to customize cloning.
                 * @param {string} [key] The key of `value`.
                 * @param {Object} [object] The parent object of `value`.
                 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
                 * @returns {*} Returns the cloned value.
                 */
                function baseClone(value, bitmask, customizer, key, object, stack) {
                  var result,
                      isDeep = bitmask & CLONE_DEEP_FLAG,
                      isFlat = bitmask & CLONE_FLAT_FLAG,
                      isFull = bitmask & CLONE_SYMBOLS_FLAG;

                  if (customizer) {
                    result = object ? customizer(value, key, object, stack) : customizer(value);
                  }
                  if (result !== undefined) {
                    return result;
                  }
                  if (!isObject(value)) {
                    return value;
                  }
                  var isArr = isArray(value);
                  if (isArr) {
                    result = initCloneArray(value);
                    if (!isDeep) {
                      return copyArray(value, result);
                    }
                  } else {
                    var tag = getTag(value),
                        isFunc = tag == funcTag || tag == genTag;

                    if (isBuffer(value)) {
                      return cloneBuffer(value, isDeep);
                    }
                    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                      result = (isFlat || isFunc) ? {} : initCloneObject(value);
                      if (!isDeep) {
                        return isFlat
                          ? copySymbolsIn(value, baseAssignIn(result, value))
                          : copySymbols(value, baseAssign(result, value));
                      }
                    } else {
                      if (!cloneableTags[tag]) {
                        return object ? value : {};
                      }
                      result = initCloneByTag(value, tag, isDeep);
                    }
                  }
                  // Check for circular references and return its corresponding clone.
                  stack || (stack = new Stack);
                  var stacked = stack.get(value);
                  if (stacked) {
                    return stacked;
                  }
                  stack.set(value, result);

                  if (isSet(value)) {
                    value.forEach(function(subValue) {
                      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
                    });

                    return result;
                  }

                  if (isMap(value)) {
                    value.forEach(function(subValue, key) {
                      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
                    });

                    return result;
                  }

                  var keysFunc = isFull
                    ? (isFlat ? getAllKeysIn : getAllKeys)
                    : (isFlat ? keysIn : keys);

                  var props = isArr ? undefined : keysFunc(value);
                  arrayEach(props || value, function(subValue, key) {
                    if (props) {
                      key = subValue;
                      subValue = value[key];
                    }
                    // Recursively populate clone (susceptible to call stack limits).
                    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
                  });
                  return result;
                }

                /**
                 * The base implementation of `_.conforms` which doesn't clone `source`.
                 *
                 * @private
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseConforms(source) {
                  var props = keys(source);
                  return function(object) {
                    return baseConformsTo(object, source, props);
                  };
                }

                /**
                 * The base implementation of `_.conformsTo` which accepts `props` to check.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                 */
                function baseConformsTo(object, source, props) {
                  var length = props.length;
                  if (object == null) {
                    return !length;
                  }
                  object = Object(object);
                  while (length--) {
                    var key = props[length],
                        predicate = source[key],
                        value = object[key];

                    if ((value === undefined && !(key in object)) || !predicate(value)) {
                      return false;
                    }
                  }
                  return true;
                }

                /**
                 * The base implementation of `_.delay` and `_.defer` which accepts `args`
                 * to provide to `func`.
                 *
                 * @private
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @param {Array} args The arguments to provide to `func`.
                 * @returns {number|Object} Returns the timer id or timeout object.
                 */
                function baseDelay(func, wait, args) {
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  return setTimeout(function() { func.apply(undefined, args); }, wait);
                }

                /**
                 * The base implementation of methods like `_.difference` without support
                 * for excluding multiple arrays or iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Array} values The values to exclude.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 */
                function baseDifference(array, values, iteratee, comparator) {
                  var index = -1,
                      includes = arrayIncludes,
                      isCommon = true,
                      length = array.length,
                      result = [],
                      valuesLength = values.length;

                  if (!length) {
                    return result;
                  }
                  if (iteratee) {
                    values = arrayMap(values, baseUnary(iteratee));
                  }
                  if (comparator) {
                    includes = arrayIncludesWith;
                    isCommon = false;
                  }
                  else if (values.length >= LARGE_ARRAY_SIZE) {
                    includes = cacheHas;
                    isCommon = false;
                    values = new SetCache(values);
                  }
                  outer:
                  while (++index < length) {
                    var value = array[index],
                        computed = iteratee == null ? value : iteratee(value);

                    value = (comparator || value !== 0) ? value : 0;
                    if (isCommon && computed === computed) {
                      var valuesIndex = valuesLength;
                      while (valuesIndex--) {
                        if (values[valuesIndex] === computed) {
                          continue outer;
                        }
                      }
                      result.push(value);
                    }
                    else if (!includes(values, computed, comparator)) {
                      result.push(value);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.forEach` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 */
                var baseEach = createBaseEach(baseForOwn);

                /**
                 * The base implementation of `_.forEachRight` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 */
                var baseEachRight = createBaseEach(baseForOwnRight, true);

                /**
                 * The base implementation of `_.every` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if all elements pass the predicate check,
                 *  else `false`
                 */
                function baseEvery(collection, predicate) {
                  var result = true;
                  baseEach(collection, function(value, index, collection) {
                    result = !!predicate(value, index, collection);
                    return result;
                  });
                  return result;
                }

                /**
                 * The base implementation of methods like `_.max` and `_.min` which accepts a
                 * `comparator` to determine the extremum value.
                 *
                 * @private
                 * @param {Array} array The array to iterate over.
                 * @param {Function} iteratee The iteratee invoked per iteration.
                 * @param {Function} comparator The comparator used to compare values.
                 * @returns {*} Returns the extremum value.
                 */
                function baseExtremum(array, iteratee, comparator) {
                  var index = -1,
                      length = array.length;

                  while (++index < length) {
                    var value = array[index],
                        current = iteratee(value);

                    if (current != null && (computed === undefined
                          ? (current === current && !isSymbol(current))
                          : comparator(current, computed)
                        )) {
                      var computed = current,
                          result = value;
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.fill` without an iteratee call guard.
                 *
                 * @private
                 * @param {Array} array The array to fill.
                 * @param {*} value The value to fill `array` with.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns `array`.
                 */
                function baseFill(array, value, start, end) {
                  var length = array.length;

                  start = toInteger(start);
                  if (start < 0) {
                    start = -start > length ? 0 : (length + start);
                  }
                  end = (end === undefined || end > length) ? length : toInteger(end);
                  if (end < 0) {
                    end += length;
                  }
                  end = start > end ? 0 : toLength(end);
                  while (start < end) {
                    array[start++] = value;
                  }
                  return array;
                }

                /**
                 * The base implementation of `_.filter` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 */
                function baseFilter(collection, predicate) {
                  var result = [];
                  baseEach(collection, function(value, index, collection) {
                    if (predicate(value, index, collection)) {
                      result.push(value);
                    }
                  });
                  return result;
                }

                /**
                 * The base implementation of `_.flatten` with support for restricting flattening.
                 *
                 * @private
                 * @param {Array} array The array to flatten.
                 * @param {number} depth The maximum recursion depth.
                 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
                 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
                 * @param {Array} [result=[]] The initial result value.
                 * @returns {Array} Returns the new flattened array.
                 */
                function baseFlatten(array, depth, predicate, isStrict, result) {
                  var index = -1,
                      length = array.length;

                  predicate || (predicate = isFlattenable);
                  result || (result = []);

                  while (++index < length) {
                    var value = array[index];
                    if (depth > 0 && predicate(value)) {
                      if (depth > 1) {
                        // Recursively flatten arrays (susceptible to call stack limits).
                        baseFlatten(value, depth - 1, predicate, isStrict, result);
                      } else {
                        arrayPush(result, value);
                      }
                    } else if (!isStrict) {
                      result[result.length] = value;
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `baseForOwn` which iterates over `object`
                 * properties returned by `keysFunc` and invokes `iteratee` for each property.
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @returns {Object} Returns `object`.
                 */
                var baseFor = createBaseFor();

                /**
                 * This function is like `baseFor` except that it iterates over properties
                 * in the opposite order.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @returns {Object} Returns `object`.
                 */
                var baseForRight = createBaseFor(true);

                /**
                 * The base implementation of `_.forOwn` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 */
                function baseForOwn(object, iteratee) {
                  return object && baseFor(object, iteratee, keys);
                }

                /**
                 * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 */
                function baseForOwnRight(object, iteratee) {
                  return object && baseForRight(object, iteratee, keys);
                }

                /**
                 * The base implementation of `_.functions` which creates an array of
                 * `object` function property names filtered from `props`.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Array} props The property names to filter.
                 * @returns {Array} Returns the function names.
                 */
                function baseFunctions(object, props) {
                  return arrayFilter(props, function(key) {
                    return isFunction(object[key]);
                  });
                }

                /**
                 * The base implementation of `_.get` without support for default values.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to get.
                 * @returns {*} Returns the resolved value.
                 */
                function baseGet(object, path) {
                  path = castPath(path, object);

                  var index = 0,
                      length = path.length;

                  while (object != null && index < length) {
                    object = object[toKey(path[index++])];
                  }
                  return (index && index == length) ? object : undefined;
                }

                /**
                 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
                 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
                 * symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @param {Function} symbolsFunc The function to get the symbols of `object`.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                  var result = keysFunc(object);
                  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
                }

                /**
                 * The base implementation of `getTag` without fallbacks for buggy environments.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the `toStringTag`.
                 */
                function baseGetTag(value) {
                  if (value == null) {
                    return value === undefined ? undefinedTag : nullTag;
                  }
                  return (symToStringTag && symToStringTag in Object(value))
                    ? getRawTag(value)
                    : objectToString(value);
                }

                /**
                 * The base implementation of `_.gt` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than `other`,
                 *  else `false`.
                 */
                function baseGt(value, other) {
                  return value > other;
                }

                /**
                 * The base implementation of `_.has` without support for deep paths.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {Array|string} key The key to check.
                 * @returns {boolean} Returns `true` if `key` exists, else `false`.
                 */
                function baseHas(object, key) {
                  return object != null && hasOwnProperty.call(object, key);
                }

                /**
                 * The base implementation of `_.hasIn` without support for deep paths.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {Array|string} key The key to check.
                 * @returns {boolean} Returns `true` if `key` exists, else `false`.
                 */
                function baseHasIn(object, key) {
                  return object != null && key in Object(object);
                }

                /**
                 * The base implementation of `_.inRange` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {number} number The number to check.
                 * @param {number} start The start of the range.
                 * @param {number} end The end of the range.
                 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                 */
                function baseInRange(number, start, end) {
                  return number >= nativeMin(start, end) && number < nativeMax(start, end);
                }

                /**
                 * The base implementation of methods like `_.intersection`, without support
                 * for iteratee shorthands, that accepts an array of arrays to inspect.
                 *
                 * @private
                 * @param {Array} arrays The arrays to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of shared values.
                 */
                function baseIntersection(arrays, iteratee, comparator) {
                  var includes = comparator ? arrayIncludesWith : arrayIncludes,
                      length = arrays[0].length,
                      othLength = arrays.length,
                      othIndex = othLength,
                      caches = Array(othLength),
                      maxLength = Infinity,
                      result = [];

                  while (othIndex--) {
                    var array = arrays[othIndex];
                    if (othIndex && iteratee) {
                      array = arrayMap(array, baseUnary(iteratee));
                    }
                    maxLength = nativeMin(array.length, maxLength);
                    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
                      ? new SetCache(othIndex && array)
                      : undefined;
                  }
                  array = arrays[0];

                  var index = -1,
                      seen = caches[0];

                  outer:
                  while (++index < length && result.length < maxLength) {
                    var value = array[index],
                        computed = iteratee ? iteratee(value) : value;

                    value = (comparator || value !== 0) ? value : 0;
                    if (!(seen
                          ? cacheHas(seen, computed)
                          : includes(result, computed, comparator)
                        )) {
                      othIndex = othLength;
                      while (--othIndex) {
                        var cache = caches[othIndex];
                        if (!(cache
                              ? cacheHas(cache, computed)
                              : includes(arrays[othIndex], computed, comparator))
                            ) {
                          continue outer;
                        }
                      }
                      if (seen) {
                        seen.push(computed);
                      }
                      result.push(value);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.invert` and `_.invertBy` which inverts
                 * `object` with values transformed by `iteratee` and set by `setter`.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} setter The function to set `accumulator` values.
                 * @param {Function} iteratee The iteratee to transform values.
                 * @param {Object} accumulator The initial inverted object.
                 * @returns {Function} Returns `accumulator`.
                 */
                function baseInverter(object, setter, iteratee, accumulator) {
                  baseForOwn(object, function(value, key, object) {
                    setter(accumulator, iteratee(value), key, object);
                  });
                  return accumulator;
                }

                /**
                 * The base implementation of `_.invoke` without support for individual
                 * method arguments.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {Array} args The arguments to invoke the method with.
                 * @returns {*} Returns the result of the invoked method.
                 */
                function baseInvoke(object, path, args) {
                  path = castPath(path, object);
                  object = parent(object, path);
                  var func = object == null ? object : object[toKey(last(path))];
                  return func == null ? undefined : apply(func, object, args);
                }

                /**
                 * The base implementation of `_.isArguments`.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                 */
                function baseIsArguments(value) {
                  return isObjectLike(value) && baseGetTag(value) == argsTag;
                }

                /**
                 * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                 */
                function baseIsArrayBuffer(value) {
                  return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
                }

                /**
                 * The base implementation of `_.isDate` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                 */
                function baseIsDate(value) {
                  return isObjectLike(value) && baseGetTag(value) == dateTag;
                }

                /**
                 * The base implementation of `_.isEqual` which supports partial comparisons
                 * and tracks traversed objects.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @param {boolean} bitmask The bitmask flags.
                 *  1 - Unordered comparison
                 *  2 - Partial comparison
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 */
                function baseIsEqual(value, other, bitmask, customizer, stack) {
                  if (value === other) {
                    return true;
                  }
                  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                    return value !== value && other !== other;
                  }
                  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
                }

                /**
                 * A specialized version of `baseIsEqual` for arrays and objects which performs
                 * deep comparisons and tracks traversed objects enabling objects with circular
                 * references to be compared.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                  var objIsArr = isArray(object),
                      othIsArr = isArray(other),
                      objTag = objIsArr ? arrayTag : getTag(object),
                      othTag = othIsArr ? arrayTag : getTag(other);

                  objTag = objTag == argsTag ? objectTag : objTag;
                  othTag = othTag == argsTag ? objectTag : othTag;

                  var objIsObj = objTag == objectTag,
                      othIsObj = othTag == objectTag,
                      isSameTag = objTag == othTag;

                  if (isSameTag && isBuffer(object)) {
                    if (!isBuffer(other)) {
                      return false;
                    }
                    objIsArr = true;
                    objIsObj = false;
                  }
                  if (isSameTag && !objIsObj) {
                    stack || (stack = new Stack);
                    return (objIsArr || isTypedArray(object))
                      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                  }
                  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                    if (objIsWrapped || othIsWrapped) {
                      var objUnwrapped = objIsWrapped ? object.value() : object,
                          othUnwrapped = othIsWrapped ? other.value() : other;

                      stack || (stack = new Stack);
                      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                    }
                  }
                  if (!isSameTag) {
                    return false;
                  }
                  stack || (stack = new Stack);
                  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
                }

                /**
                 * The base implementation of `_.isMap` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                 */
                function baseIsMap(value) {
                  return isObjectLike(value) && getTag(value) == mapTag;
                }

                /**
                 * The base implementation of `_.isMatch` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @param {Array} matchData The property names, values, and compare flags to match.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 */
                function baseIsMatch(object, source, matchData, customizer) {
                  var index = matchData.length,
                      length = index,
                      noCustomizer = !customizer;

                  if (object == null) {
                    return !length;
                  }
                  object = Object(object);
                  while (index--) {
                    var data = matchData[index];
                    if ((noCustomizer && data[2])
                          ? data[1] !== object[data[0]]
                          : !(data[0] in object)
                        ) {
                      return false;
                    }
                  }
                  while (++index < length) {
                    data = matchData[index];
                    var key = data[0],
                        objValue = object[key],
                        srcValue = data[1];

                    if (noCustomizer && data[2]) {
                      if (objValue === undefined && !(key in object)) {
                        return false;
                      }
                    } else {
                      var stack = new Stack;
                      if (customizer) {
                        var result = customizer(objValue, srcValue, key, object, source, stack);
                      }
                      if (!(result === undefined
                            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                            : result
                          )) {
                        return false;
                      }
                    }
                  }
                  return true;
                }

                /**
                 * The base implementation of `_.isNative` without bad shim checks.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a native function,
                 *  else `false`.
                 */
                function baseIsNative(value) {
                  if (!isObject(value) || isMasked(value)) {
                    return false;
                  }
                  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                  return pattern.test(toSource(value));
                }

                /**
                 * The base implementation of `_.isRegExp` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                 */
                function baseIsRegExp(value) {
                  return isObjectLike(value) && baseGetTag(value) == regexpTag;
                }

                /**
                 * The base implementation of `_.isSet` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                 */
                function baseIsSet(value) {
                  return isObjectLike(value) && getTag(value) == setTag;
                }

                /**
                 * The base implementation of `_.isTypedArray` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                 */
                function baseIsTypedArray(value) {
                  return isObjectLike(value) &&
                    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
                }

                /**
                 * The base implementation of `_.iteratee`.
                 *
                 * @private
                 * @param {*} [value=_.identity] The value to convert to an iteratee.
                 * @returns {Function} Returns the iteratee.
                 */
                function baseIteratee(value) {
                  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                  if (typeof value == 'function') {
                    return value;
                  }
                  if (value == null) {
                    return identity;
                  }
                  if (typeof value == 'object') {
                    return isArray(value)
                      ? baseMatchesProperty(value[0], value[1])
                      : baseMatches(value);
                  }
                  return property(value);
                }

                /**
                 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function baseKeys(object) {
                  if (!isPrototype(object)) {
                    return nativeKeys(object);
                  }
                  var result = [];
                  for (var key in Object(object)) {
                    if (hasOwnProperty.call(object, key) && key != 'constructor') {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function baseKeysIn(object) {
                  if (!isObject(object)) {
                    return nativeKeysIn(object);
                  }
                  var isProto = isPrototype(object),
                      result = [];

                  for (var key in object) {
                    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.lt` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than `other`,
                 *  else `false`.
                 */
                function baseLt(value, other) {
                  return value < other;
                }

                /**
                 * The base implementation of `_.map` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns the new mapped array.
                 */
                function baseMap(collection, iteratee) {
                  var index = -1,
                      result = isArrayLike(collection) ? Array(collection.length) : [];

                  baseEach(collection, function(value, key, collection) {
                    result[++index] = iteratee(value, key, collection);
                  });
                  return result;
                }

                /**
                 * The base implementation of `_.matches` which doesn't clone `source`.
                 *
                 * @private
                 * @param {Object} source The object of property values to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseMatches(source) {
                  var matchData = getMatchData(source);
                  if (matchData.length == 1 && matchData[0][2]) {
                    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                  }
                  return function(object) {
                    return object === source || baseIsMatch(object, source, matchData);
                  };
                }

                /**
                 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
                 *
                 * @private
                 * @param {string} path The path of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseMatchesProperty(path, srcValue) {
                  if (isKey(path) && isStrictComparable(srcValue)) {
                    return matchesStrictComparable(toKey(path), srcValue);
                  }
                  return function(object) {
                    var objValue = get(object, path);
                    return (objValue === undefined && objValue === srcValue)
                      ? hasIn(object, path)
                      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                  };
                }

                /**
                 * The base implementation of `_.merge` without support for multiple sources.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {number} srcIndex The index of `source`.
                 * @param {Function} [customizer] The function to customize merged values.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 */
                function baseMerge(object, source, srcIndex, customizer, stack) {
                  if (object === source) {
                    return;
                  }
                  baseFor(source, function(srcValue, key) {
                    if (isObject(srcValue)) {
                      stack || (stack = new Stack);
                      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                    }
                    else {
                      var newValue = customizer
                        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
                        : undefined;

                      if (newValue === undefined) {
                        newValue = srcValue;
                      }
                      assignMergeValue(object, key, newValue);
                    }
                  }, keysIn);
                }

                /**
                 * A specialized version of `baseMerge` for arrays and objects which performs
                 * deep merges and tracks traversed objects enabling objects with circular
                 * references to be merged.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {string} key The key of the value to merge.
                 * @param {number} srcIndex The index of `source`.
                 * @param {Function} mergeFunc The function to merge values.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 */
                function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                  var objValue = safeGet(object, key),
                      srcValue = safeGet(source, key),
                      stacked = stack.get(srcValue);

                  if (stacked) {
                    assignMergeValue(object, key, stacked);
                    return;
                  }
                  var newValue = customizer
                    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
                    : undefined;

                  var isCommon = newValue === undefined;

                  if (isCommon) {
                    var isArr = isArray(srcValue),
                        isBuff = !isArr && isBuffer(srcValue),
                        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                    newValue = srcValue;
                    if (isArr || isBuff || isTyped) {
                      if (isArray(objValue)) {
                        newValue = objValue;
                      }
                      else if (isArrayLikeObject(objValue)) {
                        newValue = copyArray(objValue);
                      }
                      else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                      }
                      else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                      }
                      else {
                        newValue = [];
                      }
                    }
                    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                      newValue = objValue;
                      if (isArguments(objValue)) {
                        newValue = toPlainObject(objValue);
                      }
                      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
                        newValue = initCloneObject(srcValue);
                      }
                    }
                    else {
                      isCommon = false;
                    }
                  }
                  if (isCommon) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, newValue);
                    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                    stack['delete'](srcValue);
                  }
                  assignMergeValue(object, key, newValue);
                }

                /**
                 * The base implementation of `_.nth` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {Array} array The array to query.
                 * @param {number} n The index of the element to return.
                 * @returns {*} Returns the nth element of `array`.
                 */
                function baseNth(array, n) {
                  var length = array.length;
                  if (!length) {
                    return;
                  }
                  n += n < 0 ? length : 0;
                  return isIndex(n, length) ? array[n] : undefined;
                }

                /**
                 * The base implementation of `_.orderBy` without param guards.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
                 * @param {string[]} orders The sort orders of `iteratees`.
                 * @returns {Array} Returns the new sorted array.
                 */
                function baseOrderBy(collection, iteratees, orders) {
                  var index = -1;
                  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

                  var result = baseMap(collection, function(value, key, collection) {
                    var criteria = arrayMap(iteratees, function(iteratee) {
                      return iteratee(value);
                    });
                    return { 'criteria': criteria, 'index': ++index, 'value': value };
                  });

                  return baseSortBy(result, function(object, other) {
                    return compareMultiple(object, other, orders);
                  });
                }

                /**
                 * The base implementation of `_.pick` without support for individual
                 * property identifiers.
                 *
                 * @private
                 * @param {Object} object The source object.
                 * @param {string[]} paths The property paths to pick.
                 * @returns {Object} Returns the new object.
                 */
                function basePick(object, paths) {
                  return basePickBy(object, paths, function(value, path) {
                    return hasIn(object, path);
                  });
                }

                /**
                 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The source object.
                 * @param {string[]} paths The property paths to pick.
                 * @param {Function} predicate The function invoked per property.
                 * @returns {Object} Returns the new object.
                 */
                function basePickBy(object, paths, predicate) {
                  var index = -1,
                      length = paths.length,
                      result = {};

                  while (++index < length) {
                    var path = paths[index],
                        value = baseGet(object, path);

                    if (predicate(value, path)) {
                      baseSet(result, castPath(path, object), value);
                    }
                  }
                  return result;
                }

                /**
                 * A specialized version of `baseProperty` which supports deep paths.
                 *
                 * @private
                 * @param {Array|string} path The path of the property to get.
                 * @returns {Function} Returns the new accessor function.
                 */
                function basePropertyDeep(path) {
                  return function(object) {
                    return baseGet(object, path);
                  };
                }

                /**
                 * The base implementation of `_.pullAllBy` without support for iteratee
                 * shorthands.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns `array`.
                 */
                function basePullAll(array, values, iteratee, comparator) {
                  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                      index = -1,
                      length = values.length,
                      seen = array;

                  if (array === values) {
                    values = copyArray(values);
                  }
                  if (iteratee) {
                    seen = arrayMap(array, baseUnary(iteratee));
                  }
                  while (++index < length) {
                    var fromIndex = 0,
                        value = values[index],
                        computed = iteratee ? iteratee(value) : value;

                    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                      if (seen !== array) {
                        splice.call(seen, fromIndex, 1);
                      }
                      splice.call(array, fromIndex, 1);
                    }
                  }
                  return array;
                }

                /**
                 * The base implementation of `_.pullAt` without support for individual
                 * indexes or capturing the removed elements.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {number[]} indexes The indexes of elements to remove.
                 * @returns {Array} Returns `array`.
                 */
                function basePullAt(array, indexes) {
                  var length = array ? indexes.length : 0,
                      lastIndex = length - 1;

                  while (length--) {
                    var index = indexes[length];
                    if (length == lastIndex || index !== previous) {
                      var previous = index;
                      if (isIndex(index)) {
                        splice.call(array, index, 1);
                      } else {
                        baseUnset(array, index);
                      }
                    }
                  }
                  return array;
                }

                /**
                 * The base implementation of `_.random` without support for returning
                 * floating-point numbers.
                 *
                 * @private
                 * @param {number} lower The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the random number.
                 */
                function baseRandom(lower, upper) {
                  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
                }

                /**
                 * The base implementation of `_.range` and `_.rangeRight` which doesn't
                 * coerce arguments.
                 *
                 * @private
                 * @param {number} start The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} step The value to increment or decrement by.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Array} Returns the range of numbers.
                 */
                function baseRange(start, end, step, fromRight) {
                  var index = -1,
                      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                      result = Array(length);

                  while (length--) {
                    result[fromRight ? length : ++index] = start;
                    start += step;
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.repeat` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {string} string The string to repeat.
                 * @param {number} n The number of times to repeat the string.
                 * @returns {string} Returns the repeated string.
                 */
                function baseRepeat(string, n) {
                  var result = '';
                  if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                    return result;
                  }
                  // Leverage the exponentiation by squaring algorithm for a faster repeat.
                  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                  do {
                    if (n % 2) {
                      result += string;
                    }
                    n = nativeFloor(n / 2);
                    if (n) {
                      string += string;
                    }
                  } while (n);

                  return result;
                }

                /**
                 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @returns {Function} Returns the new function.
                 */
                function baseRest(func, start) {
                  return setToString(overRest(func, start, identity), func + '');
                }

                /**
                 * The base implementation of `_.sample`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to sample.
                 * @returns {*} Returns the random element.
                 */
                function baseSample(collection) {
                  return arraySample(values(collection));
                }

                /**
                 * The base implementation of `_.sampleSize` without param guards.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to sample.
                 * @param {number} n The number of elements to sample.
                 * @returns {Array} Returns the random elements.
                 */
                function baseSampleSize(collection, n) {
                  var array = values(collection);
                  return shuffleSelf(array, baseClamp(n, 0, array.length));
                }

                /**
                 * The base implementation of `_.set`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @param {Function} [customizer] The function to customize path creation.
                 * @returns {Object} Returns `object`.
                 */
                function baseSet(object, path, value, customizer) {
                  if (!isObject(object)) {
                    return object;
                  }
                  path = castPath(path, object);

                  var index = -1,
                      length = path.length,
                      lastIndex = length - 1,
                      nested = object;

                  while (nested != null && ++index < length) {
                    var key = toKey(path[index]),
                        newValue = value;

                    if (index != lastIndex) {
                      var objValue = nested[key];
                      newValue = customizer ? customizer(objValue, key, nested) : undefined;
                      if (newValue === undefined) {
                        newValue = isObject(objValue)
                          ? objValue
                          : (isIndex(path[index + 1]) ? [] : {});
                      }
                    }
                    assignValue(nested, key, newValue);
                    nested = nested[key];
                  }
                  return object;
                }

                /**
                 * The base implementation of `setData` without support for hot loop shorting.
                 *
                 * @private
                 * @param {Function} func The function to associate metadata with.
                 * @param {*} data The metadata.
                 * @returns {Function} Returns `func`.
                 */
                var baseSetData = !metaMap ? identity : function(func, data) {
                  metaMap.set(func, data);
                  return func;
                };

                /**
                 * The base implementation of `setToString` without support for hot loop shorting.
                 *
                 * @private
                 * @param {Function} func The function to modify.
                 * @param {Function} string The `toString` result.
                 * @returns {Function} Returns `func`.
                 */
                var baseSetToString = !defineProperty ? identity : function(func, string) {
                  return defineProperty(func, 'toString', {
                    'configurable': true,
                    'enumerable': false,
                    'value': constant(string),
                    'writable': true
                  });
                };

                /**
                 * The base implementation of `_.shuffle`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 */
                function baseShuffle(collection) {
                  return shuffleSelf(values(collection));
                }

                /**
                 * The base implementation of `_.slice` without an iteratee call guard.
                 *
                 * @private
                 * @param {Array} array The array to slice.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function baseSlice(array, start, end) {
                  var index = -1,
                      length = array.length;

                  if (start < 0) {
                    start = -start > length ? 0 : (length + start);
                  }
                  end = end > length ? length : end;
                  if (end < 0) {
                    end += length;
                  }
                  length = start > end ? 0 : ((end - start) >>> 0);
                  start >>>= 0;

                  var result = Array(length);
                  while (++index < length) {
                    result[index] = array[index + start];
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.some` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if any element passes the predicate check,
                 *  else `false`.
                 */
                function baseSome(collection, predicate) {
                  var result;

                  baseEach(collection, function(value, index, collection) {
                    result = predicate(value, index, collection);
                    return !result;
                  });
                  return !!result;
                }

                /**
                 * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
                 * performs a binary search of `array` to determine the index at which `value`
                 * should be inserted into `array` in order to maintain its sort order.
                 *
                 * @private
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {boolean} [retHighest] Specify returning the highest qualified index.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 */
                function baseSortedIndex(array, value, retHighest) {
                  var low = 0,
                      high = array == null ? low : array.length;

                  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                    while (low < high) {
                      var mid = (low + high) >>> 1,
                          computed = array[mid];

                      if (computed !== null && !isSymbol(computed) &&
                          (retHighest ? (computed <= value) : (computed < value))) {
                        low = mid + 1;
                      } else {
                        high = mid;
                      }
                    }
                    return high;
                  }
                  return baseSortedIndexBy(array, value, identity, retHighest);
                }

                /**
                 * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
                 * which invokes `iteratee` for `value` and each element of `array` to compute
                 * their sort ranking. The iteratee is invoked with one argument; (value).
                 *
                 * @private
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} iteratee The iteratee invoked per element.
                 * @param {boolean} [retHighest] Specify returning the highest qualified index.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 */
                function baseSortedIndexBy(array, value, iteratee, retHighest) {
                  value = iteratee(value);

                  var low = 0,
                      high = array == null ? 0 : array.length,
                      valIsNaN = value !== value,
                      valIsNull = value === null,
                      valIsSymbol = isSymbol(value),
                      valIsUndefined = value === undefined;

                  while (low < high) {
                    var mid = nativeFloor((low + high) / 2),
                        computed = iteratee(array[mid]),
                        othIsDefined = computed !== undefined,
                        othIsNull = computed === null,
                        othIsReflexive = computed === computed,
                        othIsSymbol = isSymbol(computed);

                    if (valIsNaN) {
                      var setLow = retHighest || othIsReflexive;
                    } else if (valIsUndefined) {
                      setLow = othIsReflexive && (retHighest || othIsDefined);
                    } else if (valIsNull) {
                      setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                    } else if (valIsSymbol) {
                      setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                    } else if (othIsNull || othIsSymbol) {
                      setLow = false;
                    } else {
                      setLow = retHighest ? (computed <= value) : (computed < value);
                    }
                    if (setLow) {
                      low = mid + 1;
                    } else {
                      high = mid;
                    }
                  }
                  return nativeMin(high, MAX_ARRAY_INDEX);
                }

                /**
                 * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
                 * support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 */
                function baseSortedUniq(array, iteratee) {
                  var index = -1,
                      length = array.length,
                      resIndex = 0,
                      result = [];

                  while (++index < length) {
                    var value = array[index],
                        computed = iteratee ? iteratee(value) : value;

                    if (!index || !eq(computed, seen)) {
                      var seen = computed;
                      result[resIndex++] = value === 0 ? 0 : value;
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.toNumber` which doesn't ensure correct
                 * conversions of binary, hexadecimal, or octal string values.
                 *
                 * @private
                 * @param {*} value The value to process.
                 * @returns {number} Returns the number.
                 */
                function baseToNumber(value) {
                  if (typeof value == 'number') {
                    return value;
                  }
                  if (isSymbol(value)) {
                    return NAN;
                  }
                  return +value;
                }

                /**
                 * The base implementation of `_.toString` which doesn't convert nullish
                 * values to empty strings.
                 *
                 * @private
                 * @param {*} value The value to process.
                 * @returns {string} Returns the string.
                 */
                function baseToString(value) {
                  // Exit early for strings to avoid a performance hit in some environments.
                  if (typeof value == 'string') {
                    return value;
                  }
                  if (isArray(value)) {
                    // Recursively convert values (susceptible to call stack limits).
                    return arrayMap(value, baseToString) + '';
                  }
                  if (isSymbol(value)) {
                    return symbolToString ? symbolToString.call(value) : '';
                  }
                  var result = (value + '');
                  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                }

                /**
                 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 */
                function baseUniq(array, iteratee, comparator) {
                  var index = -1,
                      includes = arrayIncludes,
                      length = array.length,
                      isCommon = true,
                      result = [],
                      seen = result;

                  if (comparator) {
                    isCommon = false;
                    includes = arrayIncludesWith;
                  }
                  else if (length >= LARGE_ARRAY_SIZE) {
                    var set = iteratee ? null : createSet(array);
                    if (set) {
                      return setToArray(set);
                    }
                    isCommon = false;
                    includes = cacheHas;
                    seen = new SetCache;
                  }
                  else {
                    seen = iteratee ? [] : result;
                  }
                  outer:
                  while (++index < length) {
                    var value = array[index],
                        computed = iteratee ? iteratee(value) : value;

                    value = (comparator || value !== 0) ? value : 0;
                    if (isCommon && computed === computed) {
                      var seenIndex = seen.length;
                      while (seenIndex--) {
                        if (seen[seenIndex] === computed) {
                          continue outer;
                        }
                      }
                      if (iteratee) {
                        seen.push(computed);
                      }
                      result.push(value);
                    }
                    else if (!includes(seen, computed, comparator)) {
                      if (seen !== result) {
                        seen.push(computed);
                      }
                      result.push(value);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.unset`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The property path to unset.
                 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                 */
                function baseUnset(object, path) {
                  path = castPath(path, object);
                  object = parent(object, path);
                  return object == null || delete object[toKey(last(path))];
                }

                /**
                 * The base implementation of `_.update`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to update.
                 * @param {Function} updater The function to produce the updated value.
                 * @param {Function} [customizer] The function to customize path creation.
                 * @returns {Object} Returns `object`.
                 */
                function baseUpdate(object, path, updater, customizer) {
                  return baseSet(object, path, updater(baseGet(object, path)), customizer);
                }

                /**
                 * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
                 * without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to query.
                 * @param {Function} predicate The function invoked per iteration.
                 * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function baseWhile(array, predicate, isDrop, fromRight) {
                  var length = array.length,
                      index = fromRight ? length : -1;

                  while ((fromRight ? index-- : ++index < length) &&
                    predicate(array[index], index, array)) {}

                  return isDrop
                    ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
                    : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
                }

                /**
                 * The base implementation of `wrapperValue` which returns the result of
                 * performing a sequence of actions on the unwrapped `value`, where each
                 * successive action is supplied the return value of the previous.
                 *
                 * @private
                 * @param {*} value The unwrapped value.
                 * @param {Array} actions Actions to perform to resolve the unwrapped value.
                 * @returns {*} Returns the resolved value.
                 */
                function baseWrapperValue(value, actions) {
                  var result = value;
                  if (result instanceof LazyWrapper) {
                    result = result.value();
                  }
                  return arrayReduce(actions, function(result, action) {
                    return action.func.apply(action.thisArg, arrayPush([result], action.args));
                  }, result);
                }

                /**
                 * The base implementation of methods like `_.xor`, without support for
                 * iteratee shorthands, that accepts an array of arrays to inspect.
                 *
                 * @private
                 * @param {Array} arrays The arrays to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of values.
                 */
                function baseXor(arrays, iteratee, comparator) {
                  var length = arrays.length;
                  if (length < 2) {
                    return length ? baseUniq(arrays[0]) : [];
                  }
                  var index = -1,
                      result = Array(length);

                  while (++index < length) {
                    var array = arrays[index],
                        othIndex = -1;

                    while (++othIndex < length) {
                      if (othIndex != index) {
                        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                      }
                    }
                  }
                  return baseUniq(baseFlatten(result, 1), iteratee, comparator);
                }

                /**
                 * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
                 *
                 * @private
                 * @param {Array} props The property identifiers.
                 * @param {Array} values The property values.
                 * @param {Function} assignFunc The function to assign values.
                 * @returns {Object} Returns the new object.
                 */
                function baseZipObject(props, values, assignFunc) {
                  var index = -1,
                      length = props.length,
                      valsLength = values.length,
                      result = {};

                  while (++index < length) {
                    var value = index < valsLength ? values[index] : undefined;
                    assignFunc(result, props[index], value);
                  }
                  return result;
                }

                /**
                 * Casts `value` to an empty array if it's not an array like object.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {Array|Object} Returns the cast array-like object.
                 */
                function castArrayLikeObject(value) {
                  return isArrayLikeObject(value) ? value : [];
                }

                /**
                 * Casts `value` to `identity` if it's not a function.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {Function} Returns cast function.
                 */
                function castFunction(value) {
                  return typeof value == 'function' ? value : identity;
                }

                /**
                 * Casts `value` to a path array if it's not one.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @param {Object} [object] The object to query keys on.
                 * @returns {Array} Returns the cast property path array.
                 */
                function castPath(value, object) {
                  if (isArray(value)) {
                    return value;
                  }
                  return isKey(value, object) ? [value] : stringToPath(toString(value));
                }

                /**
                 * A `baseRest` alias which can be replaced with `identity` by module
                 * replacement plugins.
                 *
                 * @private
                 * @type {Function}
                 * @param {Function} func The function to apply a rest parameter to.
                 * @returns {Function} Returns the new function.
                 */
                var castRest = baseRest;

                /**
                 * Casts `array` to a slice if it's needed.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {number} start The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the cast slice.
                 */
                function castSlice(array, start, end) {
                  var length = array.length;
                  end = end === undefined ? length : end;
                  return (!start && end >= length) ? array : baseSlice(array, start, end);
                }

                /**
                 * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
                 *
                 * @private
                 * @param {number|Object} id The timer id or timeout object of the timer to clear.
                 */
                var clearTimeout = ctxClearTimeout || function(id) {
                  return root.clearTimeout(id);
                };

                /**
                 * Creates a clone of  `buffer`.
                 *
                 * @private
                 * @param {Buffer} buffer The buffer to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Buffer} Returns the cloned buffer.
                 */
                function cloneBuffer(buffer, isDeep) {
                  if (isDeep) {
                    return buffer.slice();
                  }
                  var length = buffer.length,
                      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

                  buffer.copy(result);
                  return result;
                }

                /**
                 * Creates a clone of `arrayBuffer`.
                 *
                 * @private
                 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                 * @returns {ArrayBuffer} Returns the cloned array buffer.
                 */
                function cloneArrayBuffer(arrayBuffer) {
                  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                  return result;
                }

                /**
                 * Creates a clone of `dataView`.
                 *
                 * @private
                 * @param {Object} dataView The data view to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the cloned data view.
                 */
                function cloneDataView(dataView, isDeep) {
                  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
                }

                /**
                 * Creates a clone of `regexp`.
                 *
                 * @private
                 * @param {Object} regexp The regexp to clone.
                 * @returns {Object} Returns the cloned regexp.
                 */
                function cloneRegExp(regexp) {
                  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                  result.lastIndex = regexp.lastIndex;
                  return result;
                }

                /**
                 * Creates a clone of the `symbol` object.
                 *
                 * @private
                 * @param {Object} symbol The symbol object to clone.
                 * @returns {Object} Returns the cloned symbol object.
                 */
                function cloneSymbol(symbol) {
                  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
                }

                /**
                 * Creates a clone of `typedArray`.
                 *
                 * @private
                 * @param {Object} typedArray The typed array to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the cloned typed array.
                 */
                function cloneTypedArray(typedArray, isDeep) {
                  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
                }

                /**
                 * Compares values to sort them in ascending order.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {number} Returns the sort order indicator for `value`.
                 */
                function compareAscending(value, other) {
                  if (value !== other) {
                    var valIsDefined = value !== undefined,
                        valIsNull = value === null,
                        valIsReflexive = value === value,
                        valIsSymbol = isSymbol(value);

                    var othIsDefined = other !== undefined,
                        othIsNull = other === null,
                        othIsReflexive = other === other,
                        othIsSymbol = isSymbol(other);

                    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                        (valIsNull && othIsDefined && othIsReflexive) ||
                        (!valIsDefined && othIsReflexive) ||
                        !valIsReflexive) {
                      return 1;
                    }
                    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                        (othIsNull && valIsDefined && valIsReflexive) ||
                        (!othIsDefined && valIsReflexive) ||
                        !othIsReflexive) {
                      return -1;
                    }
                  }
                  return 0;
                }

                /**
                 * Used by `_.orderBy` to compare multiple properties of a value to another
                 * and stable sort them.
                 *
                 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
                 * specify an order of "desc" for descending or "asc" for ascending sort order
                 * of corresponding values.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {boolean[]|string[]} orders The order to sort by for each property.
                 * @returns {number} Returns the sort order indicator for `object`.
                 */
                function compareMultiple(object, other, orders) {
                  var index = -1,
                      objCriteria = object.criteria,
                      othCriteria = other.criteria,
                      length = objCriteria.length,
                      ordersLength = orders.length;

                  while (++index < length) {
                    var result = compareAscending(objCriteria[index], othCriteria[index]);
                    if (result) {
                      if (index >= ordersLength) {
                        return result;
                      }
                      var order = orders[index];
                      return result * (order == 'desc' ? -1 : 1);
                    }
                  }
                  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                  // that causes it, under certain circumstances, to provide the same value for
                  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                  // for more details.
                  //
                  // This also ensures a stable sort in V8 and other engines.
                  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                  return object.index - other.index;
                }

                /**
                 * Creates an array that is the composition of partially applied arguments,
                 * placeholders, and provided arguments into a single array of arguments.
                 *
                 * @private
                 * @param {Array} args The provided arguments.
                 * @param {Array} partials The arguments to prepend to those provided.
                 * @param {Array} holders The `partials` placeholder indexes.
                 * @params {boolean} [isCurried] Specify composing for a curried function.
                 * @returns {Array} Returns the new array of composed arguments.
                 */
                function composeArgs(args, partials, holders, isCurried) {
                  var argsIndex = -1,
                      argsLength = args.length,
                      holdersLength = holders.length,
                      leftIndex = -1,
                      leftLength = partials.length,
                      rangeLength = nativeMax(argsLength - holdersLength, 0),
                      result = Array(leftLength + rangeLength),
                      isUncurried = !isCurried;

                  while (++leftIndex < leftLength) {
                    result[leftIndex] = partials[leftIndex];
                  }
                  while (++argsIndex < holdersLength) {
                    if (isUncurried || argsIndex < argsLength) {
                      result[holders[argsIndex]] = args[argsIndex];
                    }
                  }
                  while (rangeLength--) {
                    result[leftIndex++] = args[argsIndex++];
                  }
                  return result;
                }

                /**
                 * This function is like `composeArgs` except that the arguments composition
                 * is tailored for `_.partialRight`.
                 *
                 * @private
                 * @param {Array} args The provided arguments.
                 * @param {Array} partials The arguments to append to those provided.
                 * @param {Array} holders The `partials` placeholder indexes.
                 * @params {boolean} [isCurried] Specify composing for a curried function.
                 * @returns {Array} Returns the new array of composed arguments.
                 */
                function composeArgsRight(args, partials, holders, isCurried) {
                  var argsIndex = -1,
                      argsLength = args.length,
                      holdersIndex = -1,
                      holdersLength = holders.length,
                      rightIndex = -1,
                      rightLength = partials.length,
                      rangeLength = nativeMax(argsLength - holdersLength, 0),
                      result = Array(rangeLength + rightLength),
                      isUncurried = !isCurried;

                  while (++argsIndex < rangeLength) {
                    result[argsIndex] = args[argsIndex];
                  }
                  var offset = argsIndex;
                  while (++rightIndex < rightLength) {
                    result[offset + rightIndex] = partials[rightIndex];
                  }
                  while (++holdersIndex < holdersLength) {
                    if (isUncurried || argsIndex < argsLength) {
                      result[offset + holders[holdersIndex]] = args[argsIndex++];
                    }
                  }
                  return result;
                }

                /**
                 * Copies the values of `source` to `array`.
                 *
                 * @private
                 * @param {Array} source The array to copy values from.
                 * @param {Array} [array=[]] The array to copy values to.
                 * @returns {Array} Returns `array`.
                 */
                function copyArray(source, array) {
                  var index = -1,
                      length = source.length;

                  array || (array = Array(length));
                  while (++index < length) {
                    array[index] = source[index];
                  }
                  return array;
                }

                /**
                 * Copies properties of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy properties from.
                 * @param {Array} props The property identifiers to copy.
                 * @param {Object} [object={}] The object to copy properties to.
                 * @param {Function} [customizer] The function to customize copied values.
                 * @returns {Object} Returns `object`.
                 */
                function copyObject(source, props, object, customizer) {
                  var isNew = !object;
                  object || (object = {});

                  var index = -1,
                      length = props.length;

                  while (++index < length) {
                    var key = props[index];

                    var newValue = customizer
                      ? customizer(object[key], source[key], key, object, source)
                      : undefined;

                    if (newValue === undefined) {
                      newValue = source[key];
                    }
                    if (isNew) {
                      baseAssignValue(object, key, newValue);
                    } else {
                      assignValue(object, key, newValue);
                    }
                  }
                  return object;
                }

                /**
                 * Copies own symbols of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy symbols from.
                 * @param {Object} [object={}] The object to copy symbols to.
                 * @returns {Object} Returns `object`.
                 */
                function copySymbols(source, object) {
                  return copyObject(source, getSymbols(source), object);
                }

                /**
                 * Copies own and inherited symbols of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy symbols from.
                 * @param {Object} [object={}] The object to copy symbols to.
                 * @returns {Object} Returns `object`.
                 */
                function copySymbolsIn(source, object) {
                  return copyObject(source, getSymbolsIn(source), object);
                }

                /**
                 * Creates a function like `_.groupBy`.
                 *
                 * @private
                 * @param {Function} setter The function to set accumulator values.
                 * @param {Function} [initializer] The accumulator object initializer.
                 * @returns {Function} Returns the new aggregator function.
                 */
                function createAggregator(setter, initializer) {
                  return function(collection, iteratee) {
                    var func = isArray(collection) ? arrayAggregator : baseAggregator,
                        accumulator = initializer ? initializer() : {};

                    return func(collection, setter, getIteratee(iteratee, 2), accumulator);
                  };
                }

                /**
                 * Creates a function like `_.assign`.
                 *
                 * @private
                 * @param {Function} assigner The function to assign values.
                 * @returns {Function} Returns the new assigner function.
                 */
                function createAssigner(assigner) {
                  return baseRest(function(object, sources) {
                    var index = -1,
                        length = sources.length,
                        customizer = length > 1 ? sources[length - 1] : undefined,
                        guard = length > 2 ? sources[2] : undefined;

                    customizer = (assigner.length > 3 && typeof customizer == 'function')
                      ? (length--, customizer)
                      : undefined;

                    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                      customizer = length < 3 ? undefined : customizer;
                      length = 1;
                    }
                    object = Object(object);
                    while (++index < length) {
                      var source = sources[index];
                      if (source) {
                        assigner(object, source, index, customizer);
                      }
                    }
                    return object;
                  });
                }

                /**
                 * Creates a `baseEach` or `baseEachRight` function.
                 *
                 * @private
                 * @param {Function} eachFunc The function to iterate over a collection.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new base function.
                 */
                function createBaseEach(eachFunc, fromRight) {
                  return function(collection, iteratee) {
                    if (collection == null) {
                      return collection;
                    }
                    if (!isArrayLike(collection)) {
                      return eachFunc(collection, iteratee);
                    }
                    var length = collection.length,
                        index = fromRight ? length : -1,
                        iterable = Object(collection);

                    while ((fromRight ? index-- : ++index < length)) {
                      if (iteratee(iterable[index], index, iterable) === false) {
                        break;
                      }
                    }
                    return collection;
                  };
                }

                /**
                 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new base function.
                 */
                function createBaseFor(fromRight) {
                  return function(object, iteratee, keysFunc) {
                    var index = -1,
                        iterable = Object(object),
                        props = keysFunc(object),
                        length = props.length;

                    while (length--) {
                      var key = props[fromRight ? length : ++index];
                      if (iteratee(iterable[key], key, iterable) === false) {
                        break;
                      }
                    }
                    return object;
                  };
                }

                /**
                 * Creates a function that wraps `func` to invoke it with the optional `this`
                 * binding of `thisArg`.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createBind(func, bitmask, thisArg) {
                  var isBind = bitmask & WRAP_BIND_FLAG,
                      Ctor = createCtor(func);

                  function wrapper() {
                    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                    return fn.apply(isBind ? thisArg : this, arguments);
                  }
                  return wrapper;
                }

                /**
                 * Creates a function like `_.lowerFirst`.
                 *
                 * @private
                 * @param {string} methodName The name of the `String` case method to use.
                 * @returns {Function} Returns the new case function.
                 */
                function createCaseFirst(methodName) {
                  return function(string) {
                    string = toString(string);

                    var strSymbols = hasUnicode(string)
                      ? stringToArray(string)
                      : undefined;

                    var chr = strSymbols
                      ? strSymbols[0]
                      : string.charAt(0);

                    var trailing = strSymbols
                      ? castSlice(strSymbols, 1).join('')
                      : string.slice(1);

                    return chr[methodName]() + trailing;
                  };
                }

                /**
                 * Creates a function like `_.camelCase`.
                 *
                 * @private
                 * @param {Function} callback The function to combine each word.
                 * @returns {Function} Returns the new compounder function.
                 */
                function createCompounder(callback) {
                  return function(string) {
                    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
                  };
                }

                /**
                 * Creates a function that produces an instance of `Ctor` regardless of
                 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
                 *
                 * @private
                 * @param {Function} Ctor The constructor to wrap.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createCtor(Ctor) {
                  return function() {
                    // Use a `switch` statement to work with class constructors. See
                    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                    // for more details.
                    var args = arguments;
                    switch (args.length) {
                      case 0: return new Ctor;
                      case 1: return new Ctor(args[0]);
                      case 2: return new Ctor(args[0], args[1]);
                      case 3: return new Ctor(args[0], args[1], args[2]);
                      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
                      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                    }
                    var thisBinding = baseCreate(Ctor.prototype),
                        result = Ctor.apply(thisBinding, args);

                    // Mimic the constructor's `return` behavior.
                    // See https://es5.github.io/#x13.2.2 for more details.
                    return isObject(result) ? result : thisBinding;
                  };
                }

                /**
                 * Creates a function that wraps `func` to enable currying.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {number} arity The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createCurry(func, bitmask, arity) {
                  var Ctor = createCtor(func);

                  function wrapper() {
                    var length = arguments.length,
                        args = Array(length),
                        index = length,
                        placeholder = getHolder(wrapper);

                    while (index--) {
                      args[index] = arguments[index];
                    }
                    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
                      ? []
                      : replaceHolders(args, placeholder);

                    length -= holders.length;
                    if (length < arity) {
                      return createRecurry(
                        func, bitmask, createHybrid, wrapper.placeholder, undefined,
                        args, holders, undefined, undefined, arity - length);
                    }
                    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                    return apply(fn, this, args);
                  }
                  return wrapper;
                }

                /**
                 * Creates a `_.find` or `_.findLast` function.
                 *
                 * @private
                 * @param {Function} findIndexFunc The function to find the collection index.
                 * @returns {Function} Returns the new find function.
                 */
                function createFind(findIndexFunc) {
                  return function(collection, predicate, fromIndex) {
                    var iterable = Object(collection);
                    if (!isArrayLike(collection)) {
                      var iteratee = getIteratee(predicate, 3);
                      collection = keys(collection);
                      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
                    }
                    var index = findIndexFunc(collection, predicate, fromIndex);
                    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
                  };
                }

                /**
                 * Creates a `_.flow` or `_.flowRight` function.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new flow function.
                 */
                function createFlow(fromRight) {
                  return flatRest(function(funcs) {
                    var length = funcs.length,
                        index = length,
                        prereq = LodashWrapper.prototype.thru;

                    if (fromRight) {
                      funcs.reverse();
                    }
                    while (index--) {
                      var func = funcs[index];
                      if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                      }
                      if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                        var wrapper = new LodashWrapper([], true);
                      }
                    }
                    index = wrapper ? index : length;
                    while (++index < length) {
                      func = funcs[index];

                      var funcName = getFuncName(func),
                          data = funcName == 'wrapper' ? getData(func) : undefined;

                      if (data && isLaziable(data[0]) &&
                            data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                            !data[4].length && data[9] == 1
                          ) {
                        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                      } else {
                        wrapper = (func.length == 1 && isLaziable(func))
                          ? wrapper[funcName]()
                          : wrapper.thru(func);
                      }
                    }
                    return function() {
                      var args = arguments,
                          value = args[0];

                      if (wrapper && args.length == 1 && isArray(value)) {
                        return wrapper.plant(value).value();
                      }
                      var index = 0,
                          result = length ? funcs[index].apply(this, args) : value;

                      while (++index < length) {
                        result = funcs[index].call(this, result);
                      }
                      return result;
                    };
                  });
                }

                /**
                 * Creates a function that wraps `func` to invoke it with optional `this`
                 * binding of `thisArg`, partial application, and currying.
                 *
                 * @private
                 * @param {Function|string} func The function or method name to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to prepend to those provided to
                 *  the new function.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [partialsRight] The arguments to append to those provided
                 *  to the new function.
                 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
                  var isAry = bitmask & WRAP_ARY_FLAG,
                      isBind = bitmask & WRAP_BIND_FLAG,
                      isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                      isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                      isFlip = bitmask & WRAP_FLIP_FLAG,
                      Ctor = isBindKey ? undefined : createCtor(func);

                  function wrapper() {
                    var length = arguments.length,
                        args = Array(length),
                        index = length;

                    while (index--) {
                      args[index] = arguments[index];
                    }
                    if (isCurried) {
                      var placeholder = getHolder(wrapper),
                          holdersCount = countHolders(args, placeholder);
                    }
                    if (partials) {
                      args = composeArgs(args, partials, holders, isCurried);
                    }
                    if (partialsRight) {
                      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                    }
                    length -= holdersCount;
                    if (isCurried && length < arity) {
                      var newHolders = replaceHolders(args, placeholder);
                      return createRecurry(
                        func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                        args, newHolders, argPos, ary, arity - length
                      );
                    }
                    var thisBinding = isBind ? thisArg : this,
                        fn = isBindKey ? thisBinding[func] : func;

                    length = args.length;
                    if (argPos) {
                      args = reorder(args, argPos);
                    } else if (isFlip && length > 1) {
                      args.reverse();
                    }
                    if (isAry && ary < length) {
                      args.length = ary;
                    }
                    if (this && this !== root && this instanceof wrapper) {
                      fn = Ctor || createCtor(fn);
                    }
                    return fn.apply(thisBinding, args);
                  }
                  return wrapper;
                }

                /**
                 * Creates a function like `_.invertBy`.
                 *
                 * @private
                 * @param {Function} setter The function to set accumulator values.
                 * @param {Function} toIteratee The function to resolve iteratees.
                 * @returns {Function} Returns the new inverter function.
                 */
                function createInverter(setter, toIteratee) {
                  return function(object, iteratee) {
                    return baseInverter(object, setter, toIteratee(iteratee), {});
                  };
                }

                /**
                 * Creates a function that performs a mathematical operation on two values.
                 *
                 * @private
                 * @param {Function} operator The function to perform the operation.
                 * @param {number} [defaultValue] The value used for `undefined` arguments.
                 * @returns {Function} Returns the new mathematical operation function.
                 */
                function createMathOperation(operator, defaultValue) {
                  return function(value, other) {
                    var result;
                    if (value === undefined && other === undefined) {
                      return defaultValue;
                    }
                    if (value !== undefined) {
                      result = value;
                    }
                    if (other !== undefined) {
                      if (result === undefined) {
                        return other;
                      }
                      if (typeof value == 'string' || typeof other == 'string') {
                        value = baseToString(value);
                        other = baseToString(other);
                      } else {
                        value = baseToNumber(value);
                        other = baseToNumber(other);
                      }
                      result = operator(value, other);
                    }
                    return result;
                  };
                }

                /**
                 * Creates a function like `_.over`.
                 *
                 * @private
                 * @param {Function} arrayFunc The function to iterate over iteratees.
                 * @returns {Function} Returns the new over function.
                 */
                function createOver(arrayFunc) {
                  return flatRest(function(iteratees) {
                    iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                    return baseRest(function(args) {
                      var thisArg = this;
                      return arrayFunc(iteratees, function(iteratee) {
                        return apply(iteratee, thisArg, args);
                      });
                    });
                  });
                }

                /**
                 * Creates the padding for `string` based on `length`. The `chars` string
                 * is truncated if the number of characters exceeds `length`.
                 *
                 * @private
                 * @param {number} length The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padding for `string`.
                 */
                function createPadding(length, chars) {
                  chars = chars === undefined ? ' ' : baseToString(chars);

                  var charsLength = chars.length;
                  if (charsLength < 2) {
                    return charsLength ? baseRepeat(chars, length) : chars;
                  }
                  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
                  return hasUnicode(chars)
                    ? castSlice(stringToArray(result), 0, length).join('')
                    : result.slice(0, length);
                }

                /**
                 * Creates a function that wraps `func` to invoke it with the `this` binding
                 * of `thisArg` and `partials` prepended to the arguments it receives.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {Array} partials The arguments to prepend to those provided to
                 *  the new function.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createPartial(func, bitmask, thisArg, partials) {
                  var isBind = bitmask & WRAP_BIND_FLAG,
                      Ctor = createCtor(func);

                  function wrapper() {
                    var argsIndex = -1,
                        argsLength = arguments.length,
                        leftIndex = -1,
                        leftLength = partials.length,
                        args = Array(leftLength + argsLength),
                        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

                    while (++leftIndex < leftLength) {
                      args[leftIndex] = partials[leftIndex];
                    }
                    while (argsLength--) {
                      args[leftIndex++] = arguments[++argsIndex];
                    }
                    return apply(fn, isBind ? thisArg : this, args);
                  }
                  return wrapper;
                }

                /**
                 * Creates a `_.range` or `_.rangeRight` function.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new range function.
                 */
                function createRange(fromRight) {
                  return function(start, end, step) {
                    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                      end = step = undefined;
                    }
                    // Ensure the sign of `-0` is preserved.
                    start = toFinite(start);
                    if (end === undefined) {
                      end = start;
                      start = 0;
                    } else {
                      end = toFinite(end);
                    }
                    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                    return baseRange(start, end, step, fromRight);
                  };
                }

                /**
                 * Creates a function that performs a relational operation on two values.
                 *
                 * @private
                 * @param {Function} operator The function to perform the operation.
                 * @returns {Function} Returns the new relational operation function.
                 */
                function createRelationalOperation(operator) {
                  return function(value, other) {
                    if (!(typeof value == 'string' && typeof other == 'string')) {
                      value = toNumber(value);
                      other = toNumber(other);
                    }
                    return operator(value, other);
                  };
                }

                /**
                 * Creates a function that wraps `func` to continue currying.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {Function} wrapFunc The function to create the `func` wrapper.
                 * @param {*} placeholder The placeholder value.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to prepend to those provided to
                 *  the new function.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
                  var isCurry = bitmask & WRAP_CURRY_FLAG,
                      newHolders = isCurry ? holders : undefined,
                      newHoldersRight = isCurry ? undefined : holders,
                      newPartials = isCurry ? partials : undefined,
                      newPartialsRight = isCurry ? undefined : partials;

                  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
                  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

                  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                  }
                  var newData = [
                    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
                    newHoldersRight, argPos, ary, arity
                  ];

                  var result = wrapFunc.apply(undefined, newData);
                  if (isLaziable(func)) {
                    setData(result, newData);
                  }
                  result.placeholder = placeholder;
                  return setWrapToString(result, func, bitmask);
                }

                /**
                 * Creates a function like `_.round`.
                 *
                 * @private
                 * @param {string} methodName The name of the `Math` method to use when rounding.
                 * @returns {Function} Returns the new round function.
                 */
                function createRound(methodName) {
                  var func = Math[methodName];
                  return function(number, precision) {
                    number = toNumber(number);
                    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                    if (precision) {
                      // Shift with exponential notation to avoid floating-point issues.
                      // See [MDN](https://mdn.io/round#Examples) for more details.
                      var pair = (toString(number) + 'e').split('e'),
                          value = func(pair[0] + 'e' + (+pair[1] + precision));

                      pair = (toString(value) + 'e').split('e');
                      return +(pair[0] + 'e' + (+pair[1] - precision));
                    }
                    return func(number);
                  };
                }

                /**
                 * Creates a set object of `values`.
                 *
                 * @private
                 * @param {Array} values The values to add to the set.
                 * @returns {Object} Returns the new set.
                 */
                var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
                  return new Set(values);
                };

                /**
                 * Creates a `_.toPairs` or `_.toPairsIn` function.
                 *
                 * @private
                 * @param {Function} keysFunc The function to get the keys of a given object.
                 * @returns {Function} Returns the new pairs function.
                 */
                function createToPairs(keysFunc) {
                  return function(object) {
                    var tag = getTag(object);
                    if (tag == mapTag) {
                      return mapToArray(object);
                    }
                    if (tag == setTag) {
                      return setToPairs(object);
                    }
                    return baseToPairs(object, keysFunc(object));
                  };
                }

                /**
                 * Creates a function that either curries or invokes `func` with optional
                 * `this` binding and partially applied arguments.
                 *
                 * @private
                 * @param {Function|string} func The function or method name to wrap.
                 * @param {number} bitmask The bitmask flags.
                 *    1 - `_.bind`
                 *    2 - `_.bindKey`
                 *    4 - `_.curry` or `_.curryRight` of a bound function
                 *    8 - `_.curry`
                 *   16 - `_.curryRight`
                 *   32 - `_.partial`
                 *   64 - `_.partialRight`
                 *  128 - `_.rearg`
                 *  256 - `_.ary`
                 *  512 - `_.flip`
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to be partially applied.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                  if (!isBindKey && typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  var length = partials ? partials.length : 0;
                  if (!length) {
                    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                    partials = holders = undefined;
                  }
                  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
                  arity = arity === undefined ? arity : toInteger(arity);
                  length -= holders ? holders.length : 0;

                  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                    var partialsRight = partials,
                        holdersRight = holders;

                    partials = holders = undefined;
                  }
                  var data = isBindKey ? undefined : getData(func);

                  var newData = [
                    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
                    argPos, ary, arity
                  ];

                  if (data) {
                    mergeData(newData, data);
                  }
                  func = newData[0];
                  bitmask = newData[1];
                  thisArg = newData[2];
                  partials = newData[3];
                  holders = newData[4];
                  arity = newData[9] = newData[9] === undefined
                    ? (isBindKey ? 0 : func.length)
                    : nativeMax(newData[9] - length, 0);

                  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                  }
                  if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                    var result = createBind(func, bitmask, thisArg);
                  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                    result = createCurry(func, bitmask, arity);
                  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                    result = createPartial(func, bitmask, thisArg, partials);
                  } else {
                    result = createHybrid.apply(undefined, newData);
                  }
                  var setter = data ? baseSetData : setData;
                  return setWrapToString(setter(result, newData), func, bitmask);
                }

                /**
                 * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
                 * of source objects to the destination object for all destination properties
                 * that resolve to `undefined`.
                 *
                 * @private
                 * @param {*} objValue The destination value.
                 * @param {*} srcValue The source value.
                 * @param {string} key The key of the property to assign.
                 * @param {Object} object The parent object of `objValue`.
                 * @returns {*} Returns the value to assign.
                 */
                function customDefaultsAssignIn(objValue, srcValue, key, object) {
                  if (objValue === undefined ||
                      (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                    return srcValue;
                  }
                  return objValue;
                }

                /**
                 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
                 * objects into destination objects that are passed thru.
                 *
                 * @private
                 * @param {*} objValue The destination value.
                 * @param {*} srcValue The source value.
                 * @param {string} key The key of the property to merge.
                 * @param {Object} object The parent object of `objValue`.
                 * @param {Object} source The parent object of `srcValue`.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 * @returns {*} Returns the value to assign.
                 */
                function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
                  if (isObject(objValue) && isObject(srcValue)) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, objValue);
                    baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                    stack['delete'](srcValue);
                  }
                  return objValue;
                }

                /**
                 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
                 * objects.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @param {string} key The key of the property to inspect.
                 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
                 */
                function customOmitClone(value) {
                  return isPlainObject(value) ? undefined : value;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for arrays with support for
                 * partial deep comparisons.
                 *
                 * @private
                 * @param {Array} array The array to compare.
                 * @param {Array} other The other array to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `array` and `other` objects.
                 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
                 */
                function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                      arrLength = array.length,
                      othLength = other.length;

                  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                    return false;
                  }
                  // Assume cyclic values are equal.
                  var stacked = stack.get(array);
                  if (stacked && stack.get(other)) {
                    return stacked == other;
                  }
                  var index = -1,
                      result = true,
                      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

                  stack.set(array, other);
                  stack.set(other, array);

                  // Ignore non-index properties.
                  while (++index < arrLength) {
                    var arrValue = array[index],
                        othValue = other[index];

                    if (customizer) {
                      var compared = isPartial
                        ? customizer(othValue, arrValue, index, other, array, stack)
                        : customizer(arrValue, othValue, index, array, other, stack);
                    }
                    if (compared !== undefined) {
                      if (compared) {
                        continue;
                      }
                      result = false;
                      break;
                    }
                    // Recursively compare arrays (susceptible to call stack limits).
                    if (seen) {
                      if (!arraySome(other, function(othValue, othIndex) {
                            if (!cacheHas(seen, othIndex) &&
                                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                              return seen.push(othIndex);
                            }
                          })) {
                        result = false;
                        break;
                      }
                    } else if (!(
                          arrValue === othValue ||
                            equalFunc(arrValue, othValue, bitmask, customizer, stack)
                        )) {
                      result = false;
                      break;
                    }
                  }
                  stack['delete'](array);
                  stack['delete'](other);
                  return result;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for comparing objects of
                 * the same `toStringTag`.
                 *
                 * **Note:** This function only supports comparing values with tags of
                 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {string} tag The `toStringTag` of the objects to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                  switch (tag) {
                    case dataViewTag:
                      if ((object.byteLength != other.byteLength) ||
                          (object.byteOffset != other.byteOffset)) {
                        return false;
                      }
                      object = object.buffer;
                      other = other.buffer;

                    case arrayBufferTag:
                      if ((object.byteLength != other.byteLength) ||
                          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                        return false;
                      }
                      return true;

                    case boolTag:
                    case dateTag:
                    case numberTag:
                      // Coerce booleans to `1` or `0` and dates to milliseconds.
                      // Invalid dates are coerced to `NaN`.
                      return eq(+object, +other);

                    case errorTag:
                      return object.name == other.name && object.message == other.message;

                    case regexpTag:
                    case stringTag:
                      // Coerce regexes to strings and treat strings, primitives and objects,
                      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                      // for more details.
                      return object == (other + '');

                    case mapTag:
                      var convert = mapToArray;

                    case setTag:
                      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                      convert || (convert = setToArray);

                      if (object.size != other.size && !isPartial) {
                        return false;
                      }
                      // Assume cyclic values are equal.
                      var stacked = stack.get(object);
                      if (stacked) {
                        return stacked == other;
                      }
                      bitmask |= COMPARE_UNORDERED_FLAG;

                      // Recursively compare objects (susceptible to call stack limits).
                      stack.set(object, other);
                      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                      stack['delete'](object);
                      return result;

                    case symbolTag:
                      if (symbolValueOf) {
                        return symbolValueOf.call(object) == symbolValueOf.call(other);
                      }
                  }
                  return false;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for objects with support for
                 * partial deep comparisons.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                      objProps = getAllKeys(object),
                      objLength = objProps.length,
                      othProps = getAllKeys(other),
                      othLength = othProps.length;

                  if (objLength != othLength && !isPartial) {
                    return false;
                  }
                  var index = objLength;
                  while (index--) {
                    var key = objProps[index];
                    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                      return false;
                    }
                  }
                  // Assume cyclic values are equal.
                  var stacked = stack.get(object);
                  if (stacked && stack.get(other)) {
                    return stacked == other;
                  }
                  var result = true;
                  stack.set(object, other);
                  stack.set(other, object);

                  var skipCtor = isPartial;
                  while (++index < objLength) {
                    key = objProps[index];
                    var objValue = object[key],
                        othValue = other[key];

                    if (customizer) {
                      var compared = isPartial
                        ? customizer(othValue, objValue, key, other, object, stack)
                        : customizer(objValue, othValue, key, object, other, stack);
                    }
                    // Recursively compare objects (susceptible to call stack limits).
                    if (!(compared === undefined
                          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                          : compared
                        )) {
                      result = false;
                      break;
                    }
                    skipCtor || (skipCtor = key == 'constructor');
                  }
                  if (result && !skipCtor) {
                    var objCtor = object.constructor,
                        othCtor = other.constructor;

                    // Non `Object` object instances with different constructors are not equal.
                    if (objCtor != othCtor &&
                        ('constructor' in object && 'constructor' in other) &&
                        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                      result = false;
                    }
                  }
                  stack['delete'](object);
                  stack['delete'](other);
                  return result;
                }

                /**
                 * A specialized version of `baseRest` which flattens the rest array.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @returns {Function} Returns the new function.
                 */
                function flatRest(func) {
                  return setToString(overRest(func, undefined, flatten), func + '');
                }

                /**
                 * Creates an array of own enumerable property names and symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function getAllKeys(object) {
                  return baseGetAllKeys(object, keys, getSymbols);
                }

                /**
                 * Creates an array of own and inherited enumerable property names and
                 * symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function getAllKeysIn(object) {
                  return baseGetAllKeys(object, keysIn, getSymbolsIn);
                }

                /**
                 * Gets metadata for `func`.
                 *
                 * @private
                 * @param {Function} func The function to query.
                 * @returns {*} Returns the metadata for `func`.
                 */
                var getData = !metaMap ? noop : function(func) {
                  return metaMap.get(func);
                };

                /**
                 * Gets the name of `func`.
                 *
                 * @private
                 * @param {Function} func The function to query.
                 * @returns {string} Returns the function name.
                 */
                function getFuncName(func) {
                  var result = (func.name + ''),
                      array = realNames[result],
                      length = hasOwnProperty.call(realNames, result) ? array.length : 0;

                  while (length--) {
                    var data = array[length],
                        otherFunc = data.func;
                    if (otherFunc == null || otherFunc == func) {
                      return data.name;
                    }
                  }
                  return result;
                }

                /**
                 * Gets the argument placeholder value for `func`.
                 *
                 * @private
                 * @param {Function} func The function to inspect.
                 * @returns {*} Returns the placeholder value.
                 */
                function getHolder(func) {
                  var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
                  return object.placeholder;
                }

                /**
                 * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
                 * this function returns the custom method, otherwise it returns `baseIteratee`.
                 * If arguments are provided, the chosen function is invoked with them and
                 * its result is returned.
                 *
                 * @private
                 * @param {*} [value] The value to convert to an iteratee.
                 * @param {number} [arity] The arity of the created iteratee.
                 * @returns {Function} Returns the chosen function or its result.
                 */
                function getIteratee() {
                  var result = lodash.iteratee || iteratee;
                  result = result === iteratee ? baseIteratee : result;
                  return arguments.length ? result(arguments[0], arguments[1]) : result;
                }

                /**
                 * Gets the data for `map`.
                 *
                 * @private
                 * @param {Object} map The map to query.
                 * @param {string} key The reference key.
                 * @returns {*} Returns the map data.
                 */
                function getMapData(map, key) {
                  var data = map.__data__;
                  return isKeyable(key)
                    ? data[typeof key == 'string' ? 'string' : 'hash']
                    : data.map;
                }

                /**
                 * Gets the property names, values, and compare flags of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the match data of `object`.
                 */
                function getMatchData(object) {
                  var result = keys(object),
                      length = result.length;

                  while (length--) {
                    var key = result[length],
                        value = object[key];

                    result[length] = [key, value, isStrictComparable(value)];
                  }
                  return result;
                }

                /**
                 * Gets the native function at `key` of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {string} key The key of the method to get.
                 * @returns {*} Returns the function if it's native, else `undefined`.
                 */
                function getNative(object, key) {
                  var value = getValue(object, key);
                  return baseIsNative(value) ? value : undefined;
                }

                /**
                 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the raw `toStringTag`.
                 */
                function getRawTag(value) {
                  var isOwn = hasOwnProperty.call(value, symToStringTag),
                      tag = value[symToStringTag];

                  try {
                    value[symToStringTag] = undefined;
                  } catch (e) {}

                  var result = nativeObjectToString.call(value);
                  {
                    if (isOwn) {
                      value[symToStringTag] = tag;
                    } else {
                      delete value[symToStringTag];
                    }
                  }
                  return result;
                }

                /**
                 * Creates an array of the own enumerable symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of symbols.
                 */
                var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
                  if (object == null) {
                    return [];
                  }
                  object = Object(object);
                  return arrayFilter(nativeGetSymbols(object), function(symbol) {
                    return propertyIsEnumerable.call(object, symbol);
                  });
                };

                /**
                 * Creates an array of the own and inherited enumerable symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of symbols.
                 */
                var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
                  var result = [];
                  while (object) {
                    arrayPush(result, getSymbols(object));
                    object = getPrototype(object);
                  }
                  return result;
                };

                /**
                 * Gets the `toStringTag` of `value`.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the `toStringTag`.
                 */
                var getTag = baseGetTag;

                // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
                if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                    (Map && getTag(new Map) != mapTag) ||
                    (Promise && getTag(Promise.resolve()) != promiseTag) ||
                    (Set && getTag(new Set) != setTag) ||
                    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
                  getTag = function(value) {
                    var result = baseGetTag(value),
                        Ctor = result == objectTag ? value.constructor : undefined,
                        ctorString = Ctor ? toSource(Ctor) : '';

                    if (ctorString) {
                      switch (ctorString) {
                        case dataViewCtorString: return dataViewTag;
                        case mapCtorString: return mapTag;
                        case promiseCtorString: return promiseTag;
                        case setCtorString: return setTag;
                        case weakMapCtorString: return weakMapTag;
                      }
                    }
                    return result;
                  };
                }

                /**
                 * Gets the view, applying any `transforms` to the `start` and `end` positions.
                 *
                 * @private
                 * @param {number} start The start of the view.
                 * @param {number} end The end of the view.
                 * @param {Array} transforms The transformations to apply to the view.
                 * @returns {Object} Returns an object containing the `start` and `end`
                 *  positions of the view.
                 */
                function getView(start, end, transforms) {
                  var index = -1,
                      length = transforms.length;

                  while (++index < length) {
                    var data = transforms[index],
                        size = data.size;

                    switch (data.type) {
                      case 'drop':      start += size; break;
                      case 'dropRight': end -= size; break;
                      case 'take':      end = nativeMin(end, start + size); break;
                      case 'takeRight': start = nativeMax(start, end - size); break;
                    }
                  }
                  return { 'start': start, 'end': end };
                }

                /**
                 * Extracts wrapper details from the `source` body comment.
                 *
                 * @private
                 * @param {string} source The source to inspect.
                 * @returns {Array} Returns the wrapper details.
                 */
                function getWrapDetails(source) {
                  var match = source.match(reWrapDetails);
                  return match ? match[1].split(reSplitDetails) : [];
                }

                /**
                 * Checks if `path` exists on `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @param {Function} hasFunc The function to check properties.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 */
                function hasPath(object, path, hasFunc) {
                  path = castPath(path, object);

                  var index = -1,
                      length = path.length,
                      result = false;

                  while (++index < length) {
                    var key = toKey(path[index]);
                    if (!(result = object != null && hasFunc(object, key))) {
                      break;
                    }
                    object = object[key];
                  }
                  if (result || ++index != length) {
                    return result;
                  }
                  length = object == null ? 0 : object.length;
                  return !!length && isLength(length) && isIndex(key, length) &&
                    (isArray(object) || isArguments(object));
                }

                /**
                 * Initializes an array clone.
                 *
                 * @private
                 * @param {Array} array The array to clone.
                 * @returns {Array} Returns the initialized clone.
                 */
                function initCloneArray(array) {
                  var length = array.length,
                      result = new array.constructor(length);

                  // Add properties assigned by `RegExp#exec`.
                  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                    result.index = array.index;
                    result.input = array.input;
                  }
                  return result;
                }

                /**
                 * Initializes an object clone.
                 *
                 * @private
                 * @param {Object} object The object to clone.
                 * @returns {Object} Returns the initialized clone.
                 */
                function initCloneObject(object) {
                  return (typeof object.constructor == 'function' && !isPrototype(object))
                    ? baseCreate(getPrototype(object))
                    : {};
                }

                /**
                 * Initializes an object clone based on its `toStringTag`.
                 *
                 * **Note:** This function only supports cloning values with tags of
                 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
                 *
                 * @private
                 * @param {Object} object The object to clone.
                 * @param {string} tag The `toStringTag` of the object to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the initialized clone.
                 */
                function initCloneByTag(object, tag, isDeep) {
                  var Ctor = object.constructor;
                  switch (tag) {
                    case arrayBufferTag:
                      return cloneArrayBuffer(object);

                    case boolTag:
                    case dateTag:
                      return new Ctor(+object);

                    case dataViewTag:
                      return cloneDataView(object, isDeep);

                    case float32Tag: case float64Tag:
                    case int8Tag: case int16Tag: case int32Tag:
                    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
                      return cloneTypedArray(object, isDeep);

                    case mapTag:
                      return new Ctor;

                    case numberTag:
                    case stringTag:
                      return new Ctor(object);

                    case regexpTag:
                      return cloneRegExp(object);

                    case setTag:
                      return new Ctor;

                    case symbolTag:
                      return cloneSymbol(object);
                  }
                }

                /**
                 * Inserts wrapper `details` in a comment at the top of the `source` body.
                 *
                 * @private
                 * @param {string} source The source to modify.
                 * @returns {Array} details The details to insert.
                 * @returns {string} Returns the modified source.
                 */
                function insertWrapDetails(source, details) {
                  var length = details.length;
                  if (!length) {
                    return source;
                  }
                  var lastIndex = length - 1;
                  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
                  details = details.join(length > 2 ? ', ' : ' ');
                  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
                }

                /**
                 * Checks if `value` is a flattenable `arguments` object or array.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
                 */
                function isFlattenable(value) {
                  return isArray(value) || isArguments(value) ||
                    !!(spreadableSymbol && value && value[spreadableSymbol]);
                }

                /**
                 * Checks if `value` is a valid array-like index.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                 */
                function isIndex(value, length) {
                  var type = typeof value;
                  length = length == null ? MAX_SAFE_INTEGER : length;

                  return !!length &&
                    (type == 'number' ||
                      (type != 'symbol' && reIsUint.test(value))) &&
                        (value > -1 && value % 1 == 0 && value < length);
                }

                /**
                 * Checks if the given arguments are from an iteratee call.
                 *
                 * @private
                 * @param {*} value The potential iteratee value argument.
                 * @param {*} index The potential iteratee index or key argument.
                 * @param {*} object The potential iteratee object argument.
                 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
                 *  else `false`.
                 */
                function isIterateeCall(value, index, object) {
                  if (!isObject(object)) {
                    return false;
                  }
                  var type = typeof index;
                  if (type == 'number'
                        ? (isArrayLike(object) && isIndex(index, object.length))
                        : (type == 'string' && index in object)
                      ) {
                    return eq(object[index], value);
                  }
                  return false;
                }

                /**
                 * Checks if `value` is a property name and not a property path.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @param {Object} [object] The object to query keys on.
                 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
                 */
                function isKey(value, object) {
                  if (isArray(value)) {
                    return false;
                  }
                  var type = typeof value;
                  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                      value == null || isSymbol(value)) {
                    return true;
                  }
                  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                    (object != null && value in Object(object));
                }

                /**
                 * Checks if `value` is suitable for use as unique object key.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                 */
                function isKeyable(value) {
                  var type = typeof value;
                  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
                    ? (value !== '__proto__')
                    : (value === null);
                }

                /**
                 * Checks if `func` has a lazy counterpart.
                 *
                 * @private
                 * @param {Function} func The function to check.
                 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
                 *  else `false`.
                 */
                function isLaziable(func) {
                  var funcName = getFuncName(func),
                      other = lodash[funcName];

                  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                    return false;
                  }
                  if (func === other) {
                    return true;
                  }
                  var data = getData(other);
                  return !!data && func === data[0];
                }

                /**
                 * Checks if `func` has its source masked.
                 *
                 * @private
                 * @param {Function} func The function to check.
                 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                 */
                function isMasked(func) {
                  return !!maskSrcKey && (maskSrcKey in func);
                }

                /**
                 * Checks if `func` is capable of being masked.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
                 */
                var isMaskable = coreJsData ? isFunction : stubFalse;

                /**
                 * Checks if `value` is likely a prototype object.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                 */
                function isPrototype(value) {
                  var Ctor = value && value.constructor,
                      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

                  return value === proto;
                }

                /**
                 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` if suitable for strict
                 *  equality comparisons, else `false`.
                 */
                function isStrictComparable(value) {
                  return value === value && !isObject(value);
                }

                /**
                 * A specialized version of `matchesProperty` for source values suitable
                 * for strict equality comparisons, i.e. `===`.
                 *
                 * @private
                 * @param {string} key The key of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function matchesStrictComparable(key, srcValue) {
                  return function(object) {
                    if (object == null) {
                      return false;
                    }
                    return object[key] === srcValue &&
                      (srcValue !== undefined || (key in Object(object)));
                  };
                }

                /**
                 * A specialized version of `_.memoize` which clears the memoized function's
                 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
                 *
                 * @private
                 * @param {Function} func The function to have its output memoized.
                 * @returns {Function} Returns the new memoized function.
                 */
                function memoizeCapped(func) {
                  var result = memoize(func, function(key) {
                    if (cache.size === MAX_MEMOIZE_SIZE) {
                      cache.clear();
                    }
                    return key;
                  });

                  var cache = result.cache;
                  return result;
                }

                /**
                 * Merges the function metadata of `source` into `data`.
                 *
                 * Merging metadata reduces the number of wrappers used to invoke a function.
                 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
                 * may be applied regardless of execution order. Methods like `_.ary` and
                 * `_.rearg` modify function arguments, making the order in which they are
                 * executed important, preventing the merging of metadata. However, we make
                 * an exception for a safe combined case where curried functions have `_.ary`
                 * and or `_.rearg` applied.
                 *
                 * @private
                 * @param {Array} data The destination metadata.
                 * @param {Array} source The source metadata.
                 * @returns {Array} Returns `data`.
                 */
                function mergeData(data, source) {
                  var bitmask = data[1],
                      srcBitmask = source[1],
                      newBitmask = bitmask | srcBitmask,
                      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

                  var isCombo =
                    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
                    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
                    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

                  // Exit early if metadata can't be merged.
                  if (!(isCommon || isCombo)) {
                    return data;
                  }
                  // Use source `thisArg` if available.
                  if (srcBitmask & WRAP_BIND_FLAG) {
                    data[2] = source[2];
                    // Set when currying a bound function.
                    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                  }
                  // Compose partial arguments.
                  var value = source[3];
                  if (value) {
                    var partials = data[3];
                    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                  }
                  // Compose partial right arguments.
                  value = source[5];
                  if (value) {
                    partials = data[5];
                    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                  }
                  // Use source `argPos` if available.
                  value = source[7];
                  if (value) {
                    data[7] = value;
                  }
                  // Use source `ary` if it's smaller.
                  if (srcBitmask & WRAP_ARY_FLAG) {
                    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
                  }
                  // Use source `arity` if one is not provided.
                  if (data[9] == null) {
                    data[9] = source[9];
                  }
                  // Use source `func` and merge bitmasks.
                  data[0] = source[0];
                  data[1] = newBitmask;

                  return data;
                }

                /**
                 * This function is like
                 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                 * except that it includes inherited enumerable properties.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function nativeKeysIn(object) {
                  var result = [];
                  if (object != null) {
                    for (var key in Object(object)) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * Converts `value` to a string using `Object.prototype.toString`.
                 *
                 * @private
                 * @param {*} value The value to convert.
                 * @returns {string} Returns the converted string.
                 */
                function objectToString(value) {
                  return nativeObjectToString.call(value);
                }

                /**
                 * A specialized version of `baseRest` which transforms the rest array.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @param {Function} transform The rest array transform.
                 * @returns {Function} Returns the new function.
                 */
                function overRest(func, start, transform) {
                  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
                  return function() {
                    var args = arguments,
                        index = -1,
                        length = nativeMax(args.length - start, 0),
                        array = Array(length);

                    while (++index < length) {
                      array[index] = args[start + index];
                    }
                    index = -1;
                    var otherArgs = Array(start + 1);
                    while (++index < start) {
                      otherArgs[index] = args[index];
                    }
                    otherArgs[start] = transform(array);
                    return apply(func, this, otherArgs);
                  };
                }

                /**
                 * Gets the parent value at `path` of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array} path The path to get the parent value of.
                 * @returns {*} Returns the parent value.
                 */
                function parent(object, path) {
                  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
                }

                /**
                 * Reorder `array` according to the specified indexes where the element at
                 * the first index is assigned as the first element, the element at
                 * the second index is assigned as the second element, and so on.
                 *
                 * @private
                 * @param {Array} array The array to reorder.
                 * @param {Array} indexes The arranged array indexes.
                 * @returns {Array} Returns `array`.
                 */
                function reorder(array, indexes) {
                  var arrLength = array.length,
                      length = nativeMin(indexes.length, arrLength),
                      oldArray = copyArray(array);

                  while (length--) {
                    var index = indexes[length];
                    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
                  }
                  return array;
                }

                /**
                 * Sets metadata for `func`.
                 *
                 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
                 * period of time, it will trip its breaker and transition to an identity
                 * function to avoid garbage collection pauses in V8. See
                 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
                 * for more details.
                 *
                 * @private
                 * @param {Function} func The function to associate metadata with.
                 * @param {*} data The metadata.
                 * @returns {Function} Returns `func`.
                 */
                var setData = shortOut(baseSetData);

                /**
                 * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
                 *
                 * @private
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @returns {number|Object} Returns the timer id or timeout object.
                 */
                var setTimeout = ctxSetTimeout || function(func, wait) {
                  return root.setTimeout(func, wait);
                };

                /**
                 * Sets the `toString` method of `func` to return `string`.
                 *
                 * @private
                 * @param {Function} func The function to modify.
                 * @param {Function} string The `toString` result.
                 * @returns {Function} Returns `func`.
                 */
                var setToString = shortOut(baseSetToString);

                /**
                 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
                 * with wrapper details in a comment at the top of the source body.
                 *
                 * @private
                 * @param {Function} wrapper The function to modify.
                 * @param {Function} reference The reference function.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @returns {Function} Returns `wrapper`.
                 */
                function setWrapToString(wrapper, reference, bitmask) {
                  var source = (reference + '');
                  return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
                }

                /**
                 * Creates a function that'll short out and invoke `identity` instead
                 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
                 * milliseconds.
                 *
                 * @private
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new shortable function.
                 */
                function shortOut(func) {
                  var count = 0,
                      lastCalled = 0;

                  return function() {
                    var stamp = nativeNow(),
                        remaining = HOT_SPAN - (stamp - lastCalled);

                    lastCalled = stamp;
                    if (remaining > 0) {
                      if (++count >= HOT_COUNT) {
                        return arguments[0];
                      }
                    } else {
                      count = 0;
                    }
                    return func.apply(undefined, arguments);
                  };
                }

                /**
                 * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
                 *
                 * @private
                 * @param {Array} array The array to shuffle.
                 * @param {number} [size=array.length] The size of `array`.
                 * @returns {Array} Returns `array`.
                 */
                function shuffleSelf(array, size) {
                  var index = -1,
                      length = array.length,
                      lastIndex = length - 1;

                  size = size === undefined ? length : size;
                  while (++index < size) {
                    var rand = baseRandom(index, lastIndex),
                        value = array[rand];

                    array[rand] = array[index];
                    array[index] = value;
                  }
                  array.length = size;
                  return array;
                }

                /**
                 * Converts `string` to a property path array.
                 *
                 * @private
                 * @param {string} string The string to convert.
                 * @returns {Array} Returns the property path array.
                 */
                var stringToPath = memoizeCapped(function(string) {
                  var result = [];
                  if (string.charCodeAt(0) === 46 /* . */) {
                    result.push('');
                  }
                  string.replace(rePropName, function(match, number, quote, subString) {
                    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
                  });
                  return result;
                });

                /**
                 * Converts `value` to a string key if it's not a string or symbol.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {string|symbol} Returns the key.
                 */
                function toKey(value) {
                  if (typeof value == 'string' || isSymbol(value)) {
                    return value;
                  }
                  var result = (value + '');
                  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                }

                /**
                 * Converts `func` to its source code.
                 *
                 * @private
                 * @param {Function} func The function to convert.
                 * @returns {string} Returns the source code.
                 */
                function toSource(func) {
                  if (func != null) {
                    try {
                      return funcToString.call(func);
                    } catch (e) {}
                    try {
                      return (func + '');
                    } catch (e) {}
                  }
                  return '';
                }

                /**
                 * Updates wrapper `details` based on `bitmask` flags.
                 *
                 * @private
                 * @returns {Array} details The details to modify.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @returns {Array} Returns `details`.
                 */
                function updateWrapDetails(details, bitmask) {
                  arrayEach(wrapFlags, function(pair) {
                    var value = '_.' + pair[0];
                    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
                      details.push(value);
                    }
                  });
                  return details.sort();
                }

                /**
                 * Creates a clone of `wrapper`.
                 *
                 * @private
                 * @param {Object} wrapper The wrapper to clone.
                 * @returns {Object} Returns the cloned wrapper.
                 */
                function wrapperClone(wrapper) {
                  if (wrapper instanceof LazyWrapper) {
                    return wrapper.clone();
                  }
                  var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
                  result.__actions__ = copyArray(wrapper.__actions__);
                  result.__index__  = wrapper.__index__;
                  result.__values__ = wrapper.__values__;
                  return result;
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an array of elements split into groups the length of `size`.
                 * If `array` can't be split evenly, the final chunk will be the remaining
                 * elements.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to process.
                 * @param {number} [size=1] The length of each chunk
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the new array of chunks.
                 * @example
                 *
                 * _.chunk(['a', 'b', 'c', 'd'], 2);
                 * // => [['a', 'b'], ['c', 'd']]
                 *
                 * _.chunk(['a', 'b', 'c', 'd'], 3);
                 * // => [['a', 'b', 'c'], ['d']]
                 */
                function chunk(array, size, guard) {
                  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
                    size = 1;
                  } else {
                    size = nativeMax(toInteger(size), 0);
                  }
                  var length = array == null ? 0 : array.length;
                  if (!length || size < 1) {
                    return [];
                  }
                  var index = 0,
                      resIndex = 0,
                      result = Array(nativeCeil(length / size));

                  while (index < length) {
                    result[resIndex++] = baseSlice(array, index, (index += size));
                  }
                  return result;
                }

                /**
                 * Creates an array with all falsey values removed. The values `false`, `null`,
                 * `0`, `""`, `undefined`, and `NaN` are falsey.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to compact.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.compact([0, 1, false, 2, '', 3]);
                 * // => [1, 2, 3]
                 */
                function compact(array) {
                  var index = -1,
                      length = array == null ? 0 : array.length,
                      resIndex = 0,
                      result = [];

                  while (++index < length) {
                    var value = array[index];
                    if (value) {
                      result[resIndex++] = value;
                    }
                  }
                  return result;
                }

                /**
                 * Creates a new array concatenating `array` with any additional arrays
                 * and/or values.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to concatenate.
                 * @param {...*} [values] The values to concatenate.
                 * @returns {Array} Returns the new concatenated array.
                 * @example
                 *
                 * var array = [1];
                 * var other = _.concat(array, 2, [3], [[4]]);
                 *
                 * console.log(other);
                 * // => [1, 2, 3, [4]]
                 *
                 * console.log(array);
                 * // => [1]
                 */
                function concat() {
                  var length = arguments.length;
                  if (!length) {
                    return [];
                  }
                  var args = Array(length - 1),
                      array = arguments[0],
                      index = length;

                  while (index--) {
                    args[index - 1] = arguments[index];
                  }
                  return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
                }

                /**
                 * Creates an array of `array` values not included in the other given arrays
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. The order and references of result values are
                 * determined by the first array.
                 *
                 * **Note:** Unlike `_.pullAll`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.without, _.xor
                 * @example
                 *
                 * _.difference([2, 1], [2, 3]);
                 * // => [1]
                 */
                var difference = baseRest(function(array, values) {
                  return isArrayLikeObject(array)
                    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
                    : [];
                });

                /**
                 * This method is like `_.difference` except that it accepts `iteratee` which
                 * is invoked for each element of `array` and `values` to generate the criterion
                 * by which they're compared. The order and references of result values are
                 * determined by the first array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
                 * // => [{ 'x': 2 }]
                 */
                var differenceBy = baseRest(function(array, values) {
                  var iteratee = last(values);
                  if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined;
                  }
                  return isArrayLikeObject(array)
                    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
                    : [];
                });

                /**
                 * This method is like `_.difference` except that it accepts `comparator`
                 * which is invoked to compare elements of `array` to `values`. The order and
                 * references of result values are determined by the first array. The comparator
                 * is invoked with two arguments: (arrVal, othVal).
                 *
                 * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 *
                 * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
                 * // => [{ 'x': 2, 'y': 1 }]
                 */
                var differenceWith = baseRest(function(array, values) {
                  var comparator = last(values);
                  if (isArrayLikeObject(comparator)) {
                    comparator = undefined;
                  }
                  return isArrayLikeObject(array)
                    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
                    : [];
                });

                /**
                 * Creates a slice of `array` with `n` elements dropped from the beginning.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to drop.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.drop([1, 2, 3]);
                 * // => [2, 3]
                 *
                 * _.drop([1, 2, 3], 2);
                 * // => [3]
                 *
                 * _.drop([1, 2, 3], 5);
                 * // => []
                 *
                 * _.drop([1, 2, 3], 0);
                 * // => [1, 2, 3]
                 */
                function drop(array, n, guard) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  n = (guard || n === undefined) ? 1 : toInteger(n);
                  return baseSlice(array, n < 0 ? 0 : n, length);
                }

                /**
                 * Creates a slice of `array` with `n` elements dropped from the end.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to drop.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.dropRight([1, 2, 3]);
                 * // => [1, 2]
                 *
                 * _.dropRight([1, 2, 3], 2);
                 * // => [1]
                 *
                 * _.dropRight([1, 2, 3], 5);
                 * // => []
                 *
                 * _.dropRight([1, 2, 3], 0);
                 * // => [1, 2, 3]
                 */
                function dropRight(array, n, guard) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  n = (guard || n === undefined) ? 1 : toInteger(n);
                  n = length - n;
                  return baseSlice(array, 0, n < 0 ? 0 : n);
                }

                /**
                 * Creates a slice of `array` excluding elements dropped from the end.
                 * Elements are dropped until `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.dropRightWhile(users, function(o) { return !o.active; });
                 * // => objects for ['barney']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.dropRightWhile(users, ['active', false]);
                 * // => objects for ['barney']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.dropRightWhile(users, 'active');
                 * // => objects for ['barney', 'fred', 'pebbles']
                 */
                function dropRightWhile(array, predicate) {
                  return (array && array.length)
                    ? baseWhile(array, getIteratee(predicate, 3), true, true)
                    : [];
                }

                /**
                 * Creates a slice of `array` excluding elements dropped from the beginning.
                 * Elements are dropped until `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.dropWhile(users, function(o) { return !o.active; });
                 * // => objects for ['pebbles']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.dropWhile(users, { 'user': 'barney', 'active': false });
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.dropWhile(users, ['active', false]);
                 * // => objects for ['pebbles']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.dropWhile(users, 'active');
                 * // => objects for ['barney', 'fred', 'pebbles']
                 */
                function dropWhile(array, predicate) {
                  return (array && array.length)
                    ? baseWhile(array, getIteratee(predicate, 3), true)
                    : [];
                }

                /**
                 * Fills elements of `array` with `value` from `start` up to, but not
                 * including, `end`.
                 *
                 * **Note:** This method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Array
                 * @param {Array} array The array to fill.
                 * @param {*} value The value to fill `array` with.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _.fill(array, 'a');
                 * console.log(array);
                 * // => ['a', 'a', 'a']
                 *
                 * _.fill(Array(3), 2);
                 * // => [2, 2, 2]
                 *
                 * _.fill([4, 6, 8, 10], '*', 1, 3);
                 * // => [4, '*', '*', 10]
                 */
                function fill(array, value, start, end) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                    start = 0;
                    end = length;
                  }
                  return baseFill(array, value, start, end);
                }

                /**
                 * This method is like `_.find` except that it returns the index of the first
                 * element `predicate` returns truthy for instead of the element itself.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {number} Returns the index of the found element, else `-1`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.findIndex(users, function(o) { return o.user == 'barney'; });
                 * // => 0
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findIndex(users, { 'user': 'fred', 'active': false });
                 * // => 1
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findIndex(users, ['active', false]);
                 * // => 0
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findIndex(users, 'active');
                 * // => 2
                 */
                function findIndex(array, predicate, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = fromIndex == null ? 0 : toInteger(fromIndex);
                  if (index < 0) {
                    index = nativeMax(length + index, 0);
                  }
                  return baseFindIndex(array, getIteratee(predicate, 3), index);
                }

                /**
                 * This method is like `_.findIndex` except that it iterates over elements
                 * of `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=array.length-1] The index to search from.
                 * @returns {number} Returns the index of the found element, else `-1`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
                 * // => 2
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
                 * // => 0
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findLastIndex(users, ['active', false]);
                 * // => 2
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findLastIndex(users, 'active');
                 * // => 0
                 */
                function findLastIndex(array, predicate, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = length - 1;
                  if (fromIndex !== undefined) {
                    index = toInteger(fromIndex);
                    index = fromIndex < 0
                      ? nativeMax(length + index, 0)
                      : nativeMin(index, length - 1);
                  }
                  return baseFindIndex(array, getIteratee(predicate, 3), index, true);
                }

                /**
                 * Flattens `array` a single level deep.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * _.flatten([1, [2, [3, [4]], 5]]);
                 * // => [1, 2, [3, [4]], 5]
                 */
                function flatten(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseFlatten(array, 1) : [];
                }

                /**
                 * Recursively flattens `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * _.flattenDeep([1, [2, [3, [4]], 5]]);
                 * // => [1, 2, 3, 4, 5]
                 */
                function flattenDeep(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseFlatten(array, INFINITY) : [];
                }

                /**
                 * Recursively flatten `array` up to `depth` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.4.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @param {number} [depth=1] The maximum recursion depth.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * var array = [1, [2, [3, [4]], 5]];
                 *
                 * _.flattenDepth(array, 1);
                 * // => [1, 2, [3, [4]], 5]
                 *
                 * _.flattenDepth(array, 2);
                 * // => [1, 2, 3, [4], 5]
                 */
                function flattenDepth(array, depth) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  depth = depth === undefined ? 1 : toInteger(depth);
                  return baseFlatten(array, depth);
                }

                /**
                 * The inverse of `_.toPairs`; this method returns an object composed
                 * from key-value `pairs`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} pairs The key-value pairs.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.fromPairs([['a', 1], ['b', 2]]);
                 * // => { 'a': 1, 'b': 2 }
                 */
                function fromPairs(pairs) {
                  var index = -1,
                      length = pairs == null ? 0 : pairs.length,
                      result = {};

                  while (++index < length) {
                    var pair = pairs[index];
                    result[pair[0]] = pair[1];
                  }
                  return result;
                }

                /**
                 * Gets the first element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @alias first
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {*} Returns the first element of `array`.
                 * @example
                 *
                 * _.head([1, 2, 3]);
                 * // => 1
                 *
                 * _.head([]);
                 * // => undefined
                 */
                function head(array) {
                  return (array && array.length) ? array[0] : undefined;
                }

                /**
                 * Gets the index at which the first occurrence of `value` is found in `array`
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. If `fromIndex` is negative, it's used as the
                 * offset from the end of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.indexOf([1, 2, 1, 2], 2);
                 * // => 1
                 *
                 * // Search from the `fromIndex`.
                 * _.indexOf([1, 2, 1, 2], 2, 2);
                 * // => 3
                 */
                function indexOf(array, value, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = fromIndex == null ? 0 : toInteger(fromIndex);
                  if (index < 0) {
                    index = nativeMax(length + index, 0);
                  }
                  return baseIndexOf(array, value, index);
                }

                /**
                 * Gets all but the last element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.initial([1, 2, 3]);
                 * // => [1, 2]
                 */
                function initial(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseSlice(array, 0, -1) : [];
                }

                /**
                 * Creates an array of unique values that are included in all given arrays
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. The order and references of result values are
                 * determined by the first array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * _.intersection([2, 1], [2, 3]);
                 * // => [2]
                 */
                var intersection = baseRest(function(arrays) {
                  var mapped = arrayMap(arrays, castArrayLikeObject);
                  return (mapped.length && mapped[0] === arrays[0])
                    ? baseIntersection(mapped)
                    : [];
                });

                /**
                 * This method is like `_.intersection` except that it accepts `iteratee`
                 * which is invoked for each element of each `arrays` to generate the criterion
                 * by which they're compared. The order and references of result values are
                 * determined by the first array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [2.1]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }]
                 */
                var intersectionBy = baseRest(function(arrays) {
                  var iteratee = last(arrays),
                      mapped = arrayMap(arrays, castArrayLikeObject);

                  if (iteratee === last(mapped)) {
                    iteratee = undefined;
                  } else {
                    mapped.pop();
                  }
                  return (mapped.length && mapped[0] === arrays[0])
                    ? baseIntersection(mapped, getIteratee(iteratee, 2))
                    : [];
                });

                /**
                 * This method is like `_.intersection` except that it accepts `comparator`
                 * which is invoked to compare elements of `arrays`. The order and references
                 * of result values are determined by the first array. The comparator is
                 * invoked with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.intersectionWith(objects, others, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }]
                 */
                var intersectionWith = baseRest(function(arrays) {
                  var comparator = last(arrays),
                      mapped = arrayMap(arrays, castArrayLikeObject);

                  comparator = typeof comparator == 'function' ? comparator : undefined;
                  if (comparator) {
                    mapped.pop();
                  }
                  return (mapped.length && mapped[0] === arrays[0])
                    ? baseIntersection(mapped, undefined, comparator)
                    : [];
                });

                /**
                 * Converts all elements in `array` into a string separated by `separator`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to convert.
                 * @param {string} [separator=','] The element separator.
                 * @returns {string} Returns the joined string.
                 * @example
                 *
                 * _.join(['a', 'b', 'c'], '~');
                 * // => 'a~b~c'
                 */
                function join(array, separator) {
                  return array == null ? '' : nativeJoin.call(array, separator);
                }

                /**
                 * Gets the last element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {*} Returns the last element of `array`.
                 * @example
                 *
                 * _.last([1, 2, 3]);
                 * // => 3
                 */
                function last(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? array[length - 1] : undefined;
                }

                /**
                 * This method is like `_.indexOf` except that it iterates over elements of
                 * `array` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=array.length-1] The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.lastIndexOf([1, 2, 1, 2], 2);
                 * // => 3
                 *
                 * // Search from the `fromIndex`.
                 * _.lastIndexOf([1, 2, 1, 2], 2, 2);
                 * // => 1
                 */
                function lastIndexOf(array, value, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = length;
                  if (fromIndex !== undefined) {
                    index = toInteger(fromIndex);
                    index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                  }
                  return value === value
                    ? strictLastIndexOf(array, value, index)
                    : baseFindIndex(array, baseIsNaN, index, true);
                }

                /**
                 * Gets the element at index `n` of `array`. If `n` is negative, the nth
                 * element from the end is returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.11.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=0] The index of the element to return.
                 * @returns {*} Returns the nth element of `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'd'];
                 *
                 * _.nth(array, 1);
                 * // => 'b'
                 *
                 * _.nth(array, -2);
                 * // => 'c';
                 */
                function nth(array, n) {
                  return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
                }

                /**
                 * Removes all given values from `array` using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
                 * to remove elements from an array by predicate.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {...*} [values] The values to remove.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                 *
                 * _.pull(array, 'a', 'c');
                 * console.log(array);
                 * // => ['b', 'b']
                 */
                var pull = baseRest(pullAll);

                /**
                 * This method is like `_.pull` except that it accepts an array of values to remove.
                 *
                 * **Note:** Unlike `_.difference`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                 *
                 * _.pullAll(array, ['a', 'c']);
                 * console.log(array);
                 * // => ['b', 'b']
                 */
                function pullAll(array, values) {
                  return (array && array.length && values && values.length)
                    ? basePullAll(array, values)
                    : array;
                }

                /**
                 * This method is like `_.pullAll` except that it accepts `iteratee` which is
                 * invoked for each element of `array` and `values` to generate the criterion
                 * by which they're compared. The iteratee is invoked with one argument: (value).
                 *
                 * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
                 *
                 * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
                 * console.log(array);
                 * // => [{ 'x': 2 }]
                 */
                function pullAllBy(array, values, iteratee) {
                  return (array && array.length && values && values.length)
                    ? basePullAll(array, values, getIteratee(iteratee, 2))
                    : array;
                }

                /**
                 * This method is like `_.pullAll` except that it accepts `comparator` which
                 * is invoked to compare elements of `array` to `values`. The comparator is
                 * invoked with two arguments: (arrVal, othVal).
                 *
                 * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
                 *
                 * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
                 * console.log(array);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
                 */
                function pullAllWith(array, values, comparator) {
                  return (array && array.length && values && values.length)
                    ? basePullAll(array, values, undefined, comparator)
                    : array;
                }

                /**
                 * Removes elements from `array` corresponding to `indexes` and returns an
                 * array of removed elements.
                 *
                 * **Note:** Unlike `_.at`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {...(number|number[])} [indexes] The indexes of elements to remove.
                 * @returns {Array} Returns the new array of removed elements.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'd'];
                 * var pulled = _.pullAt(array, [1, 3]);
                 *
                 * console.log(array);
                 * // => ['a', 'c']
                 *
                 * console.log(pulled);
                 * // => ['b', 'd']
                 */
                var pullAt = flatRest(function(array, indexes) {
                  var length = array == null ? 0 : array.length,
                      result = baseAt(array, indexes);

                  basePullAt(array, arrayMap(indexes, function(index) {
                    return isIndex(index, length) ? +index : index;
                  }).sort(compareAscending));

                  return result;
                });

                /**
                 * Removes all elements from `array` that `predicate` returns truthy for
                 * and returns an array of the removed elements. The predicate is invoked
                 * with three arguments: (value, index, array).
                 *
                 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
                 * to pull elements from an array by value.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new array of removed elements.
                 * @example
                 *
                 * var array = [1, 2, 3, 4];
                 * var evens = _.remove(array, function(n) {
                 *   return n % 2 == 0;
                 * });
                 *
                 * console.log(array);
                 * // => [1, 3]
                 *
                 * console.log(evens);
                 * // => [2, 4]
                 */
                function remove(array, predicate) {
                  var result = [];
                  if (!(array && array.length)) {
                    return result;
                  }
                  var index = -1,
                      indexes = [],
                      length = array.length;

                  predicate = getIteratee(predicate, 3);
                  while (++index < length) {
                    var value = array[index];
                    if (predicate(value, index, array)) {
                      result.push(value);
                      indexes.push(index);
                    }
                  }
                  basePullAt(array, indexes);
                  return result;
                }

                /**
                 * Reverses `array` so that the first element becomes the last, the second
                 * element becomes the second to last, and so on.
                 *
                 * **Note:** This method mutates `array` and is based on
                 * [`Array#reverse`](https://mdn.io/Array/reverse).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _.reverse(array);
                 * // => [3, 2, 1]
                 *
                 * console.log(array);
                 * // => [3, 2, 1]
                 */
                function reverse(array) {
                  return array == null ? array : nativeReverse.call(array);
                }

                /**
                 * Creates a slice of `array` from `start` up to, but not including, `end`.
                 *
                 * **Note:** This method is used instead of
                 * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
                 * returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to slice.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function slice(array, start, end) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                    start = 0;
                    end = length;
                  }
                  else {
                    start = start == null ? 0 : toInteger(start);
                    end = end === undefined ? length : toInteger(end);
                  }
                  return baseSlice(array, start, end);
                }

                /**
                 * Uses a binary search to determine the lowest index at which `value`
                 * should be inserted into `array` in order to maintain its sort order.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * _.sortedIndex([30, 50], 40);
                 * // => 1
                 */
                function sortedIndex(array, value) {
                  return baseSortedIndex(array, value);
                }

                /**
                 * This method is like `_.sortedIndex` except that it accepts `iteratee`
                 * which is invoked for `value` and each element of `array` to compute their
                 * sort ranking. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * var objects = [{ 'x': 4 }, { 'x': 5 }];
                 *
                 * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                 * // => 0
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
                 * // => 0
                 */
                function sortedIndexBy(array, value, iteratee) {
                  return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
                }

                /**
                 * This method is like `_.indexOf` except that it performs a binary
                 * search on a sorted `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
                 * // => 1
                 */
                function sortedIndexOf(array, value) {
                  var length = array == null ? 0 : array.length;
                  if (length) {
                    var index = baseSortedIndex(array, value);
                    if (index < length && eq(array[index], value)) {
                      return index;
                    }
                  }
                  return -1;
                }

                /**
                 * This method is like `_.sortedIndex` except that it returns the highest
                 * index at which `value` should be inserted into `array` in order to
                 * maintain its sort order.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
                 * // => 4
                 */
                function sortedLastIndex(array, value) {
                  return baseSortedIndex(array, value, true);
                }

                /**
                 * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
                 * which is invoked for `value` and each element of `array` to compute their
                 * sort ranking. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * var objects = [{ 'x': 4 }, { 'x': 5 }];
                 *
                 * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                 * // => 1
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
                 * // => 1
                 */
                function sortedLastIndexBy(array, value, iteratee) {
                  return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
                }

                /**
                 * This method is like `_.lastIndexOf` except that it performs a binary
                 * search on a sorted `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
                 * // => 3
                 */
                function sortedLastIndexOf(array, value) {
                  var length = array == null ? 0 : array.length;
                  if (length) {
                    var index = baseSortedIndex(array, value, true) - 1;
                    if (eq(array[index], value)) {
                      return index;
                    }
                  }
                  return -1;
                }

                /**
                 * This method is like `_.uniq` except that it's designed and optimized
                 * for sorted arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.sortedUniq([1, 1, 2]);
                 * // => [1, 2]
                 */
                function sortedUniq(array) {
                  return (array && array.length)
                    ? baseSortedUniq(array)
                    : [];
                }

                /**
                 * This method is like `_.uniqBy` except that it's designed and optimized
                 * for sorted arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
                 * // => [1.1, 2.3]
                 */
                function sortedUniqBy(array, iteratee) {
                  return (array && array.length)
                    ? baseSortedUniq(array, getIteratee(iteratee, 2))
                    : [];
                }

                /**
                 * Gets all but the first element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.tail([1, 2, 3]);
                 * // => [2, 3]
                 */
                function tail(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseSlice(array, 1, length) : [];
                }

                /**
                 * Creates a slice of `array` with `n` elements taken from the beginning.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to take.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.take([1, 2, 3]);
                 * // => [1]
                 *
                 * _.take([1, 2, 3], 2);
                 * // => [1, 2]
                 *
                 * _.take([1, 2, 3], 5);
                 * // => [1, 2, 3]
                 *
                 * _.take([1, 2, 3], 0);
                 * // => []
                 */
                function take(array, n, guard) {
                  if (!(array && array.length)) {
                    return [];
                  }
                  n = (guard || n === undefined) ? 1 : toInteger(n);
                  return baseSlice(array, 0, n < 0 ? 0 : n);
                }

                /**
                 * Creates a slice of `array` with `n` elements taken from the end.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to take.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.takeRight([1, 2, 3]);
                 * // => [3]
                 *
                 * _.takeRight([1, 2, 3], 2);
                 * // => [2, 3]
                 *
                 * _.takeRight([1, 2, 3], 5);
                 * // => [1, 2, 3]
                 *
                 * _.takeRight([1, 2, 3], 0);
                 * // => []
                 */
                function takeRight(array, n, guard) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  n = (guard || n === undefined) ? 1 : toInteger(n);
                  n = length - n;
                  return baseSlice(array, n < 0 ? 0 : n, length);
                }

                /**
                 * Creates a slice of `array` with elements taken from the end. Elements are
                 * taken until `predicate` returns falsey. The predicate is invoked with
                 * three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.takeRightWhile(users, function(o) { return !o.active; });
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
                 * // => objects for ['pebbles']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.takeRightWhile(users, ['active', false]);
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.takeRightWhile(users, 'active');
                 * // => []
                 */
                function takeRightWhile(array, predicate) {
                  return (array && array.length)
                    ? baseWhile(array, getIteratee(predicate, 3), false, true)
                    : [];
                }

                /**
                 * Creates a slice of `array` with elements taken from the beginning. Elements
                 * are taken until `predicate` returns falsey. The predicate is invoked with
                 * three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.takeWhile(users, function(o) { return !o.active; });
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.takeWhile(users, { 'user': 'barney', 'active': false });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.takeWhile(users, ['active', false]);
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.takeWhile(users, 'active');
                 * // => []
                 */
                function takeWhile(array, predicate) {
                  return (array && array.length)
                    ? baseWhile(array, getIteratee(predicate, 3))
                    : [];
                }

                /**
                 * Creates an array of unique values, in order, from all given arrays using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * _.union([2], [1, 2]);
                 * // => [2, 1]
                 */
                var union = baseRest(function(arrays) {
                  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
                });

                /**
                 * This method is like `_.union` except that it accepts `iteratee` which is
                 * invoked for each element of each `arrays` to generate the criterion by
                 * which uniqueness is computed. Result values are chosen from the first
                 * array in which the value occurs. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * _.unionBy([2.1], [1.2, 2.3], Math.floor);
                 * // => [2.1, 1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }, { 'x': 2 }]
                 */
                var unionBy = baseRest(function(arrays) {
                  var iteratee = last(arrays);
                  if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined;
                  }
                  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
                });

                /**
                 * This method is like `_.union` except that it accepts `comparator` which
                 * is invoked to compare elements of `arrays`. Result values are chosen from
                 * the first array in which the value occurs. The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.unionWith(objects, others, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                 */
                var unionWith = baseRest(function(arrays) {
                  var comparator = last(arrays);
                  comparator = typeof comparator == 'function' ? comparator : undefined;
                  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
                });

                /**
                 * Creates a duplicate-free version of an array, using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons, in which only the first occurrence of each element
                 * is kept. The order of result values is determined by the order they occur
                 * in the array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.uniq([2, 1, 2]);
                 * // => [2, 1]
                 */
                function uniq(array) {
                  return (array && array.length) ? baseUniq(array) : [];
                }

                /**
                 * This method is like `_.uniq` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * uniqueness is computed. The order of result values is determined by the
                 * order they occur in the array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
                 * // => [2.1, 1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }, { 'x': 2 }]
                 */
                function uniqBy(array, iteratee) {
                  return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
                }

                /**
                 * This method is like `_.uniq` except that it accepts `comparator` which
                 * is invoked to compare elements of `array`. The order of result values is
                 * determined by the order they occur in the array.The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.uniqWith(objects, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
                 */
                function uniqWith(array, comparator) {
                  comparator = typeof comparator == 'function' ? comparator : undefined;
                  return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
                }

                /**
                 * This method is like `_.zip` except that it accepts an array of grouped
                 * elements and creates an array regrouping the elements to their pre-zip
                 * configuration.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.2.0
                 * @category Array
                 * @param {Array} array The array of grouped elements to process.
                 * @returns {Array} Returns the new array of regrouped elements.
                 * @example
                 *
                 * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
                 * // => [['a', 1, true], ['b', 2, false]]
                 *
                 * _.unzip(zipped);
                 * // => [['a', 'b'], [1, 2], [true, false]]
                 */
                function unzip(array) {
                  if (!(array && array.length)) {
                    return [];
                  }
                  var length = 0;
                  array = arrayFilter(array, function(group) {
                    if (isArrayLikeObject(group)) {
                      length = nativeMax(group.length, length);
                      return true;
                    }
                  });
                  return baseTimes(length, function(index) {
                    return arrayMap(array, baseProperty(index));
                  });
                }

                /**
                 * This method is like `_.unzip` except that it accepts `iteratee` to specify
                 * how regrouped values should be combined. The iteratee is invoked with the
                 * elements of each group: (...group).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Array
                 * @param {Array} array The array of grouped elements to process.
                 * @param {Function} [iteratee=_.identity] The function to combine
                 *  regrouped values.
                 * @returns {Array} Returns the new array of regrouped elements.
                 * @example
                 *
                 * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
                 * // => [[1, 10, 100], [2, 20, 200]]
                 *
                 * _.unzipWith(zipped, _.add);
                 * // => [3, 30, 300]
                 */
                function unzipWith(array, iteratee) {
                  if (!(array && array.length)) {
                    return [];
                  }
                  var result = unzip(array);
                  if (iteratee == null) {
                    return result;
                  }
                  return arrayMap(result, function(group) {
                    return apply(iteratee, undefined, group);
                  });
                }

                /**
                 * Creates an array excluding all given values using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * **Note:** Unlike `_.pull`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...*} [values] The values to exclude.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.difference, _.xor
                 * @example
                 *
                 * _.without([2, 1, 2, 3], 1, 2);
                 * // => [3]
                 */
                var without = baseRest(function(array, values) {
                  return isArrayLikeObject(array)
                    ? baseDifference(array, values)
                    : [];
                });

                /**
                 * Creates an array of unique values that is the
                 * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
                 * of the given arrays. The order of result values is determined by the order
                 * they occur in the arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.difference, _.without
                 * @example
                 *
                 * _.xor([2, 1], [2, 3]);
                 * // => [1, 3]
                 */
                var xor = baseRest(function(arrays) {
                  return baseXor(arrayFilter(arrays, isArrayLikeObject));
                });

                /**
                 * This method is like `_.xor` except that it accepts `iteratee` which is
                 * invoked for each element of each `arrays` to generate the criterion by
                 * which by which they're compared. The order of result values is determined
                 * by the order they occur in the arrays. The iteratee is invoked with one
                 * argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [1.2, 3.4]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 2 }]
                 */
                var xorBy = baseRest(function(arrays) {
                  var iteratee = last(arrays);
                  if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined;
                  }
                  return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
                });

                /**
                 * This method is like `_.xor` except that it accepts `comparator` which is
                 * invoked to compare elements of `arrays`. The order of result values is
                 * determined by the order they occur in the arrays. The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.xorWith(objects, others, _.isEqual);
                 * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                 */
                var xorWith = baseRest(function(arrays) {
                  var comparator = last(arrays);
                  comparator = typeof comparator == 'function' ? comparator : undefined;
                  return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
                });

                /**
                 * Creates an array of grouped elements, the first of which contains the
                 * first elements of the given arrays, the second of which contains the
                 * second elements of the given arrays, and so on.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to process.
                 * @returns {Array} Returns the new array of grouped elements.
                 * @example
                 *
                 * _.zip(['a', 'b'], [1, 2], [true, false]);
                 * // => [['a', 1, true], ['b', 2, false]]
                 */
                var zip = baseRest(unzip);

                /**
                 * This method is like `_.fromPairs` except that it accepts two arrays,
                 * one of property identifiers and one of corresponding values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.4.0
                 * @category Array
                 * @param {Array} [props=[]] The property identifiers.
                 * @param {Array} [values=[]] The property values.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.zipObject(['a', 'b'], [1, 2]);
                 * // => { 'a': 1, 'b': 2 }
                 */
                function zipObject(props, values) {
                  return baseZipObject(props || [], values || [], assignValue);
                }

                /**
                 * This method is like `_.zipObject` except that it supports property paths.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.1.0
                 * @category Array
                 * @param {Array} [props=[]] The property identifiers.
                 * @param {Array} [values=[]] The property values.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
                 * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
                 */
                function zipObjectDeep(props, values) {
                  return baseZipObject(props || [], values || [], baseSet);
                }

                /**
                 * This method is like `_.zip` except that it accepts `iteratee` to specify
                 * how grouped values should be combined. The iteratee is invoked with the
                 * elements of each group: (...group).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to process.
                 * @param {Function} [iteratee=_.identity] The function to combine
                 *  grouped values.
                 * @returns {Array} Returns the new array of grouped elements.
                 * @example
                 *
                 * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
                 *   return a + b + c;
                 * });
                 * // => [111, 222]
                 */
                var zipWith = baseRest(function(arrays) {
                  var length = arrays.length,
                      iteratee = length > 1 ? arrays[length - 1] : undefined;

                  iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
                  return unzipWith(arrays, iteratee);
                });

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a `lodash` wrapper instance that wraps `value` with explicit method
                 * chain sequences enabled. The result of such sequences must be unwrapped
                 * with `_#value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.3.0
                 * @category Seq
                 * @param {*} value The value to wrap.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36 },
                 *   { 'user': 'fred',    'age': 40 },
                 *   { 'user': 'pebbles', 'age': 1 }
                 * ];
                 *
                 * var youngest = _
                 *   .chain(users)
                 *   .sortBy('age')
                 *   .map(function(o) {
                 *     return o.user + ' is ' + o.age;
                 *   })
                 *   .head()
                 *   .value();
                 * // => 'pebbles is 1'
                 */
                function chain(value) {
                  var result = lodash(value);
                  result.__chain__ = true;
                  return result;
                }

                /**
                 * This method invokes `interceptor` and returns `value`. The interceptor
                 * is invoked with one argument; (value). The purpose of this method is to
                 * "tap into" a method chain sequence in order to modify intermediate results.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @param {*} value The value to provide to `interceptor`.
                 * @param {Function} interceptor The function to invoke.
                 * @returns {*} Returns `value`.
                 * @example
                 *
                 * _([1, 2, 3])
                 *  .tap(function(array) {
                 *    // Mutate input array.
                 *    array.pop();
                 *  })
                 *  .reverse()
                 *  .value();
                 * // => [2, 1]
                 */
                function tap(value, interceptor) {
                  interceptor(value);
                  return value;
                }

                /**
                 * This method is like `_.tap` except that it returns the result of `interceptor`.
                 * The purpose of this method is to "pass thru" values replacing intermediate
                 * results in a method chain sequence.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Seq
                 * @param {*} value The value to provide to `interceptor`.
                 * @param {Function} interceptor The function to invoke.
                 * @returns {*} Returns the result of `interceptor`.
                 * @example
                 *
                 * _('  abc  ')
                 *  .chain()
                 *  .trim()
                 *  .thru(function(value) {
                 *    return [value];
                 *  })
                 *  .value();
                 * // => ['abc']
                 */
                function thru(value, interceptor) {
                  return interceptor(value);
                }

                /**
                 * This method is the wrapper version of `_.at`.
                 *
                 * @name at
                 * @memberOf _
                 * @since 1.0.0
                 * @category Seq
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                 *
                 * _(object).at(['a[0].b.c', 'a[1]']).value();
                 * // => [3, 4]
                 */
                var wrapperAt = flatRest(function(paths) {
                  var length = paths.length,
                      start = length ? paths[0] : 0,
                      value = this.__wrapped__,
                      interceptor = function(object) { return baseAt(object, paths); };

                  if (length > 1 || this.__actions__.length ||
                      !(value instanceof LazyWrapper) || !isIndex(start)) {
                    return this.thru(interceptor);
                  }
                  value = value.slice(start, +start + (length ? 1 : 0));
                  value.__actions__.push({
                    'func': thru,
                    'args': [interceptor],
                    'thisArg': undefined
                  });
                  return new LodashWrapper(value, this.__chain__).thru(function(array) {
                    if (length && !array.length) {
                      array.push(undefined);
                    }
                    return array;
                  });
                });

                /**
                 * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
                 *
                 * @name chain
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36 },
                 *   { 'user': 'fred',   'age': 40 }
                 * ];
                 *
                 * // A sequence without explicit chaining.
                 * _(users).head();
                 * // => { 'user': 'barney', 'age': 36 }
                 *
                 * // A sequence with explicit chaining.
                 * _(users)
                 *   .chain()
                 *   .head()
                 *   .pick('user')
                 *   .value();
                 * // => { 'user': 'barney' }
                 */
                function wrapperChain() {
                  return chain(this);
                }

                /**
                 * Executes the chain sequence and returns the wrapped result.
                 *
                 * @name commit
                 * @memberOf _
                 * @since 3.2.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var array = [1, 2];
                 * var wrapped = _(array).push(3);
                 *
                 * console.log(array);
                 * // => [1, 2]
                 *
                 * wrapped = wrapped.commit();
                 * console.log(array);
                 * // => [1, 2, 3]
                 *
                 * wrapped.last();
                 * // => 3
                 *
                 * console.log(array);
                 * // => [1, 2, 3]
                 */
                function wrapperCommit() {
                  return new LodashWrapper(this.value(), this.__chain__);
                }

                /**
                 * Gets the next value on a wrapped object following the
                 * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
                 *
                 * @name next
                 * @memberOf _
                 * @since 4.0.0
                 * @category Seq
                 * @returns {Object} Returns the next iterator value.
                 * @example
                 *
                 * var wrapped = _([1, 2]);
                 *
                 * wrapped.next();
                 * // => { 'done': false, 'value': 1 }
                 *
                 * wrapped.next();
                 * // => { 'done': false, 'value': 2 }
                 *
                 * wrapped.next();
                 * // => { 'done': true, 'value': undefined }
                 */
                function wrapperNext() {
                  if (this.__values__ === undefined) {
                    this.__values__ = toArray(this.value());
                  }
                  var done = this.__index__ >= this.__values__.length,
                      value = done ? undefined : this.__values__[this.__index__++];

                  return { 'done': done, 'value': value };
                }

                /**
                 * Enables the wrapper to be iterable.
                 *
                 * @name Symbol.iterator
                 * @memberOf _
                 * @since 4.0.0
                 * @category Seq
                 * @returns {Object} Returns the wrapper object.
                 * @example
                 *
                 * var wrapped = _([1, 2]);
                 *
                 * wrapped[Symbol.iterator]() === wrapped;
                 * // => true
                 *
                 * Array.from(wrapped);
                 * // => [1, 2]
                 */
                function wrapperToIterator() {
                  return this;
                }

                /**
                 * Creates a clone of the chain sequence planting `value` as the wrapped value.
                 *
                 * @name plant
                 * @memberOf _
                 * @since 3.2.0
                 * @category Seq
                 * @param {*} value The value to plant.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var wrapped = _([1, 2]).map(square);
                 * var other = wrapped.plant([3, 4]);
                 *
                 * other.value();
                 * // => [9, 16]
                 *
                 * wrapped.value();
                 * // => [1, 4]
                 */
                function wrapperPlant(value) {
                  var result,
                      parent = this;

                  while (parent instanceof baseLodash) {
                    var clone = wrapperClone(parent);
                    clone.__index__ = 0;
                    clone.__values__ = undefined;
                    if (result) {
                      previous.__wrapped__ = clone;
                    } else {
                      result = clone;
                    }
                    var previous = clone;
                    parent = parent.__wrapped__;
                  }
                  previous.__wrapped__ = value;
                  return result;
                }

                /**
                 * This method is the wrapper version of `_.reverse`.
                 *
                 * **Note:** This method mutates the wrapped array.
                 *
                 * @name reverse
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _(array).reverse().value()
                 * // => [3, 2, 1]
                 *
                 * console.log(array);
                 * // => [3, 2, 1]
                 */
                function wrapperReverse() {
                  var value = this.__wrapped__;
                  if (value instanceof LazyWrapper) {
                    var wrapped = value;
                    if (this.__actions__.length) {
                      wrapped = new LazyWrapper(this);
                    }
                    wrapped = wrapped.reverse();
                    wrapped.__actions__.push({
                      'func': thru,
                      'args': [reverse],
                      'thisArg': undefined
                    });
                    return new LodashWrapper(wrapped, this.__chain__);
                  }
                  return this.thru(reverse);
                }

                /**
                 * Executes the chain sequence to resolve the unwrapped value.
                 *
                 * @name value
                 * @memberOf _
                 * @since 0.1.0
                 * @alias toJSON, valueOf
                 * @category Seq
                 * @returns {*} Returns the resolved unwrapped value.
                 * @example
                 *
                 * _([1, 2, 3]).value();
                 * // => [1, 2, 3]
                 */
                function wrapperValue() {
                  return baseWrapperValue(this.__wrapped__, this.__actions__);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The corresponding value of
                 * each key is the number of times the key was returned by `iteratee`. The
                 * iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * _.countBy([6.1, 4.2, 6.3], Math.floor);
                 * // => { '4': 1, '6': 2 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.countBy(['one', 'two', 'three'], 'length');
                 * // => { '3': 2, '5': 1 }
                 */
                var countBy = createAggregator(function(result, value, key) {
                  if (hasOwnProperty.call(result, key)) {
                    ++result[key];
                  } else {
                    baseAssignValue(result, key, 1);
                  }
                });

                /**
                 * Checks if `predicate` returns truthy for **all** elements of `collection`.
                 * Iteration is stopped once `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index|key, collection).
                 *
                 * **Note:** This method returns `true` for
                 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
                 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
                 * elements of empty collections.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {boolean} Returns `true` if all elements pass the predicate check,
                 *  else `false`.
                 * @example
                 *
                 * _.every([true, 1, null, 'yes'], Boolean);
                 * // => false
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': false },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.every(users, { 'user': 'barney', 'active': false });
                 * // => false
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.every(users, ['active', false]);
                 * // => true
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.every(users, 'active');
                 * // => false
                 */
                function every(collection, predicate, guard) {
                  var func = isArray(collection) ? arrayEvery : baseEvery;
                  if (guard && isIterateeCall(collection, predicate, guard)) {
                    predicate = undefined;
                  }
                  return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Iterates over elements of `collection`, returning an array of all elements
                 * `predicate` returns truthy for. The predicate is invoked with three
                 * arguments: (value, index|key, collection).
                 *
                 * **Note:** Unlike `_.remove`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 * @see _.reject
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': true },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * _.filter(users, function(o) { return !o.active; });
                 * // => objects for ['fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.filter(users, { 'age': 36, 'active': true });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.filter(users, ['active', false]);
                 * // => objects for ['fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.filter(users, 'active');
                 * // => objects for ['barney']
                 */
                function filter(collection, predicate) {
                  var func = isArray(collection) ? arrayFilter : baseFilter;
                  return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Iterates over elements of `collection`, returning the first element
                 * `predicate` returns truthy for. The predicate is invoked with three
                 * arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {*} Returns the matched element, else `undefined`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36, 'active': true },
                 *   { 'user': 'fred',    'age': 40, 'active': false },
                 *   { 'user': 'pebbles', 'age': 1,  'active': true }
                 * ];
                 *
                 * _.find(users, function(o) { return o.age < 40; });
                 * // => object for 'barney'
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.find(users, { 'age': 1, 'active': true });
                 * // => object for 'pebbles'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.find(users, ['active', false]);
                 * // => object for 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.find(users, 'active');
                 * // => object for 'barney'
                 */
                var find = createFind(findIndex);

                /**
                 * This method is like `_.find` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=collection.length-1] The index to search from.
                 * @returns {*} Returns the matched element, else `undefined`.
                 * @example
                 *
                 * _.findLast([1, 2, 3, 4], function(n) {
                 *   return n % 2 == 1;
                 * });
                 * // => 3
                 */
                var findLast = createFind(findLastIndex);

                /**
                 * Creates a flattened array of values by running each element in `collection`
                 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
                 * with three arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
                 *   return [n, n];
                 * }
                 *
                 * _.flatMap([1, 2], duplicate);
                 * // => [1, 1, 2, 2]
                 */
                function flatMap(collection, iteratee) {
                  return baseFlatten(map(collection, iteratee), 1);
                }

                /**
                 * This method is like `_.flatMap` except that it recursively flattens the
                 * mapped results.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
                 *   return [[[n, n]]];
                 * }
                 *
                 * _.flatMapDeep([1, 2], duplicate);
                 * // => [1, 1, 2, 2]
                 */
                function flatMapDeep(collection, iteratee) {
                  return baseFlatten(map(collection, iteratee), INFINITY);
                }

                /**
                 * This method is like `_.flatMap` except that it recursively flattens the
                 * mapped results up to `depth` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {number} [depth=1] The maximum recursion depth.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
                 *   return [[[n, n]]];
                 * }
                 *
                 * _.flatMapDepth([1, 2], duplicate, 2);
                 * // => [[1, 1], [2, 2]]
                 */
                function flatMapDepth(collection, iteratee, depth) {
                  depth = depth === undefined ? 1 : toInteger(depth);
                  return baseFlatten(map(collection, iteratee), depth);
                }

                /**
                 * Iterates over elements of `collection` and invokes `iteratee` for each element.
                 * The iteratee is invoked with three arguments: (value, index|key, collection).
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * **Note:** As with other "Collections" methods, objects with a "length"
                 * property are iterated like arrays. To avoid this behavior use `_.forIn`
                 * or `_.forOwn` for object iteration.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @alias each
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 * @see _.forEachRight
                 * @example
                 *
                 * _.forEach([1, 2], function(value) {
                 *   console.log(value);
                 * });
                 * // => Logs `1` then `2`.
                 *
                 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                 */
                function forEach(collection, iteratee) {
                  var func = isArray(collection) ? arrayEach : baseEach;
                  return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.forEach` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @alias eachRight
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 * @see _.forEach
                 * @example
                 *
                 * _.forEachRight([1, 2], function(value) {
                 *   console.log(value);
                 * });
                 * // => Logs `2` then `1`.
                 */
                function forEachRight(collection, iteratee) {
                  var func = isArray(collection) ? arrayEachRight : baseEachRight;
                  return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The order of grouped values
                 * is determined by the order they occur in `collection`. The corresponding
                 * value of each key is an array of elements responsible for generating the
                 * key. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
                 * // => { '4': [4.2], '6': [6.1, 6.3] }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.groupBy(['one', 'two', 'three'], 'length');
                 * // => { '3': ['one', 'two'], '5': ['three'] }
                 */
                var groupBy = createAggregator(function(result, value, key) {
                  if (hasOwnProperty.call(result, key)) {
                    result[key].push(value);
                  } else {
                    baseAssignValue(result, key, [value]);
                  }
                });

                /**
                 * Checks if `value` is in `collection`. If `collection` is a string, it's
                 * checked for a substring of `value`, otherwise
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * is used for equality comparisons. If `fromIndex` is negative, it's used as
                 * the offset from the end of `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object|string} collection The collection to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                 * @returns {boolean} Returns `true` if `value` is found, else `false`.
                 * @example
                 *
                 * _.includes([1, 2, 3], 1);
                 * // => true
                 *
                 * _.includes([1, 2, 3], 1, 2);
                 * // => false
                 *
                 * _.includes({ 'a': 1, 'b': 2 }, 1);
                 * // => true
                 *
                 * _.includes('abcd', 'bc');
                 * // => true
                 */
                function includes(collection, value, fromIndex, guard) {
                  collection = isArrayLike(collection) ? collection : values(collection);
                  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

                  var length = collection.length;
                  if (fromIndex < 0) {
                    fromIndex = nativeMax(length + fromIndex, 0);
                  }
                  return isString(collection)
                    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
                    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
                }

                /**
                 * Invokes the method at `path` of each element in `collection`, returning
                 * an array of the results of each invoked method. Any additional arguments
                 * are provided to each invoked method. If `path` is a function, it's invoked
                 * for, and `this` bound to, each element in `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Array|Function|string} path The path of the method to invoke or
                 *  the function invoked per iteration.
                 * @param {...*} [args] The arguments to invoke each method with.
                 * @returns {Array} Returns the array of results.
                 * @example
                 *
                 * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
                 * // => [[1, 5, 7], [1, 2, 3]]
                 *
                 * _.invokeMap([123, 456], String.prototype.split, '');
                 * // => [['1', '2', '3'], ['4', '5', '6']]
                 */
                var invokeMap = baseRest(function(collection, path, args) {
                  var index = -1,
                      isFunc = typeof path == 'function',
                      result = isArrayLike(collection) ? Array(collection.length) : [];

                  baseEach(collection, function(value) {
                    result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
                  });
                  return result;
                });

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The corresponding value of
                 * each key is the last element responsible for generating the key. The
                 * iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * var array = [
                 *   { 'dir': 'left', 'code': 97 },
                 *   { 'dir': 'right', 'code': 100 }
                 * ];
                 *
                 * _.keyBy(array, function(o) {
                 *   return String.fromCharCode(o.code);
                 * });
                 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
                 *
                 * _.keyBy(array, 'dir');
                 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
                 */
                var keyBy = createAggregator(function(result, value, key) {
                  baseAssignValue(result, key, value);
                });

                /**
                 * Creates an array of values by running each element in `collection` thru
                 * `iteratee`. The iteratee is invoked with three arguments:
                 * (value, index|key, collection).
                 *
                 * Many lodash methods are guarded to work as iteratees for methods like
                 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
                 *
                 * The guarded methods are:
                 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
                 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
                 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
                 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new mapped array.
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * _.map([4, 8], square);
                 * // => [16, 64]
                 *
                 * _.map({ 'a': 4, 'b': 8 }, square);
                 * // => [16, 64] (iteration order is not guaranteed)
                 *
                 * var users = [
                 *   { 'user': 'barney' },
                 *   { 'user': 'fred' }
                 * ];
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.map(users, 'user');
                 * // => ['barney', 'fred']
                 */
                function map(collection, iteratee) {
                  var func = isArray(collection) ? arrayMap : baseMap;
                  return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.sortBy` except that it allows specifying the sort
                 * orders of the iteratees to sort by. If `orders` is unspecified, all values
                 * are sorted in ascending order. Otherwise, specify an order of "desc" for
                 * descending or "asc" for ascending sort order of corresponding values.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
                 *  The iteratees to sort by.
                 * @param {string[]} [orders] The sort orders of `iteratees`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                 * @returns {Array} Returns the new sorted array.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'fred',   'age': 48 },
                 *   { 'user': 'barney', 'age': 34 },
                 *   { 'user': 'fred',   'age': 40 },
                 *   { 'user': 'barney', 'age': 36 }
                 * ];
                 *
                 * // Sort by `user` in ascending order and by `age` in descending order.
                 * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
                 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                 */
                function orderBy(collection, iteratees, orders, guard) {
                  if (collection == null) {
                    return [];
                  }
                  if (!isArray(iteratees)) {
                    iteratees = iteratees == null ? [] : [iteratees];
                  }
                  orders = guard ? undefined : orders;
                  if (!isArray(orders)) {
                    orders = orders == null ? [] : [orders];
                  }
                  return baseOrderBy(collection, iteratees, orders);
                }

                /**
                 * Creates an array of elements split into two groups, the first of which
                 * contains elements `predicate` returns truthy for, the second of which
                 * contains elements `predicate` returns falsey for. The predicate is
                 * invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the array of grouped elements.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36, 'active': false },
                 *   { 'user': 'fred',    'age': 40, 'active': true },
                 *   { 'user': 'pebbles', 'age': 1,  'active': false }
                 * ];
                 *
                 * _.partition(users, function(o) { return o.active; });
                 * // => objects for [['fred'], ['barney', 'pebbles']]
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.partition(users, { 'age': 1, 'active': false });
                 * // => objects for [['pebbles'], ['barney', 'fred']]
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.partition(users, ['active', false]);
                 * // => objects for [['barney', 'pebbles'], ['fred']]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.partition(users, 'active');
                 * // => objects for [['fred'], ['barney', 'pebbles']]
                 */
                var partition = createAggregator(function(result, value, key) {
                  result[key ? 0 : 1].push(value);
                }, function() { return [[], []]; });

                /**
                 * Reduces `collection` to a value which is the accumulated result of running
                 * each element in `collection` thru `iteratee`, where each successive
                 * invocation is supplied the return value of the previous. If `accumulator`
                 * is not given, the first element of `collection` is used as the initial
                 * value. The iteratee is invoked with four arguments:
                 * (accumulator, value, index|key, collection).
                 *
                 * Many lodash methods are guarded to work as iteratees for methods like
                 * `_.reduce`, `_.reduceRight`, and `_.transform`.
                 *
                 * The guarded methods are:
                 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
                 * and `sortBy`
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @returns {*} Returns the accumulated value.
                 * @see _.reduceRight
                 * @example
                 *
                 * _.reduce([1, 2], function(sum, n) {
                 *   return sum + n;
                 * }, 0);
                 * // => 3
                 *
                 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                 *   (result[value] || (result[value] = [])).push(key);
                 *   return result;
                 * }, {});
                 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
                 */
                function reduce(collection, iteratee, accumulator) {
                  var func = isArray(collection) ? arrayReduce : baseReduce,
                      initAccum = arguments.length < 3;

                  return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
                }

                /**
                 * This method is like `_.reduce` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @returns {*} Returns the accumulated value.
                 * @see _.reduce
                 * @example
                 *
                 * var array = [[0, 1], [2, 3], [4, 5]];
                 *
                 * _.reduceRight(array, function(flattened, other) {
                 *   return flattened.concat(other);
                 * }, []);
                 * // => [4, 5, 2, 3, 0, 1]
                 */
                function reduceRight(collection, iteratee, accumulator) {
                  var func = isArray(collection) ? arrayReduceRight : baseReduce,
                      initAccum = arguments.length < 3;

                  return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
                }

                /**
                 * The opposite of `_.filter`; this method returns the elements of `collection`
                 * that `predicate` does **not** return truthy for.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 * @see _.filter
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': false },
                 *   { 'user': 'fred',   'age': 40, 'active': true }
                 * ];
                 *
                 * _.reject(users, function(o) { return !o.active; });
                 * // => objects for ['fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.reject(users, { 'age': 40, 'active': true });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.reject(users, ['active', false]);
                 * // => objects for ['fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.reject(users, 'active');
                 * // => objects for ['barney']
                 */
                function reject(collection, predicate) {
                  var func = isArray(collection) ? arrayFilter : baseFilter;
                  return func(collection, negate(getIteratee(predicate, 3)));
                }

                /**
                 * Gets a random element from `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to sample.
                 * @returns {*} Returns the random element.
                 * @example
                 *
                 * _.sample([1, 2, 3, 4]);
                 * // => 2
                 */
                function sample(collection) {
                  var func = isArray(collection) ? arraySample : baseSample;
                  return func(collection);
                }

                /**
                 * Gets `n` random elements at unique keys from `collection` up to the
                 * size of `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to sample.
                 * @param {number} [n=1] The number of elements to sample.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the random elements.
                 * @example
                 *
                 * _.sampleSize([1, 2, 3], 2);
                 * // => [3, 1]
                 *
                 * _.sampleSize([1, 2, 3], 4);
                 * // => [2, 3, 1]
                 */
                function sampleSize(collection, n, guard) {
                  if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
                    n = 1;
                  } else {
                    n = toInteger(n);
                  }
                  var func = isArray(collection) ? arraySampleSize : baseSampleSize;
                  return func(collection, n);
                }

                /**
                 * Creates an array of shuffled values, using a version of the
                 * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 * @example
                 *
                 * _.shuffle([1, 2, 3, 4]);
                 * // => [4, 1, 3, 2]
                 */
                function shuffle(collection) {
                  var func = isArray(collection) ? arrayShuffle : baseShuffle;
                  return func(collection);
                }

                /**
                 * Gets the size of `collection` by returning its length for array-like
                 * values or the number of own enumerable string keyed properties for objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object|string} collection The collection to inspect.
                 * @returns {number} Returns the collection size.
                 * @example
                 *
                 * _.size([1, 2, 3]);
                 * // => 3
                 *
                 * _.size({ 'a': 1, 'b': 2 });
                 * // => 2
                 *
                 * _.size('pebbles');
                 * // => 7
                 */
                function size(collection) {
                  if (collection == null) {
                    return 0;
                  }
                  if (isArrayLike(collection)) {
                    return isString(collection) ? stringSize(collection) : collection.length;
                  }
                  var tag = getTag(collection);
                  if (tag == mapTag || tag == setTag) {
                    return collection.size;
                  }
                  return baseKeys(collection).length;
                }

                /**
                 * Checks if `predicate` returns truthy for **any** element of `collection`.
                 * Iteration is stopped once `predicate` returns truthy. The predicate is
                 * invoked with three arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {boolean} Returns `true` if any element passes the predicate check,
                 *  else `false`.
                 * @example
                 *
                 * _.some([null, 0, 'yes', false], Boolean);
                 * // => true
                 *
                 * var users = [
                 *   { 'user': 'barney', 'active': true },
                 *   { 'user': 'fred',   'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.some(users, { 'user': 'barney', 'active': false });
                 * // => false
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.some(users, ['active', false]);
                 * // => true
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.some(users, 'active');
                 * // => true
                 */
                function some(collection, predicate, guard) {
                  var func = isArray(collection) ? arraySome : baseSome;
                  if (guard && isIterateeCall(collection, predicate, guard)) {
                    predicate = undefined;
                  }
                  return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Creates an array of elements, sorted in ascending order by the results of
                 * running each element in a collection thru each iteratee. This method
                 * performs a stable sort, that is, it preserves the original sort order of
                 * equal elements. The iteratees are invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {...(Function|Function[])} [iteratees=[_.identity]]
                 *  The iteratees to sort by.
                 * @returns {Array} Returns the new sorted array.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'fred',   'age': 48 },
                 *   { 'user': 'barney', 'age': 36 },
                 *   { 'user': 'fred',   'age': 40 },
                 *   { 'user': 'barney', 'age': 34 }
                 * ];
                 *
                 * _.sortBy(users, [function(o) { return o.user; }]);
                 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                 *
                 * _.sortBy(users, ['user', 'age']);
                 * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
                 */
                var sortBy = baseRest(function(collection, iteratees) {
                  if (collection == null) {
                    return [];
                  }
                  var length = iteratees.length;
                  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                    iteratees = [];
                  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                    iteratees = [iteratees[0]];
                  }
                  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
                });

                /*------------------------------------------------------------------------*/

                /**
                 * Gets the timestamp of the number of milliseconds that have elapsed since
                 * the Unix epoch (1 January 1970 00:00:00 UTC).
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Date
                 * @returns {number} Returns the timestamp.
                 * @example
                 *
                 * _.defer(function(stamp) {
                 *   console.log(_.now() - stamp);
                 * }, _.now());
                 * // => Logs the number of milliseconds it took for the deferred invocation.
                 */
                var now = ctxNow || function() {
                  return root.Date.now();
                };

                /*------------------------------------------------------------------------*/

                /**
                 * The opposite of `_.before`; this method creates a function that invokes
                 * `func` once it's called `n` or more times.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {number} n The number of calls before `func` is invoked.
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * var saves = ['profile', 'settings'];
                 *
                 * var done = _.after(saves.length, function() {
                 *   console.log('done saving!');
                 * });
                 *
                 * _.forEach(saves, function(type) {
                 *   asyncSave({ 'type': type, 'complete': done });
                 * });
                 * // => Logs 'done saving!' after the two async saves have completed.
                 */
                function after(n, func) {
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  n = toInteger(n);
                  return function() {
                    if (--n < 1) {
                      return func.apply(this, arguments);
                    }
                  };
                }

                /**
                 * Creates a function that invokes `func`, with up to `n` arguments,
                 * ignoring any additional arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to cap arguments for.
                 * @param {number} [n=func.length] The arity cap.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new capped function.
                 * @example
                 *
                 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
                 * // => [6, 8, 10]
                 */
                function ary(func, n, guard) {
                  n = guard ? undefined : n;
                  n = (func && n == null) ? func.length : n;
                  return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
                }

                /**
                 * Creates a function that invokes `func`, with the `this` binding and arguments
                 * of the created function, while it's called less than `n` times. Subsequent
                 * calls to the created function return the result of the last `func` invocation.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {number} n The number of calls at which `func` is no longer invoked.
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * jQuery(element).on('click', _.before(5, addContactToList));
                 * // => Allows adding up to 4 contacts to the list.
                 */
                function before(n, func) {
                  var result;
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  n = toInteger(n);
                  return function() {
                    if (--n > 0) {
                      result = func.apply(this, arguments);
                    }
                    if (n <= 1) {
                      func = undefined;
                    }
                    return result;
                  };
                }

                /**
                 * Creates a function that invokes `func` with the `this` binding of `thisArg`
                 * and `partials` prepended to the arguments it receives.
                 *
                 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
                 * may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
                 * property of bound functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to bind.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new bound function.
                 * @example
                 *
                 * function greet(greeting, punctuation) {
                 *   return greeting + ' ' + this.user + punctuation;
                 * }
                 *
                 * var object = { 'user': 'fred' };
                 *
                 * var bound = _.bind(greet, object, 'hi');
                 * bound('!');
                 * // => 'hi fred!'
                 *
                 * // Bound with placeholders.
                 * var bound = _.bind(greet, object, _, '!');
                 * bound('hi');
                 * // => 'hi fred!'
                 */
                var bind = baseRest(function(func, thisArg, partials) {
                  var bitmask = WRAP_BIND_FLAG;
                  if (partials.length) {
                    var holders = replaceHolders(partials, getHolder(bind));
                    bitmask |= WRAP_PARTIAL_FLAG;
                  }
                  return createWrap(func, bitmask, thisArg, partials, holders);
                });

                /**
                 * Creates a function that invokes the method at `object[key]` with `partials`
                 * prepended to the arguments it receives.
                 *
                 * This method differs from `_.bind` by allowing bound functions to reference
                 * methods that may be redefined or don't yet exist. See
                 * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
                 * for more details.
                 *
                 * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.10.0
                 * @category Function
                 * @param {Object} object The object to invoke the method on.
                 * @param {string} key The key of the method.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new bound function.
                 * @example
                 *
                 * var object = {
                 *   'user': 'fred',
                 *   'greet': function(greeting, punctuation) {
                 *     return greeting + ' ' + this.user + punctuation;
                 *   }
                 * };
                 *
                 * var bound = _.bindKey(object, 'greet', 'hi');
                 * bound('!');
                 * // => 'hi fred!'
                 *
                 * object.greet = function(greeting, punctuation) {
                 *   return greeting + 'ya ' + this.user + punctuation;
                 * };
                 *
                 * bound('!');
                 * // => 'hiya fred!'
                 *
                 * // Bound with placeholders.
                 * var bound = _.bindKey(object, 'greet', _, '!');
                 * bound('hi');
                 * // => 'hiya fred!'
                 */
                var bindKey = baseRest(function(object, key, partials) {
                  var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                  if (partials.length) {
                    var holders = replaceHolders(partials, getHolder(bindKey));
                    bitmask |= WRAP_PARTIAL_FLAG;
                  }
                  return createWrap(key, bitmask, object, partials, holders);
                });

                /**
                 * Creates a function that accepts arguments of `func` and either invokes
                 * `func` returning its result, if at least `arity` number of arguments have
                 * been provided, or returns a function that accepts the remaining `func`
                 * arguments, and so on. The arity of `func` may be specified if `func.length`
                 * is not sufficient.
                 *
                 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
                 * may be used as a placeholder for provided arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of curried functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Function
                 * @param {Function} func The function to curry.
                 * @param {number} [arity=func.length] The arity of `func`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new curried function.
                 * @example
                 *
                 * var abc = function(a, b, c) {
                 *   return [a, b, c];
                 * };
                 *
                 * var curried = _.curry(abc);
                 *
                 * curried(1)(2)(3);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2)(3);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2, 3);
                 * // => [1, 2, 3]
                 *
                 * // Curried with placeholders.
                 * curried(1)(_, 3)(2);
                 * // => [1, 2, 3]
                 */
                function curry(func, arity, guard) {
                  arity = guard ? undefined : arity;
                  var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                  result.placeholder = curry.placeholder;
                  return result;
                }

                /**
                 * This method is like `_.curry` except that arguments are applied to `func`
                 * in the manner of `_.partialRight` instead of `_.partial`.
                 *
                 * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for provided arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of curried functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to curry.
                 * @param {number} [arity=func.length] The arity of `func`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new curried function.
                 * @example
                 *
                 * var abc = function(a, b, c) {
                 *   return [a, b, c];
                 * };
                 *
                 * var curried = _.curryRight(abc);
                 *
                 * curried(3)(2)(1);
                 * // => [1, 2, 3]
                 *
                 * curried(2, 3)(1);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2, 3);
                 * // => [1, 2, 3]
                 *
                 * // Curried with placeholders.
                 * curried(3)(1, _)(2);
                 * // => [1, 2, 3]
                 */
                function curryRight(func, arity, guard) {
                  arity = guard ? undefined : arity;
                  var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                  result.placeholder = curryRight.placeholder;
                  return result;
                }

                /**
                 * Creates a debounced function that delays invoking `func` until after `wait`
                 * milliseconds have elapsed since the last time the debounced function was
                 * invoked. The debounced function comes with a `cancel` method to cancel
                 * delayed `func` invocations and a `flush` method to immediately invoke them.
                 * Provide `options` to indicate whether `func` should be invoked on the
                 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
                 * with the last arguments provided to the debounced function. Subsequent
                 * calls to the debounced function return the result of the last `func`
                 * invocation.
                 *
                 * **Note:** If `leading` and `trailing` options are `true`, `func` is
                 * invoked on the trailing edge of the timeout only if the debounced function
                 * is invoked more than once during the `wait` timeout.
                 *
                 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                 *
                 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                 * for details over the differences between `_.debounce` and `_.throttle`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to debounce.
                 * @param {number} [wait=0] The number of milliseconds to delay.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.leading=false]
                 *  Specify invoking on the leading edge of the timeout.
                 * @param {number} [options.maxWait]
                 *  The maximum time `func` is allowed to be delayed before it's invoked.
                 * @param {boolean} [options.trailing=true]
                 *  Specify invoking on the trailing edge of the timeout.
                 * @returns {Function} Returns the new debounced function.
                 * @example
                 *
                 * // Avoid costly calculations while the window size is in flux.
                 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
                 *
                 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
                 * jQuery(element).on('click', _.debounce(sendMail, 300, {
                 *   'leading': true,
                 *   'trailing': false
                 * }));
                 *
                 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
                 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
                 * var source = new EventSource('/stream');
                 * jQuery(source).on('message', debounced);
                 *
                 * // Cancel the trailing debounced invocation.
                 * jQuery(window).on('popstate', debounced.cancel);
                 */
                function debounce(func, wait, options) {
                  var lastArgs,
                      lastThis,
                      maxWait,
                      result,
                      timerId,
                      lastCallTime,
                      lastInvokeTime = 0,
                      leading = false,
                      maxing = false,
                      trailing = true;

                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  wait = toNumber(wait) || 0;
                  if (isObject(options)) {
                    leading = !!options.leading;
                    maxing = 'maxWait' in options;
                    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                    trailing = 'trailing' in options ? !!options.trailing : trailing;
                  }

                  function invokeFunc(time) {
                    var args = lastArgs,
                        thisArg = lastThis;

                    lastArgs = lastThis = undefined;
                    lastInvokeTime = time;
                    result = func.apply(thisArg, args);
                    return result;
                  }

                  function leadingEdge(time) {
                    // Reset any `maxWait` timer.
                    lastInvokeTime = time;
                    // Start the timer for the trailing edge.
                    timerId = setTimeout(timerExpired, wait);
                    // Invoke the leading edge.
                    return leading ? invokeFunc(time) : result;
                  }

                  function remainingWait(time) {
                    var timeSinceLastCall = time - lastCallTime,
                        timeSinceLastInvoke = time - lastInvokeTime,
                        timeWaiting = wait - timeSinceLastCall;

                    return maxing
                      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
                      : timeWaiting;
                  }

                  function shouldInvoke(time) {
                    var timeSinceLastCall = time - lastCallTime,
                        timeSinceLastInvoke = time - lastInvokeTime;

                    // Either this is the first call, activity has stopped and we're at the
                    // trailing edge, the system time has gone backwards and we're treating
                    // it as the trailing edge, or we've hit the `maxWait` limit.
                    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
                      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
                  }

                  function timerExpired() {
                    var time = now();
                    if (shouldInvoke(time)) {
                      return trailingEdge(time);
                    }
                    // Restart the timer.
                    timerId = setTimeout(timerExpired, remainingWait(time));
                  }

                  function trailingEdge(time) {
                    timerId = undefined;

                    // Only invoke if we have `lastArgs` which means `func` has been
                    // debounced at least once.
                    if (trailing && lastArgs) {
                      return invokeFunc(time);
                    }
                    lastArgs = lastThis = undefined;
                    return result;
                  }

                  function cancel() {
                    if (timerId !== undefined) {
                      clearTimeout(timerId);
                    }
                    lastInvokeTime = 0;
                    lastArgs = lastCallTime = lastThis = timerId = undefined;
                  }

                  function flush() {
                    return timerId === undefined ? result : trailingEdge(now());
                  }

                  function debounced() {
                    var time = now(),
                        isInvoking = shouldInvoke(time);

                    lastArgs = arguments;
                    lastThis = this;
                    lastCallTime = time;

                    if (isInvoking) {
                      if (timerId === undefined) {
                        return leadingEdge(lastCallTime);
                      }
                      if (maxing) {
                        // Handle invocations in a tight loop.
                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                      }
                    }
                    if (timerId === undefined) {
                      timerId = setTimeout(timerExpired, wait);
                    }
                    return result;
                  }
                  debounced.cancel = cancel;
                  debounced.flush = flush;
                  return debounced;
                }

                /**
                 * Defers invoking the `func` until the current call stack has cleared. Any
                 * additional arguments are provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to defer.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {number} Returns the timer id.
                 * @example
                 *
                 * _.defer(function(text) {
                 *   console.log(text);
                 * }, 'deferred');
                 * // => Logs 'deferred' after one millisecond.
                 */
                var defer = baseRest(function(func, args) {
                  return baseDelay(func, 1, args);
                });

                /**
                 * Invokes `func` after `wait` milliseconds. Any additional arguments are
                 * provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {number} Returns the timer id.
                 * @example
                 *
                 * _.delay(function(text) {
                 *   console.log(text);
                 * }, 1000, 'later');
                 * // => Logs 'later' after one second.
                 */
                var delay = baseRest(function(func, wait, args) {
                  return baseDelay(func, toNumber(wait) || 0, args);
                });

                /**
                 * Creates a function that invokes `func` with arguments reversed.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to flip arguments for.
                 * @returns {Function} Returns the new flipped function.
                 * @example
                 *
                 * var flipped = _.flip(function() {
                 *   return _.toArray(arguments);
                 * });
                 *
                 * flipped('a', 'b', 'c', 'd');
                 * // => ['d', 'c', 'b', 'a']
                 */
                function flip(func) {
                  return createWrap(func, WRAP_FLIP_FLAG);
                }

                /**
                 * Creates a function that memoizes the result of `func`. If `resolver` is
                 * provided, it determines the cache key for storing the result based on the
                 * arguments provided to the memoized function. By default, the first argument
                 * provided to the memoized function is used as the map cache key. The `func`
                 * is invoked with the `this` binding of the memoized function.
                 *
                 * **Note:** The cache is exposed as the `cache` property on the memoized
                 * function. Its creation may be customized by replacing the `_.memoize.Cache`
                 * constructor with one whose instances implement the
                 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
                 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to have its output memoized.
                 * @param {Function} [resolver] The function to resolve the cache key.
                 * @returns {Function} Returns the new memoized function.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 * var other = { 'c': 3, 'd': 4 };
                 *
                 * var values = _.memoize(_.values);
                 * values(object);
                 * // => [1, 2]
                 *
                 * values(other);
                 * // => [3, 4]
                 *
                 * object.a = 2;
                 * values(object);
                 * // => [1, 2]
                 *
                 * // Modify the result cache.
                 * values.cache.set(object, ['a', 'b']);
                 * values(object);
                 * // => ['a', 'b']
                 *
                 * // Replace `_.memoize.Cache`.
                 * _.memoize.Cache = WeakMap;
                 */
                function memoize(func, resolver) {
                  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  var memoized = function() {
                    var args = arguments,
                        key = resolver ? resolver.apply(this, args) : args[0],
                        cache = memoized.cache;

                    if (cache.has(key)) {
                      return cache.get(key);
                    }
                    var result = func.apply(this, args);
                    memoized.cache = cache.set(key, result) || cache;
                    return result;
                  };
                  memoized.cache = new (memoize.Cache || MapCache);
                  return memoized;
                }

                // Expose `MapCache`.
                memoize.Cache = MapCache;

                /**
                 * Creates a function that negates the result of the predicate `func`. The
                 * `func` predicate is invoked with the `this` binding and arguments of the
                 * created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} predicate The predicate to negate.
                 * @returns {Function} Returns the new negated function.
                 * @example
                 *
                 * function isEven(n) {
                 *   return n % 2 == 0;
                 * }
                 *
                 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
                 * // => [1, 3, 5]
                 */
                function negate(predicate) {
                  if (typeof predicate != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  return function() {
                    var args = arguments;
                    switch (args.length) {
                      case 0: return !predicate.call(this);
                      case 1: return !predicate.call(this, args[0]);
                      case 2: return !predicate.call(this, args[0], args[1]);
                      case 3: return !predicate.call(this, args[0], args[1], args[2]);
                    }
                    return !predicate.apply(this, args);
                  };
                }

                /**
                 * Creates a function that is restricted to invoking `func` once. Repeat calls
                 * to the function return the value of the first invocation. The `func` is
                 * invoked with the `this` binding and arguments of the created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * var initialize = _.once(createApplication);
                 * initialize();
                 * initialize();
                 * // => `createApplication` is invoked once
                 */
                function once(func) {
                  return before(2, func);
                }

                /**
                 * Creates a function that invokes `func` with its arguments transformed.
                 *
                 * @static
                 * @since 4.0.0
                 * @memberOf _
                 * @category Function
                 * @param {Function} func The function to wrap.
                 * @param {...(Function|Function[])} [transforms=[_.identity]]
                 *  The argument transforms.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * function doubled(n) {
                 *   return n * 2;
                 * }
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var func = _.overArgs(function(x, y) {
                 *   return [x, y];
                 * }, [square, doubled]);
                 *
                 * func(9, 3);
                 * // => [81, 6]
                 *
                 * func(10, 5);
                 * // => [100, 10]
                 */
                var overArgs = castRest(function(func, transforms) {
                  transforms = (transforms.length == 1 && isArray(transforms[0]))
                    ? arrayMap(transforms[0], baseUnary(getIteratee()))
                    : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

                  var funcsLength = transforms.length;
                  return baseRest(function(args) {
                    var index = -1,
                        length = nativeMin(args.length, funcsLength);

                    while (++index < length) {
                      args[index] = transforms[index].call(this, args[index]);
                    }
                    return apply(func, this, args);
                  });
                });

                /**
                 * Creates a function that invokes `func` with `partials` prepended to the
                 * arguments it receives. This method is like `_.bind` except it does **not**
                 * alter the `this` binding.
                 *
                 * The `_.partial.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of partially
                 * applied functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.2.0
                 * @category Function
                 * @param {Function} func The function to partially apply arguments to.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new partially applied function.
                 * @example
                 *
                 * function greet(greeting, name) {
                 *   return greeting + ' ' + name;
                 * }
                 *
                 * var sayHelloTo = _.partial(greet, 'hello');
                 * sayHelloTo('fred');
                 * // => 'hello fred'
                 *
                 * // Partially applied with placeholders.
                 * var greetFred = _.partial(greet, _, 'fred');
                 * greetFred('hi');
                 * // => 'hi fred'
                 */
                var partial = baseRest(function(func, partials) {
                  var holders = replaceHolders(partials, getHolder(partial));
                  return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
                });

                /**
                 * This method is like `_.partial` except that partially applied arguments
                 * are appended to the arguments it receives.
                 *
                 * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of partially
                 * applied functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Function
                 * @param {Function} func The function to partially apply arguments to.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new partially applied function.
                 * @example
                 *
                 * function greet(greeting, name) {
                 *   return greeting + ' ' + name;
                 * }
                 *
                 * var greetFred = _.partialRight(greet, 'fred');
                 * greetFred('hi');
                 * // => 'hi fred'
                 *
                 * // Partially applied with placeholders.
                 * var sayHelloTo = _.partialRight(greet, 'hello', _);
                 * sayHelloTo('fred');
                 * // => 'hello fred'
                 */
                var partialRight = baseRest(function(func, partials) {
                  var holders = replaceHolders(partials, getHolder(partialRight));
                  return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
                });

                /**
                 * Creates a function that invokes `func` with arguments arranged according
                 * to the specified `indexes` where the argument value at the first index is
                 * provided as the first argument, the argument value at the second index is
                 * provided as the second argument, and so on.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to rearrange arguments for.
                 * @param {...(number|number[])} indexes The arranged argument indexes.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var rearged = _.rearg(function(a, b, c) {
                 *   return [a, b, c];
                 * }, [2, 0, 1]);
                 *
                 * rearged('b', 'c', 'a')
                 * // => ['a', 'b', 'c']
                 */
                var rearg = flatRest(function(func, indexes) {
                  return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
                });

                /**
                 * Creates a function that invokes `func` with the `this` binding of the
                 * created function and arguments from `start` and beyond provided as
                 * an array.
                 *
                 * **Note:** This method is based on the
                 * [rest parameter](https://mdn.io/rest_parameters).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var say = _.rest(function(what, names) {
                 *   return what + ' ' + _.initial(names).join(', ') +
                 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
                 * });
                 *
                 * say('hello', 'fred', 'barney', 'pebbles');
                 * // => 'hello fred, barney, & pebbles'
                 */
                function rest(func, start) {
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  start = start === undefined ? start : toInteger(start);
                  return baseRest(func, start);
                }

                /**
                 * Creates a function that invokes `func` with the `this` binding of the
                 * create function and an array of arguments much like
                 * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
                 *
                 * **Note:** This method is based on the
                 * [spread operator](https://mdn.io/spread_operator).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Function
                 * @param {Function} func The function to spread arguments over.
                 * @param {number} [start=0] The start position of the spread.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var say = _.spread(function(who, what) {
                 *   return who + ' says ' + what;
                 * });
                 *
                 * say(['fred', 'hello']);
                 * // => 'fred says hello'
                 *
                 * var numbers = Promise.all([
                 *   Promise.resolve(40),
                 *   Promise.resolve(36)
                 * ]);
                 *
                 * numbers.then(_.spread(function(x, y) {
                 *   return x + y;
                 * }));
                 * // => a Promise of 76
                 */
                function spread(func, start) {
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  start = start == null ? 0 : nativeMax(toInteger(start), 0);
                  return baseRest(function(args) {
                    var array = args[start],
                        otherArgs = castSlice(args, 0, start);

                    if (array) {
                      arrayPush(otherArgs, array);
                    }
                    return apply(func, this, otherArgs);
                  });
                }

                /**
                 * Creates a throttled function that only invokes `func` at most once per
                 * every `wait` milliseconds. The throttled function comes with a `cancel`
                 * method to cancel delayed `func` invocations and a `flush` method to
                 * immediately invoke them. Provide `options` to indicate whether `func`
                 * should be invoked on the leading and/or trailing edge of the `wait`
                 * timeout. The `func` is invoked with the last arguments provided to the
                 * throttled function. Subsequent calls to the throttled function return the
                 * result of the last `func` invocation.
                 *
                 * **Note:** If `leading` and `trailing` options are `true`, `func` is
                 * invoked on the trailing edge of the timeout only if the throttled function
                 * is invoked more than once during the `wait` timeout.
                 *
                 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                 *
                 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                 * for details over the differences between `_.throttle` and `_.debounce`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to throttle.
                 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.leading=true]
                 *  Specify invoking on the leading edge of the timeout.
                 * @param {boolean} [options.trailing=true]
                 *  Specify invoking on the trailing edge of the timeout.
                 * @returns {Function} Returns the new throttled function.
                 * @example
                 *
                 * // Avoid excessively updating the position while scrolling.
                 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
                 *
                 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
                 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
                 * jQuery(element).on('click', throttled);
                 *
                 * // Cancel the trailing throttled invocation.
                 * jQuery(window).on('popstate', throttled.cancel);
                 */
                function throttle(func, wait, options) {
                  var leading = true,
                      trailing = true;

                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  if (isObject(options)) {
                    leading = 'leading' in options ? !!options.leading : leading;
                    trailing = 'trailing' in options ? !!options.trailing : trailing;
                  }
                  return debounce(func, wait, {
                    'leading': leading,
                    'maxWait': wait,
                    'trailing': trailing
                  });
                }

                /**
                 * Creates a function that accepts up to one argument, ignoring any
                 * additional arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to cap arguments for.
                 * @returns {Function} Returns the new capped function.
                 * @example
                 *
                 * _.map(['6', '8', '10'], _.unary(parseInt));
                 * // => [6, 8, 10]
                 */
                function unary(func) {
                  return ary(func, 1);
                }

                /**
                 * Creates a function that provides `value` to `wrapper` as its first
                 * argument. Any additional arguments provided to the function are appended
                 * to those provided to the `wrapper`. The wrapper is invoked with the `this`
                 * binding of the created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {*} value The value to wrap.
                 * @param {Function} [wrapper=identity] The wrapper function.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var p = _.wrap(_.escape, function(func, text) {
                 *   return '<p>' + func(text) + '</p>';
                 * });
                 *
                 * p('fred, barney, & pebbles');
                 * // => '<p>fred, barney, &amp; pebbles</p>'
                 */
                function wrap(value, wrapper) {
                  return partial(castFunction(wrapper), value);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Casts `value` as an array if it's not one.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.4.0
                 * @category Lang
                 * @param {*} value The value to inspect.
                 * @returns {Array} Returns the cast array.
                 * @example
                 *
                 * _.castArray(1);
                 * // => [1]
                 *
                 * _.castArray({ 'a': 1 });
                 * // => [{ 'a': 1 }]
                 *
                 * _.castArray('abc');
                 * // => ['abc']
                 *
                 * _.castArray(null);
                 * // => [null]
                 *
                 * _.castArray(undefined);
                 * // => [undefined]
                 *
                 * _.castArray();
                 * // => []
                 *
                 * var array = [1, 2, 3];
                 * console.log(_.castArray(array) === array);
                 * // => true
                 */
                function castArray() {
                  if (!arguments.length) {
                    return [];
                  }
                  var value = arguments[0];
                  return isArray(value) ? value : [value];
                }

                /**
                 * Creates a shallow clone of `value`.
                 *
                 * **Note:** This method is loosely based on the
                 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
                 * and supports cloning arrays, array buffers, booleans, date objects, maps,
                 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
                 * arrays. The own enumerable properties of `arguments` objects are cloned
                 * as plain objects. An empty object is returned for uncloneable values such
                 * as error objects, functions, DOM nodes, and WeakMaps.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to clone.
                 * @returns {*} Returns the cloned value.
                 * @see _.cloneDeep
                 * @example
                 *
                 * var objects = [{ 'a': 1 }, { 'b': 2 }];
                 *
                 * var shallow = _.clone(objects);
                 * console.log(shallow[0] === objects[0]);
                 * // => true
                 */
                function clone(value) {
                  return baseClone(value, CLONE_SYMBOLS_FLAG);
                }

                /**
                 * This method is like `_.clone` except that it accepts `customizer` which
                 * is invoked to produce the cloned value. If `customizer` returns `undefined`,
                 * cloning is handled by the method instead. The `customizer` is invoked with
                 * up to four arguments; (value [, index|key, object, stack]).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to clone.
                 * @param {Function} [customizer] The function to customize cloning.
                 * @returns {*} Returns the cloned value.
                 * @see _.cloneDeepWith
                 * @example
                 *
                 * function customizer(value) {
                 *   if (_.isElement(value)) {
                 *     return value.cloneNode(false);
                 *   }
                 * }
                 *
                 * var el = _.cloneWith(document.body, customizer);
                 *
                 * console.log(el === document.body);
                 * // => false
                 * console.log(el.nodeName);
                 * // => 'BODY'
                 * console.log(el.childNodes.length);
                 * // => 0
                 */
                function cloneWith(value, customizer) {
                  customizer = typeof customizer == 'function' ? customizer : undefined;
                  return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
                }

                /**
                 * This method is like `_.clone` except that it recursively clones `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Lang
                 * @param {*} value The value to recursively clone.
                 * @returns {*} Returns the deep cloned value.
                 * @see _.clone
                 * @example
                 *
                 * var objects = [{ 'a': 1 }, { 'b': 2 }];
                 *
                 * var deep = _.cloneDeep(objects);
                 * console.log(deep[0] === objects[0]);
                 * // => false
                 */
                function cloneDeep(value) {
                  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
                }

                /**
                 * This method is like `_.cloneWith` except that it recursively clones `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to recursively clone.
                 * @param {Function} [customizer] The function to customize cloning.
                 * @returns {*} Returns the deep cloned value.
                 * @see _.cloneWith
                 * @example
                 *
                 * function customizer(value) {
                 *   if (_.isElement(value)) {
                 *     return value.cloneNode(true);
                 *   }
                 * }
                 *
                 * var el = _.cloneDeepWith(document.body, customizer);
                 *
                 * console.log(el === document.body);
                 * // => false
                 * console.log(el.nodeName);
                 * // => 'BODY'
                 * console.log(el.childNodes.length);
                 * // => 20
                 */
                function cloneDeepWith(value, customizer) {
                  customizer = typeof customizer == 'function' ? customizer : undefined;
                  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
                }

                /**
                 * Checks if `object` conforms to `source` by invoking the predicate
                 * properties of `source` with the corresponding property values of `object`.
                 *
                 * **Note:** This method is equivalent to `_.conforms` when `source` is
                 * partially applied.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.14.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 *
                 * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
                 * // => true
                 *
                 * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
                 * // => false
                 */
                function conformsTo(object, source) {
                  return source == null || baseConformsTo(object, source, keys(source));
                }

                /**
                 * Performs a
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * comparison between two values to determine if they are equivalent.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 * var other = { 'a': 1 };
                 *
                 * _.eq(object, object);
                 * // => true
                 *
                 * _.eq(object, other);
                 * // => false
                 *
                 * _.eq('a', 'a');
                 * // => true
                 *
                 * _.eq('a', Object('a'));
                 * // => false
                 *
                 * _.eq(NaN, NaN);
                 * // => true
                 */
                function eq(value, other) {
                  return value === other || (value !== value && other !== other);
                }

                /**
                 * Checks if `value` is greater than `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than `other`,
                 *  else `false`.
                 * @see _.lt
                 * @example
                 *
                 * _.gt(3, 1);
                 * // => true
                 *
                 * _.gt(3, 3);
                 * // => false
                 *
                 * _.gt(1, 3);
                 * // => false
                 */
                var gt = createRelationalOperation(baseGt);

                /**
                 * Checks if `value` is greater than or equal to `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than or equal to
                 *  `other`, else `false`.
                 * @see _.lte
                 * @example
                 *
                 * _.gte(3, 1);
                 * // => true
                 *
                 * _.gte(3, 3);
                 * // => true
                 *
                 * _.gte(1, 3);
                 * // => false
                 */
                var gte = createRelationalOperation(function(value, other) {
                  return value >= other;
                });

                /**
                 * Checks if `value` is likely an `arguments` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                 *  else `false`.
                 * @example
                 *
                 * _.isArguments(function() { return arguments; }());
                 * // => true
                 *
                 * _.isArguments([1, 2, 3]);
                 * // => false
                 */
                var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
                  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                    !propertyIsEnumerable.call(value, 'callee');
                };

                /**
                 * Checks if `value` is classified as an `Array` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                 * @example
                 *
                 * _.isArray([1, 2, 3]);
                 * // => true
                 *
                 * _.isArray(document.body.children);
                 * // => false
                 *
                 * _.isArray('abc');
                 * // => false
                 *
                 * _.isArray(_.noop);
                 * // => false
                 */
                var isArray = Array.isArray;

                /**
                 * Checks if `value` is classified as an `ArrayBuffer` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                 * @example
                 *
                 * _.isArrayBuffer(new ArrayBuffer(2));
                 * // => true
                 *
                 * _.isArrayBuffer(new Array(2));
                 * // => false
                 */
                var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

                /**
                 * Checks if `value` is array-like. A value is considered array-like if it's
                 * not a function and has a `value.length` that's an integer greater than or
                 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                 * @example
                 *
                 * _.isArrayLike([1, 2, 3]);
                 * // => true
                 *
                 * _.isArrayLike(document.body.children);
                 * // => true
                 *
                 * _.isArrayLike('abc');
                 * // => true
                 *
                 * _.isArrayLike(_.noop);
                 * // => false
                 */
                function isArrayLike(value) {
                  return value != null && isLength(value.length) && !isFunction(value);
                }

                /**
                 * This method is like `_.isArrayLike` except that it also checks if `value`
                 * is an object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array-like object,
                 *  else `false`.
                 * @example
                 *
                 * _.isArrayLikeObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isArrayLikeObject(document.body.children);
                 * // => true
                 *
                 * _.isArrayLikeObject('abc');
                 * // => false
                 *
                 * _.isArrayLikeObject(_.noop);
                 * // => false
                 */
                function isArrayLikeObject(value) {
                  return isObjectLike(value) && isArrayLike(value);
                }

                /**
                 * Checks if `value` is classified as a boolean primitive or object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
                 * @example
                 *
                 * _.isBoolean(false);
                 * // => true
                 *
                 * _.isBoolean(null);
                 * // => false
                 */
                function isBoolean(value) {
                  return value === true || value === false ||
                    (isObjectLike(value) && baseGetTag(value) == boolTag);
                }

                /**
                 * Checks if `value` is a buffer.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                 * @example
                 *
                 * _.isBuffer(new Buffer(2));
                 * // => true
                 *
                 * _.isBuffer(new Uint8Array(2));
                 * // => false
                 */
                var isBuffer = nativeIsBuffer || stubFalse;

                /**
                 * Checks if `value` is classified as a `Date` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                 * @example
                 *
                 * _.isDate(new Date);
                 * // => true
                 *
                 * _.isDate('Mon April 23 2012');
                 * // => false
                 */
                var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

                /**
                 * Checks if `value` is likely a DOM element.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
                 * @example
                 *
                 * _.isElement(document.body);
                 * // => true
                 *
                 * _.isElement('<body>');
                 * // => false
                 */
                function isElement(value) {
                  return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
                }

                /**
                 * Checks if `value` is an empty object, collection, map, or set.
                 *
                 * Objects are considered empty if they have no own enumerable string keyed
                 * properties.
                 *
                 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
                 * jQuery-like collections are considered empty if they have a `length` of `0`.
                 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
                 * @example
                 *
                 * _.isEmpty(null);
                 * // => true
                 *
                 * _.isEmpty(true);
                 * // => true
                 *
                 * _.isEmpty(1);
                 * // => true
                 *
                 * _.isEmpty([1, 2, 3]);
                 * // => false
                 *
                 * _.isEmpty({ 'a': 1 });
                 * // => false
                 */
                function isEmpty(value) {
                  if (value == null) {
                    return true;
                  }
                  if (isArrayLike(value) &&
                      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                    return !value.length;
                  }
                  var tag = getTag(value);
                  if (tag == mapTag || tag == setTag) {
                    return !value.size;
                  }
                  if (isPrototype(value)) {
                    return !baseKeys(value).length;
                  }
                  for (var key in value) {
                    if (hasOwnProperty.call(value, key)) {
                      return false;
                    }
                  }
                  return true;
                }

                /**
                 * Performs a deep comparison between two values to determine if they are
                 * equivalent.
                 *
                 * **Note:** This method supports comparing arrays, array buffers, booleans,
                 * date objects, error objects, maps, numbers, `Object` objects, regexes,
                 * sets, strings, symbols, and typed arrays. `Object` objects are compared
                 * by their own, not inherited, enumerable properties. Functions and DOM
                 * nodes are compared by strict equality, i.e. `===`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 * var other = { 'a': 1 };
                 *
                 * _.isEqual(object, other);
                 * // => true
                 *
                 * object === other;
                 * // => false
                 */
                function isEqual(value, other) {
                  return baseIsEqual(value, other);
                }

                /**
                 * This method is like `_.isEqual` except that it accepts `customizer` which
                 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                 * are handled by the method instead. The `customizer` is invoked with up to
                 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * function isGreeting(value) {
                 *   return /^h(?:i|ello)$/.test(value);
                 * }
                 *
                 * function customizer(objValue, othValue) {
                 *   if (isGreeting(objValue) && isGreeting(othValue)) {
                 *     return true;
                 *   }
                 * }
                 *
                 * var array = ['hello', 'goodbye'];
                 * var other = ['hi', 'goodbye'];
                 *
                 * _.isEqualWith(array, other, customizer);
                 * // => true
                 */
                function isEqualWith(value, other, customizer) {
                  customizer = typeof customizer == 'function' ? customizer : undefined;
                  var result = customizer ? customizer(value, other) : undefined;
                  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
                }

                /**
                 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
                 * `SyntaxError`, `TypeError`, or `URIError` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
                 * @example
                 *
                 * _.isError(new Error);
                 * // => true
                 *
                 * _.isError(Error);
                 * // => false
                 */
                function isError(value) {
                  if (!isObjectLike(value)) {
                    return false;
                  }
                  var tag = baseGetTag(value);
                  return tag == errorTag || tag == domExcTag ||
                    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
                }

                /**
                 * Checks if `value` is a finite primitive number.
                 *
                 * **Note:** This method is based on
                 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
                 * @example
                 *
                 * _.isFinite(3);
                 * // => true
                 *
                 * _.isFinite(Number.MIN_VALUE);
                 * // => true
                 *
                 * _.isFinite(Infinity);
                 * // => false
                 *
                 * _.isFinite('3');
                 * // => false
                 */
                function isFinite(value) {
                  return typeof value == 'number' && nativeIsFinite(value);
                }

                /**
                 * Checks if `value` is classified as a `Function` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                 * @example
                 *
                 * _.isFunction(_);
                 * // => true
                 *
                 * _.isFunction(/abc/);
                 * // => false
                 */
                function isFunction(value) {
                  if (!isObject(value)) {
                    return false;
                  }
                  // The use of `Object#toString` avoids issues with the `typeof` operator
                  // in Safari 9 which returns 'object' for typed arrays and other constructors.
                  var tag = baseGetTag(value);
                  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
                }

                /**
                 * Checks if `value` is an integer.
                 *
                 * **Note:** This method is based on
                 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
                 * @example
                 *
                 * _.isInteger(3);
                 * // => true
                 *
                 * _.isInteger(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isInteger(Infinity);
                 * // => false
                 *
                 * _.isInteger('3');
                 * // => false
                 */
                function isInteger(value) {
                  return typeof value == 'number' && value == toInteger(value);
                }

                /**
                 * Checks if `value` is a valid array-like length.
                 *
                 * **Note:** This method is loosely based on
                 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                 * @example
                 *
                 * _.isLength(3);
                 * // => true
                 *
                 * _.isLength(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isLength(Infinity);
                 * // => false
                 *
                 * _.isLength('3');
                 * // => false
                 */
                function isLength(value) {
                  return typeof value == 'number' &&
                    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                }

                /**
                 * Checks if `value` is the
                 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                 * @example
                 *
                 * _.isObject({});
                 * // => true
                 *
                 * _.isObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isObject(_.noop);
                 * // => true
                 *
                 * _.isObject(null);
                 * // => false
                 */
                function isObject(value) {
                  var type = typeof value;
                  return value != null && (type == 'object' || type == 'function');
                }

                /**
                 * Checks if `value` is object-like. A value is object-like if it's not `null`
                 * and has a `typeof` result of "object".
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                 * @example
                 *
                 * _.isObjectLike({});
                 * // => true
                 *
                 * _.isObjectLike([1, 2, 3]);
                 * // => true
                 *
                 * _.isObjectLike(_.noop);
                 * // => false
                 *
                 * _.isObjectLike(null);
                 * // => false
                 */
                function isObjectLike(value) {
                  return value != null && typeof value == 'object';
                }

                /**
                 * Checks if `value` is classified as a `Map` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                 * @example
                 *
                 * _.isMap(new Map);
                 * // => true
                 *
                 * _.isMap(new WeakMap);
                 * // => false
                 */
                var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

                /**
                 * Performs a partial deep comparison between `object` and `source` to
                 * determine if `object` contains equivalent property values.
                 *
                 * **Note:** This method is equivalent to `_.matches` when `source` is
                 * partially applied.
                 *
                 * Partial comparisons will match empty array and empty object `source`
                 * values against any array or object value, respectively. See `_.isEqual`
                 * for a list of supported value comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 *
                 * _.isMatch(object, { 'b': 2 });
                 * // => true
                 *
                 * _.isMatch(object, { 'b': 1 });
                 * // => false
                 */
                function isMatch(object, source) {
                  return object === source || baseIsMatch(object, source, getMatchData(source));
                }

                /**
                 * This method is like `_.isMatch` except that it accepts `customizer` which
                 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                 * are handled by the method instead. The `customizer` is invoked with five
                 * arguments: (objValue, srcValue, index|key, object, source).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 * @example
                 *
                 * function isGreeting(value) {
                 *   return /^h(?:i|ello)$/.test(value);
                 * }
                 *
                 * function customizer(objValue, srcValue) {
                 *   if (isGreeting(objValue) && isGreeting(srcValue)) {
                 *     return true;
                 *   }
                 * }
                 *
                 * var object = { 'greeting': 'hello' };
                 * var source = { 'greeting': 'hi' };
                 *
                 * _.isMatchWith(object, source, customizer);
                 * // => true
                 */
                function isMatchWith(object, source, customizer) {
                  customizer = typeof customizer == 'function' ? customizer : undefined;
                  return baseIsMatch(object, source, getMatchData(source), customizer);
                }

                /**
                 * Checks if `value` is `NaN`.
                 *
                 * **Note:** This method is based on
                 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
                 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
                 * `undefined` and other non-number values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                 * @example
                 *
                 * _.isNaN(NaN);
                 * // => true
                 *
                 * _.isNaN(new Number(NaN));
                 * // => true
                 *
                 * isNaN(undefined);
                 * // => true
                 *
                 * _.isNaN(undefined);
                 * // => false
                 */
                function isNaN(value) {
                  // An `NaN` primitive is the only value that is not equal to itself.
                  // Perform the `toStringTag` check first to avoid errors with some
                  // ActiveX objects in IE.
                  return isNumber(value) && value != +value;
                }

                /**
                 * Checks if `value` is a pristine native function.
                 *
                 * **Note:** This method can't reliably detect native functions in the presence
                 * of the core-js package because core-js circumvents this kind of detection.
                 * Despite multiple requests, the core-js maintainer has made it clear: any
                 * attempt to fix the detection will be obstructed. As a result, we're left
                 * with little choice but to throw an error. Unfortunately, this also affects
                 * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
                 * which rely on core-js.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a native function,
                 *  else `false`.
                 * @example
                 *
                 * _.isNative(Array.prototype.push);
                 * // => true
                 *
                 * _.isNative(_);
                 * // => false
                 */
                function isNative(value) {
                  if (isMaskable(value)) {
                    throw new Error(CORE_ERROR_TEXT);
                  }
                  return baseIsNative(value);
                }

                /**
                 * Checks if `value` is `null`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
                 * @example
                 *
                 * _.isNull(null);
                 * // => true
                 *
                 * _.isNull(void 0);
                 * // => false
                 */
                function isNull(value) {
                  return value === null;
                }

                /**
                 * Checks if `value` is `null` or `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
                 * @example
                 *
                 * _.isNil(null);
                 * // => true
                 *
                 * _.isNil(void 0);
                 * // => true
                 *
                 * _.isNil(NaN);
                 * // => false
                 */
                function isNil(value) {
                  return value == null;
                }

                /**
                 * Checks if `value` is classified as a `Number` primitive or object.
                 *
                 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
                 * classified as numbers, use the `_.isFinite` method.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
                 * @example
                 *
                 * _.isNumber(3);
                 * // => true
                 *
                 * _.isNumber(Number.MIN_VALUE);
                 * // => true
                 *
                 * _.isNumber(Infinity);
                 * // => true
                 *
                 * _.isNumber('3');
                 * // => false
                 */
                function isNumber(value) {
                  return typeof value == 'number' ||
                    (isObjectLike(value) && baseGetTag(value) == numberTag);
                }

                /**
                 * Checks if `value` is a plain object, that is, an object created by the
                 * `Object` constructor or one with a `[[Prototype]]` of `null`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.8.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 * }
                 *
                 * _.isPlainObject(new Foo);
                 * // => false
                 *
                 * _.isPlainObject([1, 2, 3]);
                 * // => false
                 *
                 * _.isPlainObject({ 'x': 0, 'y': 0 });
                 * // => true
                 *
                 * _.isPlainObject(Object.create(null));
                 * // => true
                 */
                function isPlainObject(value) {
                  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                    return false;
                  }
                  var proto = getPrototype(value);
                  if (proto === null) {
                    return true;
                  }
                  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
                    funcToString.call(Ctor) == objectCtorString;
                }

                /**
                 * Checks if `value` is classified as a `RegExp` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                 * @example
                 *
                 * _.isRegExp(/abc/);
                 * // => true
                 *
                 * _.isRegExp('/abc/');
                 * // => false
                 */
                var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

                /**
                 * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
                 * double precision number which isn't the result of a rounded unsafe integer.
                 *
                 * **Note:** This method is based on
                 * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
                 * @example
                 *
                 * _.isSafeInteger(3);
                 * // => true
                 *
                 * _.isSafeInteger(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isSafeInteger(Infinity);
                 * // => false
                 *
                 * _.isSafeInteger('3');
                 * // => false
                 */
                function isSafeInteger(value) {
                  return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
                }

                /**
                 * Checks if `value` is classified as a `Set` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                 * @example
                 *
                 * _.isSet(new Set);
                 * // => true
                 *
                 * _.isSet(new WeakSet);
                 * // => false
                 */
                var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

                /**
                 * Checks if `value` is classified as a `String` primitive or object.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
                 * @example
                 *
                 * _.isString('abc');
                 * // => true
                 *
                 * _.isString(1);
                 * // => false
                 */
                function isString(value) {
                  return typeof value == 'string' ||
                    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
                }

                /**
                 * Checks if `value` is classified as a `Symbol` primitive or object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
                 * @example
                 *
                 * _.isSymbol(Symbol.iterator);
                 * // => true
                 *
                 * _.isSymbol('abc');
                 * // => false
                 */
                function isSymbol(value) {
                  return typeof value == 'symbol' ||
                    (isObjectLike(value) && baseGetTag(value) == symbolTag);
                }

                /**
                 * Checks if `value` is classified as a typed array.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                 * @example
                 *
                 * _.isTypedArray(new Uint8Array);
                 * // => true
                 *
                 * _.isTypedArray([]);
                 * // => false
                 */
                var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

                /**
                 * Checks if `value` is `undefined`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
                 * @example
                 *
                 * _.isUndefined(void 0);
                 * // => true
                 *
                 * _.isUndefined(null);
                 * // => false
                 */
                function isUndefined(value) {
                  return value === undefined;
                }

                /**
                 * Checks if `value` is classified as a `WeakMap` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
                 * @example
                 *
                 * _.isWeakMap(new WeakMap);
                 * // => true
                 *
                 * _.isWeakMap(new Map);
                 * // => false
                 */
                function isWeakMap(value) {
                  return isObjectLike(value) && getTag(value) == weakMapTag;
                }

                /**
                 * Checks if `value` is classified as a `WeakSet` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
                 * @example
                 *
                 * _.isWeakSet(new WeakSet);
                 * // => true
                 *
                 * _.isWeakSet(new Set);
                 * // => false
                 */
                function isWeakSet(value) {
                  return isObjectLike(value) && baseGetTag(value) == weakSetTag;
                }

                /**
                 * Checks if `value` is less than `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than `other`,
                 *  else `false`.
                 * @see _.gt
                 * @example
                 *
                 * _.lt(1, 3);
                 * // => true
                 *
                 * _.lt(3, 3);
                 * // => false
                 *
                 * _.lt(3, 1);
                 * // => false
                 */
                var lt = createRelationalOperation(baseLt);

                /**
                 * Checks if `value` is less than or equal to `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than or equal to
                 *  `other`, else `false`.
                 * @see _.gte
                 * @example
                 *
                 * _.lte(1, 3);
                 * // => true
                 *
                 * _.lte(3, 3);
                 * // => true
                 *
                 * _.lte(3, 1);
                 * // => false
                 */
                var lte = createRelationalOperation(function(value, other) {
                  return value <= other;
                });

                /**
                 * Converts `value` to an array.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {Array} Returns the converted array.
                 * @example
                 *
                 * _.toArray({ 'a': 1, 'b': 2 });
                 * // => [1, 2]
                 *
                 * _.toArray('abc');
                 * // => ['a', 'b', 'c']
                 *
                 * _.toArray(1);
                 * // => []
                 *
                 * _.toArray(null);
                 * // => []
                 */
                function toArray(value) {
                  if (!value) {
                    return [];
                  }
                  if (isArrayLike(value)) {
                    return isString(value) ? stringToArray(value) : copyArray(value);
                  }
                  if (symIterator && value[symIterator]) {
                    return iteratorToArray(value[symIterator]());
                  }
                  var tag = getTag(value),
                      func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

                  return func(value);
                }

                /**
                 * Converts `value` to a finite number.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.12.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted number.
                 * @example
                 *
                 * _.toFinite(3.2);
                 * // => 3.2
                 *
                 * _.toFinite(Number.MIN_VALUE);
                 * // => 5e-324
                 *
                 * _.toFinite(Infinity);
                 * // => 1.7976931348623157e+308
                 *
                 * _.toFinite('3.2');
                 * // => 3.2
                 */
                function toFinite(value) {
                  if (!value) {
                    return value === 0 ? value : 0;
                  }
                  value = toNumber(value);
                  if (value === INFINITY || value === -INFINITY) {
                    var sign = (value < 0 ? -1 : 1);
                    return sign * MAX_INTEGER;
                  }
                  return value === value ? value : 0;
                }

                /**
                 * Converts `value` to an integer.
                 *
                 * **Note:** This method is loosely based on
                 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toInteger(3.2);
                 * // => 3
                 *
                 * _.toInteger(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toInteger(Infinity);
                 * // => 1.7976931348623157e+308
                 *
                 * _.toInteger('3.2');
                 * // => 3
                 */
                function toInteger(value) {
                  var result = toFinite(value),
                      remainder = result % 1;

                  return result === result ? (remainder ? result - remainder : result) : 0;
                }

                /**
                 * Converts `value` to an integer suitable for use as the length of an
                 * array-like object.
                 *
                 * **Note:** This method is based on
                 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toLength(3.2);
                 * // => 3
                 *
                 * _.toLength(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toLength(Infinity);
                 * // => 4294967295
                 *
                 * _.toLength('3.2');
                 * // => 3
                 */
                function toLength(value) {
                  return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
                }

                /**
                 * Converts `value` to a number.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to process.
                 * @returns {number} Returns the number.
                 * @example
                 *
                 * _.toNumber(3.2);
                 * // => 3.2
                 *
                 * _.toNumber(Number.MIN_VALUE);
                 * // => 5e-324
                 *
                 * _.toNumber(Infinity);
                 * // => Infinity
                 *
                 * _.toNumber('3.2');
                 * // => 3.2
                 */
                function toNumber(value) {
                  if (typeof value == 'number') {
                    return value;
                  }
                  if (isSymbol(value)) {
                    return NAN;
                  }
                  if (isObject(value)) {
                    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                    value = isObject(other) ? (other + '') : other;
                  }
                  if (typeof value != 'string') {
                    return value === 0 ? value : +value;
                  }
                  value = value.replace(reTrim, '');
                  var isBinary = reIsBinary.test(value);
                  return (isBinary || reIsOctal.test(value))
                    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                    : (reIsBadHex.test(value) ? NAN : +value);
                }

                /**
                 * Converts `value` to a plain object flattening inherited enumerable string
                 * keyed properties of `value` to own properties of the plain object.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {Object} Returns the converted plain object.
                 * @example
                 *
                 * function Foo() {
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.assign({ 'a': 1 }, new Foo);
                 * // => { 'a': 1, 'b': 2 }
                 *
                 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                 * // => { 'a': 1, 'b': 2, 'c': 3 }
                 */
                function toPlainObject(value) {
                  return copyObject(value, keysIn(value));
                }

                /**
                 * Converts `value` to a safe integer. A safe integer can be compared and
                 * represented correctly.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toSafeInteger(3.2);
                 * // => 3
                 *
                 * _.toSafeInteger(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toSafeInteger(Infinity);
                 * // => 9007199254740991
                 *
                 * _.toSafeInteger('3.2');
                 * // => 3
                 */
                function toSafeInteger(value) {
                  return value
                    ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
                    : (value === 0 ? value : 0);
                }

                /**
                 * Converts `value` to a string. An empty string is returned for `null`
                 * and `undefined` values. The sign of `-0` is preserved.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.toString(null);
                 * // => ''
                 *
                 * _.toString(-0);
                 * // => '-0'
                 *
                 * _.toString([1, 2, 3]);
                 * // => '1,2,3'
                 */
                function toString(value) {
                  return value == null ? '' : baseToString(value);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Assigns own enumerable string keyed properties of source objects to the
                 * destination object. Source objects are applied from left to right.
                 * Subsequent sources overwrite property assignments of previous sources.
                 *
                 * **Note:** This method mutates `object` and is loosely based on
                 * [`Object.assign`](https://mdn.io/Object/assign).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.10.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.assignIn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 * }
                 *
                 * function Bar() {
                 *   this.c = 3;
                 * }
                 *
                 * Foo.prototype.b = 2;
                 * Bar.prototype.d = 4;
                 *
                 * _.assign({ 'a': 0 }, new Foo, new Bar);
                 * // => { 'a': 1, 'c': 3 }
                 */
                var assign = createAssigner(function(object, source) {
                  if (isPrototype(source) || isArrayLike(source)) {
                    copyObject(source, keys(source), object);
                    return;
                  }
                  for (var key in source) {
                    if (hasOwnProperty.call(source, key)) {
                      assignValue(object, key, source[key]);
                    }
                  }
                });

                /**
                 * This method is like `_.assign` except that it iterates over own and
                 * inherited source properties.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias extend
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.assign
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 * }
                 *
                 * function Bar() {
                 *   this.c = 3;
                 * }
                 *
                 * Foo.prototype.b = 2;
                 * Bar.prototype.d = 4;
                 *
                 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
                 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
                 */
                var assignIn = createAssigner(function(object, source) {
                  copyObject(source, keysIn(source), object);
                });

                /**
                 * This method is like `_.assignIn` except that it accepts `customizer`
                 * which is invoked to produce the assigned values. If `customizer` returns
                 * `undefined`, assignment is handled by the method instead. The `customizer`
                 * is invoked with five arguments: (objValue, srcValue, key, object, source).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias extendWith
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @see _.assignWith
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
                 *   return _.isUndefined(objValue) ? srcValue : objValue;
                 * }
                 *
                 * var defaults = _.partialRight(_.assignInWith, customizer);
                 *
                 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
                  copyObject(source, keysIn(source), object, customizer);
                });

                /**
                 * This method is like `_.assign` except that it accepts `customizer`
                 * which is invoked to produce the assigned values. If `customizer` returns
                 * `undefined`, assignment is handled by the method instead. The `customizer`
                 * is invoked with five arguments: (objValue, srcValue, key, object, source).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @see _.assignInWith
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
                 *   return _.isUndefined(objValue) ? srcValue : objValue;
                 * }
                 *
                 * var defaults = _.partialRight(_.assignWith, customizer);
                 *
                 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
                  copyObject(source, keys(source), object, customizer);
                });

                /**
                 * Creates an array of values corresponding to `paths` of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Array} Returns the picked values.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                 *
                 * _.at(object, ['a[0].b.c', 'a[1]']);
                 * // => [3, 4]
                 */
                var at = flatRest(baseAt);

                /**
                 * Creates an object that inherits from the `prototype` object. If a
                 * `properties` object is given, its own enumerable string keyed properties
                 * are assigned to the created object.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.3.0
                 * @category Object
                 * @param {Object} prototype The object to inherit from.
                 * @param {Object} [properties] The properties to assign to the object.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * function Shape() {
                 *   this.x = 0;
                 *   this.y = 0;
                 * }
                 *
                 * function Circle() {
                 *   Shape.call(this);
                 * }
                 *
                 * Circle.prototype = _.create(Shape.prototype, {
                 *   'constructor': Circle
                 * });
                 *
                 * var circle = new Circle;
                 * circle instanceof Circle;
                 * // => true
                 *
                 * circle instanceof Shape;
                 * // => true
                 */
                function create(prototype, properties) {
                  var result = baseCreate(prototype);
                  return properties == null ? result : baseAssign(result, properties);
                }

                /**
                 * Assigns own and inherited enumerable string keyed properties of source
                 * objects to the destination object for all destination properties that
                 * resolve to `undefined`. Source objects are applied from left to right.
                 * Once a property is set, additional values of the same property are ignored.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.defaultsDeep
                 * @example
                 *
                 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var defaults = baseRest(function(object, sources) {
                  object = Object(object);

                  var index = -1;
                  var length = sources.length;
                  var guard = length > 2 ? sources[2] : undefined;

                  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    length = 1;
                  }

                  while (++index < length) {
                    var source = sources[index];
                    var props = keysIn(source);
                    var propsIndex = -1;
                    var propsLength = props.length;

                    while (++propsIndex < propsLength) {
                      var key = props[propsIndex];
                      var value = object[key];

                      if (value === undefined ||
                          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                        object[key] = source[key];
                      }
                    }
                  }

                  return object;
                });

                /**
                 * This method is like `_.defaults` except that it recursively assigns
                 * default properties.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.defaults
                 * @example
                 *
                 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
                 * // => { 'a': { 'b': 2, 'c': 3 } }
                 */
                var defaultsDeep = baseRest(function(args) {
                  args.push(undefined, customDefaultsMerge);
                  return apply(mergeWith, undefined, args);
                });

                /**
                 * This method is like `_.find` except that it returns the key of the first
                 * element `predicate` returns truthy for instead of the element itself.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {string|undefined} Returns the key of the matched element,
                 *  else `undefined`.
                 * @example
                 *
                 * var users = {
                 *   'barney':  { 'age': 36, 'active': true },
                 *   'fred':    { 'age': 40, 'active': false },
                 *   'pebbles': { 'age': 1,  'active': true }
                 * };
                 *
                 * _.findKey(users, function(o) { return o.age < 40; });
                 * // => 'barney' (iteration order is not guaranteed)
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findKey(users, { 'age': 1, 'active': true });
                 * // => 'pebbles'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findKey(users, ['active', false]);
                 * // => 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findKey(users, 'active');
                 * // => 'barney'
                 */
                function findKey(object, predicate) {
                  return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
                }

                /**
                 * This method is like `_.findKey` except that it iterates over elements of
                 * a collection in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {string|undefined} Returns the key of the matched element,
                 *  else `undefined`.
                 * @example
                 *
                 * var users = {
                 *   'barney':  { 'age': 36, 'active': true },
                 *   'fred':    { 'age': 40, 'active': false },
                 *   'pebbles': { 'age': 1,  'active': true }
                 * };
                 *
                 * _.findLastKey(users, function(o) { return o.age < 40; });
                 * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findLastKey(users, { 'age': 36, 'active': true });
                 * // => 'barney'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findLastKey(users, ['active', false]);
                 * // => 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findLastKey(users, 'active');
                 * // => 'pebbles'
                 */
                function findLastKey(object, predicate) {
                  return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
                }

                /**
                 * Iterates over own and inherited enumerable string keyed properties of an
                 * object and invokes `iteratee` for each property. The iteratee is invoked
                 * with three arguments: (value, key, object). Iteratee functions may exit
                 * iteration early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forInRight
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forIn(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
                 */
                function forIn(object, iteratee) {
                  return object == null
                    ? object
                    : baseFor(object, getIteratee(iteratee, 3), keysIn);
                }

                /**
                 * This method is like `_.forIn` except that it iterates over properties of
                 * `object` in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forIn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forInRight(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
                 */
                function forInRight(object, iteratee) {
                  return object == null
                    ? object
                    : baseForRight(object, getIteratee(iteratee, 3), keysIn);
                }

                /**
                 * Iterates over own enumerable string keyed properties of an object and
                 * invokes `iteratee` for each property. The iteratee is invoked with three
                 * arguments: (value, key, object). Iteratee functions may exit iteration
                 * early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forOwnRight
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forOwn(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                 */
                function forOwn(object, iteratee) {
                  return object && baseForOwn(object, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.forOwn` except that it iterates over properties of
                 * `object` in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forOwn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forOwnRight(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
                 */
                function forOwnRight(object, iteratee) {
                  return object && baseForOwnRight(object, getIteratee(iteratee, 3));
                }

                /**
                 * Creates an array of function property names from own enumerable properties
                 * of `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @returns {Array} Returns the function names.
                 * @see _.functionsIn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = _.constant('a');
                 *   this.b = _.constant('b');
                 * }
                 *
                 * Foo.prototype.c = _.constant('c');
                 *
                 * _.functions(new Foo);
                 * // => ['a', 'b']
                 */
                function functions(object) {
                  return object == null ? [] : baseFunctions(object, keys(object));
                }

                /**
                 * Creates an array of function property names from own and inherited
                 * enumerable properties of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @returns {Array} Returns the function names.
                 * @see _.functions
                 * @example
                 *
                 * function Foo() {
                 *   this.a = _.constant('a');
                 *   this.b = _.constant('b');
                 * }
                 *
                 * Foo.prototype.c = _.constant('c');
                 *
                 * _.functionsIn(new Foo);
                 * // => ['a', 'b', 'c']
                 */
                function functionsIn(object) {
                  return object == null ? [] : baseFunctions(object, keysIn(object));
                }

                /**
                 * Gets the value at `path` of `object`. If the resolved value is
                 * `undefined`, the `defaultValue` is returned in its place.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to get.
                 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.get(object, 'a[0].b.c');
                 * // => 3
                 *
                 * _.get(object, ['a', '0', 'b', 'c']);
                 * // => 3
                 *
                 * _.get(object, 'a.b.c', 'default');
                 * // => 'default'
                 */
                function get(object, path, defaultValue) {
                  var result = object == null ? undefined : baseGet(object, path);
                  return result === undefined ? defaultValue : result;
                }

                /**
                 * Checks if `path` is a direct property of `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 * @example
                 *
                 * var object = { 'a': { 'b': 2 } };
                 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
                 *
                 * _.has(object, 'a');
                 * // => true
                 *
                 * _.has(object, 'a.b');
                 * // => true
                 *
                 * _.has(object, ['a', 'b']);
                 * // => true
                 *
                 * _.has(other, 'a');
                 * // => false
                 */
                function has(object, path) {
                  return object != null && hasPath(object, path, baseHas);
                }

                /**
                 * Checks if `path` is a direct or inherited property of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 * @example
                 *
                 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
                 *
                 * _.hasIn(object, 'a');
                 * // => true
                 *
                 * _.hasIn(object, 'a.b');
                 * // => true
                 *
                 * _.hasIn(object, ['a', 'b']);
                 * // => true
                 *
                 * _.hasIn(object, 'b');
                 * // => false
                 */
                function hasIn(object, path) {
                  return object != null && hasPath(object, path, baseHasIn);
                }

                /**
                 * Creates an object composed of the inverted keys and values of `object`.
                 * If `object` contains duplicate values, subsequent values overwrite
                 * property assignments of previous values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.7.0
                 * @category Object
                 * @param {Object} object The object to invert.
                 * @returns {Object} Returns the new inverted object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2, 'c': 1 };
                 *
                 * _.invert(object);
                 * // => { '1': 'c', '2': 'b' }
                 */
                var invert = createInverter(function(result, value, key) {
                  if (value != null &&
                      typeof value.toString != 'function') {
                    value = nativeObjectToString.call(value);
                  }

                  result[value] = key;
                }, constant(identity));

                /**
                 * This method is like `_.invert` except that the inverted object is generated
                 * from the results of running each element of `object` thru `iteratee`. The
                 * corresponding inverted value of each inverted key is an array of keys
                 * responsible for generating the inverted value. The iteratee is invoked
                 * with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.1.0
                 * @category Object
                 * @param {Object} object The object to invert.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Object} Returns the new inverted object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2, 'c': 1 };
                 *
                 * _.invertBy(object);
                 * // => { '1': ['a', 'c'], '2': ['b'] }
                 *
                 * _.invertBy(object, function(value) {
                 *   return 'group' + value;
                 * });
                 * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
                 */
                var invertBy = createInverter(function(result, value, key) {
                  if (value != null &&
                      typeof value.toString != 'function') {
                    value = nativeObjectToString.call(value);
                  }

                  if (hasOwnProperty.call(result, value)) {
                    result[value].push(key);
                  } else {
                    result[value] = [key];
                  }
                }, getIteratee);

                /**
                 * Invokes the method at `path` of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {*} Returns the result of the invoked method.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
                 *
                 * _.invoke(object, 'a[0].b.c.slice', 1, 3);
                 * // => [2, 3]
                 */
                var invoke = baseRest(baseInvoke);

                /**
                 * Creates an array of the own enumerable property names of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects. See the
                 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                 * for more details.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.keys(new Foo);
                 * // => ['a', 'b'] (iteration order is not guaranteed)
                 *
                 * _.keys('hi');
                 * // => ['0', '1']
                 */
                function keys(object) {
                  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
                }

                /**
                 * Creates an array of the own and inherited enumerable property names of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.keysIn(new Foo);
                 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                 */
                function keysIn(object) {
                  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
                }

                /**
                 * The opposite of `_.mapValues`; this method creates an object with the
                 * same values as `object` and keys generated by running each own enumerable
                 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
                 * with three arguments: (value, key, object).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns the new mapped object.
                 * @see _.mapValues
                 * @example
                 *
                 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
                 *   return key + value;
                 * });
                 * // => { 'a1': 1, 'b2': 2 }
                 */
                function mapKeys(object, iteratee) {
                  var result = {};
                  iteratee = getIteratee(iteratee, 3);

                  baseForOwn(object, function(value, key, object) {
                    baseAssignValue(result, iteratee(value, key, object), value);
                  });
                  return result;
                }

                /**
                 * Creates an object with the same keys as `object` and values generated
                 * by running each own enumerable string keyed property of `object` thru
                 * `iteratee`. The iteratee is invoked with three arguments:
                 * (value, key, object).
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns the new mapped object.
                 * @see _.mapKeys
                 * @example
                 *
                 * var users = {
                 *   'fred':    { 'user': 'fred',    'age': 40 },
                 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
                 * };
                 *
                 * _.mapValues(users, function(o) { return o.age; });
                 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.mapValues(users, 'age');
                 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                 */
                function mapValues(object, iteratee) {
                  var result = {};
                  iteratee = getIteratee(iteratee, 3);

                  baseForOwn(object, function(value, key, object) {
                    baseAssignValue(result, key, iteratee(value, key, object));
                  });
                  return result;
                }

                /**
                 * This method is like `_.assign` except that it recursively merges own and
                 * inherited enumerable string keyed properties of source objects into the
                 * destination object. Source properties that resolve to `undefined` are
                 * skipped if a destination value exists. Array and plain object properties
                 * are merged recursively. Other objects and value types are overridden by
                 * assignment. Source objects are applied from left to right. Subsequent
                 * sources overwrite property assignments of previous sources.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {
                 *   'a': [{ 'b': 2 }, { 'd': 4 }]
                 * };
                 *
                 * var other = {
                 *   'a': [{ 'c': 3 }, { 'e': 5 }]
                 * };
                 *
                 * _.merge(object, other);
                 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
                 */
                var merge = createAssigner(function(object, source, srcIndex) {
                  baseMerge(object, source, srcIndex);
                });

                /**
                 * This method is like `_.merge` except that it accepts `customizer` which
                 * is invoked to produce the merged values of the destination and source
                 * properties. If `customizer` returns `undefined`, merging is handled by the
                 * method instead. The `customizer` is invoked with six arguments:
                 * (objValue, srcValue, key, object, source, stack).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} customizer The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
                 *   if (_.isArray(objValue)) {
                 *     return objValue.concat(srcValue);
                 *   }
                 * }
                 *
                 * var object = { 'a': [1], 'b': [2] };
                 * var other = { 'a': [3], 'b': [4] };
                 *
                 * _.mergeWith(object, other, customizer);
                 * // => { 'a': [1, 3], 'b': [2, 4] }
                 */
                var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
                  baseMerge(object, source, srcIndex, customizer);
                });

                /**
                 * The opposite of `_.pick`; this method creates an object composed of the
                 * own and inherited enumerable property paths of `object` that are not omitted.
                 *
                 * **Note:** This method is considerably slower than `_.pick`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {...(string|string[])} [paths] The property paths to omit.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.omit(object, ['a', 'c']);
                 * // => { 'b': '2' }
                 */
                var omit = flatRest(function(object, paths) {
                  var result = {};
                  if (object == null) {
                    return result;
                  }
                  var isDeep = false;
                  paths = arrayMap(paths, function(path) {
                    path = castPath(path, object);
                    isDeep || (isDeep = path.length > 1);
                    return path;
                  });
                  copyObject(object, getAllKeysIn(object), result);
                  if (isDeep) {
                    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
                  }
                  var length = paths.length;
                  while (length--) {
                    baseUnset(result, paths[length]);
                  }
                  return result;
                });

                /**
                 * The opposite of `_.pickBy`; this method creates an object composed of
                 * the own and inherited enumerable string keyed properties of `object` that
                 * `predicate` doesn't return truthy for. The predicate is invoked with two
                 * arguments: (value, key).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {Function} [predicate=_.identity] The function invoked per property.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.omitBy(object, _.isNumber);
                 * // => { 'b': '2' }
                 */
                function omitBy(object, predicate) {
                  return pickBy(object, negate(getIteratee(predicate)));
                }

                /**
                 * Creates an object composed of the picked `object` properties.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.pick(object, ['a', 'c']);
                 * // => { 'a': 1, 'c': 3 }
                 */
                var pick = flatRest(function(object, paths) {
                  return object == null ? {} : basePick(object, paths);
                });

                /**
                 * Creates an object composed of the `object` properties `predicate` returns
                 * truthy for. The predicate is invoked with two arguments: (value, key).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {Function} [predicate=_.identity] The function invoked per property.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.pickBy(object, _.isNumber);
                 * // => { 'a': 1, 'c': 3 }
                 */
                function pickBy(object, predicate) {
                  if (object == null) {
                    return {};
                  }
                  var props = arrayMap(getAllKeysIn(object), function(prop) {
                    return [prop];
                  });
                  predicate = getIteratee(predicate);
                  return basePickBy(object, props, function(value, path) {
                    return predicate(value, path[0]);
                  });
                }

                /**
                 * This method is like `_.get` except that if the resolved value is a
                 * function it's invoked with the `this` binding of its parent object and
                 * its result is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to resolve.
                 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
                 *
                 * _.result(object, 'a[0].b.c1');
                 * // => 3
                 *
                 * _.result(object, 'a[0].b.c2');
                 * // => 4
                 *
                 * _.result(object, 'a[0].b.c3', 'default');
                 * // => 'default'
                 *
                 * _.result(object, 'a[0].b.c3', _.constant('default'));
                 * // => 'default'
                 */
                function result(object, path, defaultValue) {
                  path = castPath(path, object);

                  var index = -1,
                      length = path.length;

                  // Ensure the loop is entered when path is empty.
                  if (!length) {
                    length = 1;
                    object = undefined;
                  }
                  while (++index < length) {
                    var value = object == null ? undefined : object[toKey(path[index])];
                    if (value === undefined) {
                      index = length;
                      value = defaultValue;
                    }
                    object = isFunction(value) ? value.call(object) : value;
                  }
                  return object;
                }

                /**
                 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
                 * it's created. Arrays are created for missing index properties while objects
                 * are created for all other missing properties. Use `_.setWith` to customize
                 * `path` creation.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.set(object, 'a[0].b.c', 4);
                 * console.log(object.a[0].b.c);
                 * // => 4
                 *
                 * _.set(object, ['x', '0', 'y', 'z'], 5);
                 * console.log(object.x[0].y.z);
                 * // => 5
                 */
                function set(object, path, value) {
                  return object == null ? object : baseSet(object, path, value);
                }

                /**
                 * This method is like `_.set` except that it accepts `customizer` which is
                 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                 * path creation is handled by the method instead. The `customizer` is invoked
                 * with three arguments: (nsValue, key, nsObject).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {};
                 *
                 * _.setWith(object, '[0][1]', 'a', Object);
                 * // => { '0': { '1': 'a' } }
                 */
                function setWith(object, path, value, customizer) {
                  customizer = typeof customizer == 'function' ? customizer : undefined;
                  return object == null ? object : baseSet(object, path, value, customizer);
                }

                /**
                 * Creates an array of own enumerable string keyed-value pairs for `object`
                 * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
                 * entries are returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias entries
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the key-value pairs.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.toPairs(new Foo);
                 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
                 */
                var toPairs = createToPairs(keys);

                /**
                 * Creates an array of own and inherited enumerable string keyed-value pairs
                 * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
                 * or set, its entries are returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias entriesIn
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the key-value pairs.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.toPairsIn(new Foo);
                 * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
                 */
                var toPairsIn = createToPairs(keysIn);

                /**
                 * An alternative to `_.reduce`; this method transforms `object` to a new
                 * `accumulator` object which is the result of running each of its own
                 * enumerable string keyed properties thru `iteratee`, with each invocation
                 * potentially mutating the `accumulator` object. If `accumulator` is not
                 * provided, a new object with the same `[[Prototype]]` will be used. The
                 * iteratee is invoked with four arguments: (accumulator, value, key, object).
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The custom accumulator value.
                 * @returns {*} Returns the accumulated value.
                 * @example
                 *
                 * _.transform([2, 3, 4], function(result, n) {
                 *   result.push(n *= n);
                 *   return n % 2 == 0;
                 * }, []);
                 * // => [4, 9]
                 *
                 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                 *   (result[value] || (result[value] = [])).push(key);
                 * }, {});
                 * // => { '1': ['a', 'c'], '2': ['b'] }
                 */
                function transform(object, iteratee, accumulator) {
                  var isArr = isArray(object),
                      isArrLike = isArr || isBuffer(object) || isTypedArray(object);

                  iteratee = getIteratee(iteratee, 4);
                  if (accumulator == null) {
                    var Ctor = object && object.constructor;
                    if (isArrLike) {
                      accumulator = isArr ? new Ctor : [];
                    }
                    else if (isObject(object)) {
                      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                    }
                    else {
                      accumulator = {};
                    }
                  }
                  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
                    return iteratee(accumulator, value, index, object);
                  });
                  return accumulator;
                }

                /**
                 * Removes the property at `path` of `object`.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to unset.
                 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
                 * _.unset(object, 'a[0].b.c');
                 * // => true
                 *
                 * console.log(object);
                 * // => { 'a': [{ 'b': {} }] };
                 *
                 * _.unset(object, ['a', '0', 'b', 'c']);
                 * // => true
                 *
                 * console.log(object);
                 * // => { 'a': [{ 'b': {} }] };
                 */
                function unset(object, path) {
                  return object == null ? true : baseUnset(object, path);
                }

                /**
                 * This method is like `_.set` except that accepts `updater` to produce the
                 * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
                 * is invoked with one argument: (value).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {Function} updater The function to produce the updated value.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.update(object, 'a[0].b.c', function(n) { return n * n; });
                 * console.log(object.a[0].b.c);
                 * // => 9
                 *
                 * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
                 * console.log(object.x[0].y.z);
                 * // => 0
                 */
                function update(object, path, updater) {
                  return object == null ? object : baseUpdate(object, path, castFunction(updater));
                }

                /**
                 * This method is like `_.update` except that it accepts `customizer` which is
                 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                 * path creation is handled by the method instead. The `customizer` is invoked
                 * with three arguments: (nsValue, key, nsObject).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {Function} updater The function to produce the updated value.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {};
                 *
                 * _.updateWith(object, '[0][1]', _.constant('a'), Object);
                 * // => { '0': { '1': 'a' } }
                 */
                function updateWith(object, path, updater, customizer) {
                  customizer = typeof customizer == 'function' ? customizer : undefined;
                  return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
                }

                /**
                 * Creates an array of the own enumerable string keyed property values of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property values.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.values(new Foo);
                 * // => [1, 2] (iteration order is not guaranteed)
                 *
                 * _.values('hi');
                 * // => ['h', 'i']
                 */
                function values(object) {
                  return object == null ? [] : baseValues(object, keys(object));
                }

                /**
                 * Creates an array of the own and inherited enumerable string keyed property
                 * values of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property values.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.valuesIn(new Foo);
                 * // => [1, 2, 3] (iteration order is not guaranteed)
                 */
                function valuesIn(object) {
                  return object == null ? [] : baseValues(object, keysIn(object));
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Clamps `number` within the inclusive `lower` and `upper` bounds.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Number
                 * @param {number} number The number to clamp.
                 * @param {number} [lower] The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the clamped number.
                 * @example
                 *
                 * _.clamp(-10, -5, 5);
                 * // => -5
                 *
                 * _.clamp(10, -5, 5);
                 * // => 5
                 */
                function clamp(number, lower, upper) {
                  if (upper === undefined) {
                    upper = lower;
                    lower = undefined;
                  }
                  if (upper !== undefined) {
                    upper = toNumber(upper);
                    upper = upper === upper ? upper : 0;
                  }
                  if (lower !== undefined) {
                    lower = toNumber(lower);
                    lower = lower === lower ? lower : 0;
                  }
                  return baseClamp(toNumber(number), lower, upper);
                }

                /**
                 * Checks if `n` is between `start` and up to, but not including, `end`. If
                 * `end` is not specified, it's set to `start` with `start` then set to `0`.
                 * If `start` is greater than `end` the params are swapped to support
                 * negative ranges.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.3.0
                 * @category Number
                 * @param {number} number The number to check.
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                 * @see _.range, _.rangeRight
                 * @example
                 *
                 * _.inRange(3, 2, 4);
                 * // => true
                 *
                 * _.inRange(4, 8);
                 * // => true
                 *
                 * _.inRange(4, 2);
                 * // => false
                 *
                 * _.inRange(2, 2);
                 * // => false
                 *
                 * _.inRange(1.2, 2);
                 * // => true
                 *
                 * _.inRange(5.2, 4);
                 * // => false
                 *
                 * _.inRange(-3, -2, -6);
                 * // => true
                 */
                function inRange(number, start, end) {
                  start = toFinite(start);
                  if (end === undefined) {
                    end = start;
                    start = 0;
                  } else {
                    end = toFinite(end);
                  }
                  number = toNumber(number);
                  return baseInRange(number, start, end);
                }

                /**
                 * Produces a random number between the inclusive `lower` and `upper` bounds.
                 * If only one argument is provided a number between `0` and the given number
                 * is returned. If `floating` is `true`, or either `lower` or `upper` are
                 * floats, a floating-point number is returned instead of an integer.
                 *
                 * **Note:** JavaScript follows the IEEE-754 standard for resolving
                 * floating-point values which can produce unexpected results.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.7.0
                 * @category Number
                 * @param {number} [lower=0] The lower bound.
                 * @param {number} [upper=1] The upper bound.
                 * @param {boolean} [floating] Specify returning a floating-point number.
                 * @returns {number} Returns the random number.
                 * @example
                 *
                 * _.random(0, 5);
                 * // => an integer between 0 and 5
                 *
                 * _.random(5);
                 * // => also an integer between 0 and 5
                 *
                 * _.random(5, true);
                 * // => a floating-point number between 0 and 5
                 *
                 * _.random(1.2, 5.2);
                 * // => a floating-point number between 1.2 and 5.2
                 */
                function random(lower, upper, floating) {
                  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                    upper = floating = undefined;
                  }
                  if (floating === undefined) {
                    if (typeof upper == 'boolean') {
                      floating = upper;
                      upper = undefined;
                    }
                    else if (typeof lower == 'boolean') {
                      floating = lower;
                      lower = undefined;
                    }
                  }
                  if (lower === undefined && upper === undefined) {
                    lower = 0;
                    upper = 1;
                  }
                  else {
                    lower = toFinite(lower);
                    if (upper === undefined) {
                      upper = lower;
                      lower = 0;
                    } else {
                      upper = toFinite(upper);
                    }
                  }
                  if (lower > upper) {
                    var temp = lower;
                    lower = upper;
                    upper = temp;
                  }
                  if (floating || lower % 1 || upper % 1) {
                    var rand = nativeRandom();
                    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
                  }
                  return baseRandom(lower, upper);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the camel cased string.
                 * @example
                 *
                 * _.camelCase('Foo Bar');
                 * // => 'fooBar'
                 *
                 * _.camelCase('--foo-bar--');
                 * // => 'fooBar'
                 *
                 * _.camelCase('__FOO_BAR__');
                 * // => 'fooBar'
                 */
                var camelCase = createCompounder(function(result, word, index) {
                  word = word.toLowerCase();
                  return result + (index ? capitalize(word) : word);
                });

                /**
                 * Converts the first character of `string` to upper case and the remaining
                 * to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to capitalize.
                 * @returns {string} Returns the capitalized string.
                 * @example
                 *
                 * _.capitalize('FRED');
                 * // => 'Fred'
                 */
                function capitalize(string) {
                  return upperFirst(toString(string).toLowerCase());
                }

                /**
                 * Deburrs `string` by converting
                 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
                 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
                 * letters to basic Latin letters and removing
                 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to deburr.
                 * @returns {string} Returns the deburred string.
                 * @example
                 *
                 * _.deburr('déjà vu');
                 * // => 'deja vu'
                 */
                function deburr(string) {
                  string = toString(string);
                  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
                }

                /**
                 * Checks if `string` ends with the given target string.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {string} [target] The string to search for.
                 * @param {number} [position=string.length] The position to search up to.
                 * @returns {boolean} Returns `true` if `string` ends with `target`,
                 *  else `false`.
                 * @example
                 *
                 * _.endsWith('abc', 'c');
                 * // => true
                 *
                 * _.endsWith('abc', 'b');
                 * // => false
                 *
                 * _.endsWith('abc', 'b', 2);
                 * // => true
                 */
                function endsWith(string, target, position) {
                  string = toString(string);
                  target = baseToString(target);

                  var length = string.length;
                  position = position === undefined
                    ? length
                    : baseClamp(toInteger(position), 0, length);

                  var end = position;
                  position -= target.length;
                  return position >= 0 && string.slice(position, end) == target;
                }

                /**
                 * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
                 * corresponding HTML entities.
                 *
                 * **Note:** No other characters are escaped. To escape additional
                 * characters use a third-party library like [_he_](https://mths.be/he).
                 *
                 * Though the ">" character is escaped for symmetry, characters like
                 * ">" and "/" don't need escaping in HTML and have no special meaning
                 * unless they're part of a tag or unquoted attribute value. See
                 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
                 * (under "semi-related fun fact") for more details.
                 *
                 * When working with HTML you should always
                 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
                 * XSS vectors.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category String
                 * @param {string} [string=''] The string to escape.
                 * @returns {string} Returns the escaped string.
                 * @example
                 *
                 * _.escape('fred, barney, & pebbles');
                 * // => 'fred, barney, &amp; pebbles'
                 */
                function escape(string) {
                  string = toString(string);
                  return (string && reHasUnescapedHtml.test(string))
                    ? string.replace(reUnescapedHtml, escapeHtmlChar)
                    : string;
                }

                /**
                 * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
                 * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to escape.
                 * @returns {string} Returns the escaped string.
                 * @example
                 *
                 * _.escapeRegExp('[lodash](https://lodash.com/)');
                 * // => '\[lodash\]\(https://lodash\.com/\)'
                 */
                function escapeRegExp(string) {
                  string = toString(string);
                  return (string && reHasRegExpChar.test(string))
                    ? string.replace(reRegExpChar, '\\$&')
                    : string;
                }

                /**
                 * Converts `string` to
                 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the kebab cased string.
                 * @example
                 *
                 * _.kebabCase('Foo Bar');
                 * // => 'foo-bar'
                 *
                 * _.kebabCase('fooBar');
                 * // => 'foo-bar'
                 *
                 * _.kebabCase('__FOO_BAR__');
                 * // => 'foo-bar'
                 */
                var kebabCase = createCompounder(function(result, word, index) {
                  return result + (index ? '-' : '') + word.toLowerCase();
                });

                /**
                 * Converts `string`, as space separated words, to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the lower cased string.
                 * @example
                 *
                 * _.lowerCase('--Foo-Bar--');
                 * // => 'foo bar'
                 *
                 * _.lowerCase('fooBar');
                 * // => 'foo bar'
                 *
                 * _.lowerCase('__FOO_BAR__');
                 * // => 'foo bar'
                 */
                var lowerCase = createCompounder(function(result, word, index) {
                  return result + (index ? ' ' : '') + word.toLowerCase();
                });

                /**
                 * Converts the first character of `string` to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.lowerFirst('Fred');
                 * // => 'fred'
                 *
                 * _.lowerFirst('FRED');
                 * // => 'fRED'
                 */
                var lowerFirst = createCaseFirst('toLowerCase');

                /**
                 * Pads `string` on the left and right sides if it's shorter than `length`.
                 * Padding characters are truncated if they can't be evenly divided by `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.pad('abc', 8);
                 * // => '  abc   '
                 *
                 * _.pad('abc', 8, '_-');
                 * // => '_-abc_-_'
                 *
                 * _.pad('abc', 3);
                 * // => 'abc'
                 */
                function pad(string, length, chars) {
                  string = toString(string);
                  length = toInteger(length);

                  var strLength = length ? stringSize(string) : 0;
                  if (!length || strLength >= length) {
                    return string;
                  }
                  var mid = (length - strLength) / 2;
                  return (
                    createPadding(nativeFloor(mid), chars) +
                    string +
                    createPadding(nativeCeil(mid), chars)
                  );
                }

                /**
                 * Pads `string` on the right side if it's shorter than `length`. Padding
                 * characters are truncated if they exceed `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.padEnd('abc', 6);
                 * // => 'abc   '
                 *
                 * _.padEnd('abc', 6, '_-');
                 * // => 'abc_-_'
                 *
                 * _.padEnd('abc', 3);
                 * // => 'abc'
                 */
                function padEnd(string, length, chars) {
                  string = toString(string);
                  length = toInteger(length);

                  var strLength = length ? stringSize(string) : 0;
                  return (length && strLength < length)
                    ? (string + createPadding(length - strLength, chars))
                    : string;
                }

                /**
                 * Pads `string` on the left side if it's shorter than `length`. Padding
                 * characters are truncated if they exceed `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.padStart('abc', 6);
                 * // => '   abc'
                 *
                 * _.padStart('abc', 6, '_-');
                 * // => '_-_abc'
                 *
                 * _.padStart('abc', 3);
                 * // => 'abc'
                 */
                function padStart(string, length, chars) {
                  string = toString(string);
                  length = toInteger(length);

                  var strLength = length ? stringSize(string) : 0;
                  return (length && strLength < length)
                    ? (createPadding(length - strLength, chars) + string)
                    : string;
                }

                /**
                 * Converts `string` to an integer of the specified radix. If `radix` is
                 * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
                 * hexadecimal, in which case a `radix` of `16` is used.
                 *
                 * **Note:** This method aligns with the
                 * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category String
                 * @param {string} string The string to convert.
                 * @param {number} [radix=10] The radix to interpret `value` by.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.parseInt('08');
                 * // => 8
                 *
                 * _.map(['6', '08', '10'], _.parseInt);
                 * // => [6, 8, 10]
                 */
                function parseInt(string, radix, guard) {
                  if (guard || radix == null) {
                    radix = 0;
                  } else if (radix) {
                    radix = +radix;
                  }
                  return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
                }

                /**
                 * Repeats the given string `n` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to repeat.
                 * @param {number} [n=1] The number of times to repeat the string.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the repeated string.
                 * @example
                 *
                 * _.repeat('*', 3);
                 * // => '***'
                 *
                 * _.repeat('abc', 2);
                 * // => 'abcabc'
                 *
                 * _.repeat('abc', 0);
                 * // => ''
                 */
                function repeat(string, n, guard) {
                  if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
                    n = 1;
                  } else {
                    n = toInteger(n);
                  }
                  return baseRepeat(toString(string), n);
                }

                /**
                 * Replaces matches for `pattern` in `string` with `replacement`.
                 *
                 * **Note:** This method is based on
                 * [`String#replace`](https://mdn.io/String/replace).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to modify.
                 * @param {RegExp|string} pattern The pattern to replace.
                 * @param {Function|string} replacement The match replacement.
                 * @returns {string} Returns the modified string.
                 * @example
                 *
                 * _.replace('Hi Fred', 'Fred', 'Barney');
                 * // => 'Hi Barney'
                 */
                function replace() {
                  var args = arguments,
                      string = toString(args[0]);

                  return args.length < 3 ? string : string.replace(args[1], args[2]);
                }

                /**
                 * Converts `string` to
                 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the snake cased string.
                 * @example
                 *
                 * _.snakeCase('Foo Bar');
                 * // => 'foo_bar'
                 *
                 * _.snakeCase('fooBar');
                 * // => 'foo_bar'
                 *
                 * _.snakeCase('--FOO-BAR--');
                 * // => 'foo_bar'
                 */
                var snakeCase = createCompounder(function(result, word, index) {
                  return result + (index ? '_' : '') + word.toLowerCase();
                });

                /**
                 * Splits `string` by `separator`.
                 *
                 * **Note:** This method is based on
                 * [`String#split`](https://mdn.io/String/split).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to split.
                 * @param {RegExp|string} separator The separator pattern to split by.
                 * @param {number} [limit] The length to truncate results to.
                 * @returns {Array} Returns the string segments.
                 * @example
                 *
                 * _.split('a-b-c', '-', 2);
                 * // => ['a', 'b']
                 */
                function split(string, separator, limit) {
                  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                    separator = limit = undefined;
                  }
                  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
                  if (!limit) {
                    return [];
                  }
                  string = toString(string);
                  if (string && (
                        typeof separator == 'string' ||
                        (separator != null && !isRegExp(separator))
                      )) {
                    separator = baseToString(separator);
                    if (!separator && hasUnicode(string)) {
                      return castSlice(stringToArray(string), 0, limit);
                    }
                  }
                  return string.split(separator, limit);
                }

                /**
                 * Converts `string` to
                 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.1.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the start cased string.
                 * @example
                 *
                 * _.startCase('--foo-bar--');
                 * // => 'Foo Bar'
                 *
                 * _.startCase('fooBar');
                 * // => 'Foo Bar'
                 *
                 * _.startCase('__FOO_BAR__');
                 * // => 'FOO BAR'
                 */
                var startCase = createCompounder(function(result, word, index) {
                  return result + (index ? ' ' : '') + upperFirst(word);
                });

                /**
                 * Checks if `string` starts with the given target string.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {string} [target] The string to search for.
                 * @param {number} [position=0] The position to search from.
                 * @returns {boolean} Returns `true` if `string` starts with `target`,
                 *  else `false`.
                 * @example
                 *
                 * _.startsWith('abc', 'a');
                 * // => true
                 *
                 * _.startsWith('abc', 'b');
                 * // => false
                 *
                 * _.startsWith('abc', 'b', 1);
                 * // => true
                 */
                function startsWith(string, target, position) {
                  string = toString(string);
                  position = position == null
                    ? 0
                    : baseClamp(toInteger(position), 0, string.length);

                  target = baseToString(target);
                  return string.slice(position, position + target.length) == target;
                }

                /**
                 * Creates a compiled template function that can interpolate data properties
                 * in "interpolate" delimiters, HTML-escape interpolated data properties in
                 * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
                 * properties may be accessed as free variables in the template. If a setting
                 * object is given, it takes precedence over `_.templateSettings` values.
                 *
                 * **Note:** In the development build `_.template` utilizes
                 * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
                 * for easier debugging.
                 *
                 * For more information on precompiling templates see
                 * [lodash's custom builds documentation](https://lodash.com/custom-builds).
                 *
                 * For more information on Chrome extension sandboxes see
                 * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category String
                 * @param {string} [string=''] The template string.
                 * @param {Object} [options={}] The options object.
                 * @param {RegExp} [options.escape=_.templateSettings.escape]
                 *  The HTML "escape" delimiter.
                 * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
                 *  The "evaluate" delimiter.
                 * @param {Object} [options.imports=_.templateSettings.imports]
                 *  An object to import into the template as free variables.
                 * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
                 *  The "interpolate" delimiter.
                 * @param {string} [options.sourceURL='lodash.templateSources[n]']
                 *  The sourceURL of the compiled template.
                 * @param {string} [options.variable='obj']
                 *  The data object variable name.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the compiled template function.
                 * @example
                 *
                 * // Use the "interpolate" delimiter to create a compiled template.
                 * var compiled = _.template('hello <%= user %>!');
                 * compiled({ 'user': 'fred' });
                 * // => 'hello fred!'
                 *
                 * // Use the HTML "escape" delimiter to escape data property values.
                 * var compiled = _.template('<b><%- value %></b>');
                 * compiled({ 'value': '<script>' });
                 * // => '<b>&lt;script&gt;</b>'
                 *
                 * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
                 * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
                 * compiled({ 'users': ['fred', 'barney'] });
                 * // => '<li>fred</li><li>barney</li>'
                 *
                 * // Use the internal `print` function in "evaluate" delimiters.
                 * var compiled = _.template('<% print("hello " + user); %>!');
                 * compiled({ 'user': 'barney' });
                 * // => 'hello barney!'
                 *
                 * // Use the ES template literal delimiter as an "interpolate" delimiter.
                 * // Disable support by replacing the "interpolate" delimiter.
                 * var compiled = _.template('hello ${ user }!');
                 * compiled({ 'user': 'pebbles' });
                 * // => 'hello pebbles!'
                 *
                 * // Use backslashes to treat delimiters as plain text.
                 * var compiled = _.template('<%= "\\<%- value %\\>" %>');
                 * compiled({ 'value': 'ignored' });
                 * // => '<%- value %>'
                 *
                 * // Use the `imports` option to import `jQuery` as `jq`.
                 * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
                 * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
                 * compiled({ 'users': ['fred', 'barney'] });
                 * // => '<li>fred</li><li>barney</li>'
                 *
                 * // Use the `sourceURL` option to specify a custom sourceURL for the template.
                 * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
                 * compiled(data);
                 * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
                 *
                 * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
                 * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
                 * compiled.source;
                 * // => function(data) {
                 * //   var __t, __p = '';
                 * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
                 * //   return __p;
                 * // }
                 *
                 * // Use custom template delimiters.
                 * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
                 * var compiled = _.template('hello {{ user }}!');
                 * compiled({ 'user': 'mustache' });
                 * // => 'hello mustache!'
                 *
                 * // Use the `source` property to inline compiled templates for meaningful
                 * // line numbers in error messages and stack traces.
                 * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
                 *   var JST = {\
                 *     "main": ' + _.template(mainText).source + '\
                 *   };\
                 * ');
                 */
                function template(string, options, guard) {
                  // Based on John Resig's `tmpl` implementation
                  // (http://ejohn.org/blog/javascript-micro-templating/)
                  // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                  var settings = lodash.templateSettings;

                  if (guard && isIterateeCall(string, options, guard)) {
                    options = undefined;
                  }
                  string = toString(string);
                  options = assignInWith({}, options, settings, customDefaultsAssignIn);

                  var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
                      importsKeys = keys(imports),
                      importsValues = baseValues(imports, importsKeys);

                  var isEscaping,
                      isEvaluating,
                      index = 0,
                      interpolate = options.interpolate || reNoMatch,
                      source = "__p += '";

                  // Compile the regexp to match each delimiter.
                  var reDelimiters = RegExp(
                    (options.escape || reNoMatch).source + '|' +
                    interpolate.source + '|' +
                    (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
                    (options.evaluate || reNoMatch).source + '|$'
                  , 'g');

                  // Use a sourceURL for easier debugging.
                  var sourceURL = '//# sourceURL=' +
                    ('sourceURL' in options
                      ? options.sourceURL
                      : ('lodash.templateSources[' + (++templateCounter) + ']')
                    ) + '\n';

                  string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                    interpolateValue || (interpolateValue = esTemplateValue);

                    // Escape characters that can't be included in string literals.
                    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

                    // Replace delimiters with snippets.
                    if (escapeValue) {
                      isEscaping = true;
                      source += "' +\n__e(" + escapeValue + ") +\n'";
                    }
                    if (evaluateValue) {
                      isEvaluating = true;
                      source += "';\n" + evaluateValue + ";\n__p += '";
                    }
                    if (interpolateValue) {
                      source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                    }
                    index = offset + match.length;

                    // The JS engine embedded in Adobe products needs `match` returned in
                    // order to produce the correct `offset` value.
                    return match;
                  });

                  source += "';\n";

                  // If `variable` is not specified wrap a with-statement around the generated
                  // code to add the data object to the top of the scope chain.
                  var variable = options.variable;
                  if (!variable) {
                    source = 'with (obj) {\n' + source + '\n}\n';
                  }
                  // Cleanup code by stripping empty strings.
                  source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
                    .replace(reEmptyStringMiddle, '$1')
                    .replace(reEmptyStringTrailing, '$1;');

                  // Frame code as the function body.
                  source = 'function(' + (variable || 'obj') + ') {\n' +
                    (variable
                      ? ''
                      : 'obj || (obj = {});\n'
                    ) +
                    "var __t, __p = ''" +
                    (isEscaping
                       ? ', __e = _.escape'
                       : ''
                    ) +
                    (isEvaluating
                      ? ', __j = Array.prototype.join;\n' +
                        "function print() { __p += __j.call(arguments, '') }\n"
                      : ';\n'
                    ) +
                    source +
                    'return __p\n}';

                  var result = attempt(function() {
                    return Function(importsKeys, sourceURL + 'return ' + source)
                      .apply(undefined, importsValues);
                  });

                  // Provide the compiled function's source by its `toString` method or
                  // the `source` property as a convenience for inlining compiled templates.
                  result.source = source;
                  if (isError(result)) {
                    throw result;
                  }
                  return result;
                }

                /**
                 * Converts `string`, as a whole, to lower case just like
                 * [String#toLowerCase](https://mdn.io/toLowerCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the lower cased string.
                 * @example
                 *
                 * _.toLower('--Foo-Bar--');
                 * // => '--foo-bar--'
                 *
                 * _.toLower('fooBar');
                 * // => 'foobar'
                 *
                 * _.toLower('__FOO_BAR__');
                 * // => '__foo_bar__'
                 */
                function toLower(value) {
                  return toString(value).toLowerCase();
                }

                /**
                 * Converts `string`, as a whole, to upper case just like
                 * [String#toUpperCase](https://mdn.io/toUpperCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the upper cased string.
                 * @example
                 *
                 * _.toUpper('--foo-bar--');
                 * // => '--FOO-BAR--'
                 *
                 * _.toUpper('fooBar');
                 * // => 'FOOBAR'
                 *
                 * _.toUpper('__foo_bar__');
                 * // => '__FOO_BAR__'
                 */
                function toUpper(value) {
                  return toString(value).toUpperCase();
                }

                /**
                 * Removes leading and trailing whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trim('  abc  ');
                 * // => 'abc'
                 *
                 * _.trim('-_-abc-_-', '_-');
                 * // => 'abc'
                 *
                 * _.map(['  foo  ', '  bar  '], _.trim);
                 * // => ['foo', 'bar']
                 */
                function trim(string, chars, guard) {
                  string = toString(string);
                  if (string && (guard || chars === undefined)) {
                    return string.replace(reTrim, '');
                  }
                  if (!string || !(chars = baseToString(chars))) {
                    return string;
                  }
                  var strSymbols = stringToArray(string),
                      chrSymbols = stringToArray(chars),
                      start = charsStartIndex(strSymbols, chrSymbols),
                      end = charsEndIndex(strSymbols, chrSymbols) + 1;

                  return castSlice(strSymbols, start, end).join('');
                }

                /**
                 * Removes trailing whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trimEnd('  abc  ');
                 * // => '  abc'
                 *
                 * _.trimEnd('-_-abc-_-', '_-');
                 * // => '-_-abc'
                 */
                function trimEnd(string, chars, guard) {
                  string = toString(string);
                  if (string && (guard || chars === undefined)) {
                    return string.replace(reTrimEnd, '');
                  }
                  if (!string || !(chars = baseToString(chars))) {
                    return string;
                  }
                  var strSymbols = stringToArray(string),
                      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

                  return castSlice(strSymbols, 0, end).join('');
                }

                /**
                 * Removes leading whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trimStart('  abc  ');
                 * // => 'abc  '
                 *
                 * _.trimStart('-_-abc-_-', '_-');
                 * // => 'abc-_-'
                 */
                function trimStart(string, chars, guard) {
                  string = toString(string);
                  if (string && (guard || chars === undefined)) {
                    return string.replace(reTrimStart, '');
                  }
                  if (!string || !(chars = baseToString(chars))) {
                    return string;
                  }
                  var strSymbols = stringToArray(string),
                      start = charsStartIndex(strSymbols, stringToArray(chars));

                  return castSlice(strSymbols, start).join('');
                }

                /**
                 * Truncates `string` if it's longer than the given maximum string length.
                 * The last characters of the truncated string are replaced with the omission
                 * string which defaults to "...".
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to truncate.
                 * @param {Object} [options={}] The options object.
                 * @param {number} [options.length=30] The maximum string length.
                 * @param {string} [options.omission='...'] The string to indicate text is omitted.
                 * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
                 * @returns {string} Returns the truncated string.
                 * @example
                 *
                 * _.truncate('hi-diddly-ho there, neighborino');
                 * // => 'hi-diddly-ho there, neighbo...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
                 *   'length': 24,
                 *   'separator': ' '
                 * });
                 * // => 'hi-diddly-ho there,...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
                 *   'length': 24,
                 *   'separator': /,? +/
                 * });
                 * // => 'hi-diddly-ho there...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
                 *   'omission': ' [...]'
                 * });
                 * // => 'hi-diddly-ho there, neig [...]'
                 */
                function truncate(string, options) {
                  var length = DEFAULT_TRUNC_LENGTH,
                      omission = DEFAULT_TRUNC_OMISSION;

                  if (isObject(options)) {
                    var separator = 'separator' in options ? options.separator : separator;
                    length = 'length' in options ? toInteger(options.length) : length;
                    omission = 'omission' in options ? baseToString(options.omission) : omission;
                  }
                  string = toString(string);

                  var strLength = string.length;
                  if (hasUnicode(string)) {
                    var strSymbols = stringToArray(string);
                    strLength = strSymbols.length;
                  }
                  if (length >= strLength) {
                    return string;
                  }
                  var end = length - stringSize(omission);
                  if (end < 1) {
                    return omission;
                  }
                  var result = strSymbols
                    ? castSlice(strSymbols, 0, end).join('')
                    : string.slice(0, end);

                  if (separator === undefined) {
                    return result + omission;
                  }
                  if (strSymbols) {
                    end += (result.length - end);
                  }
                  if (isRegExp(separator)) {
                    if (string.slice(end).search(separator)) {
                      var match,
                          substring = result;

                      if (!separator.global) {
                        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                      }
                      separator.lastIndex = 0;
                      while ((match = separator.exec(substring))) {
                        var newEnd = match.index;
                      }
                      result = result.slice(0, newEnd === undefined ? end : newEnd);
                    }
                  } else if (string.indexOf(baseToString(separator), end) != end) {
                    var index = result.lastIndexOf(separator);
                    if (index > -1) {
                      result = result.slice(0, index);
                    }
                  }
                  return result + omission;
                }

                /**
                 * The inverse of `_.escape`; this method converts the HTML entities
                 * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
                 * their corresponding characters.
                 *
                 * **Note:** No other HTML entities are unescaped. To unescape additional
                 * HTML entities use a third-party library like [_he_](https://mths.be/he).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.6.0
                 * @category String
                 * @param {string} [string=''] The string to unescape.
                 * @returns {string} Returns the unescaped string.
                 * @example
                 *
                 * _.unescape('fred, barney, &amp; pebbles');
                 * // => 'fred, barney, & pebbles'
                 */
                function unescape(string) {
                  string = toString(string);
                  return (string && reHasEscapedHtml.test(string))
                    ? string.replace(reEscapedHtml, unescapeHtmlChar)
                    : string;
                }

                /**
                 * Converts `string`, as space separated words, to upper case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the upper cased string.
                 * @example
                 *
                 * _.upperCase('--foo-bar');
                 * // => 'FOO BAR'
                 *
                 * _.upperCase('fooBar');
                 * // => 'FOO BAR'
                 *
                 * _.upperCase('__foo_bar__');
                 * // => 'FOO BAR'
                 */
                var upperCase = createCompounder(function(result, word, index) {
                  return result + (index ? ' ' : '') + word.toUpperCase();
                });

                /**
                 * Converts the first character of `string` to upper case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.upperFirst('fred');
                 * // => 'Fred'
                 *
                 * _.upperFirst('FRED');
                 * // => 'FRED'
                 */
                var upperFirst = createCaseFirst('toUpperCase');

                /**
                 * Splits `string` into an array of its words.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {RegExp|string} [pattern] The pattern to match words.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the words of `string`.
                 * @example
                 *
                 * _.words('fred, barney, & pebbles');
                 * // => ['fred', 'barney', 'pebbles']
                 *
                 * _.words('fred, barney, & pebbles', /[^, ]+/g);
                 * // => ['fred', 'barney', '&', 'pebbles']
                 */
                function words(string, pattern, guard) {
                  string = toString(string);
                  pattern = guard ? undefined : pattern;

                  if (pattern === undefined) {
                    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
                  }
                  return string.match(pattern) || [];
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Attempts to invoke `func`, returning either the result or the caught error
                 * object. Any additional arguments are provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Function} func The function to attempt.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {*} Returns the `func` result or error object.
                 * @example
                 *
                 * // Avoid throwing errors for invalid selectors.
                 * var elements = _.attempt(function(selector) {
                 *   return document.querySelectorAll(selector);
                 * }, '>_>');
                 *
                 * if (_.isError(elements)) {
                 *   elements = [];
                 * }
                 */
                var attempt = baseRest(function(func, args) {
                  try {
                    return apply(func, undefined, args);
                  } catch (e) {
                    return isError(e) ? e : new Error(e);
                  }
                });

                /**
                 * Binds methods of an object to the object itself, overwriting the existing
                 * method.
                 *
                 * **Note:** This method doesn't set the "length" property of bound functions.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {Object} object The object to bind and assign the bound methods to.
                 * @param {...(string|string[])} methodNames The object method names to bind.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var view = {
                 *   'label': 'docs',
                 *   'click': function() {
                 *     console.log('clicked ' + this.label);
                 *   }
                 * };
                 *
                 * _.bindAll(view, ['click']);
                 * jQuery(element).on('click', view.click);
                 * // => Logs 'clicked docs' when clicked.
                 */
                var bindAll = flatRest(function(object, methodNames) {
                  arrayEach(methodNames, function(key) {
                    key = toKey(key);
                    baseAssignValue(object, key, bind(object[key], object));
                  });
                  return object;
                });

                /**
                 * Creates a function that iterates over `pairs` and invokes the corresponding
                 * function of the first predicate to return truthy. The predicate-function
                 * pairs are invoked with the `this` binding and arguments of the created
                 * function.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {Array} pairs The predicate-function pairs.
                 * @returns {Function} Returns the new composite function.
                 * @example
                 *
                 * var func = _.cond([
                 *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
                 *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
                 *   [_.stubTrue,                      _.constant('no match')]
                 * ]);
                 *
                 * func({ 'a': 1, 'b': 2 });
                 * // => 'matches A'
                 *
                 * func({ 'a': 0, 'b': 1 });
                 * // => 'matches B'
                 *
                 * func({ 'a': '1', 'b': '2' });
                 * // => 'no match'
                 */
                function cond(pairs) {
                  var length = pairs == null ? 0 : pairs.length,
                      toIteratee = getIteratee();

                  pairs = !length ? [] : arrayMap(pairs, function(pair) {
                    if (typeof pair[1] != 'function') {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    return [toIteratee(pair[0]), pair[1]];
                  });

                  return baseRest(function(args) {
                    var index = -1;
                    while (++index < length) {
                      var pair = pairs[index];
                      if (apply(pair[0], this, args)) {
                        return apply(pair[1], this, args);
                      }
                    }
                  });
                }

                /**
                 * Creates a function that invokes the predicate properties of `source` with
                 * the corresponding property values of a given object, returning `true` if
                 * all predicates return truthy, else `false`.
                 *
                 * **Note:** The created function is equivalent to `_.conformsTo` with
                 * `source` partially applied.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 2, 'b': 1 },
                 *   { 'a': 1, 'b': 2 }
                 * ];
                 *
                 * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
                 * // => [{ 'a': 1, 'b': 2 }]
                 */
                function conforms(source) {
                  return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that returns `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Util
                 * @param {*} value The value to return from the new function.
                 * @returns {Function} Returns the new constant function.
                 * @example
                 *
                 * var objects = _.times(2, _.constant({ 'a': 1 }));
                 *
                 * console.log(objects);
                 * // => [{ 'a': 1 }, { 'a': 1 }]
                 *
                 * console.log(objects[0] === objects[1]);
                 * // => true
                 */
                function constant(value) {
                  return function() {
                    return value;
                  };
                }

                /**
                 * Checks `value` to determine whether a default value should be returned in
                 * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
                 * or `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.14.0
                 * @category Util
                 * @param {*} value The value to check.
                 * @param {*} defaultValue The default value.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * _.defaultTo(1, 10);
                 * // => 1
                 *
                 * _.defaultTo(undefined, 10);
                 * // => 10
                 */
                function defaultTo(value, defaultValue) {
                  return (value == null || value !== value) ? defaultValue : value;
                }

                /**
                 * Creates a function that returns the result of invoking the given functions
                 * with the `this` binding of the created function, where each successive
                 * invocation is supplied the return value of the previous.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [funcs] The functions to invoke.
                 * @returns {Function} Returns the new composite function.
                 * @see _.flowRight
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var addSquare = _.flow([_.add, square]);
                 * addSquare(1, 2);
                 * // => 9
                 */
                var flow = createFlow();

                /**
                 * This method is like `_.flow` except that it creates a function that
                 * invokes the given functions from right to left.
                 *
                 * @static
                 * @since 3.0.0
                 * @memberOf _
                 * @category Util
                 * @param {...(Function|Function[])} [funcs] The functions to invoke.
                 * @returns {Function} Returns the new composite function.
                 * @see _.flow
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var addSquare = _.flowRight([square, _.add]);
                 * addSquare(1, 2);
                 * // => 9
                 */
                var flowRight = createFlow(true);

                /**
                 * This method returns the first argument it receives.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {*} value Any value.
                 * @returns {*} Returns `value`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 *
                 * console.log(_.identity(object) === object);
                 * // => true
                 */
                function identity(value) {
                  return value;
                }

                /**
                 * Creates a function that invokes `func` with the arguments of the created
                 * function. If `func` is a property name, the created function returns the
                 * property value for a given element. If `func` is an array or object, the
                 * created function returns `true` for elements that contain the equivalent
                 * source properties, otherwise it returns `false`.
                 *
                 * @static
                 * @since 4.0.0
                 * @memberOf _
                 * @category Util
                 * @param {*} [func=_.identity] The value to convert to a callback.
                 * @returns {Function} Returns the callback.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': true },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
                 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.filter(users, _.iteratee(['user', 'fred']));
                 * // => [{ 'user': 'fred', 'age': 40 }]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.map(users, _.iteratee('user'));
                 * // => ['barney', 'fred']
                 *
                 * // Create custom iteratee shorthands.
                 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
                 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
                 *     return func.test(string);
                 *   };
                 * });
                 *
                 * _.filter(['abc', 'def'], /ef/);
                 * // => ['def']
                 */
                function iteratee(func) {
                  return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that performs a partial deep comparison between a given
                 * object and `source`, returning `true` if the given object has equivalent
                 * property values, else `false`.
                 *
                 * **Note:** The created function is equivalent to `_.isMatch` with `source`
                 * partially applied.
                 *
                 * Partial comparisons will match empty array and empty object `source`
                 * values against any array or object value, respectively. See `_.isEqual`
                 * for a list of supported value comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Object} source The object of property values to match.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 1, 'b': 2, 'c': 3 },
                 *   { 'a': 4, 'b': 5, 'c': 6 }
                 * ];
                 *
                 * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
                 * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
                 */
                function matches(source) {
                  return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that performs a partial deep comparison between the
                 * value at `path` of a given object to `srcValue`, returning `true` if the
                 * object value is equivalent, else `false`.
                 *
                 * **Note:** Partial comparisons will match empty array and empty object
                 * `srcValue` values against any array or object value, respectively. See
                 * `_.isEqual` for a list of supported value comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Util
                 * @param {Array|string} path The path of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 1, 'b': 2, 'c': 3 },
                 *   { 'a': 4, 'b': 5, 'c': 6 }
                 * ];
                 *
                 * _.find(objects, _.matchesProperty('a', 4));
                 * // => { 'a': 4, 'b': 5, 'c': 6 }
                 */
                function matchesProperty(path, srcValue) {
                  return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that invokes the method at `path` of a given object.
                 * Any additional arguments are provided to the invoked method.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Util
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {Function} Returns the new invoker function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': { 'b': _.constant(2) } },
                 *   { 'a': { 'b': _.constant(1) } }
                 * ];
                 *
                 * _.map(objects, _.method('a.b'));
                 * // => [2, 1]
                 *
                 * _.map(objects, _.method(['a', 'b']));
                 * // => [2, 1]
                 */
                var method = baseRest(function(path, args) {
                  return function(object) {
                    return baseInvoke(object, path, args);
                  };
                });

                /**
                 * The opposite of `_.method`; this method creates a function that invokes
                 * the method at a given path of `object`. Any additional arguments are
                 * provided to the invoked method.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Util
                 * @param {Object} object The object to query.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {Function} Returns the new invoker function.
                 * @example
                 *
                 * var array = _.times(3, _.constant),
                 *     object = { 'a': array, 'b': array, 'c': array };
                 *
                 * _.map(['a[2]', 'c[0]'], _.methodOf(object));
                 * // => [2, 0]
                 *
                 * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
                 * // => [2, 0]
                 */
                var methodOf = baseRest(function(object, args) {
                  return function(path) {
                    return baseInvoke(object, path, args);
                  };
                });

                /**
                 * Adds all own enumerable string keyed function properties of a source
                 * object to the destination object. If `object` is a function, then methods
                 * are added to its prototype as well.
                 *
                 * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
                 * avoid conflicts caused by modifying the original.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {Function|Object} [object=lodash] The destination object.
                 * @param {Object} source The object of functions to add.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
                 * @returns {Function|Object} Returns `object`.
                 * @example
                 *
                 * function vowels(string) {
                 *   return _.filter(string, function(v) {
                 *     return /[aeiou]/i.test(v);
                 *   });
                 * }
                 *
                 * _.mixin({ 'vowels': vowels });
                 * _.vowels('fred');
                 * // => ['e']
                 *
                 * _('fred').vowels().value();
                 * // => ['e']
                 *
                 * _.mixin({ 'vowels': vowels }, { 'chain': false });
                 * _('fred').vowels();
                 * // => ['e']
                 */
                function mixin(object, source, options) {
                  var props = keys(source),
                      methodNames = baseFunctions(source, props);

                  if (options == null &&
                      !(isObject(source) && (methodNames.length || !props.length))) {
                    options = source;
                    source = object;
                    object = this;
                    methodNames = baseFunctions(source, keys(source));
                  }
                  var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
                      isFunc = isFunction(object);

                  arrayEach(methodNames, function(methodName) {
                    var func = source[methodName];
                    object[methodName] = func;
                    if (isFunc) {
                      object.prototype[methodName] = function() {
                        var chainAll = this.__chain__;
                        if (chain || chainAll) {
                          var result = object(this.__wrapped__),
                              actions = result.__actions__ = copyArray(this.__actions__);

                          actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                          result.__chain__ = chainAll;
                          return result;
                        }
                        return func.apply(object, arrayPush([this.value()], arguments));
                      };
                    }
                  });

                  return object;
                }

                /**
                 * Reverts the `_` variable to its previous value and returns a reference to
                 * the `lodash` function.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @returns {Function} Returns the `lodash` function.
                 * @example
                 *
                 * var lodash = _.noConflict();
                 */
                function noConflict() {
                  if (root._ === this) {
                    root._ = oldDash;
                  }
                  return this;
                }

                /**
                 * This method returns `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.3.0
                 * @category Util
                 * @example
                 *
                 * _.times(2, _.noop);
                 * // => [undefined, undefined]
                 */
                function noop() {
                  // No operation performed.
                }

                /**
                 * Creates a function that gets the argument at index `n`. If `n` is negative,
                 * the nth argument from the end is returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {number} [n=0] The index of the argument to return.
                 * @returns {Function} Returns the new pass-thru function.
                 * @example
                 *
                 * var func = _.nthArg(1);
                 * func('a', 'b', 'c', 'd');
                 * // => 'b'
                 *
                 * var func = _.nthArg(-2);
                 * func('a', 'b', 'c', 'd');
                 * // => 'c'
                 */
                function nthArg(n) {
                  n = toInteger(n);
                  return baseRest(function(args) {
                    return baseNth(args, n);
                  });
                }

                /**
                 * Creates a function that invokes `iteratees` with the arguments it receives
                 * and returns their results.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [iteratees=[_.identity]]
                 *  The iteratees to invoke.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.over([Math.max, Math.min]);
                 *
                 * func(1, 2, 3, 4);
                 * // => [4, 1]
                 */
                var over = createOver(arrayMap);

                /**
                 * Creates a function that checks if **all** of the `predicates` return
                 * truthy when invoked with the arguments it receives.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [predicates=[_.identity]]
                 *  The predicates to check.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.overEvery([Boolean, isFinite]);
                 *
                 * func('1');
                 * // => true
                 *
                 * func(null);
                 * // => false
                 *
                 * func(NaN);
                 * // => false
                 */
                var overEvery = createOver(arrayEvery);

                /**
                 * Creates a function that checks if **any** of the `predicates` return
                 * truthy when invoked with the arguments it receives.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [predicates=[_.identity]]
                 *  The predicates to check.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.overSome([Boolean, isFinite]);
                 *
                 * func('1');
                 * // => true
                 *
                 * func(null);
                 * // => true
                 *
                 * func(NaN);
                 * // => false
                 */
                var overSome = createOver(arraySome);

                /**
                 * Creates a function that returns the value at `path` of a given object.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Util
                 * @param {Array|string} path The path of the property to get.
                 * @returns {Function} Returns the new accessor function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': { 'b': 2 } },
                 *   { 'a': { 'b': 1 } }
                 * ];
                 *
                 * _.map(objects, _.property('a.b'));
                 * // => [2, 1]
                 *
                 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
                 * // => [1, 2]
                 */
                function property(path) {
                  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
                }

                /**
                 * The opposite of `_.property`; this method creates a function that returns
                 * the value at a given path of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Object} object The object to query.
                 * @returns {Function} Returns the new accessor function.
                 * @example
                 *
                 * var array = [0, 1, 2],
                 *     object = { 'a': array, 'b': array, 'c': array };
                 *
                 * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
                 * // => [2, 0]
                 *
                 * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
                 * // => [2, 0]
                 */
                function propertyOf(object) {
                  return function(path) {
                    return object == null ? undefined : baseGet(object, path);
                  };
                }

                /**
                 * Creates an array of numbers (positive and/or negative) progressing from
                 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
                 * `start` is specified without an `end` or `step`. If `end` is not specified,
                 * it's set to `start` with `start` then set to `0`.
                 *
                 * **Note:** JavaScript follows the IEEE-754 standard for resolving
                 * floating-point values which can produce unexpected results.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} [step=1] The value to increment or decrement by.
                 * @returns {Array} Returns the range of numbers.
                 * @see _.inRange, _.rangeRight
                 * @example
                 *
                 * _.range(4);
                 * // => [0, 1, 2, 3]
                 *
                 * _.range(-4);
                 * // => [0, -1, -2, -3]
                 *
                 * _.range(1, 5);
                 * // => [1, 2, 3, 4]
                 *
                 * _.range(0, 20, 5);
                 * // => [0, 5, 10, 15]
                 *
                 * _.range(0, -4, -1);
                 * // => [0, -1, -2, -3]
                 *
                 * _.range(1, 4, 0);
                 * // => [1, 1, 1]
                 *
                 * _.range(0);
                 * // => []
                 */
                var range = createRange();

                /**
                 * This method is like `_.range` except that it populates values in
                 * descending order.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} [step=1] The value to increment or decrement by.
                 * @returns {Array} Returns the range of numbers.
                 * @see _.inRange, _.range
                 * @example
                 *
                 * _.rangeRight(4);
                 * // => [3, 2, 1, 0]
                 *
                 * _.rangeRight(-4);
                 * // => [-3, -2, -1, 0]
                 *
                 * _.rangeRight(1, 5);
                 * // => [4, 3, 2, 1]
                 *
                 * _.rangeRight(0, 20, 5);
                 * // => [15, 10, 5, 0]
                 *
                 * _.rangeRight(0, -4, -1);
                 * // => [-3, -2, -1, 0]
                 *
                 * _.rangeRight(1, 4, 0);
                 * // => [1, 1, 1]
                 *
                 * _.rangeRight(0);
                 * // => []
                 */
                var rangeRight = createRange(true);

                /**
                 * This method returns a new empty array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {Array} Returns the new empty array.
                 * @example
                 *
                 * var arrays = _.times(2, _.stubArray);
                 *
                 * console.log(arrays);
                 * // => [[], []]
                 *
                 * console.log(arrays[0] === arrays[1]);
                 * // => false
                 */
                function stubArray() {
                  return [];
                }

                /**
                 * This method returns `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {boolean} Returns `false`.
                 * @example
                 *
                 * _.times(2, _.stubFalse);
                 * // => [false, false]
                 */
                function stubFalse() {
                  return false;
                }

                /**
                 * This method returns a new empty object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {Object} Returns the new empty object.
                 * @example
                 *
                 * var objects = _.times(2, _.stubObject);
                 *
                 * console.log(objects);
                 * // => [{}, {}]
                 *
                 * console.log(objects[0] === objects[1]);
                 * // => false
                 */
                function stubObject() {
                  return {};
                }

                /**
                 * This method returns an empty string.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {string} Returns the empty string.
                 * @example
                 *
                 * _.times(2, _.stubString);
                 * // => ['', '']
                 */
                function stubString() {
                  return '';
                }

                /**
                 * This method returns `true`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {boolean} Returns `true`.
                 * @example
                 *
                 * _.times(2, _.stubTrue);
                 * // => [true, true]
                 */
                function stubTrue() {
                  return true;
                }

                /**
                 * Invokes the iteratee `n` times, returning an array of the results of
                 * each invocation. The iteratee is invoked with one argument; (index).
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {number} n The number of times to invoke `iteratee`.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the array of results.
                 * @example
                 *
                 * _.times(3, String);
                 * // => ['0', '1', '2']
                 *
                 *  _.times(4, _.constant(0));
                 * // => [0, 0, 0, 0]
                 */
                function times(n, iteratee) {
                  n = toInteger(n);
                  if (n < 1 || n > MAX_SAFE_INTEGER) {
                    return [];
                  }
                  var index = MAX_ARRAY_LENGTH,
                      length = nativeMin(n, MAX_ARRAY_LENGTH);

                  iteratee = getIteratee(iteratee);
                  n -= MAX_ARRAY_LENGTH;

                  var result = baseTimes(length, iteratee);
                  while (++index < n) {
                    iteratee(index);
                  }
                  return result;
                }

                /**
                 * Converts `value` to a property path array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {*} value The value to convert.
                 * @returns {Array} Returns the new property path array.
                 * @example
                 *
                 * _.toPath('a.b.c');
                 * // => ['a', 'b', 'c']
                 *
                 * _.toPath('a[0].b.c');
                 * // => ['a', '0', 'b', 'c']
                 */
                function toPath(value) {
                  if (isArray(value)) {
                    return arrayMap(value, toKey);
                  }
                  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
                }

                /**
                 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {string} [prefix=''] The value to prefix the ID with.
                 * @returns {string} Returns the unique ID.
                 * @example
                 *
                 * _.uniqueId('contact_');
                 * // => 'contact_104'
                 *
                 * _.uniqueId();
                 * // => '105'
                 */
                function uniqueId(prefix) {
                  var id = ++idCounter;
                  return toString(prefix) + id;
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Adds two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.4.0
                 * @category Math
                 * @param {number} augend The first number in an addition.
                 * @param {number} addend The second number in an addition.
                 * @returns {number} Returns the total.
                 * @example
                 *
                 * _.add(6, 4);
                 * // => 10
                 */
                var add = createMathOperation(function(augend, addend) {
                  return augend + addend;
                }, 0);

                /**
                 * Computes `number` rounded up to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round up.
                 * @param {number} [precision=0] The precision to round up to.
                 * @returns {number} Returns the rounded up number.
                 * @example
                 *
                 * _.ceil(4.006);
                 * // => 5
                 *
                 * _.ceil(6.004, 2);
                 * // => 6.01
                 *
                 * _.ceil(6040, -2);
                 * // => 6100
                 */
                var ceil = createRound('ceil');

                /**
                 * Divide two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {number} dividend The first number in a division.
                 * @param {number} divisor The second number in a division.
                 * @returns {number} Returns the quotient.
                 * @example
                 *
                 * _.divide(6, 4);
                 * // => 1.5
                 */
                var divide = createMathOperation(function(dividend, divisor) {
                  return dividend / divisor;
                }, 1);

                /**
                 * Computes `number` rounded down to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round down.
                 * @param {number} [precision=0] The precision to round down to.
                 * @returns {number} Returns the rounded down number.
                 * @example
                 *
                 * _.floor(4.006);
                 * // => 4
                 *
                 * _.floor(0.046, 2);
                 * // => 0.04
                 *
                 * _.floor(4060, -2);
                 * // => 4000
                 */
                var floor = createRound('floor');

                /**
                 * Computes the maximum value of `array`. If `array` is empty or falsey,
                 * `undefined` is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {*} Returns the maximum value.
                 * @example
                 *
                 * _.max([4, 2, 8, 6]);
                 * // => 8
                 *
                 * _.max([]);
                 * // => undefined
                 */
                function max(array) {
                  return (array && array.length)
                    ? baseExtremum(array, identity, baseGt)
                    : undefined;
                }

                /**
                 * This method is like `_.max` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * the value is ranked. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {*} Returns the maximum value.
                 * @example
                 *
                 * var objects = [{ 'n': 1 }, { 'n': 2 }];
                 *
                 * _.maxBy(objects, function(o) { return o.n; });
                 * // => { 'n': 2 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.maxBy(objects, 'n');
                 * // => { 'n': 2 }
                 */
                function maxBy(array, iteratee) {
                  return (array && array.length)
                    ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                    : undefined;
                }

                /**
                 * Computes the mean of the values in `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {number} Returns the mean.
                 * @example
                 *
                 * _.mean([4, 2, 8, 6]);
                 * // => 5
                 */
                function mean(array) {
                  return baseMean(array, identity);
                }

                /**
                 * This method is like `_.mean` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the value to be averaged.
                 * The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the mean.
                 * @example
                 *
                 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                 *
                 * _.meanBy(objects, function(o) { return o.n; });
                 * // => 5
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.meanBy(objects, 'n');
                 * // => 5
                 */
                function meanBy(array, iteratee) {
                  return baseMean(array, getIteratee(iteratee, 2));
                }

                /**
                 * Computes the minimum value of `array`. If `array` is empty or falsey,
                 * `undefined` is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {*} Returns the minimum value.
                 * @example
                 *
                 * _.min([4, 2, 8, 6]);
                 * // => 2
                 *
                 * _.min([]);
                 * // => undefined
                 */
                function min(array) {
                  return (array && array.length)
                    ? baseExtremum(array, identity, baseLt)
                    : undefined;
                }

                /**
                 * This method is like `_.min` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * the value is ranked. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {*} Returns the minimum value.
                 * @example
                 *
                 * var objects = [{ 'n': 1 }, { 'n': 2 }];
                 *
                 * _.minBy(objects, function(o) { return o.n; });
                 * // => { 'n': 1 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.minBy(objects, 'n');
                 * // => { 'n': 1 }
                 */
                function minBy(array, iteratee) {
                  return (array && array.length)
                    ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                    : undefined;
                }

                /**
                 * Multiply two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {number} multiplier The first number in a multiplication.
                 * @param {number} multiplicand The second number in a multiplication.
                 * @returns {number} Returns the product.
                 * @example
                 *
                 * _.multiply(6, 4);
                 * // => 24
                 */
                var multiply = createMathOperation(function(multiplier, multiplicand) {
                  return multiplier * multiplicand;
                }, 1);

                /**
                 * Computes `number` rounded to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round.
                 * @param {number} [precision=0] The precision to round to.
                 * @returns {number} Returns the rounded number.
                 * @example
                 *
                 * _.round(4.006);
                 * // => 4
                 *
                 * _.round(4.006, 2);
                 * // => 4.01
                 *
                 * _.round(4060, -2);
                 * // => 4100
                 */
                var round = createRound('round');

                /**
                 * Subtract two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {number} minuend The first number in a subtraction.
                 * @param {number} subtrahend The second number in a subtraction.
                 * @returns {number} Returns the difference.
                 * @example
                 *
                 * _.subtract(6, 4);
                 * // => 2
                 */
                var subtract = createMathOperation(function(minuend, subtrahend) {
                  return minuend - subtrahend;
                }, 0);

                /**
                 * Computes the sum of the values in `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.4.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {number} Returns the sum.
                 * @example
                 *
                 * _.sum([4, 2, 8, 6]);
                 * // => 20
                 */
                function sum(array) {
                  return (array && array.length)
                    ? baseSum(array, identity)
                    : 0;
                }

                /**
                 * This method is like `_.sum` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the value to be summed.
                 * The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the sum.
                 * @example
                 *
                 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                 *
                 * _.sumBy(objects, function(o) { return o.n; });
                 * // => 20
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sumBy(objects, 'n');
                 * // => 20
                 */
                function sumBy(array, iteratee) {
                  return (array && array.length)
                    ? baseSum(array, getIteratee(iteratee, 2))
                    : 0;
                }

                /*------------------------------------------------------------------------*/

                // Add methods that return wrapped values in chain sequences.
                lodash.after = after;
                lodash.ary = ary;
                lodash.assign = assign;
                lodash.assignIn = assignIn;
                lodash.assignInWith = assignInWith;
                lodash.assignWith = assignWith;
                lodash.at = at;
                lodash.before = before;
                lodash.bind = bind;
                lodash.bindAll = bindAll;
                lodash.bindKey = bindKey;
                lodash.castArray = castArray;
                lodash.chain = chain;
                lodash.chunk = chunk;
                lodash.compact = compact;
                lodash.concat = concat;
                lodash.cond = cond;
                lodash.conforms = conforms;
                lodash.constant = constant;
                lodash.countBy = countBy;
                lodash.create = create;
                lodash.curry = curry;
                lodash.curryRight = curryRight;
                lodash.debounce = debounce;
                lodash.defaults = defaults;
                lodash.defaultsDeep = defaultsDeep;
                lodash.defer = defer;
                lodash.delay = delay;
                lodash.difference = difference;
                lodash.differenceBy = differenceBy;
                lodash.differenceWith = differenceWith;
                lodash.drop = drop;
                lodash.dropRight = dropRight;
                lodash.dropRightWhile = dropRightWhile;
                lodash.dropWhile = dropWhile;
                lodash.fill = fill;
                lodash.filter = filter;
                lodash.flatMap = flatMap;
                lodash.flatMapDeep = flatMapDeep;
                lodash.flatMapDepth = flatMapDepth;
                lodash.flatten = flatten;
                lodash.flattenDeep = flattenDeep;
                lodash.flattenDepth = flattenDepth;
                lodash.flip = flip;
                lodash.flow = flow;
                lodash.flowRight = flowRight;
                lodash.fromPairs = fromPairs;
                lodash.functions = functions;
                lodash.functionsIn = functionsIn;
                lodash.groupBy = groupBy;
                lodash.initial = initial;
                lodash.intersection = intersection;
                lodash.intersectionBy = intersectionBy;
                lodash.intersectionWith = intersectionWith;
                lodash.invert = invert;
                lodash.invertBy = invertBy;
                lodash.invokeMap = invokeMap;
                lodash.iteratee = iteratee;
                lodash.keyBy = keyBy;
                lodash.keys = keys;
                lodash.keysIn = keysIn;
                lodash.map = map;
                lodash.mapKeys = mapKeys;
                lodash.mapValues = mapValues;
                lodash.matches = matches;
                lodash.matchesProperty = matchesProperty;
                lodash.memoize = memoize;
                lodash.merge = merge;
                lodash.mergeWith = mergeWith;
                lodash.method = method;
                lodash.methodOf = methodOf;
                lodash.mixin = mixin;
                lodash.negate = negate;
                lodash.nthArg = nthArg;
                lodash.omit = omit;
                lodash.omitBy = omitBy;
                lodash.once = once;
                lodash.orderBy = orderBy;
                lodash.over = over;
                lodash.overArgs = overArgs;
                lodash.overEvery = overEvery;
                lodash.overSome = overSome;
                lodash.partial = partial;
                lodash.partialRight = partialRight;
                lodash.partition = partition;
                lodash.pick = pick;
                lodash.pickBy = pickBy;
                lodash.property = property;
                lodash.propertyOf = propertyOf;
                lodash.pull = pull;
                lodash.pullAll = pullAll;
                lodash.pullAllBy = pullAllBy;
                lodash.pullAllWith = pullAllWith;
                lodash.pullAt = pullAt;
                lodash.range = range;
                lodash.rangeRight = rangeRight;
                lodash.rearg = rearg;
                lodash.reject = reject;
                lodash.remove = remove;
                lodash.rest = rest;
                lodash.reverse = reverse;
                lodash.sampleSize = sampleSize;
                lodash.set = set;
                lodash.setWith = setWith;
                lodash.shuffle = shuffle;
                lodash.slice = slice;
                lodash.sortBy = sortBy;
                lodash.sortedUniq = sortedUniq;
                lodash.sortedUniqBy = sortedUniqBy;
                lodash.split = split;
                lodash.spread = spread;
                lodash.tail = tail;
                lodash.take = take;
                lodash.takeRight = takeRight;
                lodash.takeRightWhile = takeRightWhile;
                lodash.takeWhile = takeWhile;
                lodash.tap = tap;
                lodash.throttle = throttle;
                lodash.thru = thru;
                lodash.toArray = toArray;
                lodash.toPairs = toPairs;
                lodash.toPairsIn = toPairsIn;
                lodash.toPath = toPath;
                lodash.toPlainObject = toPlainObject;
                lodash.transform = transform;
                lodash.unary = unary;
                lodash.union = union;
                lodash.unionBy = unionBy;
                lodash.unionWith = unionWith;
                lodash.uniq = uniq;
                lodash.uniqBy = uniqBy;
                lodash.uniqWith = uniqWith;
                lodash.unset = unset;
                lodash.unzip = unzip;
                lodash.unzipWith = unzipWith;
                lodash.update = update;
                lodash.updateWith = updateWith;
                lodash.values = values;
                lodash.valuesIn = valuesIn;
                lodash.without = without;
                lodash.words = words;
                lodash.wrap = wrap;
                lodash.xor = xor;
                lodash.xorBy = xorBy;
                lodash.xorWith = xorWith;
                lodash.zip = zip;
                lodash.zipObject = zipObject;
                lodash.zipObjectDeep = zipObjectDeep;
                lodash.zipWith = zipWith;

                // Add aliases.
                lodash.entries = toPairs;
                lodash.entriesIn = toPairsIn;
                lodash.extend = assignIn;
                lodash.extendWith = assignInWith;

                // Add methods to `lodash.prototype`.
                mixin(lodash, lodash);

                /*------------------------------------------------------------------------*/

                // Add methods that return unwrapped values in chain sequences.
                lodash.add = add;
                lodash.attempt = attempt;
                lodash.camelCase = camelCase;
                lodash.capitalize = capitalize;
                lodash.ceil = ceil;
                lodash.clamp = clamp;
                lodash.clone = clone;
                lodash.cloneDeep = cloneDeep;
                lodash.cloneDeepWith = cloneDeepWith;
                lodash.cloneWith = cloneWith;
                lodash.conformsTo = conformsTo;
                lodash.deburr = deburr;
                lodash.defaultTo = defaultTo;
                lodash.divide = divide;
                lodash.endsWith = endsWith;
                lodash.eq = eq;
                lodash.escape = escape;
                lodash.escapeRegExp = escapeRegExp;
                lodash.every = every;
                lodash.find = find;
                lodash.findIndex = findIndex;
                lodash.findKey = findKey;
                lodash.findLast = findLast;
                lodash.findLastIndex = findLastIndex;
                lodash.findLastKey = findLastKey;
                lodash.floor = floor;
                lodash.forEach = forEach;
                lodash.forEachRight = forEachRight;
                lodash.forIn = forIn;
                lodash.forInRight = forInRight;
                lodash.forOwn = forOwn;
                lodash.forOwnRight = forOwnRight;
                lodash.get = get;
                lodash.gt = gt;
                lodash.gte = gte;
                lodash.has = has;
                lodash.hasIn = hasIn;
                lodash.head = head;
                lodash.identity = identity;
                lodash.includes = includes;
                lodash.indexOf = indexOf;
                lodash.inRange = inRange;
                lodash.invoke = invoke;
                lodash.isArguments = isArguments;
                lodash.isArray = isArray;
                lodash.isArrayBuffer = isArrayBuffer;
                lodash.isArrayLike = isArrayLike;
                lodash.isArrayLikeObject = isArrayLikeObject;
                lodash.isBoolean = isBoolean;
                lodash.isBuffer = isBuffer;
                lodash.isDate = isDate;
                lodash.isElement = isElement;
                lodash.isEmpty = isEmpty;
                lodash.isEqual = isEqual;
                lodash.isEqualWith = isEqualWith;
                lodash.isError = isError;
                lodash.isFinite = isFinite;
                lodash.isFunction = isFunction;
                lodash.isInteger = isInteger;
                lodash.isLength = isLength;
                lodash.isMap = isMap;
                lodash.isMatch = isMatch;
                lodash.isMatchWith = isMatchWith;
                lodash.isNaN = isNaN;
                lodash.isNative = isNative;
                lodash.isNil = isNil;
                lodash.isNull = isNull;
                lodash.isNumber = isNumber;
                lodash.isObject = isObject;
                lodash.isObjectLike = isObjectLike;
                lodash.isPlainObject = isPlainObject;
                lodash.isRegExp = isRegExp;
                lodash.isSafeInteger = isSafeInteger;
                lodash.isSet = isSet;
                lodash.isString = isString;
                lodash.isSymbol = isSymbol;
                lodash.isTypedArray = isTypedArray;
                lodash.isUndefined = isUndefined;
                lodash.isWeakMap = isWeakMap;
                lodash.isWeakSet = isWeakSet;
                lodash.join = join;
                lodash.kebabCase = kebabCase;
                lodash.last = last;
                lodash.lastIndexOf = lastIndexOf;
                lodash.lowerCase = lowerCase;
                lodash.lowerFirst = lowerFirst;
                lodash.lt = lt;
                lodash.lte = lte;
                lodash.max = max;
                lodash.maxBy = maxBy;
                lodash.mean = mean;
                lodash.meanBy = meanBy;
                lodash.min = min;
                lodash.minBy = minBy;
                lodash.stubArray = stubArray;
                lodash.stubFalse = stubFalse;
                lodash.stubObject = stubObject;
                lodash.stubString = stubString;
                lodash.stubTrue = stubTrue;
                lodash.multiply = multiply;
                lodash.nth = nth;
                lodash.noConflict = noConflict;
                lodash.noop = noop;
                lodash.now = now;
                lodash.pad = pad;
                lodash.padEnd = padEnd;
                lodash.padStart = padStart;
                lodash.parseInt = parseInt;
                lodash.random = random;
                lodash.reduce = reduce;
                lodash.reduceRight = reduceRight;
                lodash.repeat = repeat;
                lodash.replace = replace;
                lodash.result = result;
                lodash.round = round;
                lodash.runInContext = runInContext;
                lodash.sample = sample;
                lodash.size = size;
                lodash.snakeCase = snakeCase;
                lodash.some = some;
                lodash.sortedIndex = sortedIndex;
                lodash.sortedIndexBy = sortedIndexBy;
                lodash.sortedIndexOf = sortedIndexOf;
                lodash.sortedLastIndex = sortedLastIndex;
                lodash.sortedLastIndexBy = sortedLastIndexBy;
                lodash.sortedLastIndexOf = sortedLastIndexOf;
                lodash.startCase = startCase;
                lodash.startsWith = startsWith;
                lodash.subtract = subtract;
                lodash.sum = sum;
                lodash.sumBy = sumBy;
                lodash.template = template;
                lodash.times = times;
                lodash.toFinite = toFinite;
                lodash.toInteger = toInteger;
                lodash.toLength = toLength;
                lodash.toLower = toLower;
                lodash.toNumber = toNumber;
                lodash.toSafeInteger = toSafeInteger;
                lodash.toString = toString;
                lodash.toUpper = toUpper;
                lodash.trim = trim;
                lodash.trimEnd = trimEnd;
                lodash.trimStart = trimStart;
                lodash.truncate = truncate;
                lodash.unescape = unescape;
                lodash.uniqueId = uniqueId;
                lodash.upperCase = upperCase;
                lodash.upperFirst = upperFirst;

                // Add aliases.
                lodash.each = forEach;
                lodash.eachRight = forEachRight;
                lodash.first = head;

                mixin(lodash, (function() {
                  var source = {};
                  baseForOwn(lodash, function(func, methodName) {
                    if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                      source[methodName] = func;
                    }
                  });
                  return source;
                }()), { 'chain': false });

                /*------------------------------------------------------------------------*/

                /**
                 * The semantic version number.
                 *
                 * @static
                 * @memberOf _
                 * @type {string}
                 */
                lodash.VERSION = VERSION;

                // Assign default placeholders.
                arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
                  lodash[methodName].placeholder = lodash;
                });

                // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
                arrayEach(['drop', 'take'], function(methodName, index) {
                  LazyWrapper.prototype[methodName] = function(n) {
                    n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                    var result = (this.__filtered__ && !index)
                      ? new LazyWrapper(this)
                      : this.clone();

                    if (result.__filtered__) {
                      result.__takeCount__ = nativeMin(n, result.__takeCount__);
                    } else {
                      result.__views__.push({
                        'size': nativeMin(n, MAX_ARRAY_LENGTH),
                        'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                      });
                    }
                    return result;
                  };

                  LazyWrapper.prototype[methodName + 'Right'] = function(n) {
                    return this.reverse()[methodName](n).reverse();
                  };
                });

                // Add `LazyWrapper` methods that accept an `iteratee` value.
                arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
                  var type = index + 1,
                      isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                  LazyWrapper.prototype[methodName] = function(iteratee) {
                    var result = this.clone();
                    result.__iteratees__.push({
                      'iteratee': getIteratee(iteratee, 3),
                      'type': type
                    });
                    result.__filtered__ = result.__filtered__ || isFilter;
                    return result;
                  };
                });

                // Add `LazyWrapper` methods for `_.head` and `_.last`.
                arrayEach(['head', 'last'], function(methodName, index) {
                  var takeName = 'take' + (index ? 'Right' : '');

                  LazyWrapper.prototype[methodName] = function() {
                    return this[takeName](1).value()[0];
                  };
                });

                // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
                arrayEach(['initial', 'tail'], function(methodName, index) {
                  var dropName = 'drop' + (index ? '' : 'Right');

                  LazyWrapper.prototype[methodName] = function() {
                    return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
                  };
                });

                LazyWrapper.prototype.compact = function() {
                  return this.filter(identity);
                };

                LazyWrapper.prototype.find = function(predicate) {
                  return this.filter(predicate).head();
                };

                LazyWrapper.prototype.findLast = function(predicate) {
                  return this.reverse().find(predicate);
                };

                LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
                  if (typeof path == 'function') {
                    return new LazyWrapper(this);
                  }
                  return this.map(function(value) {
                    return baseInvoke(value, path, args);
                  });
                });

                LazyWrapper.prototype.reject = function(predicate) {
                  return this.filter(negate(getIteratee(predicate)));
                };

                LazyWrapper.prototype.slice = function(start, end) {
                  start = toInteger(start);

                  var result = this;
                  if (result.__filtered__ && (start > 0 || end < 0)) {
                    return new LazyWrapper(result);
                  }
                  if (start < 0) {
                    result = result.takeRight(-start);
                  } else if (start) {
                    result = result.drop(start);
                  }
                  if (end !== undefined) {
                    end = toInteger(end);
                    result = end < 0 ? result.dropRight(-end) : result.take(end - start);
                  }
                  return result;
                };

                LazyWrapper.prototype.takeRightWhile = function(predicate) {
                  return this.reverse().takeWhile(predicate).reverse();
                };

                LazyWrapper.prototype.toArray = function() {
                  return this.take(MAX_ARRAY_LENGTH);
                };

                // Add `LazyWrapper` methods to `lodash.prototype`.
                baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                  var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
                      isTaker = /^(?:head|last)$/.test(methodName),
                      lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
                      retUnwrapped = isTaker || /^find/.test(methodName);

                  if (!lodashFunc) {
                    return;
                  }
                  lodash.prototype[methodName] = function() {
                    var value = this.__wrapped__,
                        args = isTaker ? [1] : arguments,
                        isLazy = value instanceof LazyWrapper,
                        iteratee = args[0],
                        useLazy = isLazy || isArray(value);

                    var interceptor = function(value) {
                      var result = lodashFunc.apply(lodash, arrayPush([value], args));
                      return (isTaker && chainAll) ? result[0] : result;
                    };

                    if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                      // Avoid lazy use if the iteratee has a "length" value other than `1`.
                      isLazy = useLazy = false;
                    }
                    var chainAll = this.__chain__,
                        isHybrid = !!this.__actions__.length,
                        isUnwrapped = retUnwrapped && !chainAll,
                        onlyLazy = isLazy && !isHybrid;

                    if (!retUnwrapped && useLazy) {
                      value = onlyLazy ? value : new LazyWrapper(this);
                      var result = func.apply(value, args);
                      result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
                      return new LodashWrapper(result, chainAll);
                    }
                    if (isUnwrapped && onlyLazy) {
                      return func.apply(this, args);
                    }
                    result = this.thru(interceptor);
                    return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
                  };
                });

                // Add `Array` methods to `lodash.prototype`.
                arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
                  var func = arrayProto[methodName],
                      chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
                      retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                  lodash.prototype[methodName] = function() {
                    var args = arguments;
                    if (retUnwrapped && !this.__chain__) {
                      var value = this.value();
                      return func.apply(isArray(value) ? value : [], args);
                    }
                    return this[chainName](function(value) {
                      return func.apply(isArray(value) ? value : [], args);
                    });
                  };
                });

                // Map minified method names to their real names.
                baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                  var lodashFunc = lodash[methodName];
                  if (lodashFunc) {
                    var key = (lodashFunc.name + ''),
                        names = realNames[key] || (realNames[key] = []);

                    names.push({ 'name': methodName, 'func': lodashFunc });
                  }
                });

                realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
                  'name': 'wrapper',
                  'func': undefined
                }];

                // Add methods to `LazyWrapper`.
                LazyWrapper.prototype.clone = lazyClone;
                LazyWrapper.prototype.reverse = lazyReverse;
                LazyWrapper.prototype.value = lazyValue;

                // Add chain sequence methods to the `lodash` wrapper.
                lodash.prototype.at = wrapperAt;
                lodash.prototype.chain = wrapperChain;
                lodash.prototype.commit = wrapperCommit;
                lodash.prototype.next = wrapperNext;
                lodash.prototype.plant = wrapperPlant;
                lodash.prototype.reverse = wrapperReverse;
                lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

                // Add lazy aliases.
                lodash.prototype.first = lodash.prototype.head;

                if (symIterator) {
                  lodash.prototype[symIterator] = wrapperToIterator;
                }
                return lodash;
              });

              /*--------------------------------------------------------------------------*/

              // Export lodash.
              var _ = runInContext();

              // Some AMD build optimizers, like r.js, check for condition patterns like:
              if (freeModule) {
                // Export for Node.js.
                (freeModule.exports = _)._ = _;
                // Export for CommonJS support.
                freeExports._ = _;
              }
              else {
                // Export to the global object.
                root._ = _;
              }
            }.call(commonjsGlobal));
            });

            var __dirname = '/Users/yawjosephetse/Developer/github/repetere/modelscript/node_modules/csvtojson/libs/core';

            var empty = {};

            var empty$1 = /*#__PURE__*/Object.freeze({
                        default: empty
            });

            var fs = ( empty$1 && empty ) || empty$1;

            var workerMgr_1 = workerMgr;
            var eom = "\x03";
            var eom1 = "\x0e";
            var eom2 = "\x0f";

            function workerMgr() {
              var spawn = fs.spawn;
              var exports = {
                initWorker: initWorker,
                sendWorker: sendWorker,
                setParams: setParams,
                drain: function(){},
                isRunning: isRunning,
                destroyWorker: destroyWorker
              };
              var workers = [];
              var running = 0;
              var waiting = null;
              function initWorker(num, params) {
                workers = [];
                running = 0;
                waiting = null;
                for (var i = 0; i < num; i++) {
                  workers.push(new Worker(params));
                }

              }
              function isRunning() {
                return running > 0;
              }
              function destroyWorker() {
                workers.forEach(function(w) {
                  w.destroy();
                });
              }

              function sendWorker(data, startIdx, transformCb, cbResult) {
                if (workers.length > 0) {
                  var worker = workers.shift();
                  running++;
                  worker.parse(data, startIdx, function(result) {
                    // var arr=JSON.parse(result);
                    // arr.forEach(function(item){
                    //   console.log('idx',item.index)
                    // })
                    workers.push(worker);
                    cbResult(result, startIdx);
                    running--;
                    if (waiting === null && running === 0) {
                      exports.drain();
                    } else if (waiting) {
                      sendWorker.apply(this, waiting);
                      waiting = null;
                    }
                  });
                  nextTick(transformCb);
                } else {
                  waiting = [data, startIdx, transformCb, cbResult];
                }
              }

              function setParams(params) {
                workers.forEach(function(w) {
                  w.setParams(params);
                });
              }
              return exports;
            }

            function Worker(params) {
              var spawn = fs.spawn;
              this.cp = spawn(process.execPath, [__dirname + "/worker.js"], {
                env: {
                  child:true
                },
                stdio:['pipe', 'pipe', 2, 'ipc']
                // stdio:[0,1,2,'ipc']
              });
              this.setParams(params);
              this.cp.on("message", this.onChildMsg.bind(this));
              this.buffer = "";
              var self = this;
              this.cp.stdout.on("data", function(d) {
                var str = d.toString("utf8");
                var all = self.buffer + str;
                var cmdArr = all.split(eom);
                while (cmdArr.length > 1) {
                  self.onChildMsg(cmdArr.shift());
                }
                self.buffer = cmdArr[0];
              });
            }

            Worker.prototype.setParams = function(params) {
              var msg = "0" + JSON.stringify(params);
              this.sendMsg(msg);
            };

            /**
             * msg is like:
             * <cmd><data>
             * cmd is from 0-9
             */
            Worker.prototype.onChildMsg = function(msg) {
              if (msg) {
                var cmd = msg[0];
                var data = msg.substr(1);
                switch (cmd) {
                  case "0": //total line number of current chunk
                    if (this.cbLine) {
                      var sp = data.split("|");
                      var len = parseInt(sp[0]);
                      var partial = sp[1];
                      this.cbLine(len, partial);
                    }
                    break;
                  case "1": // json array of current chunk
                    if (this.cbResult) {
                      var rows = data.split(eom1);
                      rows.pop();
                      var res = [];
                      rows.forEach(function(row) {
                        var sp = row.split(eom2);
                        res.push({
                          index: sp[0],
                          row: sp[1],
                          err: sp[2] ? CSVError_1.fromArray(JSON.parse(sp[2])) : null,
                          json: sp[3]
                        });
                      });
                      this.cbResult(res);
                    }
                    break;
                }
              }
            };

            Worker.prototype.parse = function(data, startIdx, cbResult) {
              this.cbResult = cbResult;
              var msg = "1" + startIdx + "|" + data;
              this.sendMsg(msg);
            };

            Worker.prototype.destroy = function() {
              this.cp.kill();
            };

            Worker.prototype.sendMsg = function(msg) {
              this.cp.stdin.write(msg + eom, "utf8");
              // this.cp.send(msg)
            };

            var Transform$2 = require$$0.Transform;


            var eol$1 = require$$0$1.EOL;
            // var Processor = require("./Processor.js");





            var workerMgr$1 = null;


            function Converter(params, options) {
              Transform$2.call(this, options);
              this._options = options || {};
              this.param = defParam(params);
              this.param._options = this._options;
              // this.resultObject = new Result(this);
              // this.pipe(this.resultObject); // it is important to have downstream for a transform otherwise it will stuck
              this.started = false;//indicate if parsing has started.
              this.recordNum = 0;
              this.lineNumber = 0; //file line number
              this._csvLineBuffer = "";
              this.lastIndex = 0; // index in result json array
              //this._pipe(this.lineParser).pipe(this.processor);
              // this.initNoFork();
              if (this.param.forked) {
                this.param.forked = false;
                this.workerNum = 2;
              }
              this.flushCb = null;
              this.processEnd = false;
              this.sequenceBuffer = [];
              this._needJson = null;
              this._needEmitResult = null;
              this._needEmitFinalResult = null;
              this._needEmitHeader = null;
              this._needEmitJson = null;
              this._needPush = null;
              this._needEmitCsv = null;
              this._csvTransf = null;
              this.finalResult = [];
              // this.on("data", function() {});
              this.on("error", emitDone(this));
              this.on("end", emitDone(this));
              this.initWorker();
              nextTick(function () {
                if (this._needEmitFinalResult === null) {
                  this._needEmitFinalResult = this.listeners("end_parsed").length > 0;
                }
                if (this._needEmitResult === null) {
                  this._needEmitResult = this.listeners("record_parsed").length > 0;
                }
                if (this._needEmitJson === null) {
                  this._needEmitJson = this.listeners("json").length > 0;
                }
                if (this._needEmitHeader === null) {
                  this._needEmitHeader = this.listeners("header").length > 0;
                }
                if (this._needEmitCsv === null) {
                  this._needEmitCsv = this.listeners("csv").length > 0;
                }
                if (this._needJson === null) {
                  this._needJson = this._needEmitJson || this._needEmitFinalResult || this._needEmitResult || this.transform || this._options.objectMode;
                }
                if (this._needPush === null) {
                  this._needPush = this.listeners("data").length > 0 || this.listeners("readable").length > 0;
                  // this._needPush=false;
                }
                this.param._needParseJson = this._needJson || this._needPush;
              }.bind(this));

              return this;
            }

            util$2.inherits(Converter, Transform$2);
            function emitDone(conv) {
              return function (err) {
                if (!conv._hasDone) {
                  conv._hasDone = true;
                  nextTick(function () {
                    conv.emit('done', err);
                  });
                }  }
            }


            function bufFromString(str) {
              var length=Buffer.byteLength(str);
              var buffer = Buffer.allocUnsafe
                ? Buffer.allocUnsafe(length)
                : new Buffer(length);
              buffer.write(str);
              return buffer;
            }

            Converter.prototype._transform = function (data, encoding, cb) {
              data=this.prepareData(data);
              var idx =data.length-1;
              var left=null;
              /**
               * From Keyang:
               * The code below is to check if a single utf8 char (which could be multiple bytes) being split.
               * If the char being split, the buffer from two chunk needs to be concat
               * check how utf8 being encoded to understand the code below. 
               * If anyone has any better way to do this, please let me know.
               */
              if ((data[idx] & 1<<7) !=0){
                while ((data[idx] & 3<<6) === 128){
                  idx--;
                }
                idx--;
              }
              if (idx !=data.length-1){
                left=data.slice(idx+1);
                data=data.slice(0,idx+1);
                var _cb=cb;
                var self=this;
                cb=function(){
                  if (self._csvLineBuffer){
                    self._csvLineBuffer=Buffer.concat([bufFromString(self._csvLineBuffer,"utf8"),left]);
                  }else{
                    self._csvLineBuffer=left;
                  }
                  _cb();
                };
              }
              data = data.toString("utf8");
              if (this.started === false) {
                this.started = true;
                data = stripBom_1(data);
                if (this.param.toArrayString) {
                  if (this._needPush) {
                    this.push("[" + eol$1, "utf8");
                  }
                }
              }
              var self = this;
              this.preProcessRaw(data, function (d) {
                if (d && d.length > 0) {
                  self.processData(d, cb);
                } else {
                  cb();
                }
              });
            };

            Converter.prototype.prepareData = function (data) {
              if (this._csvLineBuffer && this._csvLineBuffer.length>0){
                if (typeof this._csvLineBuffer === "string"){
                  this._csvLineBuffer=bufFromString(this._csvLineBuffer);
                }
                return Buffer.concat([this._csvLineBuffer,data]);
              }else{
                return data;
              }
              // return this._csvLineBuffer + data;
            };

            Converter.prototype.setPartialData = function (d) {
              this._csvLineBuffer = d;
            };

            Converter.prototype.processData = function (data, cb) {
              var params = this.param;
              if (params.ignoreEmpty && !params._headers) {
                data = data.trimLeft();
              }
              var fileLines = fileline(data, this.param);
              if (fileLines.lines.length > 0) {
                if (this.preProcessLine && typeof this.preProcessLine === "function") {
                  fileLines.lines = this._preProcessLines(fileLines.lines, this.lastIndex);
                }
                if (!params._headers) { //header is not inited. init header
                  this.processHead(fileLines, cb);
                } else {
                  if (params.workerNum <= 1) {
                    var lines = fileLineToCSVLine(fileLines, params);
                    this.setPartialData(lines.partial);
                    var jsonArr = linesToJson(lines.lines, params, this.recordNum);
                    this.processResult(jsonArr);
                    this.lastIndex += jsonArr.length;
                    this.recordNum += jsonArr.length;
                    cb();
                  } else {
                    this.workerProcess(fileLines, cb);
                  }
                }
              } else {
                this.setPartialData(fileLines.partial);
                cb();
              }
            };

            Converter.prototype._preProcessLines = function (lines, startIdx) {
              var rtn = [];
              for (var i = 0, len = lines.length; i < len; i++) {
                var result = this.preProcessLine(lines[i], startIdx + i + 1);
                if (typeof result === "string") {
                  rtn.push(result);
                } else {
                  rtn.push(lines[i]);
                  this.emit("error", new Error("preProcessLine should return a string but got: " + JSON.stringify(result)));
                }
              }
              return rtn;
            };

            Converter.prototype.initWorker = function () {
              var workerNum = this.param.workerNum - 1;
              if (workerNum > 0) {
                workerMgr$1 = workerMgr_1;
                this.workerMgr = workerMgr$1();
                this.workerMgr.initWorker(workerNum, this.param);
              }
            };

            Converter.prototype.preRawData = function (func) {
              this.preProcessRaw = func;
              return this;
            };

            Converter.prototype.preFileLine = function (func) {
              this.preProcessLine = func;
              return this;
            };

            /**
             * workerpRocess does not support embeded multiple lines.
             */
            Converter.prototype.workerProcess = function (fileLine, cb) {
              var self = this;
              var line = fileLine;
              var eol = this.getEol();
              this.setPartialData(line.partial);
              this.workerMgr.sendWorker(line.lines.join(eol) + eol, this.lastIndex, cb, function (results, lastIndex) {
                var buf;
                var cur = self.sequenceBuffer[0];
                if (cur.idx === lastIndex) {
                  cur.result = results;
                  var records = [];
                  while (self.sequenceBuffer[0] && self.sequenceBuffer[0].result) {
                    buf = self.sequenceBuffer.shift();
                    records = records.concat(buf.result);
                  }
                  self.processResult(records);
                  self.recordNum += records.length;
                } else {
                  for (var i = 0, len = self.sequenceBuffer.length; i < len; i++) {
                    buf = self.sequenceBuffer[i];
                    if (buf.idx === lastIndex) {
                      buf.result = results;
                      break;
                    }
                  }
                }
              });
              this.sequenceBuffer.push({
                idx: this.lastIndex,
                result: null
              });
              this.lastIndex += line.lines.length;
            };

            Converter.prototype.processHead = function (fileLine, cb) {
              var params = this.param;
              if (params._headers) {
                return cb();
              }
              //dirty hack
              params._needFilterRow = false;
              // if header is not inited. init header
              var lines = fileLine.lines;
              var left = "";
              var headerRow = [];
              if (!params.noheader) {
                while (lines.length) {
                  var line = left + lines.shift();
                  var row = rowSplit(line, params);
                  if (row.closed) {
                    headerRow = row.cols;
                    left = "";
                    break;
                  } else {
                    left = line + this.getEol();
                  }
                }
              }
              params._needFilterRow = true;
              if (!params.noheader && headerRow.length === 0) { //if one chunk of data does not complete header row.
                this.setPartialData(left);
                return cb();
              }
              if (params.noheader) {
                if (params.headers) {
                  params._headers = params.headers;
                } else {
                  params._headers = [];
                }
              } else {
                if (params.headers) {
                  params._headers = params.headers;
                } else {
                  params._headers = headerRow;
                }
              }
              configIgnoreIncludeColumns(params);
              params._headers = filterRow(params._headers, params);
              if (this._needEmitHeader && this.param._headers) {
                this.emit("header", this.param._headers);
              }
              var lines = fileLineToCSVLine(fileLine, params);
              this.setPartialData(lines.partial);
              if (this.param.workerNum > 1) {
                this.workerMgr.setParams(params);
              }
              var res = linesToJson(lines.lines, params, 0);
              // Put the header with the first row
              // if(res.length > 0) res[0].header = params._headers;
              this.processResult(res);
              this.lastIndex += res.length;
              this.recordNum += res.length;

              cb();
            };
            function configIgnoreIncludeColumns(params) {
              if (params._postIgnoreColumns) {
                for (var i = 0; i < params.ignoreColumns.length; i++) {
                  var ignoreCol = params.ignoreColumns[i];
                  if (typeof ignoreCol === "string") {
                    var idx = params._headers.indexOf(ignoreCol);
                    if (idx > -1) {
                      params.ignoreColumns[i] = idx;
                    } else {
                      params.ignoreColumns[i] = -1;
                    }
                  }
                }
                params.ignoreColumns.sort(function (a, b) { return b - a; });
              }
              if (params._postIncludeColumns) {
                for (var i = 0; i < params.includeColumns.length; i++) {
                  var includeCol = params.includeColumns[i];
                  if (typeof includeCol === "string") {
                    var idx = params._headers.indexOf(includeCol);
                    if (idx > -1) {
                      params.includeColumns[i] = idx;
                    } else {
                      params.includeColumns[i] = -1;
                    }
                  }
                }
              }
              params.ignoreColumns = lodash.uniq(params.ignoreColumns);
              params.includeColumns = lodash.uniq(params.includeColumns);
            }

            Converter.prototype.processResult = function (result) {
              for (var i = 0, len = result.length; i < len; i++) {
                var r = result[i];
                if (r.err) {
                  this.emit("error", r.err);
                } else {
                  this.emitResult(r);
                }
              }
            };

            Converter.prototype.emitResult = function (r) {
              var index = r.index;
              var header = this.param;
              var row = r.row;
              var result = r.json;
              var resultJson = null;
              var resultStr = null;
              if (typeof result === "string") {
                resultStr = result;
              } else {
                resultJson = result;
              }
              if (resultJson === null && this._needJson) {
                resultJson = JSON.parse(resultStr);
                if (typeof row === "string") {
                  row = JSON.parse(row);
                }
              }
              if (this.transform && typeof this.transform === "function") {
                this.transform(resultJson, row, index);
                resultStr = null;
              }
              if (this._needEmitJson) {
                this.emit("json", resultJson, index);
              }
              if (this._needEmitCsv) {
                if (typeof row === "string") {
                  row = JSON.parse(row);
                }
                this.emit("csv", row, index);
              }
              if (this.param.constructResult && this._needEmitFinalResult) {
                this.finalResult.push(resultJson);
              }
              if (this._needEmitResult) {
                this.emit("record_parsed", resultJson, row, index);
              }
              if (this.param.toArrayString && index > 0 && this._needPush) {
                this.push("," + eol$1);
              }
              if (this._options && this._options.objectMode) {
                this.push(resultJson);
              } else {
                if (this._needPush) {
                  if (resultStr === null) {
                    resultStr = JSON.stringify(resultJson);
                  }
                  this.push(!this.param.toArrayString ? resultStr + eol$1 : resultStr, "utf8");
                }
              }
            };

            Converter.prototype.preProcessRaw = function (data, cb) {
              cb(data);
            };

            // FIXME: lineNumber is not used.
            Converter.prototype.preProcessLine = function (line, lineNumber) {
              return line;
            };

            Converter.prototype._flush = function (cb) {
              var self = this;
              this.flushCb = function () {
                self.emit("end_parsed", self.finalResult);
                if (self.workerMgr) {
                  self.workerMgr.destroyWorker();
                }
                cb();
                if (!self._needPush) {
                  self.emit("end");
                }
              };
              if (this._csvLineBuffer.length > 0) {
                var eol = this.getEol();
                if (this._csvLineBuffer[this._csvLineBuffer.length - 1] !== eol) {
                  this._csvLineBuffer += eol;
                }
                this.processData(this._csvLineBuffer, function () {
                  this.checkAndFlush();
                }.bind(this));
              } else {
                this.checkAndFlush();
              }
              return;
            };

            Converter.prototype.checkAndFlush = function () {
              if (this._csvLineBuffer.length !== 0) {
                this.emit("error", CSVError_1.unclosed_quote(this.recordNum, this._csvLineBuffer), this._csvLineBuffer);
              }
              if (this.param.toArrayString && this._needPush) {
                this.push(eol$1 + "]", "utf8");
              }
              if (this.workerMgr && this.workerMgr.isRunning()) {
                this.workerMgr.drain = function () {
                  this.flushCb();
                }.bind(this);
              } else {
                this.flushCb();
              }
            };

            Converter.prototype.getEol = function (data) {
              if (!this.param.eol && data) {
                for (var i = 0, len = data.length; i < len; i++) {
                  if (data[i] === "\r") {
                    if (data[i + 1] === "\n") {
                      this.param.eol = "\r\n";
                    } else {
                      this.param.eol = "\r";
                    }
                    return this.param.eol;
                  } else if (data[i] === "\n") {
                    this.param.eol = "\n";
                    return this.param.eol;
                  }
                }
                this.param.eol = eol$1;
              }

              return this.param.eol || eol$1;
            };

            Converter.prototype.fromFile = function (filePath, cb, options) {
              var fs$$1 = fs;
              var rs = null;
              if (typeof cb ==="object" && typeof options === "undefined"){
                options=cb;
                cb=null;
              }
              this.wrapCallback(cb, function () {
                if (rs && rs.destroy) {
                  rs.destroy();
                }
              });
              fs$$1.exists(filePath, function (exist) {
                if (exist) {
                  rs = fs$$1.createReadStream(filePath,options);
                  rs.pipe(this);
                } else {
                  this.emit('error', new Error("File not exists"));
                }
              }.bind(this));
              return this;
            };

            Converter.prototype.fromStream = function (readStream, cb) {
              if (cb && typeof cb === "function") {
                this.wrapCallback(cb);
              }
              readStream.pipe(this);
              return this;
            };

            Converter.prototype.transf = function (func) {
              this.transform = func;
              return this;
            };

            Converter.prototype.fromString = function (csvString, cb) {
              if (typeof csvString !== "string") {
                if (cb && typeof cb ==="function"){
                  return cb(new Error("Passed CSV Data is not a string."));
                }
              }
              if (cb && typeof cb === "function") {
                this.wrapCallback(cb, function () {
                });
              }
              nextTick(function () {
                this.end(csvString);
              }.bind(this));
              return this;
            };

            Converter.prototype.wrapCallback = function (cb, clean) {
              if (clean === undefined) {
                clean = function () { };
              }
              if (cb && typeof cb === "function") {
                this.once("end_parsed", function (res) {
                  if (!this.hasError) {
                    cb(null, res);
                  }
                }.bind(this));
              }
              this.once("error", function (err) {
                this.hasError = true;
                if (cb && typeof cb === "function") {
                  cb(err);
                }
                clean();
              }.bind(this));
            };

            var Converter_1 = Converter;

            var core = createCommonjsModule(function (module) {
            module.exports = constructor;
            module.exports.Converter = Converter_1;

            function constructor(param,options) {
              return new module.exports.Converter(param, options);
            }
            });
            var core_1 = core.Converter;

            var http$2 = ( http$1 && http ) || http$1;

            function startWebServer (args) {
                args = args || {};
                var serverArgs = {
                    port: args.port || '8801',
                    urlpath: args.urlpath || '/parseCSV'
                };
                var server = http$2.createServer();
                server.on("request", function(req, res){
                    if (req.url === serverArgs.urlpath && req.method === "POST"){
                        req.pipe(new Converter_1({constructResult:false})).pipe(res);
                    } else {
                        res.end("Please post data to: " + serverArgs.urlpath);
                    }
                });

                server.listen(serverArgs.port);
                console.log("CSV Web Server Listen On:" + serverArgs.port);
                console.log("POST to " + serverArgs.urlpath + " with CSV data to get parsed.");
                return server;
            }
            var startWebServer_1 = startWebServer;

            var webServer = {
            	startWebServer: startWebServer_1
            };

            var web = webServer;

            /**
             * Convert input to process stdout
             */

            //implementation

            function _initConverter(){
                var csvConverter = new Converter_1();
                var started = false;
                var writeStream = process.stdout;
                csvConverter.on("record_parsed",function(rowJSON){
                    if (started){
                        writeStream.write(",\n");
                    }
                    writeStream.write(JSON.stringify(rowJSON));  //write parsed JSON object one by one.
                    if (started === false){
                        started = true;
                    }
                });
                writeStream.write("[\n"); //write array symbol

                csvConverter.on("end_parsed",function(){
                    writeStream.write("\n]"); //end array symbol
                });
                csvConverter.on("error",function(err){
                    console.error(err);
                    process.exit(-1);
                });
                return csvConverter;
            }
            function convertFile(fileName){
                var csvConverter=_initConverter();
                csvConverter.from(fileName);
            }

            function convertString(csvString){
                var csvConverter=_initConverter();
                csvConverter.from(csvString);
            }
            //module interfaces
            var convertFile_1 = convertFile;
            var convertString_1 = convertString;

            var main$1 = {
            	convertFile: convertFile_1,
            	convertString: convertString_1
            };

            var cli = main$1;

            var web$1=web;
            var cli$1=cli;

            var interfaces = {
            	web: web$1,
            	cli: cli$1
            };

            //deprecated but leave it for backword compatibility
            var core$1=core;

            //live apis
            var csv2json=core;
            var interfaces$1 = interfaces;
            csv2json.core = core$1;
            csv2json.interfaces = interfaces$1;

            var csvtojson = csv2json;

            /**
             * Asynchronously loads a CSV from a remote URL and returns an array of objects
             * @example
             * // returns [{header:value,header2:value2}]
             * loadCSVURI('https://raw.githubusercontent.com/repetere/modelscript/master/test/mock/data.csv').then(csvData).catch(console.error)
             * @memberOf csv
             * @param {string} filepath - URL to CSV path
             * @param {Object} [options] - options passed to csvtojson
             * @returns {Object[]} returns an array of objects from a csv where each column header is the property name  
             */
            async function loadCSVURI(filepath, options) {
              const reqMethod = (filepath.search('https', 'gi') > -1) ? get : get;
              return new Promise((resolve, reject) => {
                const csvData = [];
                const config = Object.assign({ checkType: true, }, options);
                const req = reqMethod(filepath, res => {
                  csvtojson(config).fromStream(res)
                    .on('json', jsonObj => {
                      csvData.push(jsonObj);
                    })
                    .on('error', err => {
                      return reject(err);
                    })
                    .on('done', error => {
                      if (error) {
                        return reject(error);
                      } else {
                        return resolve(csvData);
                      }
                    });
                });
                req.on('error', reject);
              });
            }


            /**
             * Asynchronously loads a CSV from either a filepath or remote URL and returns an array of objects
             * @example
             * // returns [{header:value,header2:value2}]
             * loadCSV('../mock/invalid-file.csv').then(csvData).catch(console.error)
             * @memberOf csv
             * @param {string} filepath - URL to CSV path
             * @param {Object} [options] - options passed to csvtojson
             * @returns {Object[]} returns an array of objects from a csv where each column header is the property name  
             */
            async function loadCSV(filepath, options) {
              if (validUrl.isUri(filepath)) {
                return loadCSVURI(filepath, options);
              } else {
                return new Promise((resolve, reject) => {
                  const csvData = [];
                  const config = Object.assign({ checkType: true, }, options);
                  csvtojson(config).fromFile(filepath)
                    .on('json', jsonObj => {
                      csvData.push(jsonObj);
                    })
                    .on('error', err => {
                      return reject(err);
                    })
                    .on('done', error => {
                      if (error) {
                        return reject(error);
                      } else {
                        return resolve(csvData);
                      }
                    });
                });
              }
            }

            /**
             * Asynchronously loads a TSV from either a filepath or remote URL and returns an array of objects
             * @example
             * // returns [{header:value,header2:value2}]
             * loadCSV('../mock/invalid-file.tsv').then(csvData).catch(console.error)
             * @memberOf csv
             * @param {string} filepath - URL to CSV path
             * @param {Object} [options] - options passed to csvtojson
             * @returns {Object[]} returns an array of objects from a csv where each column header is the property name  
             */
            async function loadTSV(filepath, options) {
              const tsvOptions = Object.assign({
                checkType: true,
              }, options, {
                delimiter: '\t',
              });
              return loadCSV(filepath, tsvOptions);
            }

            var csvUtils = /*#__PURE__*/Object.freeze({
                        loadCSVURI: loadCSVURI,
                        loadCSV: loadCSV,
                        loadTSV: loadTSV
            });

            if (!Symbol.species) {
                Symbol.species = Symbol.for('@@species');
            }

            /**
             * @class LuDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs
             * @param {Matrix} matrix
             */
            class LuDecomposition$$1 {
                constructor(matrix) {
                    matrix = WrapperMatrix2D.checkMatrix(matrix);

                    var lu = matrix.clone();
                    var rows = lu.rows;
                    var columns = lu.columns;
                    var pivotVector = new Array(rows);
                    var pivotSign = 1;
                    var i, j, k, p, s, t, v;
                    var LUcolj, kmax;

                    for (i = 0; i < rows; i++) {
                        pivotVector[i] = i;
                    }

                    LUcolj = new Array(rows);

                    for (j = 0; j < columns; j++) {

                        for (i = 0; i < rows; i++) {
                            LUcolj[i] = lu.get(i, j);
                        }

                        for (i = 0; i < rows; i++) {
                            kmax = Math.min(i, j);
                            s = 0;
                            for (k = 0; k < kmax; k++) {
                                s += lu.get(i, k) * LUcolj[k];
                            }
                            LUcolj[i] -= s;
                            lu.set(i, j, LUcolj[i]);
                        }

                        p = j;
                        for (i = j + 1; i < rows; i++) {
                            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {
                                p = i;
                            }
                        }

                        if (p !== j) {
                            for (k = 0; k < columns; k++) {
                                t = lu.get(p, k);
                                lu.set(p, k, lu.get(j, k));
                                lu.set(j, k, t);
                            }

                            v = pivotVector[p];
                            pivotVector[p] = pivotVector[j];
                            pivotVector[j] = v;

                            pivotSign = -pivotSign;
                        }

                        if (j < rows && lu.get(j, j) !== 0) {
                            for (i = j + 1; i < rows; i++) {
                                lu.set(i, j, lu.get(i, j) / lu.get(j, j));
                            }
                        }
                    }

                    this.LU = lu;
                    this.pivotVector = pivotVector;
                    this.pivotSign = pivotSign;
                }

                /**
                 *
                 * @return {boolean}
                 */
                isSingular() {
                    var data = this.LU;
                    var col = data.columns;
                    for (var j = 0; j < col; j++) {
                        if (data[j][j] === 0) {
                            return true;
                        }
                    }
                    return false;
                }

                /**
                 *
                 * @param {Matrix} value
                 * @return {Matrix}
                 */
                solve(value) {
                    value = Matrix.checkMatrix(value);

                    var lu = this.LU;
                    var rows = lu.rows;

                    if (rows !== value.rows) {
                        throw new Error('Invalid matrix dimensions');
                    }
                    if (this.isSingular()) {
                        throw new Error('LU matrix is singular');
                    }

                    var count = value.columns;
                    var X = value.subMatrixRow(this.pivotVector, 0, count - 1);
                    var columns = lu.columns;
                    var i, j, k;

                    for (k = 0; k < columns; k++) {
                        for (i = k + 1; i < columns; i++) {
                            for (j = 0; j < count; j++) {
                                X[i][j] -= X[k][j] * lu[i][k];
                            }
                        }
                    }
                    for (k = columns - 1; k >= 0; k--) {
                        for (j = 0; j < count; j++) {
                            X[k][j] /= lu[k][k];
                        }
                        for (i = 0; i < k; i++) {
                            for (j = 0; j < count; j++) {
                                X[i][j] -= X[k][j] * lu[i][k];
                            }
                        }
                    }
                    return X;
                }

                /**
                 *
                 * @return {number}
                 */
                get determinant() {
                    var data = this.LU;
                    if (!data.isSquare()) {
                        throw new Error('Matrix must be square');
                    }
                    var determinant = this.pivotSign;
                    var col = data.columns;
                    for (var j = 0; j < col; j++) {
                        determinant *= data[j][j];
                    }
                    return determinant;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get lowerTriangularMatrix() {
                    var data = this.LU;
                    var rows = data.rows;
                    var columns = data.columns;
                    var X = new Matrix(rows, columns);
                    for (var i = 0; i < rows; i++) {
                        for (var j = 0; j < columns; j++) {
                            if (i > j) {
                                X[i][j] = data[i][j];
                            } else if (i === j) {
                                X[i][j] = 1;
                            } else {
                                X[i][j] = 0;
                            }
                        }
                    }
                    return X;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get upperTriangularMatrix() {
                    var data = this.LU;
                    var rows = data.rows;
                    var columns = data.columns;
                    var X = new Matrix(rows, columns);
                    for (var i = 0; i < rows; i++) {
                        for (var j = 0; j < columns; j++) {
                            if (i <= j) {
                                X[i][j] = data[i][j];
                            } else {
                                X[i][j] = 0;
                            }
                        }
                    }
                    return X;
                }

                /**
                 *
                 * @return {Array<number>}
                 */
                get pivotPermutationVector() {
                    return this.pivotVector.slice();
                }
            }

            function hypotenuse(a, b) {
                var r = 0;
                if (Math.abs(a) > Math.abs(b)) {
                    r = b / a;
                    return Math.abs(a) * Math.sqrt(1 + r * r);
                }
                if (b !== 0) {
                    r = a / b;
                    return Math.abs(b) * Math.sqrt(1 + r * r);
                }
                return 0;
            }

            function getFilled2DArray(rows, columns, value) {
                var array = new Array(rows);
                for (var i = 0; i < rows; i++) {
                    array[i] = new Array(columns);
                    for (var j = 0; j < columns; j++) {
                        array[i][j] = value;
                    }
                }
                return array;
            }

            /**
             * @class SingularValueDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs
             * @param {Matrix} value
             * @param {object} [options]
             * @param {boolean} [options.computeLeftSingularVectors=true]
             * @param {boolean} [options.computeRightSingularVectors=true]
             * @param {boolean} [options.autoTranspose=false]
             */
            class SingularValueDecomposition$$1 {
                constructor(value, options = {}) {
                    value = WrapperMatrix2D.checkMatrix(value);

                    var m = value.rows;
                    var n = value.columns;
                    var nu = Math.min(m, n);

                    const {
                        computeLeftSingularVectors = true,
                        computeRightSingularVectors = true,
                        autoTranspose = false
                    } = options;

                    var wantu = Boolean(computeLeftSingularVectors);
                    var wantv = Boolean(computeRightSingularVectors);

                    var swapped = false;
                    var a;
                    if (m < n) {
                        if (!autoTranspose) {
                            a = value.clone();
                            // eslint-disable-next-line no-console
                            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');
                        } else {
                            a = value.transpose();
                            m = a.rows;
                            n = a.columns;
                            swapped = true;
                            var aux = wantu;
                            wantu = wantv;
                            wantv = aux;
                        }
                    } else {
                        a = value.clone();
                    }

                    var s = new Array(Math.min(m + 1, n));
                    var U = getFilled2DArray(m, nu, 0);
                    var V = getFilled2DArray(n, n, 0);
                    var e = new Array(n);
                    var work = new Array(m);

                    var nct = Math.min(m - 1, n);
                    var nrt = Math.max(0, Math.min(n - 2, m));

                    var i, j, k, p, t, ks, f, cs, sn, max, kase,
                        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;

                    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {
                        if (k < nct) {
                            s[k] = 0;
                            for (i = k; i < m; i++) {
                                s[k] = hypotenuse(s[k], a[i][k]);
                            }
                            if (s[k] !== 0) {
                                if (a[k][k] < 0) {
                                    s[k] = -s[k];
                                }
                                for (i = k; i < m; i++) {
                                    a[i][k] /= s[k];
                                }
                                a[k][k] += 1;
                            }
                            s[k] = -s[k];
                        }

                        for (j = k + 1; j < n; j++) {
                            if ((k < nct) && (s[k] !== 0)) {
                                t = 0;
                                for (i = k; i < m; i++) {
                                    t += a[i][k] * a[i][j];
                                }
                                t = -t / a[k][k];
                                for (i = k; i < m; i++) {
                                    a[i][j] += t * a[i][k];
                                }
                            }
                            e[j] = a[k][j];
                        }

                        if (wantu && (k < nct)) {
                            for (i = k; i < m; i++) {
                                U[i][k] = a[i][k];
                            }
                        }

                        if (k < nrt) {
                            e[k] = 0;
                            for (i = k + 1; i < n; i++) {
                                e[k] = hypotenuse(e[k], e[i]);
                            }
                            if (e[k] !== 0) {
                                if (e[k + 1] < 0) {
                                    e[k] = 0 - e[k];
                                }
                                for (i = k + 1; i < n; i++) {
                                    e[i] /= e[k];
                                }
                                e[k + 1] += 1;
                            }
                            e[k] = -e[k];
                            if ((k + 1 < m) && (e[k] !== 0)) {
                                for (i = k + 1; i < m; i++) {
                                    work[i] = 0;
                                }
                                for (j = k + 1; j < n; j++) {
                                    for (i = k + 1; i < m; i++) {
                                        work[i] += e[j] * a[i][j];
                                    }
                                }
                                for (j = k + 1; j < n; j++) {
                                    t = -e[j] / e[k + 1];
                                    for (i = k + 1; i < m; i++) {
                                        a[i][j] += t * work[i];
                                    }
                                }
                            }
                            if (wantv) {
                                for (i = k + 1; i < n; i++) {
                                    V[i][k] = e[i];
                                }
                            }
                        }
                    }

                    p = Math.min(n, m + 1);
                    if (nct < n) {
                        s[nct] = a[nct][nct];
                    }
                    if (m < p) {
                        s[p - 1] = 0;
                    }
                    if (nrt + 1 < p) {
                        e[nrt] = a[nrt][p - 1];
                    }
                    e[p - 1] = 0;

                    if (wantu) {
                        for (j = nct; j < nu; j++) {
                            for (i = 0; i < m; i++) {
                                U[i][j] = 0;
                            }
                            U[j][j] = 1;
                        }
                        for (k = nct - 1; k >= 0; k--) {
                            if (s[k] !== 0) {
                                for (j = k + 1; j < nu; j++) {
                                    t = 0;
                                    for (i = k; i < m; i++) {
                                        t += U[i][k] * U[i][j];
                                    }
                                    t = -t / U[k][k];
                                    for (i = k; i < m; i++) {
                                        U[i][j] += t * U[i][k];
                                    }
                                }
                                for (i = k; i < m; i++) {
                                    U[i][k] = -U[i][k];
                                }
                                U[k][k] = 1 + U[k][k];
                                for (i = 0; i < k - 1; i++) {
                                    U[i][k] = 0;
                                }
                            } else {
                                for (i = 0; i < m; i++) {
                                    U[i][k] = 0;
                                }
                                U[k][k] = 1;
                            }
                        }
                    }

                    if (wantv) {
                        for (k = n - 1; k >= 0; k--) {
                            if ((k < nrt) && (e[k] !== 0)) {
                                for (j = k + 1; j < n; j++) {
                                    t = 0;
                                    for (i = k + 1; i < n; i++) {
                                        t += V[i][k] * V[i][j];
                                    }
                                    t = -t / V[k + 1][k];
                                    for (i = k + 1; i < n; i++) {
                                        V[i][j] += t * V[i][k];
                                    }
                                }
                            }
                            for (i = 0; i < n; i++) {
                                V[i][k] = 0;
                            }
                            V[k][k] = 1;
                        }
                    }

                    var pp = p - 1;
                    var eps = Number.EPSILON;
                    while (p > 0) {
                        for (k = p - 2; k >= -1; k--) {
                            if (k === -1) {
                                break;
                            }
                            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {
                                e[k] = 0;
                                break;
                            }
                        }
                        if (k === p - 2) {
                            kase = 4;
                        } else {
                            for (ks = p - 1; ks >= k; ks--) {
                                if (ks === k) {
                                    break;
                                }
                                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);
                                if (Math.abs(s[ks]) <= eps * t) {
                                    s[ks] = 0;
                                    break;
                                }
                            }
                            if (ks === k) {
                                kase = 3;
                            } else if (ks === p - 1) {
                                kase = 1;
                            } else {
                                kase = 2;
                                k = ks;
                            }
                        }

                        k++;

                        switch (kase) {
                            case 1: {
                                f = e[p - 2];
                                e[p - 2] = 0;
                                for (j = p - 2; j >= k; j--) {
                                    t = hypotenuse(s[j], f);
                                    cs = s[j] / t;
                                    sn = f / t;
                                    s[j] = t;
                                    if (j !== k) {
                                        f = -sn * e[j - 1];
                                        e[j - 1] = cs * e[j - 1];
                                    }
                                    if (wantv) {
                                        for (i = 0; i < n; i++) {
                                            t = cs * V[i][j] + sn * V[i][p - 1];
                                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];
                                            V[i][j] = t;
                                        }
                                    }
                                }
                                break;
                            }
                            case 2 : {
                                f = e[k - 1];
                                e[k - 1] = 0;
                                for (j = k; j < p; j++) {
                                    t = hypotenuse(s[j], f);
                                    cs = s[j] / t;
                                    sn = f / t;
                                    s[j] = t;
                                    f = -sn * e[j];
                                    e[j] = cs * e[j];
                                    if (wantu) {
                                        for (i = 0; i < m; i++) {
                                            t = cs * U[i][j] + sn * U[i][k - 1];
                                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];
                                            U[i][j] = t;
                                        }
                                    }
                                }
                                break;
                            }
                            case 3 : {
                                scale = Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2]), Math.abs(e[p - 2]), Math.abs(s[k]), Math.abs(e[k]));
                                sp = s[p - 1] / scale;
                                spm1 = s[p - 2] / scale;
                                epm1 = e[p - 2] / scale;
                                sk = s[k] / scale;
                                ek = e[k] / scale;
                                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;
                                c = (sp * epm1) * (sp * epm1);
                                shift = 0;
                                if ((b !== 0) || (c !== 0)) {
                                    shift = Math.sqrt(b * b + c);
                                    if (b < 0) {
                                        shift = -shift;
                                    }
                                    shift = c / (b + shift);
                                }
                                f = (sk + sp) * (sk - sp) + shift;
                                g = sk * ek;
                                for (j = k; j < p - 1; j++) {
                                    t = hypotenuse(f, g);
                                    cs = f / t;
                                    sn = g / t;
                                    if (j !== k) {
                                        e[j - 1] = t;
                                    }
                                    f = cs * s[j] + sn * e[j];
                                    e[j] = cs * e[j] - sn * s[j];
                                    g = sn * s[j + 1];
                                    s[j + 1] = cs * s[j + 1];
                                    if (wantv) {
                                        for (i = 0; i < n; i++) {
                                            t = cs * V[i][j] + sn * V[i][j + 1];
                                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];
                                            V[i][j] = t;
                                        }
                                    }
                                    t = hypotenuse(f, g);
                                    cs = f / t;
                                    sn = g / t;
                                    s[j] = t;
                                    f = cs * e[j] + sn * s[j + 1];
                                    s[j + 1] = -sn * e[j] + cs * s[j + 1];
                                    g = sn * e[j + 1];
                                    e[j + 1] = cs * e[j + 1];
                                    if (wantu && (j < m - 1)) {
                                        for (i = 0; i < m; i++) {
                                            t = cs * U[i][j] + sn * U[i][j + 1];
                                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];
                                            U[i][j] = t;
                                        }
                                    }
                                }
                                e[p - 2] = f;
                                break;
                            }
                            case 4: {
                                if (s[k] <= 0) {
                                    s[k] = (s[k] < 0 ? -s[k] : 0);
                                    if (wantv) {
                                        for (i = 0; i <= pp; i++) {
                                            V[i][k] = -V[i][k];
                                        }
                                    }
                                }
                                while (k < pp) {
                                    if (s[k] >= s[k + 1]) {
                                        break;
                                    }
                                    t = s[k];
                                    s[k] = s[k + 1];
                                    s[k + 1] = t;
                                    if (wantv && (k < n - 1)) {
                                        for (i = 0; i < n; i++) {
                                            t = V[i][k + 1];
                                            V[i][k + 1] = V[i][k];
                                            V[i][k] = t;
                                        }
                                    }
                                    if (wantu && (k < m - 1)) {
                                        for (i = 0; i < m; i++) {
                                            t = U[i][k + 1];
                                            U[i][k + 1] = U[i][k];
                                            U[i][k] = t;
                                        }
                                    }
                                    k++;
                                }
                                p--;
                                break;
                            }
                            // no default
                        }
                    }

                    if (swapped) {
                        var tmp = V;
                        V = U;
                        U = tmp;
                    }

                    this.m = m;
                    this.n = n;
                    this.s = s;
                    this.U = U;
                    this.V = V;
                }

                /**
                 * Solve a problem of least square (Ax=b) by using the SVD. Useful when A is singular. When A is not singular, it would be better to use qr.solve(value).
                 * Example : We search to approximate x, with A matrix shape m*n, x vector size n, b vector size m (m > n). We will use :
                 * var svd = SingularValueDecomposition(A);
                 * var x = svd.solve(b);
                 * @param {Matrix} value - Matrix 1D which is the vector b (in the equation Ax = b)
                 * @return {Matrix} - The vector x
                 */
                solve(value) {

                    var Y = value;
                    var e = this.threshold;
                    var scols = this.s.length;
                    var Ls = Matrix.zeros(scols, scols);
                    var i;

                    for (i = 0; i < scols; i++) {
                        if (Math.abs(this.s[i]) <= e) {
                            Ls[i][i] = 0;
                        } else {
                            Ls[i][i] = 1 / this.s[i];
                        }
                    }

                    var U = this.U;
                    var V = this.rightSingularVectors;

                    var VL = V.mmul(Ls);
                    var vrows = V.rows;
                    var urows = U.length;
                    var VLU = Matrix.zeros(vrows, urows);
                    var j, k, sum;

                    for (i = 0; i < vrows; i++) {
                        for (j = 0; j < urows; j++) {
                            sum = 0;
                            for (k = 0; k < scols; k++) {
                                sum += VL[i][k] * U[j][k];
                            }
                            VLU[i][j] = sum;
                        }
                    }

                    return VLU.mmul(Y);
                }

                /**
                 *
                 * @param {Array<number>} value
                 * @return {Matrix}
                 */
                solveForDiagonal(value) {
                    return this.solve(Matrix.diag(value));
                }

                /**
                 * Get the inverse of the matrix. We compute the inverse of a matrix using SVD when this matrix is singular or ill-conditioned. Example :
                 * var svd = SingularValueDecomposition(A);
                 * var inverseA = svd.inverse();
                 * @return {Matrix} - The approximation of the inverse of the matrix
                 */
                inverse() {
                    var V = this.V;
                    var e = this.threshold;
                    var vrows = V.length;
                    var vcols = V[0].length;
                    var X = new Matrix(vrows, this.s.length);
                    var i, j;

                    for (i = 0; i < vrows; i++) {
                        for (j = 0; j < vcols; j++) {
                            if (Math.abs(this.s[j]) > e) {
                                X[i][j] = V[i][j] / this.s[j];
                            } else {
                                X[i][j] = 0;
                            }
                        }
                    }

                    var U = this.U;

                    var urows = U.length;
                    var ucols = U[0].length;
                    var Y = new Matrix(vrows, urows);
                    var k, sum;

                    for (i = 0; i < vrows; i++) {
                        for (j = 0; j < urows; j++) {
                            sum = 0;
                            for (k = 0; k < ucols; k++) {
                                sum += X[i][k] * U[j][k];
                            }
                            Y[i][j] = sum;
                        }
                    }

                    return Y;
                }

                /**
                 *
                 * @return {number}
                 */
                get condition() {
                    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];
                }

                /**
                 *
                 * @return {number}
                 */
                get norm2() {
                    return this.s[0];
                }

                /**
                 *
                 * @return {number}
                 */
                get rank() {
                    var tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;
                    var r = 0;
                    var s = this.s;
                    for (var i = 0, ii = s.length; i < ii; i++) {
                        if (s[i] > tol) {
                            r++;
                        }
                    }
                    return r;
                }

                /**
                 *
                 * @return {Array<number>}
                 */
                get diagonal() {
                    return this.s;
                }

                /**
                 *
                 * @return {number}
                 */
                get threshold() {
                    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get leftSingularVectors() {
                    if (!Matrix.isMatrix(this.U)) {
                        this.U = new Matrix(this.U);
                    }
                    return this.U;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get rightSingularVectors() {
                    if (!Matrix.isMatrix(this.V)) {
                        this.V = new Matrix(this.V);
                    }
                    return this.V;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get diagonalMatrix() {
                    return Matrix.diag(this.s);
                }
            }

            /**
             * Computes the maximum of the given values
             * @param {Array<number>} input
             * @return {number}
             */
            function max(input) {
                if (!Array.isArray(input)) {
                    throw new Error('input must be an array');
                }

                if (input.length === 0) {
                    throw new Error('input must not be empty');
                }

                var max = input[0];
                for (var i = 1; i < input.length; i++) {
                    if (input[i] > max) max = input[i];
                }
                return max;
            }

            /**
             * Computes the minimum of the given values
             * @param {Array<number>} input
             * @return {number}
             */
            function min(input) {
                if (!Array.isArray(input)) {
                    throw new Error('input must be an array');
                }

                if (input.length === 0) {
                    throw new Error('input must not be empty');
                }

                var min = input[0];
                for (var i = 1; i < input.length; i++) {
                    if (input[i] < min) min = input[i];
                }
                return min;
            }

            function rescale(input, options = {}) {
                if (!Array.isArray(input)) {
                    throw new TypeError('input must be an array');
                } else if (input.length === 0) {
                    throw new TypeError('input must not be empty');
                }

                let output;
                if (options.output !== undefined) {
                    if (!Array.isArray(options.output)) {
                        throw new TypeError('output option must be an array if specified');
                    }
                    output = options.output;
                } else {
                    output = new Array(input.length);
                }

                const currentMin = min(input);
                const currentMax = max(input);

                if (currentMin === currentMax) {
                    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');
                }

                const {
                    min: minValue = options.autoMinMax ? currentMin : 0,
                    max: maxValue = options.autoMinMax ? currentMax : 1
                } = options;

                if (minValue >= maxValue) {
                    throw new RangeError('min option must be smaller than max option');
                }

                const factor = (maxValue - minValue) / (currentMax - currentMin);
                for (var i = 0; i < input.length; i++) {
                    output[i] = (input[i] - currentMin) * factor + minValue;
                }

                return output;
            }

            /**
             * @private
             * Check that a row index is not out of bounds
             * @param {Matrix} matrix
             * @param {number} index
             * @param {boolean} [outer]
             */
            function checkRowIndex(matrix, index, outer) {
                var max = outer ? matrix.rows : matrix.rows - 1;
                if (index < 0 || index > max) {
                    throw new RangeError('Row index out of range');
                }
            }

            /**
             * @private
             * Check that a column index is not out of bounds
             * @param {Matrix} matrix
             * @param {number} index
             * @param {boolean} [outer]
             */
            function checkColumnIndex(matrix, index, outer) {
                var max = outer ? matrix.columns : matrix.columns - 1;
                if (index < 0 || index > max) {
                    throw new RangeError('Column index out of range');
                }
            }

            /**
             * @private
             * Check that the provided vector is an array with the right length
             * @param {Matrix} matrix
             * @param {Array|Matrix} vector
             * @return {Array}
             * @throws {RangeError}
             */
            function checkRowVector(matrix, vector) {
                if (vector.to1DArray) {
                    vector = vector.to1DArray();
                }
                if (vector.length !== matrix.columns) {
                    throw new RangeError('vector size must be the same as the number of columns');
                }
                return vector;
            }

            /**
             * @private
             * Check that the provided vector is an array with the right length
             * @param {Matrix} matrix
             * @param {Array|Matrix} vector
             * @return {Array}
             * @throws {RangeError}
             */
            function checkColumnVector(matrix, vector) {
                if (vector.to1DArray) {
                    vector = vector.to1DArray();
                }
                if (vector.length !== matrix.rows) {
                    throw new RangeError('vector size must be the same as the number of rows');
                }
                return vector;
            }

            function checkIndices(matrix, rowIndices, columnIndices) {
                return {
                    row: checkRowIndices(matrix, rowIndices),
                    column: checkColumnIndices(matrix, columnIndices)
                };
            }

            function checkRowIndices(matrix, rowIndices) {
                if (typeof rowIndices !== 'object') {
                    throw new TypeError('unexpected type for row indices');
                }

                var rowOut = rowIndices.some(r => {
                    return r < 0 || r >= matrix.rows;

                });

                if (rowOut) {
                    throw new RangeError('row indices are out of range');
                }

                if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);

                return rowIndices;
            }

            function checkColumnIndices(matrix, columnIndices) {
                if (typeof columnIndices !== 'object') {
                    throw new TypeError('unexpected type for column indices');
                }

                var columnOut = columnIndices.some(c => {
                    return c < 0 || c >= matrix.columns;
                });

                if (columnOut) {
                    throw new RangeError('column indices are out of range');
                }
                if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);

                return columnIndices;
            }

            function checkRange(matrix, startRow, endRow, startColumn, endColumn) {
                if (arguments.length !== 5) throw new TypeError('Invalid argument type');
                var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {
                    return typeof arg !== 'number';
                });
                if (notAllNumbers) throw new TypeError('Invalid argument type');
                if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {
                    throw new RangeError('Submatrix indices are out of range');
                }
            }

            function sumByRow(matrix) {
                var sum = Matrix.zeros(matrix.rows, 1);
                for (var i = 0; i < matrix.rows; ++i) {
                    for (var j = 0; j < matrix.columns; ++j) {
                        sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));
                    }
                }
                return sum;
            }

            function sumByColumn(matrix) {
                var sum = Matrix.zeros(1, matrix.columns);
                for (var i = 0; i < matrix.rows; ++i) {
                    for (var j = 0; j < matrix.columns; ++j) {
                        sum.set(0, j, sum.get(0, j) + matrix.get(i, j));
                    }
                }
                return sum;
            }

            function sumAll(matrix) {
                var v = 0;
                for (var i = 0; i < matrix.rows; i++) {
                    for (var j = 0; j < matrix.columns; j++) {
                        v += matrix.get(i, j);
                    }
                }
                return v;
            }

            class BaseView extends AbstractMatrix() {
                constructor(matrix, rows, columns) {
                    super();
                    this.matrix = matrix;
                    this.rows = rows;
                    this.columns = columns;
                }

                static get [Symbol.species]() {
                    return Matrix;
                }
            }

            class MatrixTransposeView extends BaseView {
                constructor(matrix) {
                    super(matrix, matrix.columns, matrix.rows);
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(columnIndex, rowIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(columnIndex, rowIndex);
                }
            }

            class MatrixRowView extends BaseView {
                constructor(matrix, row) {
                    super(matrix, 1, matrix.columns);
                    this.row = row;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.row, columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.row, columnIndex);
                }
            }

            class MatrixSubView extends BaseView {
                constructor(matrix, startRow, endRow, startColumn, endColumn) {
                    checkRange(matrix, startRow, endRow, startColumn, endColumn);
                    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);
                    this.startRow = startRow;
                    this.startColumn = startColumn;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);
                }
            }

            class MatrixSelectionView extends BaseView {
                constructor(matrix, rowIndices, columnIndices) {
                    var indices = checkIndices(matrix, rowIndices, columnIndices);
                    super(matrix, indices.row.length, indices.column.length);
                    this.rowIndices = indices.row;
                    this.columnIndices = indices.column;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);
                }
            }

            class MatrixRowSelectionView extends BaseView {
                constructor(matrix, rowIndices) {
                    rowIndices = checkRowIndices(matrix, rowIndices);
                    super(matrix, rowIndices.length, matrix.columns);
                    this.rowIndices = rowIndices;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);
                }
            }

            class MatrixColumnSelectionView extends BaseView {
                constructor(matrix, columnIndices) {
                    columnIndices = checkColumnIndices(matrix, columnIndices);
                    super(matrix, matrix.rows, columnIndices.length);
                    this.columnIndices = columnIndices;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);
                }
            }

            class MatrixColumnView extends BaseView {
                constructor(matrix, column) {
                    super(matrix, matrix.rows, 1);
                    this.column = column;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(rowIndex, this.column, value);
                    return this;
                }

                get(rowIndex) {
                    return this.matrix.get(rowIndex, this.column);
                }
            }

            class MatrixFlipRowView extends BaseView {
                constructor(matrix) {
                    super(matrix, matrix.rows, matrix.columns);
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);
                }
            }

            class MatrixFlipColumnView extends BaseView {
                constructor(matrix) {
                    super(matrix, matrix.rows, matrix.columns);
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);
                }
            }

            function AbstractMatrix(superCtor) {
                if (superCtor === undefined) superCtor = Object;

                /**
                 * Real matrix
                 * @class Matrix
                 * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,
                 * 2D array containing the data or Matrix instance to clone
                 * @param {number} [nColumns] - Number of columns of the new matrix
                 */
                class Matrix extends superCtor {
                    static get [Symbol.species]() {
                        return this;
                    }

                    /**
                     * Constructs a Matrix with the chosen dimensions from a 1D array
                     * @param {number} newRows - Number of rows
                     * @param {number} newColumns - Number of columns
                     * @param {Array} newData - A 1D array containing data for the matrix
                     * @return {Matrix} - The new matrix
                     */
                    static from1DArray(newRows, newColumns, newData) {
                        var length = newRows * newColumns;
                        if (length !== newData.length) {
                            throw new RangeError('Data length does not match given dimensions');
                        }
                        var newMatrix = new this(newRows, newColumns);
                        for (var row = 0; row < newRows; row++) {
                            for (var column = 0; column < newColumns; column++) {
                                newMatrix.set(row, column, newData[row * newColumns + column]);
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Creates a row vector, a matrix with only one row.
                     * @param {Array} newData - A 1D array containing data for the vector
                     * @return {Matrix} - The new matrix
                     */
                    static rowVector(newData) {
                        var vector = new this(1, newData.length);
                        for (var i = 0; i < newData.length; i++) {
                            vector.set(0, i, newData[i]);
                        }
                        return vector;
                    }

                    /**
                     * Creates a column vector, a matrix with only one column.
                     * @param {Array} newData - A 1D array containing data for the vector
                     * @return {Matrix} - The new matrix
                     */
                    static columnVector(newData) {
                        var vector = new this(newData.length, 1);
                        for (var i = 0; i < newData.length; i++) {
                            vector.set(i, 0, newData[i]);
                        }
                        return vector;
                    }

                    /**
                     * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                    static empty(rows, columns) {
                        return new this(rows, columns);
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be set to zero.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                    static zeros(rows, columns) {
                        return this.empty(rows, columns).fill(0);
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be set to one.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                    static ones(rows, columns) {
                        return this.empty(rows, columns).fill(1);
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be randomly set.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @param {function} [rng=Math.random] - Random number generator
                     * @return {Matrix} The new matrix
                     */
                    static rand(rows, columns, rng) {
                        if (rng === undefined) rng = Math.random;
                        var matrix = this.empty(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                matrix.set(i, j, rng());
                            }
                        }
                        return matrix;
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be random integers.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @param {number} [maxValue=1000] - Maximum value
                     * @param {function} [rng=Math.random] - Random number generator
                     * @return {Matrix} The new matrix
                     */
                    static randInt(rows, columns, maxValue, rng) {
                        if (maxValue === undefined) maxValue = 1000;
                        if (rng === undefined) rng = Math.random;
                        var matrix = this.empty(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                var value = Math.floor(rng() * maxValue);
                                matrix.set(i, j, value);
                            }
                        }
                        return matrix;
                    }

                    /**
                     * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.
                     * @param {number} rows - Number of rows
                     * @param {number} [columns=rows] - Number of columns
                     * @param {number} [value=1] - Value to fill the diagonal with
                     * @return {Matrix} - The new identity matrix
                     */
                    static eye(rows, columns, value) {
                        if (columns === undefined) columns = rows;
                        if (value === undefined) value = 1;
                        var min = Math.min(rows, columns);
                        var matrix = this.zeros(rows, columns);
                        for (var i = 0; i < min; i++) {
                            matrix.set(i, i, value);
                        }
                        return matrix;
                    }

                    /**
                     * Creates a diagonal matrix based on the given array.
                     * @param {Array} data - Array containing the data for the diagonal
                     * @param {number} [rows] - Number of rows (Default: data.length)
                     * @param {number} [columns] - Number of columns (Default: rows)
                     * @return {Matrix} - The new diagonal matrix
                     */
                    static diag(data, rows, columns) {
                        var l = data.length;
                        if (rows === undefined) rows = l;
                        if (columns === undefined) columns = rows;
                        var min = Math.min(l, rows, columns);
                        var matrix = this.zeros(rows, columns);
                        for (var i = 0; i < min; i++) {
                            matrix.set(i, i, data[i]);
                        }
                        return matrix;
                    }

                    /**
                     * Returns a matrix whose elements are the minimum between matrix1 and matrix2
                     * @param {Matrix} matrix1
                     * @param {Matrix} matrix2
                     * @return {Matrix}
                     */
                    static min(matrix1, matrix2) {
                        matrix1 = this.checkMatrix(matrix1);
                        matrix2 = this.checkMatrix(matrix2);
                        var rows = matrix1.rows;
                        var columns = matrix1.columns;
                        var result = new this(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));
                            }
                        }
                        return result;
                    }

                    /**
                     * Returns a matrix whose elements are the maximum between matrix1 and matrix2
                     * @param {Matrix} matrix1
                     * @param {Matrix} matrix2
                     * @return {Matrix}
                     */
                    static max(matrix1, matrix2) {
                        matrix1 = this.checkMatrix(matrix1);
                        matrix2 = this.checkMatrix(matrix2);
                        var rows = matrix1.rows;
                        var columns = matrix1.columns;
                        var result = new this(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));
                            }
                        }
                        return result;
                    }

                    /**
                     * Check that the provided value is a Matrix and tries to instantiate one if not
                     * @param {*} value - The value to check
                     * @return {Matrix}
                     */
                    static checkMatrix(value) {
                        return Matrix.isMatrix(value) ? value : new this(value);
                    }

                    /**
                     * Returns true if the argument is a Matrix, false otherwise
                     * @param {*} value - The value to check
                     * @return {boolean}
                     */
                    static isMatrix(value) {
                        return (value != null) && (value.klass === 'Matrix');
                    }

                    /**
                     * @prop {number} size - The number of elements in the matrix.
                     */
                    get size() {
                        return this.rows * this.columns;
                    }

                    /**
                     * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.
                     * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)
                     * @return {Matrix} this
                     */
                    apply(callback) {
                        if (typeof callback !== 'function') {
                            throw new TypeError('callback must be a function');
                        }
                        var ii = this.rows;
                        var jj = this.columns;
                        for (var i = 0; i < ii; i++) {
                            for (var j = 0; j < jj; j++) {
                                callback.call(this, i, j);
                            }
                        }
                        return this;
                    }

                    /**
                     * Returns a new 1D array filled row by row with the matrix values
                     * @return {Array}
                     */
                    to1DArray() {
                        var array = new Array(this.size);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                array[i * this.columns + j] = this.get(i, j);
                            }
                        }
                        return array;
                    }

                    /**
                     * Returns a 2D array containing a copy of the data
                     * @return {Array}
                     */
                    to2DArray() {
                        var copy = new Array(this.rows);
                        for (var i = 0; i < this.rows; i++) {
                            copy[i] = new Array(this.columns);
                            for (var j = 0; j < this.columns; j++) {
                                copy[i][j] = this.get(i, j);
                            }
                        }
                        return copy;
                    }

                    /**
                     * @return {boolean} true if the matrix has one row
                     */
                    isRowVector() {
                        return this.rows === 1;
                    }

                    /**
                     * @return {boolean} true if the matrix has one column
                     */
                    isColumnVector() {
                        return this.columns === 1;
                    }

                    /**
                     * @return {boolean} true if the matrix has one row or one column
                     */
                    isVector() {
                        return (this.rows === 1) || (this.columns === 1);
                    }

                    /**
                     * @return {boolean} true if the matrix has the same number of rows and columns
                     */
                    isSquare() {
                        return this.rows === this.columns;
                    }

                    /**
                     * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal
                     */
                    isSymmetric() {
                        if (this.isSquare()) {
                            for (var i = 0; i < this.rows; i++) {
                                for (var j = 0; j <= i; j++) {
                                    if (this.get(i, j) !== this.get(j, i)) {
                                        return false;
                                    }
                                }
                            }
                            return true;
                        }
                        return false;
                    }

                    /**
                     * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1
                     * @abstract
                     * @param {number} rowIndex - Index of the row
                     * @param {number} columnIndex - Index of the column
                     * @param {number} value - The new value for the element
                     * @return {Matrix} this
                     */
                    set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars
                        throw new Error('set method is unimplemented');
                    }

                    /**
                     * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]
                     * @abstract
                     * @param {number} rowIndex - Index of the row
                     * @param {number} columnIndex - Index of the column
                     * @return {number}
                     */
                    get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars
                        throw new Error('get method is unimplemented');
                    }

                    /**
                     * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of
                     * rows of the matrix, and colRep times the number of columns of the matrix
                     * @param {number} rowRep - Number of times the rows should be repeated
                     * @param {number} colRep - Number of times the columns should be re
                     * @return {Matrix}
                     * @example
                     * var matrix = new Matrix([[1,2]]);
                     * matrix.repeat(2); // [[1,2],[1,2]]
                     */
                    repeat(rowRep, colRep) {
                        rowRep = rowRep || 1;
                        colRep = colRep || 1;
                        var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);
                        for (var i = 0; i < rowRep; i++) {
                            for (var j = 0; j < colRep; j++) {
                                matrix.setSubMatrix(this, this.rows * i, this.columns * j);
                            }
                        }
                        return matrix;
                    }

                    /**
                     * Fills the matrix with a given value. All elements will be set to this value.
                     * @param {number} value - New value
                     * @return {Matrix} this
                     */
                    fill(value) {
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, value);
                            }
                        }
                        return this;
                    }

                    /**
                     * Negates the matrix. All elements will be multiplied by (-1)
                     * @return {Matrix} this
                     */
                    neg() {
                        return this.mulS(-1);
                    }

                    /**
                     * Returns a new array from the given row index
                     * @param {number} index - Row index
                     * @return {Array}
                     */
                    getRow(index) {
                        checkRowIndex(this, index);
                        var row = new Array(this.columns);
                        for (var i = 0; i < this.columns; i++) {
                            row[i] = this.get(index, i);
                        }
                        return row;
                    }

                    /**
                     * Returns a new row vector from the given row index
                     * @param {number} index - Row index
                     * @return {Matrix}
                     */
                    getRowVector(index) {
                        return this.constructor.rowVector(this.getRow(index));
                    }

                    /**
                     * Sets a row at the given index
                     * @param {number} index - Row index
                     * @param {Array|Matrix} array - Array or vector
                     * @return {Matrix} this
                     */
                    setRow(index, array) {
                        checkRowIndex(this, index);
                        array = checkRowVector(this, array);
                        for (var i = 0; i < this.columns; i++) {
                            this.set(index, i, array[i]);
                        }
                        return this;
                    }

                    /**
                     * Swaps two rows
                     * @param {number} row1 - First row index
                     * @param {number} row2 - Second row index
                     * @return {Matrix} this
                     */
                    swapRows(row1, row2) {
                        checkRowIndex(this, row1);
                        checkRowIndex(this, row2);
                        for (var i = 0; i < this.columns; i++) {
                            var temp = this.get(row1, i);
                            this.set(row1, i, this.get(row2, i));
                            this.set(row2, i, temp);
                        }
                        return this;
                    }

                    /**
                     * Returns a new array from the given column index
                     * @param {number} index - Column index
                     * @return {Array}
                     */
                    getColumn(index) {
                        checkColumnIndex(this, index);
                        var column = new Array(this.rows);
                        for (var i = 0; i < this.rows; i++) {
                            column[i] = this.get(i, index);
                        }
                        return column;
                    }

                    /**
                     * Returns a new column vector from the given column index
                     * @param {number} index - Column index
                     * @return {Matrix}
                     */
                    getColumnVector(index) {
                        return this.constructor.columnVector(this.getColumn(index));
                    }

                    /**
                     * Sets a column at the given index
                     * @param {number} index - Column index
                     * @param {Array|Matrix} array - Array or vector
                     * @return {Matrix} this
                     */
                    setColumn(index, array) {
                        checkColumnIndex(this, index);
                        array = checkColumnVector(this, array);
                        for (var i = 0; i < this.rows; i++) {
                            this.set(i, index, array[i]);
                        }
                        return this;
                    }

                    /**
                     * Swaps two columns
                     * @param {number} column1 - First column index
                     * @param {number} column2 - Second column index
                     * @return {Matrix} this
                     */
                    swapColumns(column1, column2) {
                        checkColumnIndex(this, column1);
                        checkColumnIndex(this, column2);
                        for (var i = 0; i < this.rows; i++) {
                            var temp = this.get(i, column1);
                            this.set(i, column1, this.get(i, column2));
                            this.set(i, column2, temp);
                        }
                        return this;
                    }

                    /**
                     * Adds the values of a vector to each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    addRowVector(vector) {
                        vector = checkRowVector(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) + vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Subtracts the values of a vector from each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    subRowVector(vector) {
                        vector = checkRowVector(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) - vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a vector with each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    mulRowVector(vector) {
                        vector = checkRowVector(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) * vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Divides the values of each row by those of a vector
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    divRowVector(vector) {
                        vector = checkRowVector(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) / vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Adds the values of a vector to each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    addColumnVector(vector) {
                        vector = checkColumnVector(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) + vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Subtracts the values of a vector from each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    subColumnVector(vector) {
                        vector = checkColumnVector(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) - vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a vector with each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    mulColumnVector(vector) {
                        vector = checkColumnVector(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) * vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Divides the values of each column by those of a vector
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    divColumnVector(vector) {
                        vector = checkColumnVector(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) / vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a row with a scalar
                     * @param {number} index - Row index
                     * @param {number} value
                     * @return {Matrix} this
                     */
                    mulRow(index, value) {
                        checkRowIndex(this, index);
                        for (var i = 0; i < this.columns; i++) {
                            this.set(index, i, this.get(index, i) * value);
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a column with a scalar
                     * @param {number} index - Column index
                     * @param {number} value
                     * @return {Matrix} this
                     */
                    mulColumn(index, value) {
                        checkColumnIndex(this, index);
                        for (var i = 0; i < this.rows; i++) {
                            this.set(i, index, this.get(i, index) * value);
                        }
                        return this;
                    }

                    /**
                     * Returns the maximum value of the matrix
                     * @return {number}
                     */
                    max() {
                        var v = this.get(0, 0);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) > v) {
                                    v = this.get(i, j);
                                }
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value
                     * @return {Array}
                     */
                    maxIndex() {
                        var v = this.get(0, 0);
                        var idx = [0, 0];
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) > v) {
                                    v = this.get(i, j);
                                    idx[0] = i;
                                    idx[1] = j;
                                }
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the minimum value of the matrix
                     * @return {number}
                     */
                    min() {
                        var v = this.get(0, 0);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) < v) {
                                    v = this.get(i, j);
                                }
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the minimum value
                     * @return {Array}
                     */
                    minIndex() {
                        var v = this.get(0, 0);
                        var idx = [0, 0];
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) < v) {
                                    v = this.get(i, j);
                                    idx[0] = i;
                                    idx[1] = j;
                                }
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the maximum value of one row
                     * @param {number} row - Row index
                     * @return {number}
                     */
                    maxRow(row) {
                        checkRowIndex(this, row);
                        var v = this.get(row, 0);
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) > v) {
                                v = this.get(row, i);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value of one row
                     * @param {number} row - Row index
                     * @return {Array}
                     */
                    maxRowIndex(row) {
                        checkRowIndex(this, row);
                        var v = this.get(row, 0);
                        var idx = [row, 0];
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) > v) {
                                v = this.get(row, i);
                                idx[1] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the minimum value of one row
                     * @param {number} row - Row index
                     * @return {number}
                     */
                    minRow(row) {
                        checkRowIndex(this, row);
                        var v = this.get(row, 0);
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) < v) {
                                v = this.get(row, i);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value of one row
                     * @param {number} row - Row index
                     * @return {Array}
                     */
                    minRowIndex(row) {
                        checkRowIndex(this, row);
                        var v = this.get(row, 0);
                        var idx = [row, 0];
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) < v) {
                                v = this.get(row, i);
                                idx[1] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the maximum value of one column
                     * @param {number} column - Column index
                     * @return {number}
                     */
                    maxColumn(column) {
                        checkColumnIndex(this, column);
                        var v = this.get(0, column);
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) > v) {
                                v = this.get(i, column);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value of one column
                     * @param {number} column - Column index
                     * @return {Array}
                     */
                    maxColumnIndex(column) {
                        checkColumnIndex(this, column);
                        var v = this.get(0, column);
                        var idx = [0, column];
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) > v) {
                                v = this.get(i, column);
                                idx[0] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the minimum value of one column
                     * @param {number} column - Column index
                     * @return {number}
                     */
                    minColumn(column) {
                        checkColumnIndex(this, column);
                        var v = this.get(0, column);
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) < v) {
                                v = this.get(i, column);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the minimum value of one column
                     * @param {number} column - Column index
                     * @return {Array}
                     */
                    minColumnIndex(column) {
                        checkColumnIndex(this, column);
                        var v = this.get(0, column);
                        var idx = [0, column];
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) < v) {
                                v = this.get(i, column);
                                idx[0] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns an array containing the diagonal values of the matrix
                     * @return {Array}
                     */
                    diag() {
                        var min = Math.min(this.rows, this.columns);
                        var diag = new Array(min);
                        for (var i = 0; i < min; i++) {
                            diag[i] = this.get(i, i);
                        }
                        return diag;
                    }

                    /**
                     * Returns the sum by the argument given, if no argument given,
                     * it returns the sum of all elements of the matrix.
                     * @param {string} by - sum by 'row' or 'column'.
                     * @return {Matrix|number}
                     */
                    sum(by) {
                        switch (by) {
                            case 'row':
                                return sumByRow(this);
                            case 'column':
                                return sumByColumn(this);
                            default:
                                return sumAll(this);
                        }
                    }

                    /**
                     * Returns the mean of all elements of the matrix
                     * @return {number}
                     */
                    mean() {
                        return this.sum() / this.size;
                    }

                    /**
                     * Returns the product of all elements of the matrix
                     * @return {number}
                     */
                    prod() {
                        var prod = 1;
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                prod *= this.get(i, j);
                            }
                        }
                        return prod;
                    }

                    /**
                     * Returns the norm of a matrix.
                     * @param {string} type - "frobenius" (default) or "max" return resp. the Frobenius norm and the max norm.
                     * @return {number}
                     */
                    norm(type = 'frobenius') {
                        var result = 0;
                        if (type === 'max') {
                            return this.max();
                        } else if (type === 'frobenius') {
                            for (var i = 0; i < this.rows; i++) {
                                for (var j = 0; j < this.columns; j++) {
                                    result = result + this.get(i, j) * this.get(i, j);
                                }
                            }
                            return Math.sqrt(result);
                        } else {
                            throw new RangeError(`unknown norm type: ${type}`);
                        }
                    }

                    /**
                     * Computes the cumulative sum of the matrix elements (in place, row by row)
                     * @return {Matrix} this
                     */
                    cumulativeSum() {
                        var sum = 0;
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                sum += this.get(i, j);
                                this.set(i, j, sum);
                            }
                        }
                        return this;
                    }

                    /**
                     * Computes the dot (scalar) product between the matrix and another
                     * @param {Matrix} vector2 vector
                     * @return {number}
                     */
                    dot(vector2) {
                        if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();
                        var vector1 = this.to1DArray();
                        if (vector1.length !== vector2.length) {
                            throw new RangeError('vectors do not have the same size');
                        }
                        var dot = 0;
                        for (var i = 0; i < vector1.length; i++) {
                            dot += vector1[i] * vector2[i];
                        }
                        return dot;
                    }

                    /**
                     * Returns the matrix product between this and other
                     * @param {Matrix} other
                     * @return {Matrix}
                     */
                    mmul(other) {
                        other = this.constructor.checkMatrix(other);
                        if (this.columns !== other.rows) {
                            // eslint-disable-next-line no-console
                            console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');
                        }

                        var m = this.rows;
                        var n = this.columns;
                        var p = other.columns;

                        var result = new this.constructor[Symbol.species](m, p);

                        var Bcolj = new Array(n);
                        for (var j = 0; j < p; j++) {
                            for (var k = 0; k < n; k++) {
                                Bcolj[k] = other.get(k, j);
                            }

                            for (var i = 0; i < m; i++) {
                                var s = 0;
                                for (k = 0; k < n; k++) {
                                    s += this.get(i, k) * Bcolj[k];
                                }

                                result.set(i, j, s);
                            }
                        }
                        return result;
                    }

                    strassen2x2(other) {
                        var result = new this.constructor[Symbol.species](2, 2);
                        const a11 = this.get(0, 0);
                        const b11 = other.get(0, 0);
                        const a12 = this.get(0, 1);
                        const b12 = other.get(0, 1);
                        const a21 = this.get(1, 0);
                        const b21 = other.get(1, 0);
                        const a22 = this.get(1, 1);
                        const b22 = other.get(1, 1);

                        // Compute intermediate values.
                        const m1 = (a11 + a22) * (b11 + b22);
                        const m2 = (a21 + a22) * b11;
                        const m3 = a11 * (b12 - b22);
                        const m4 = a22 * (b21 - b11);
                        const m5 = (a11 + a12) * b22;
                        const m6 = (a21 - a11) * (b11 + b12);
                        const m7 = (a12 - a22) * (b21 + b22);

                        // Combine intermediate values into the output.
                        const c00 = m1 + m4 - m5 + m7;
                        const c01 = m3 + m5;
                        const c10 = m2 + m4;
                        const c11 = m1 - m2 + m3 + m6;

                        result.set(0, 0, c00);
                        result.set(0, 1, c01);
                        result.set(1, 0, c10);
                        result.set(1, 1, c11);
                        return result;
                    }

                    strassen3x3(other) {
                        var result = new this.constructor[Symbol.species](3, 3);

                        const a00 = this.get(0, 0);
                        const a01 = this.get(0, 1);
                        const a02 = this.get(0, 2);
                        const a10 = this.get(1, 0);
                        const a11 = this.get(1, 1);
                        const a12 = this.get(1, 2);
                        const a20 = this.get(2, 0);
                        const a21 = this.get(2, 1);
                        const a22 = this.get(2, 2);

                        const b00 = other.get(0, 0);
                        const b01 = other.get(0, 1);
                        const b02 = other.get(0, 2);
                        const b10 = other.get(1, 0);
                        const b11 = other.get(1, 1);
                        const b12 = other.get(1, 2);
                        const b20 = other.get(2, 0);
                        const b21 = other.get(2, 1);
                        const b22 = other.get(2, 2);

                        const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;
                        const m2 = (a00 - a10) * (-b01 + b11);
                        const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);
                        const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);
                        const m5 = (a10 + a11) * (-b00 + b01);
                        const m6 = a00 * b00;
                        const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);
                        const m8 = (-a00 + a20) * (b02 - b12);
                        const m9 = (a20 + a21) * (-b00 + b02);
                        const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;
                        const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);
                        const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);
                        const m13 = (a02 - a22) * (b11 - b21);
                        const m14 = a02 * b20;
                        const m15 = (a21 + a22) * (-b20 + b21);
                        const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);
                        const m17 = (a02 - a12) * (b12 - b22);
                        const m18 = (a11 + a12) * (-b20 + b22);
                        const m19 = a01 * b10;
                        const m20 = a12 * b21;
                        const m21 = a10 * b02;
                        const m22 = a20 * b01;
                        const m23 = a22 * b22;

                        const c00 = m6 + m14 + m19;
                        const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;
                        const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;
                        const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;
                        const c11 = m2 + m4 + m5 + m6 + m20;
                        const c12 = m14 + m16 + m17 + m18 + m21;
                        const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;
                        const c21 = m12 + m13 + m14 + m15 + m22;
                        const c22 = m6 + m7 + m8 + m9 + m23;

                        result.set(0, 0, c00);
                        result.set(0, 1, c01);
                        result.set(0, 2, c02);
                        result.set(1, 0, c10);
                        result.set(1, 1, c11);
                        result.set(1, 2, c12);
                        result.set(2, 0, c20);
                        result.set(2, 1, c21);
                        result.set(2, 2, c22);
                        return result;
                    }

                    /**
                     * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.
                     * @param {Matrix} y
                     * @return {Matrix}
                     */
                    mmulStrassen(y) {
                        var x = this.clone();
                        var r1 = x.rows;
                        var c1 = x.columns;
                        var r2 = y.rows;
                        var c2 = y.columns;
                        if (c1 !== r2) {
                            // eslint-disable-next-line no-console
                            console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);
                        }

                        // Put a matrix into the top left of a matrix of zeros.
                        // `rows` and `cols` are the dimensions of the output matrix.
                        function embed(mat, rows, cols) {
                            var r = mat.rows;
                            var c = mat.columns;
                            if ((r === rows) && (c === cols)) {
                                return mat;
                            } else {
                                var resultat = Matrix.zeros(rows, cols);
                                resultat = resultat.setSubMatrix(mat, 0, 0);
                                return resultat;
                            }
                        }


                        // Make sure both matrices are the same size.
                        // This is exclusively for simplicity:
                        // this algorithm can be implemented with matrices of different sizes.

                        var r = Math.max(r1, r2);
                        var c = Math.max(c1, c2);
                        x = embed(x, r, c);
                        y = embed(y, r, c);

                        // Our recursive multiplication function.
                        function blockMult(a, b, rows, cols) {
                            // For small matrices, resort to naive multiplication.
                            if (rows <= 512 || cols <= 512) {
                                return a.mmul(b); // a is equivalent to this
                            }

                            // Apply dynamic padding.
                            if ((rows % 2 === 1) && (cols % 2 === 1)) {
                                a = embed(a, rows + 1, cols + 1);
                                b = embed(b, rows + 1, cols + 1);
                            } else if (rows % 2 === 1) {
                                a = embed(a, rows + 1, cols);
                                b = embed(b, rows + 1, cols);
                            } else if (cols % 2 === 1) {
                                a = embed(a, rows, cols + 1);
                                b = embed(b, rows, cols + 1);
                            }

                            var halfRows = parseInt(a.rows / 2);
                            var halfCols = parseInt(a.columns / 2);
                            // Subdivide input matrices.
                            var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);
                            var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);

                            var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);
                            var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);

                            var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);
                            var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);

                            var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);
                            var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);

                            // Compute intermediate values.
                            var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);
                            var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);
                            var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);
                            var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);
                            var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);
                            var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);
                            var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);

                            // Combine intermediate values into the output.
                            var c11 = Matrix.add(m1, m4);
                            c11.sub(m5);
                            c11.add(m7);
                            var c12 = Matrix.add(m3, m5);
                            var c21 = Matrix.add(m2, m4);
                            var c22 = Matrix.sub(m1, m2);
                            c22.add(m3);
                            c22.add(m6);

                            //Crop output to the desired size (undo dynamic padding).
                            var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);
                            resultat = resultat.setSubMatrix(c11, 0, 0);
                            resultat = resultat.setSubMatrix(c12, c11.rows, 0);
                            resultat = resultat.setSubMatrix(c21, 0, c11.columns);
                            resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);
                            return resultat.subMatrix(0, rows - 1, 0, cols - 1);
                        }
                        return blockMult(x, y, r, c);
                    }

                    /**
                     * Returns a row-by-row scaled matrix
                     * @param {number} [min=0] - Minimum scaled value
                     * @param {number} [max=1] - Maximum scaled value
                     * @return {Matrix} - The scaled matrix
                     */
                    scaleRows(min, max) {
                        min = min === undefined ? 0 : min;
                        max = max === undefined ? 1 : max;
                        if (min >= max) {
                            throw new RangeError('min should be strictly smaller than max');
                        }
                        var newMatrix = this.constructor.empty(this.rows, this.columns);
                        for (var i = 0; i < this.rows; i++) {
                            var scaled = rescale(this.getRow(i), {min, max});
                            newMatrix.setRow(i, scaled);
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns a new column-by-column scaled matrix
                     * @param {number} [min=0] - Minimum scaled value
                     * @param {number} [max=1] - Maximum scaled value
                     * @return {Matrix} - The new scaled matrix
                     * @example
                     * var matrix = new Matrix([[1,2],[-1,0]]);
                     * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]
                     */
                    scaleColumns(min, max) {
                        min = min === undefined ? 0 : min;
                        max = max === undefined ? 1 : max;
                        if (min >= max) {
                            throw new RangeError('min should be strictly smaller than max');
                        }
                        var newMatrix = this.constructor.empty(this.rows, this.columns);
                        for (var i = 0; i < this.columns; i++) {
                            var scaled = rescale(this.getColumn(i), {
                                min: min,
                                max: max
                            });
                            newMatrix.setColumn(i, scaled);
                        }
                        return newMatrix;
                    }


                    /**
                     * Returns the Kronecker product (also known as tensor product) between this and other
                     * See https://en.wikipedia.org/wiki/Kronecker_product
                     * @param {Matrix} other
                     * @return {Matrix}
                     */
                    kroneckerProduct(other) {
                        other = this.constructor.checkMatrix(other);

                        var m = this.rows;
                        var n = this.columns;
                        var p = other.rows;
                        var q = other.columns;

                        var result = new this.constructor[Symbol.species](m * p, n * q);
                        for (var i = 0; i < m; i++) {
                            for (var j = 0; j < n; j++) {
                                for (var k = 0; k < p; k++) {
                                    for (var l = 0; l < q; l++) {
                                        result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);
                                    }
                                }
                            }
                        }
                        return result;
                    }

                    /**
                     * Transposes the matrix and returns a new one containing the result
                     * @return {Matrix}
                     */
                    transpose() {
                        var result = new this.constructor[Symbol.species](this.columns, this.rows);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                result.set(j, i, this.get(i, j));
                            }
                        }
                        return result;
                    }

                    /**
                     * Sorts the rows (in place)
                     * @param {function} compareFunction - usual Array.prototype.sort comparison function
                     * @return {Matrix} this
                     */
                    sortRows(compareFunction) {
                        if (compareFunction === undefined) compareFunction = compareNumbers;
                        for (var i = 0; i < this.rows; i++) {
                            this.setRow(i, this.getRow(i).sort(compareFunction));
                        }
                        return this;
                    }

                    /**
                     * Sorts the columns (in place)
                     * @param {function} compareFunction - usual Array.prototype.sort comparison function
                     * @return {Matrix} this
                     */
                    sortColumns(compareFunction) {
                        if (compareFunction === undefined) compareFunction = compareNumbers;
                        for (var i = 0; i < this.columns; i++) {
                            this.setColumn(i, this.getColumn(i).sort(compareFunction));
                        }
                        return this;
                    }

                    /**
                     * Returns a subset of the matrix
                     * @param {number} startRow - First row index
                     * @param {number} endRow - Last row index
                     * @param {number} startColumn - First column index
                     * @param {number} endColumn - Last column index
                     * @return {Matrix}
                     */
                    subMatrix(startRow, endRow, startColumn, endColumn) {
                        checkRange(this, startRow, endRow, startColumn, endColumn);
                        var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);
                        for (var i = startRow; i <= endRow; i++) {
                            for (var j = startColumn; j <= endColumn; j++) {
                                newMatrix[i - startRow][j - startColumn] = this.get(i, j);
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns a subset of the matrix based on an array of row indices
                     * @param {Array} indices - Array containing the row indices
                     * @param {number} [startColumn = 0] - First column index
                     * @param {number} [endColumn = this.columns-1] - Last column index
                     * @return {Matrix}
                     */
                    subMatrixRow(indices, startColumn, endColumn) {
                        if (startColumn === undefined) startColumn = 0;
                        if (endColumn === undefined) endColumn = this.columns - 1;
                        if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {
                            throw new RangeError('Argument out of range');
                        }

                        var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);
                        for (var i = 0; i < indices.length; i++) {
                            for (var j = startColumn; j <= endColumn; j++) {
                                if (indices[i] < 0 || indices[i] >= this.rows) {
                                    throw new RangeError('Row index out of range: ' + indices[i]);
                                }
                                newMatrix.set(i, j - startColumn, this.get(indices[i], j));
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns a subset of the matrix based on an array of column indices
                     * @param {Array} indices - Array containing the column indices
                     * @param {number} [startRow = 0] - First row index
                     * @param {number} [endRow = this.rows-1] - Last row index
                     * @return {Matrix}
                     */
                    subMatrixColumn(indices, startRow, endRow) {
                        if (startRow === undefined) startRow = 0;
                        if (endRow === undefined) endRow = this.rows - 1;
                        if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {
                            throw new RangeError('Argument out of range');
                        }

                        var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);
                        for (var i = 0; i < indices.length; i++) {
                            for (var j = startRow; j <= endRow; j++) {
                                if (indices[i] < 0 || indices[i] >= this.columns) {
                                    throw new RangeError('Column index out of range: ' + indices[i]);
                                }
                                newMatrix.set(j - startRow, i, this.get(j, indices[i]));
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Set a part of the matrix to the given sub-matrix
                     * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.
                     * @param {number} startRow - The index of the first row to set
                     * @param {number} startColumn - The index of the first column to set
                     * @return {Matrix}
                     */
                    setSubMatrix(matrix, startRow, startColumn) {
                        matrix = this.constructor.checkMatrix(matrix);
                        var endRow = startRow + matrix.rows - 1;
                        var endColumn = startColumn + matrix.columns - 1;
                        checkRange(this, startRow, endRow, startColumn, endColumn);
                        for (var i = 0; i < matrix.rows; i++) {
                            for (var j = 0; j < matrix.columns; j++) {
                                this[startRow + i][startColumn + j] = matrix.get(i, j);
                            }
                        }
                        return this;
                    }

                    /**
                     * Return a new matrix based on a selection of rows and columns
                     * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.
                     * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.
                     * @return {Matrix} The new matrix
                     */
                    selection(rowIndices, columnIndices) {
                        var indices = checkIndices(this, rowIndices, columnIndices);
                        var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);
                        for (var i = 0; i < indices.row.length; i++) {
                            var rowIndex = indices.row[i];
                            for (var j = 0; j < indices.column.length; j++) {
                                var columnIndex = indices.column[j];
                                newMatrix[i][j] = this.get(rowIndex, columnIndex);
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns the trace of the matrix (sum of the diagonal elements)
                     * @return {number}
                     */
                    trace() {
                        var min = Math.min(this.rows, this.columns);
                        var trace = 0;
                        for (var i = 0; i < min; i++) {
                            trace += this.get(i, i);
                        }
                        return trace;
                    }

                    /*
                     Matrix views
                     */

                    /**
                     * Returns a view of the transposition of the matrix
                     * @return {MatrixTransposeView}
                     */
                    transposeView() {
                        return new MatrixTransposeView(this);
                    }

                    /**
                     * Returns a view of the row vector with the given index
                     * @param {number} row - row index of the vector
                     * @return {MatrixRowView}
                     */
                    rowView(row) {
                        checkRowIndex(this, row);
                        return new MatrixRowView(this, row);
                    }

                    /**
                     * Returns a view of the column vector with the given index
                     * @param {number} column - column index of the vector
                     * @return {MatrixColumnView}
                     */
                    columnView(column) {
                        checkColumnIndex(this, column);
                        return new MatrixColumnView(this, column);
                    }

                    /**
                     * Returns a view of the matrix flipped in the row axis
                     * @return {MatrixFlipRowView}
                     */
                    flipRowView() {
                        return new MatrixFlipRowView(this);
                    }

                    /**
                     * Returns a view of the matrix flipped in the column axis
                     * @return {MatrixFlipColumnView}
                     */
                    flipColumnView() {
                        return new MatrixFlipColumnView(this);
                    }

                    /**
                     * Returns a view of a submatrix giving the index boundaries
                     * @param {number} startRow - first row index of the submatrix
                     * @param {number} endRow - last row index of the submatrix
                     * @param {number} startColumn - first column index of the submatrix
                     * @param {number} endColumn - last column index of the submatrix
                     * @return {MatrixSubView}
                     */
                    subMatrixView(startRow, endRow, startColumn, endColumn) {
                        return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);
                    }

                    /**
                     * Returns a view of the cross of the row indices and the column indices
                     * @example
                     * // resulting vector is [[2], [2]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])
                     * @param {Array<number>} rowIndices
                     * @param {Array<number>} columnIndices
                     * @return {MatrixSelectionView}
                     */
                    selectionView(rowIndices, columnIndices) {
                        return new MatrixSelectionView(this, rowIndices, columnIndices);
                    }

                    /**
                     * Returns a view of the row indices
                     * @example
                     * // resulting vector is [[1,2,3], [1,2,3]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).rowSelectionView([0, 0])
                     * @param {Array<number>} rowIndices
                     * @return {MatrixRowSelectionView}
                     */
                    rowSelectionView(rowIndices) {
                        return new MatrixRowSelectionView(this, rowIndices);
                    }

                    /**
                     * Returns a view of the column indices
                     * @example
                     * // resulting vector is [[2, 2], [5, 5]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).columnSelectionView([1, 1])
                     * @param {Array<number>} columnIndices
                     * @return {MatrixColumnSelectionView}
                     */
                    columnSelectionView(columnIndices) {
                        return new MatrixColumnSelectionView(this, columnIndices);
                    }


                    /**
                    * Calculates and returns the determinant of a matrix as a Number
                    * @example
                    *   new Matrix([[1,2,3], [4,5,6]]).det()
                    * @return {number}
                    */
                    det() {
                        if (this.isSquare()) {
                            var a, b, c, d;
                            if (this.columns === 2) {
                                // 2 x 2 matrix
                                a = this.get(0, 0);
                                b = this.get(0, 1);
                                c = this.get(1, 0);
                                d = this.get(1, 1);

                                return a * d - (b * c);
                            } else if (this.columns === 3) {
                                // 3 x 3 matrix
                                var subMatrix0, subMatrix1, subMatrix2;
                                subMatrix0 = this.selectionView([1, 2], [1, 2]);
                                subMatrix1 = this.selectionView([1, 2], [0, 2]);
                                subMatrix2 = this.selectionView([1, 2], [0, 1]);
                                a = this.get(0, 0);
                                b = this.get(0, 1);
                                c = this.get(0, 2);

                                return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();
                            } else {
                                // general purpose determinant using the LU decomposition
                                return new LuDecomposition$$1(this).determinant;
                            }

                        } else {
                            throw Error('Determinant can only be calculated for a square matrix.');
                        }
                    }

                    /**
                     * Returns inverse of a matrix if it exists or the pseudoinverse
                     * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)
                     * @return {Matrix} the (pseudo)inverted matrix.
                     */
                    pseudoInverse(threshold) {
                        if (threshold === undefined) threshold = Number.EPSILON;
                        var svdSolution = new SingularValueDecomposition$$1(this, {autoTranspose: true});

                        var U = svdSolution.leftSingularVectors;
                        var V = svdSolution.rightSingularVectors;
                        var s = svdSolution.diagonal;

                        for (var i = 0; i < s.length; i++) {
                            if (Math.abs(s[i]) > threshold) {
                                s[i] = 1.0 / s[i];
                            } else {
                                s[i] = 0.0;
                            }
                        }

                        // convert list to diagonal
                        s = this.constructor[Symbol.species].diag(s);
                        return V.mmul(s.mmul(U.transposeView()));
                    }

                    /**
                     * Creates an exact and independent copy of the matrix
                     * @return {Matrix}
                     */
                    clone() {
                        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);
                        for (var row = 0; row < this.rows; row++) {
                            for (var column = 0; column < this.columns; column++) {
                                newMatrix.set(row, column, this.get(row, column));
                            }
                        }
                        return newMatrix;
                    }
                }

                Matrix.prototype.klass = 'Matrix';

                function compareNumbers(a, b) {
                    return a - b;
                }

                /*
                 Synonyms
                 */

                Matrix.random = Matrix.rand;
                Matrix.diagonal = Matrix.diag;
                Matrix.prototype.diagonal = Matrix.prototype.diag;
                Matrix.identity = Matrix.eye;
                Matrix.prototype.negate = Matrix.prototype.neg;
                Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;
                Matrix.prototype.determinant = Matrix.prototype.det;

                /*
                 Add dynamically instance and static methods for mathematical operations
                 */

                var inplaceOperator = `
(function %name%(value) {
    if (typeof value === 'number') return this.%name%S(value);
    return this.%name%M(value);
})
`;

                var inplaceOperatorScalar = `
(function %name%S(value) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) %op% value);
        }
    }
    return this;
})
`;

                var inplaceOperatorMatrix = `
(function %name%M(matrix) {
    matrix = this.constructor.checkMatrix(matrix);
    if (this.rows !== matrix.rows ||
        this.columns !== matrix.columns) {
        throw new RangeError('Matrices dimensions must be equal');
    }
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));
        }
    }
    return this;
})
`;

                var staticOperator = `
(function %name%(matrix, value) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%(value);
})
`;

                var inplaceMethod = `
(function %name%() {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j)));
        }
    }
    return this;
})
`;

                var staticMethod = `
(function %name%(matrix) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%();
})
`;

                var inplaceMethodWithArgs = `
(function %name%(%args%) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), %args%));
        }
    }
    return this;
})
`;

                var staticMethodWithArgs = `
(function %name%(matrix, %args%) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%(%args%);
})
`;


                var inplaceMethodWithOneArgScalar = `
(function %name%S(value) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), value));
        }
    }
    return this;
})
`;
                var inplaceMethodWithOneArgMatrix = `
(function %name%M(matrix) {
    matrix = this.constructor.checkMatrix(matrix);
    if (this.rows !== matrix.rows ||
        this.columns !== matrix.columns) {
        throw new RangeError('Matrices dimensions must be equal');
    }
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));
        }
    }
    return this;
})
`;

                var inplaceMethodWithOneArg = `
(function %name%(value) {
    if (typeof value === 'number') return this.%name%S(value);
    return this.%name%M(value);
})
`;

                var staticMethodWithOneArg = staticMethodWithArgs;

                var operators = [
                    // Arithmetic operators
                    ['+', 'add'],
                    ['-', 'sub', 'subtract'],
                    ['*', 'mul', 'multiply'],
                    ['/', 'div', 'divide'],
                    ['%', 'mod', 'modulus'],
                    // Bitwise operators
                    ['&', 'and'],
                    ['|', 'or'],
                    ['^', 'xor'],
                    ['<<', 'leftShift'],
                    ['>>', 'signPropagatingRightShift'],
                    ['>>>', 'rightShift', 'zeroFillRightShift']
                ];

                var i;
                var eval2 = eval;
                for (var operator of operators) {
                    var inplaceOp = eval2(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));
                    var inplaceOpS = eval2(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));
                    var inplaceOpM = eval2(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));
                    var staticOp = eval2(fillTemplateFunction(staticOperator, {name: operator[1]}));
                    for (i = 1; i < operator.length; i++) {
                        Matrix.prototype[operator[i]] = inplaceOp;
                        Matrix.prototype[operator[i] + 'S'] = inplaceOpS;
                        Matrix.prototype[operator[i] + 'M'] = inplaceOpM;
                        Matrix[operator[i]] = staticOp;
                    }
                }

                var methods = [
                    ['~', 'not']
                ];

                [
                    'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',
                    'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',
                    'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'
                ].forEach(function (mathMethod) {
                    methods.push(['Math.' + mathMethod, mathMethod]);
                });

                for (var method of methods) {
                    var inplaceMeth = eval2(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));
                    var staticMeth = eval2(fillTemplateFunction(staticMethod, {name: method[1]}));
                    for (i = 1; i < method.length; i++) {
                        Matrix.prototype[method[i]] = inplaceMeth;
                        Matrix[method[i]] = staticMeth;
                    }
                }

                var methodsWithArgs = [
                    ['Math.pow', 1, 'pow']
                ];

                for (var methodWithArg of methodsWithArgs) {
                    var args = 'arg0';
                    for (i = 1; i < methodWithArg[1]; i++) {
                        args += `, arg${i}`;
                    }
                    if (methodWithArg[1] !== 1) {
                        var inplaceMethWithArgs = eval2(fillTemplateFunction(inplaceMethodWithArgs, {
                            name: methodWithArg[2],
                            method: methodWithArg[0],
                            args: args
                        }));
                        var staticMethWithArgs = eval2(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));
                        for (i = 2; i < methodWithArg.length; i++) {
                            Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;
                            Matrix[methodWithArg[i]] = staticMethWithArgs;
                        }
                    } else {
                        var tmplVar = {
                            name: methodWithArg[2],
                            args: args,
                            method: methodWithArg[0]
                        };
                        var inplaceMethod2 = eval2(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));
                        var inplaceMethodS = eval2(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));
                        var inplaceMethodM = eval2(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));
                        var staticMethod2 = eval2(fillTemplateFunction(staticMethodWithOneArg, tmplVar));
                        for (i = 2; i < methodWithArg.length; i++) {
                            Matrix.prototype[methodWithArg[i]] = inplaceMethod2;
                            Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;
                            Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;
                            Matrix[methodWithArg[i]] = staticMethod2;
                        }
                    }
                }

                function fillTemplateFunction(template, values) {
                    for (var value in values) {
                        template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);
                    }
                    return template;
                }

                return Matrix;
            }

            class Matrix extends AbstractMatrix(Array) {
                constructor(nRows, nColumns) {
                    var i;
                    if (arguments.length === 1 && typeof nRows === 'number') {
                        return new Array(nRows);
                    }
                    if (Matrix.isMatrix(nRows)) {
                        return nRows.clone();
                    } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix
                        super(nRows);
                        if (Number.isInteger(nColumns) && nColumns > 0) {
                            for (i = 0; i < nRows; i++) {
                                this[i] = new Array(nColumns);
                            }
                        } else {
                            throw new TypeError('nColumns must be a positive integer');
                        }
                    } else if (Array.isArray(nRows)) { // Copy the values from the 2D array
                        const matrix = nRows;
                        nRows = matrix.length;
                        nColumns = matrix[0].length;
                        if (typeof nColumns !== 'number' || nColumns === 0) {
                            throw new TypeError('Data must be a 2D array with at least one element');
                        }
                        super(nRows);
                        for (i = 0; i < nRows; i++) {
                            if (matrix[i].length !== nColumns) {
                                throw new RangeError('Inconsistent array dimensions');
                            }
                            this[i] = [].concat(matrix[i]);
                        }
                    } else {
                        throw new TypeError('First argument must be a positive number or an array');
                    }
                    this.rows = nRows;
                    this.columns = nColumns;
                    return this;
                }

                set(rowIndex, columnIndex, value) {
                    this[rowIndex][columnIndex] = value;
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this[rowIndex][columnIndex];
                }

                /**
                 * Removes a row from the given index
                 * @param {number} index - Row index
                 * @return {Matrix} this
                 */
                removeRow(index) {
                    checkRowIndex(this, index);
                    if (this.rows === 1) {
                        throw new RangeError('A matrix cannot have less than one row');
                    }
                    this.splice(index, 1);
                    this.rows -= 1;
                    return this;
                }

                /**
                 * Adds a row at the given index
                 * @param {number} [index = this.rows] - Row index
                 * @param {Array|Matrix} array - Array or vector
                 * @return {Matrix} this
                 */
                addRow(index, array) {
                    if (array === undefined) {
                        array = index;
                        index = this.rows;
                    }
                    checkRowIndex(this, index, true);
                    array = checkRowVector(this, array, true);
                    this.splice(index, 0, array);
                    this.rows += 1;
                    return this;
                }

                /**
                 * Removes a column from the given index
                 * @param {number} index - Column index
                 * @return {Matrix} this
                 */
                removeColumn(index) {
                    checkColumnIndex(this, index);
                    if (this.columns === 1) {
                        throw new RangeError('A matrix cannot have less than one column');
                    }
                    for (var i = 0; i < this.rows; i++) {
                        this[i].splice(index, 1);
                    }
                    this.columns -= 1;
                    return this;
                }

                /**
                 * Adds a column at the given index
                 * @param {number} [index = this.columns] - Column index
                 * @param {Array|Matrix} array - Array or vector
                 * @return {Matrix} this
                 */
                addColumn(index, array) {
                    if (typeof array === 'undefined') {
                        array = index;
                        index = this.columns;
                    }
                    checkColumnIndex(this, index, true);
                    array = checkColumnVector(this, array);
                    for (var i = 0; i < this.rows; i++) {
                        this[i].splice(index, 0, array[i]);
                    }
                    this.columns += 1;
                    return this;
                }
            }

            class WrapperMatrix1D extends AbstractMatrix() {
                /**
                 * @class WrapperMatrix1D
                 * @param {Array<number>} data
                 * @param {object} [options]
                 * @param {object} [options.rows = 1]
                 */
                constructor(data, options = {}) {
                    const {
                        rows = 1
                    } = options;

                    if (data.length % rows !== 0) {
                        throw new Error('the data length is not divisible by the number of rows');
                    }
                    super();
                    this.rows = rows;
                    this.columns = data.length / rows;
                    this.data = data;
                }

                set(rowIndex, columnIndex, value) {
                    var index = this._calculateIndex(rowIndex, columnIndex);
                    this.data[index] = value;
                    return this;
                }

                get(rowIndex, columnIndex) {
                    var index = this._calculateIndex(rowIndex, columnIndex);
                    return this.data[index];
                }

                _calculateIndex(row, column) {
                    return (row * this.columns) + column;
                }

                static get [Symbol.species]() {
                    return Matrix;
                }
            }

            class WrapperMatrix2D extends AbstractMatrix() {
                /**
                 * @class WrapperMatrix2D
                 * @param {Array<Array<number>>} data
                 */
                constructor(data) {
                    super();
                    this.data = data;
                    this.rows = data.length;
                    this.columns = data[0].length;
                }

                set(rowIndex, columnIndex, value) {
                    this.data[rowIndex][columnIndex] = value;
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.data[rowIndex][columnIndex];
                }

                static get [Symbol.species]() {
                    return Matrix;
                }
            }

            /**
             * Computes the mean of the given values
             * @param {Array<number>} input
             * @return {number}
             */
            function mean(input) {
                if (!Array.isArray(input)) {
                    throw new Error('input must be an array');
                }

                if (input.length === 0) {
                    throw new Error('input must not be empty');
                }

                var sum = 0;
                for (var i = 0; i < input.length; i++) {
                    sum += input[i];
                }
                return sum / input.length;
            }

            /**
             * @private
             * return an array of probabilities of each class
             * @param {Array} array - contains the classes
             * @param {number} numberOfClasses
             * @return {Matrix} - rowVector of probabilities.
             */
            function toDiscreteDistribution(array, numberOfClasses) {
                var counts = new Array(numberOfClasses).fill(0);
                for (var i = 0; i < array.length; ++i) {
                    counts[array[i]] += 1 / array.length;
                }

                return Matrix.rowVector(counts);
            }

            /**
             * @private
             * Retrieves the impurity of array of predictions
             * @param {Array} array - predictions.
             * @return {number} Gini impurity
             */
            function giniImpurity(array) {
                if (array.length === 0) {
                    return 0;
                }

                var probabilities = toDiscreteDistribution(array, getNumberOfClasses(array))[0];

                var sum = 0.0;
                for (var i = 0; i < probabilities.length; ++i) {
                    sum += probabilities[i] * probabilities[i];
                }

                return 1 - sum;
            }

            /**
             * @private
             * Return the number of classes given the array of predictions.
             * @param {Array} array - predictions.
             * @return {number} Number of classes.
             */
            function getNumberOfClasses(array) {
                return array.filter(function (val, i, arr) {
                    return arr.indexOf(val) === i;
                }).length;
            }

            /**
             * @private
             * Calculates the Gini Gain of an array of predictions and those predictions splitted by a feature.
             * @para {Array} array - Predictions
             * @param {object} splitted - Object with elements "greater" and "lesser" that contains an array of predictions splitted.
             * @return {number} - Gini Gain.
             */

            function giniGain(array, splitted) {
                var splitsImpurity = 0.0;
                var splits = ['greater', 'lesser'];

                for (var i = 0; i < splits.length; ++i) {
                    var currentSplit = splitted[splits[i]];
                    splitsImpurity += giniImpurity(currentSplit) * currentSplit.length / array.length;
                }

                return giniImpurity(array) - splitsImpurity;
            }

            /**
             * @private
             * Calculates the squared error of a predictions values.
             * @param {Array} array - predictions values
             * @return {number} squared error.
             */
            function squaredError(array) {
                var l = array.length;

                var m = mean(array);
                var squaredError = 0.0;

                for (var i = 0; i < l; ++i) {
                    var currentElement = array[i];
                    squaredError += (currentElement - m) * (currentElement - m);
                }

                return squaredError;
            }

            /**
             * @private
             * Calculates the sum of squared error of the two arrays that contains the splitted values.
             * @param {Array} array - this argument is no necessary but is used to fit with the main interface.
             * @param {object} splitted - Object with elements "greater" and "lesser" that contains an array of predictions splitted.
             * @return {number} - sum of squared errors.
             */
            function regressionError(array, splitted) {
                var error = 0.0;
                var splits = ['greater', 'lesser'];

                for (var i = 0; i < splits.length; ++i) {
                    var currentSplit = splitted[splits[i]];
                    error += squaredError(currentSplit);
                }
                return error;
            }

            /**
             * @private
             * Split the training set and values from a given column of the training set if is less than a value
             * @param {Matrix} X - Training set.
             * @param {Array} y - Training values.
             * @param {number} column - Column to split.
             * @param {number} value - value to split the Training set and values.
             * @return {object} - Object that contains the splitted values.
             */
            function matrixSplitter(X, y, column, value) {
                var lesserX = [];
                var greaterX = [];
                var lesserY = [];
                var greaterY = [];

                for (var i = 0; i < X.rows; ++i) {
                    if (X[i][column] < value) {
                        lesserX.push(X[i]);
                        lesserY.push(y[i]);
                    } else {
                        greaterX.push(X[i]);
                        greaterY.push(y[i]);
                    }
                }

                return {
                    greaterX: greaterX,
                    greaterY: greaterY,
                    lesserX: lesserX,
                    lesserY: lesserY
                };
            }

            /**
             * @private
             * Calculates the mean between two values
             * @param {number} a
             * @param {number} b
             * @return {number}
             */
            function mean$1(a, b) {
                return (a + b) / 2;
            }

            /**
             * @private
             * Returns a list of tuples that contains the i-th element of each array.
             * @param {Array} a
             * @param {Array} b
             * @return {Array} list of tuples.
             */
            function zip(a, b) {
                if (a.length !== b.length) {
                    throw new TypeError('Error on zip: the size of a: ' + a.length + ' is different from b: ' + b.length);
                }

                var ret = new Array(a.length);
                for (var i = 0; i < a.length; ++i) {
                    ret[i] = [a[i], b[i]];
                }

                return ret;
            }

            const gainFunctions = {
                gini: giniGain,
                regression: regressionError
            };

            const splitFunctions = {
                mean: mean$1
            };

            class TreeNode {

                /**
                 * @private
                 * Constructor for a tree node given the options received on the main classes (DecisionTreeClassifier, DecisionTreeRegression)
                 * @param {object|TreeNode} options for loading
                 * @constructor
                 */
                constructor(options) {
                    // options parameters
                    this.kind = options.kind;
                    this.gainFunction = options.gainFunction;
                    this.splitFunction = options.splitFunction;
                    this.minNumSamples = options.minNumSamples;
                    this.maxDepth = options.maxDepth;
                }

                /**
                 * @private
                 * Function that retrieve the best feature to make the split.
                 * @param {Matrix} XTranspose - Training set transposed
                 * @param {Array} y - labels or values (depending of the decision tree)
                 * @return {object} - return tree values, the best gain, column and the split value.
                 */
                bestSplit(XTranspose, y) {

                    // Depending in the node tree class, we set the variables to check information gain (to classify)
                    // or error (for regression)

                    var bestGain = this.kind === 'classifier' ? -Infinity : Infinity;
                    var check = this.kind === 'classifier' ? (a, b) => a > b : (a, b) => a < b;


                    var maxColumn;
                    var maxValue;

                    for (var i = 0; i < XTranspose.rows; ++i) {
                        var currentFeature = XTranspose[i];
                        var splitValues = this.featureSplit(currentFeature, y);
                        for (var j = 0; j < splitValues.length; ++j) {
                            var currentSplitVal = splitValues[j];
                            var splitted = this.split(currentFeature, y, currentSplitVal);

                            var gain = gainFunctions[this.gainFunction](y, splitted);
                            if (check(gain, bestGain)) {
                                maxColumn = i;
                                maxValue = currentSplitVal;
                                bestGain = gain;
                            }
                        }
                    }

                    return {
                        maxGain: bestGain,
                        maxColumn: maxColumn,
                        maxValue: maxValue
                    };
                }

                /**
                 * @private
                 * Makes the split of the training labels or values from the training set feature given a split value.
                 * @param {Array} x - Training set feature
                 * @param {Array} y - Training set value or label
                 * @param {number} splitValue
                 * @return {object}
                 */

                split(x, y, splitValue) {
                    var lesser = [];
                    var greater = [];

                    for (var i = 0; i < x.length; ++i) {
                        if (x[i] < splitValue) {
                            lesser.push(y[i]);
                        } else {
                            greater.push(y[i]);
                        }
                    }

                    return {
                        greater: greater,
                        lesser: lesser
                    };
                }

                /**
                 * @private
                 * Calculates the possible points to split over the tree given a training set feature and corresponding labels or values.
                 * @param {Array} x - Training set feature
                 * @param {Array} y - Training set value or label
                 * @return {Array} possible split values.
                 */
                featureSplit(x, y) {
                    var splitValues = [];
                    var arr = zip(x, y);
                    arr.sort(function (a, b) {
                        return a[0] - b[0];
                    });

                    for (var i = 1; i < arr.length; ++i) {
                        if (arr[i - 1][1] !== arr[i][1]) {
                            splitValues.push(splitFunctions[this.splitFunction](arr[i - 1][0], arr[i][0]));
                        }
                    }

                    return splitValues;
                }

                /**
                 * @private
                 * Calculate the predictions of a leaf tree node given the training labels or values
                 * @param {Array} y
                 */
                calculatePrediction(y) {
                    if (this.kind === 'classifier') {
                        this.distribution = toDiscreteDistribution(y, getNumberOfClasses(y));
                        if (this.distribution.columns === 0) {
                            throw new TypeError('Error on calculate the prediction');
                        }
                    } else {
                        this.distribution = mean(y);
                    }
                }

                /**
                 * @private
                 * Train a node given the training set and labels, because it trains recursively, it also receive
                 * the current depth of the node, parent gain to avoid infinite recursion and boolean value to check if
                 * the training set is transposed.
                 * @param {Matrix} X - Training set (could be transposed or not given transposed).
                 * @param {Array} y - Training labels or values.
                 * @param {number} currentDepth - Current depth of the node.
                 * @param {number} parentGain - parent node gain or error.
                 */
                train(X, y, currentDepth, parentGain) {
                    if (X.rows <= this.minNumSamples) {
                        this.calculatePrediction(y);
                        return;
                    }
                    if (parentGain === undefined) parentGain = 0.0;

                    var XTranspose = X.transpose();
                    var split = this.bestSplit(XTranspose, y);

                    this.splitValue = split.maxValue;
                    this.splitColumn = split.maxColumn;
                    this.gain = split.maxGain;

                    var splittedMatrix = matrixSplitter(X, y, this.splitColumn, this.splitValue);

                    if (currentDepth < this.maxDepth &&
                        (this.gain > 0.01 && this.gain !== parentGain) &&
                        (splittedMatrix.lesserX.length > 0 && splittedMatrix.greaterX.length > 0)) {
                        this.left = new TreeNode(this);
                        this.right = new TreeNode(this);

                        var lesserX = new Matrix(splittedMatrix.lesserX);
                        var greaterX = new Matrix(splittedMatrix.greaterX);

                        this.left.train(lesserX, splittedMatrix.lesserY, currentDepth + 1, this.gain);
                        this.right.train(greaterX, splittedMatrix.greaterY, currentDepth + 1, this.gain);
                    } else {
                        this.calculatePrediction(y);
                    }
                }

                /**
                 * @private
                 * Calculates the prediction of a given element.
                 * @param {Array} row
                 * @return {number|Array} prediction
                 *          * if a node is a classifier returns an array of probabilities of each class.
                 *          * if a node is for regression returns a number with the prediction.
                 */
                classify(row) {
                    if (this.right && this.left) {
                        if (row[this.splitColumn] < this.splitValue) {
                            return this.left.classify(row);
                        } else {
                            return this.right.classify(row);
                        }
                    }

                    return this.distribution;
                }

                /**
                 * @private
                 * Set the parameter of the current node and their children.
                 * @param {object} node - parameters of the current node and the children.
                 */
                setNodeParameters(node) {
                    if (node.distribution !== undefined) {
                        this.distribution = node.distribution.constructor === Array ? new Matrix(node.distribution) :
                                                                                      node.distribution;
                    } else {
                        this.distribution = undefined;
                        this.splitValue = node.splitValue;
                        this.splitColumn = node.splitColumn;
                        this.gain = node.gain;

                        this.left = new TreeNode(this);
                        this.right = new TreeNode(this);

                        if (node.left !== {}) {
                            this.left.setNodeParameters(node.left);
                        }
                        if (node.right !== {}) {
                            this.right.setNodeParameters(node.right);
                        }
                    }
                }
            }

            const defaultOptions = {
                gainFunction: 'gini',
                splitFunction: 'mean',
                minNumSamples: 3,
                maxDepth: Infinity
            };

            class DecisionTreeClassifier {

                /**
                 * Create new Decision Tree Classifier with CART implementation with the given options
                 * @param {object} options
                 * @param {string} [options.gainFunction="gini"] - gain function to get the best split, "gini" the only one supported.
                 * @param {string} [options.splitFunction="mean"] - given two integers from a split feature, get the value to split, "mean" the only one supported.
                 * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.
                 * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.
                 * @param {object} model - for load purposes.
                 * @constructor
                 */
                constructor(options, model) {
                    if (options === true) {
                        this.options = model.options;
                        this.root = new TreeNode(model.options);
                        this.root.setNodeParameters(model.root);
                    } else {
                        this.options = Object.assign({}, defaultOptions, options);
                        this.options.kind = 'classifier';
                    }
                }

                /**
                 * Train the decision tree with the given training set and labels.
                 * @param {Matrix|MatrixTransposeView|Array} trainingSet
                 * @param {Array} trainingLabels
                 */
                train(trainingSet, trainingLabels) {
                    this.root = new TreeNode(this.options);
                    trainingSet = Matrix.checkMatrix(trainingSet);
                    this.root.train(trainingSet, trainingLabels, 0, null);
                }

                /**
                 * Predicts the output given the matrix to predict.
                 * @param {Matrix|MatrixTransposeView|Array} toPredict
                 * @return {Array} predictions
                 */
                predict(toPredict) {
                    toPredict = Matrix.checkMatrix(toPredict);
                    var predictions = new Array(toPredict.rows);

                    for (var i = 0; i < toPredict.rows; ++i) {
                        predictions[i] = this.root.classify(toPredict.getRow(i)).maxRowIndex(0)[1];
                    }

                    return predictions;
                }

                /**
                 * Export the current model to JSON.
                 * @return {object} - Current model.
                 */
                toJSON() {
                    return {
                        options: this.options,
                        root: this.root,
                        name: 'DTClassifier'
                    };
                }

                /**
                 * Load a Decision tree classifier with the given model.
                 * @param {object} model
                 * @return {DecisionTreeClassifier}
                 */
                static load(model) {
                    if (model.name !== 'DTClassifier') {
                        throw new RangeError('Invalid model: ' + model.name);
                    }

                    return new DecisionTreeClassifier(true, model);
                }
            }

            const defaultOptions$1 = {
                gainFunction: 'regression',
                splitFunction: 'mean',
                minNumSamples: 3,
                maxDepth: Infinity
            };

            class DecisionTreeRegression {

                /**
                 * Create new Decision Tree Regression with CART implementation with the given options.
                 * @param {object} options
                 * @param {string} [options.gainFunction="regression"] - gain function to get the best split, "regression" the only one supported.
                 * @param {string} [options.splitFunction="mean"] - given two integers from a split feature, get the value to split, "mean" the only one supported.
                 * @param {number} [options.minNumSamples=3] - minimum number of samples to create a leaf node to decide a class.
                 * @param {number} [options.maxDepth=Infinity] - Max depth of the tree.
                 * @param {object} model - for load purposes.
                 */
                constructor(options, model) {
                    if (options === true) {
                        this.options = model.options;
                        this.root = new TreeNode(model.options);
                        this.root.setNodeParameters(model.root);
                    } else {
                        this.options = Object.assign({}, defaultOptions$1, options);
                        this.options.kind = 'regression';
                    }
                }

                /**
                 * Train the decision tree with the given training set and values.
                 * @param {Matrix|MatrixTransposeView|Array} trainingSet
                 * @param {Array} trainingValues
                 */
                train(trainingSet, trainingValues) {
                    this.root = new TreeNode(this.options);

                    if (trainingSet[0].length === undefined) trainingSet = Matrix.columnVector(trainingSet);
                    trainingSet = Matrix.checkMatrix(trainingSet);
                    this.root.train(trainingSet, trainingValues, 0);
                }

                /**
                 * Predicts the values given the matrix to predict.
                 * @param {Matrix|MatrixTransposeView|Array} toPredict
                 * @return {Array} predictions
                 */
                predict(toPredict) {
                    if (toPredict[0] !== undefined && toPredict[0].length === undefined) toPredict = Matrix.columnVector(toPredict);
                    toPredict = Matrix.checkMatrix(toPredict);

                    var predictions = new Array(toPredict.rows);
                    for (var i = 0; i < toPredict.rows; ++i) {
                        predictions[i] = this.root.classify(toPredict.getRow(i));
                    }

                    return predictions;
                }

                /**
                 * Export the current model to JSON.
                 * @return {object} - Current model.
                 */
                toJSON() {
                    return {
                        options: this.options,
                        root: this.root,
                        name: 'DTRegression'
                    };
                }

                /**
                 * Load a Decision tree regression with the given model.
                 * @param {object} model
                 * @return {DecisionTreeRegression}
                 */
                static load(model) {
                    if (model.name !== 'DTRegression') {
                        throw new RangeError('Invalid model:' + model.name);
                    }

                    return new DecisionTreeRegression(true, model);
                }
            }



            var src = /*#__PURE__*/Object.freeze({
                        DecisionTreeClassifier: DecisionTreeClassifier,
                        DecisionTreeRegression: DecisionTreeRegression
            });

            /**
             * @class LuDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs
             * @param {Matrix} matrix
             */
            class LuDecomposition$$1 {
              constructor(matrix) {
                matrix = WrapperMatrix2D$1.checkMatrix(matrix);

                var lu = matrix.clone();
                var rows = lu.rows;
                var columns = lu.columns;
                var pivotVector = new Array(rows);
                var pivotSign = 1;
                var i, j, k, p, s, t, v;
                var LUcolj, kmax;

                for (i = 0; i < rows; i++) {
                  pivotVector[i] = i;
                }

                LUcolj = new Array(rows);

                for (j = 0; j < columns; j++) {
                  for (i = 0; i < rows; i++) {
                    LUcolj[i] = lu.get(i, j);
                  }

                  for (i = 0; i < rows; i++) {
                    kmax = Math.min(i, j);
                    s = 0;
                    for (k = 0; k < kmax; k++) {
                      s += lu.get(i, k) * LUcolj[k];
                    }
                    LUcolj[i] -= s;
                    lu.set(i, j, LUcolj[i]);
                  }

                  p = j;
                  for (i = j + 1; i < rows; i++) {
                    if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {
                      p = i;
                    }
                  }

                  if (p !== j) {
                    for (k = 0; k < columns; k++) {
                      t = lu.get(p, k);
                      lu.set(p, k, lu.get(j, k));
                      lu.set(j, k, t);
                    }

                    v = pivotVector[p];
                    pivotVector[p] = pivotVector[j];
                    pivotVector[j] = v;

                    pivotSign = -pivotSign;
                  }

                  if (j < rows && lu.get(j, j) !== 0) {
                    for (i = j + 1; i < rows; i++) {
                      lu.set(i, j, lu.get(i, j) / lu.get(j, j));
                    }
                  }
                }

                this.LU = lu;
                this.pivotVector = pivotVector;
                this.pivotSign = pivotSign;
              }

              /**
               *
               * @return {boolean}
               */
              isSingular() {
                var data = this.LU;
                var col = data.columns;
                for (var j = 0; j < col; j++) {
                  if (data[j][j] === 0) {
                    return true;
                  }
                }
                return false;
              }

              /**
               *
               * @param {Matrix} value
               * @return {Matrix}
               */
              solve(value) {
                value = Matrix$1.checkMatrix(value);

                var lu = this.LU;
                var rows = lu.rows;

                if (rows !== value.rows) {
                  throw new Error('Invalid matrix dimensions');
                }
                if (this.isSingular()) {
                  throw new Error('LU matrix is singular');
                }

                var count = value.columns;
                var X = value.subMatrixRow(this.pivotVector, 0, count - 1);
                var columns = lu.columns;
                var i, j, k;

                for (k = 0; k < columns; k++) {
                  for (i = k + 1; i < columns; i++) {
                    for (j = 0; j < count; j++) {
                      X[i][j] -= X[k][j] * lu[i][k];
                    }
                  }
                }
                for (k = columns - 1; k >= 0; k--) {
                  for (j = 0; j < count; j++) {
                    X[k][j] /= lu[k][k];
                  }
                  for (i = 0; i < k; i++) {
                    for (j = 0; j < count; j++) {
                      X[i][j] -= X[k][j] * lu[i][k];
                    }
                  }
                }
                return X;
              }

              /**
               *
               * @return {number}
               */
              get determinant() {
                var data = this.LU;
                if (!data.isSquare()) {
                  throw new Error('Matrix must be square');
                }
                var determinant = this.pivotSign;
                var col = data.columns;
                for (var j = 0; j < col; j++) {
                  determinant *= data[j][j];
                }
                return determinant;
              }

              /**
               *
               * @return {Matrix}
               */
              get lowerTriangularMatrix() {
                var data = this.LU;
                var rows = data.rows;
                var columns = data.columns;
                var X = new Matrix$1(rows, columns);
                for (var i = 0; i < rows; i++) {
                  for (var j = 0; j < columns; j++) {
                    if (i > j) {
                      X[i][j] = data[i][j];
                    } else if (i === j) {
                      X[i][j] = 1;
                    } else {
                      X[i][j] = 0;
                    }
                  }
                }
                return X;
              }

              /**
               *
               * @return {Matrix}
               */
              get upperTriangularMatrix() {
                var data = this.LU;
                var rows = data.rows;
                var columns = data.columns;
                var X = new Matrix$1(rows, columns);
                for (var i = 0; i < rows; i++) {
                  for (var j = 0; j < columns; j++) {
                    if (i <= j) {
                      X[i][j] = data[i][j];
                    } else {
                      X[i][j] = 0;
                    }
                  }
                }
                return X;
              }

              /**
               *
               * @return {Array<number>}
               */
              get pivotPermutationVector() {
                return this.pivotVector.slice();
              }
            }

            function hypotenuse$1(a, b) {
              var r = 0;
              if (Math.abs(a) > Math.abs(b)) {
                r = b / a;
                return Math.abs(a) * Math.sqrt(1 + r * r);
              }
              if (b !== 0) {
                r = a / b;
                return Math.abs(b) * Math.sqrt(1 + r * r);
              }
              return 0;
            }

            function getFilled2DArray$1(rows, columns, value) {
              var array = new Array(rows);
              for (var i = 0; i < rows; i++) {
                array[i] = new Array(columns);
                for (var j = 0; j < columns; j++) {
                  array[i][j] = value;
                }
              }
              return array;
            }

            /**
             * @class SingularValueDecomposition
             * @see https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs
             * @param {Matrix} value
             * @param {object} [options]
             * @param {boolean} [options.computeLeftSingularVectors=true]
             * @param {boolean} [options.computeRightSingularVectors=true]
             * @param {boolean} [options.autoTranspose=false]
             */
            class SingularValueDecomposition$$1 {
              constructor(value, options = {}) {
                value = WrapperMatrix2D$1.checkMatrix(value);

                var m = value.rows;
                var n = value.columns;

                const {
                  computeLeftSingularVectors = true,
                  computeRightSingularVectors = true,
                  autoTranspose = false
                } = options;

                var wantu = Boolean(computeLeftSingularVectors);
                var wantv = Boolean(computeRightSingularVectors);

                var swapped = false;
                var a;
                if (m < n) {
                  if (!autoTranspose) {
                    a = value.clone();
                    // eslint-disable-next-line no-console
                    console.warn(
                      'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose'
                    );
                  } else {
                    a = value.transpose();
                    m = a.rows;
                    n = a.columns;
                    swapped = true;
                    var aux = wantu;
                    wantu = wantv;
                    wantv = aux;
                  }
                } else {
                  a = value.clone();
                }

                var nu = Math.min(m, n);
                var ni = Math.min(m + 1, n);
                var s = new Array(ni);
                var U = getFilled2DArray$1(m, nu, 0);
                var V = getFilled2DArray$1(n, n, 0);

                var e = new Array(n);
                var work = new Array(m);

                var si = new Array(ni);
                for (let i = 0; i < ni; i++) si[i] = i;

                var nct = Math.min(m - 1, n);
                var nrt = Math.max(0, Math.min(n - 2, m));
                var mrc = Math.max(nct, nrt);

                for (let k = 0; k < mrc; k++) {
                  if (k < nct) {
                    s[k] = 0;
                    for (let i = k; i < m; i++) {
                      s[k] = hypotenuse$1(s[k], a[i][k]);
                    }
                    if (s[k] !== 0) {
                      if (a[k][k] < 0) {
                        s[k] = -s[k];
                      }
                      for (let i = k; i < m; i++) {
                        a[i][k] /= s[k];
                      }
                      a[k][k] += 1;
                    }
                    s[k] = -s[k];
                  }

                  for (let j = k + 1; j < n; j++) {
                    if (k < nct && s[k] !== 0) {
                      let t = 0;
                      for (let i = k; i < m; i++) {
                        t += a[i][k] * a[i][j];
                      }
                      t = -t / a[k][k];
                      for (let i = k; i < m; i++) {
                        a[i][j] += t * a[i][k];
                      }
                    }
                    e[j] = a[k][j];
                  }

                  if (wantu && k < nct) {
                    for (let i = k; i < m; i++) {
                      U[i][k] = a[i][k];
                    }
                  }

                  if (k < nrt) {
                    e[k] = 0;
                    for (let i = k + 1; i < n; i++) {
                      e[k] = hypotenuse$1(e[k], e[i]);
                    }
                    if (e[k] !== 0) {
                      if (e[k + 1] < 0) {
                        e[k] = 0 - e[k];
                      }
                      for (let i = k + 1; i < n; i++) {
                        e[i] /= e[k];
                      }
                      e[k + 1] += 1;
                    }
                    e[k] = -e[k];
                    if (k + 1 < m && e[k] !== 0) {
                      for (let i = k + 1; i < m; i++) {
                        work[i] = 0;
                      }
                      for (let i = k + 1; i < m; i++) {
                        for (let j = k + 1; j < n; j++) {
                          work[i] += e[j] * a[i][j];
                        }
                      }
                      for (let j = k + 1; j < n; j++) {
                        let t = -e[j] / e[k + 1];
                        for (let i = k + 1; i < m; i++) {
                          a[i][j] += t * work[i];
                        }
                      }
                    }
                    if (wantv) {
                      for (let i = k + 1; i < n; i++) {
                        V[i][k] = e[i];
                      }
                    }
                  }
                }

                let p = Math.min(n, m + 1);
                if (nct < n) {
                  s[nct] = a[nct][nct];
                }
                if (m < p) {
                  s[p - 1] = 0;
                }
                if (nrt + 1 < p) {
                  e[nrt] = a[nrt][p - 1];
                }
                e[p - 1] = 0;

                if (wantu) {
                  for (let j = nct; j < nu; j++) {
                    for (let i = 0; i < m; i++) {
                      U[i][j] = 0;
                    }
                    U[j][j] = 1;
                  }
                  for (let k = nct - 1; k >= 0; k--) {
                    if (s[k] !== 0) {
                      for (let j = k + 1; j < nu; j++) {
                        let t = 0;
                        for (let i = k; i < m; i++) {
                          t += U[i][k] * U[i][j];
                        }
                        t = -t / U[k][k];
                        for (let i = k; i < m; i++) {
                          U[i][j] += t * U[i][k];
                        }
                      }
                      for (let i = k; i < m; i++) {
                        U[i][k] = -U[i][k];
                      }
                      U[k][k] = 1 + U[k][k];
                      for (let i = 0; i < k - 1; i++) {
                        U[i][k] = 0;
                      }
                    } else {
                      for (let i = 0; i < m; i++) {
                        U[i][k] = 0;
                      }
                      U[k][k] = 1;
                    }
                  }
                }

                if (wantv) {
                  for (let k = n - 1; k >= 0; k--) {
                    if (k < nrt && e[k] !== 0) {
                      for (let j = k + 1; j < n; j++) {
                        let t = 0;
                        for (let i = k + 1; i < n; i++) {
                          t += V[i][k] * V[i][j];
                        }
                        t = -t / V[k + 1][k];
                        for (let i = k + 1; i < n; i++) {
                          V[i][j] += t * V[i][k];
                        }
                      }
                    }
                    for (let i = 0; i < n; i++) {
                      V[i][k] = 0;
                    }
                    V[k][k] = 1;
                  }
                }

                var pp = p - 1;
                var eps = Number.EPSILON;
                while (p > 0) {
                  let k, kase;
                  for (k = p - 2; k >= -1; k--) {
                    if (k === -1) {
                      break;
                    }
                    const alpha =
                      Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));
                    if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {
                      e[k] = 0;
                      break;
                    }
                  }
                  if (k === p - 2) {
                    kase = 4;
                  } else {
                    let ks;
                    for (ks = p - 1; ks >= k; ks--) {
                      if (ks === k) {
                        break;
                      }
                      let t =
                        (ks !== p ? Math.abs(e[ks]) : 0) +
                        (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);
                      if (Math.abs(s[ks]) <= eps * t) {
                        s[ks] = 0;
                        break;
                      }
                    }
                    if (ks === k) {
                      kase = 3;
                    } else if (ks === p - 1) {
                      kase = 1;
                    } else {
                      kase = 2;
                      k = ks;
                    }
                  }

                  k++;

                  switch (kase) {
                    case 1: {
                      let f = e[p - 2];
                      e[p - 2] = 0;
                      for (let j = p - 2; j >= k; j--) {
                        let t = hypotenuse$1(s[j], f);
                        let cs = s[j] / t;
                        let sn = f / t;
                        s[j] = t;
                        if (j !== k) {
                          f = -sn * e[j - 1];
                          e[j - 1] = cs * e[j - 1];
                        }
                        if (wantv) {
                          for (let i = 0; i < n; i++) {
                            t = cs * V[i][j] + sn * V[i][p - 1];
                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];
                            V[i][j] = t;
                          }
                        }
                      }
                      break;
                    }
                    case 2: {
                      let f = e[k - 1];
                      e[k - 1] = 0;
                      for (let j = k; j < p; j++) {
                        let t = hypotenuse$1(s[j], f);
                        let cs = s[j] / t;
                        let sn = f / t;
                        s[j] = t;
                        f = -sn * e[j];
                        e[j] = cs * e[j];
                        if (wantu) {
                          for (let i = 0; i < m; i++) {
                            t = cs * U[i][j] + sn * U[i][k - 1];
                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];
                            U[i][j] = t;
                          }
                        }
                      }
                      break;
                    }
                    case 3: {
                      const scale = Math.max(
                        Math.abs(s[p - 1]),
                        Math.abs(s[p - 2]),
                        Math.abs(e[p - 2]),
                        Math.abs(s[k]),
                        Math.abs(e[k])
                      );
                      const sp = s[p - 1] / scale;
                      const spm1 = s[p - 2] / scale;
                      const epm1 = e[p - 2] / scale;
                      const sk = s[k] / scale;
                      const ek = e[k] / scale;
                      const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;
                      const c = sp * epm1 * (sp * epm1);
                      let shift = 0;
                      if (b !== 0 || c !== 0) {
                        if (b < 0) {
                          shift = 0 - Math.sqrt(b * b + c);
                        } else {
                          shift = Math.sqrt(b * b + c);
                        }
                        shift = c / (b + shift);
                      }
                      let f = (sk + sp) * (sk - sp) + shift;
                      let g = sk * ek;
                      for (let j = k; j < p - 1; j++) {
                        let t = hypotenuse$1(f, g);
                        if (t === 0) t = Number.MIN_VALUE;
                        let cs = f / t;
                        let sn = g / t;
                        if (j !== k) {
                          e[j - 1] = t;
                        }
                        f = cs * s[j] + sn * e[j];
                        e[j] = cs * e[j] - sn * s[j];
                        g = sn * s[j + 1];
                        s[j + 1] = cs * s[j + 1];
                        if (wantv) {
                          for (let i = 0; i < n; i++) {
                            t = cs * V[i][j] + sn * V[i][j + 1];
                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];
                            V[i][j] = t;
                          }
                        }
                        t = hypotenuse$1(f, g);
                        if (t === 0) t = Number.MIN_VALUE;
                        cs = f / t;
                        sn = g / t;
                        s[j] = t;
                        f = cs * e[j] + sn * s[j + 1];
                        s[j + 1] = -sn * e[j] + cs * s[j + 1];
                        g = sn * e[j + 1];
                        e[j + 1] = cs * e[j + 1];
                        if (wantu && j < m - 1) {
                          for (let i = 0; i < m; i++) {
                            t = cs * U[i][j] + sn * U[i][j + 1];
                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];
                            U[i][j] = t;
                          }
                        }
                      }
                      e[p - 2] = f;
                      break;
                    }
                    case 4: {
                      if (s[k] <= 0) {
                        s[k] = s[k] < 0 ? -s[k] : 0;
                        if (wantv) {
                          for (let i = 0; i <= pp; i++) {
                            V[i][k] = -V[i][k];
                          }
                        }
                      }
                      while (k < pp) {
                        if (s[k] >= s[k + 1]) {
                          break;
                        }
                        let t = s[k];
                        s[k] = s[k + 1];
                        s[k + 1] = t;
                        if (wantv && k < n - 1) {
                          for (let i = 0; i < n; i++) {
                            t = V[i][k + 1];
                            V[i][k + 1] = V[i][k];
                            V[i][k] = t;
                          }
                        }
                        if (wantu && k < m - 1) {
                          for (let i = 0; i < m; i++) {
                            t = U[i][k + 1];
                            U[i][k + 1] = U[i][k];
                            U[i][k] = t;
                          }
                        }
                        k++;
                      }
                      p--;
                      break;
                    }
                    // no default
                  }
                }

                if (swapped) {
                  var tmp = V;
                  V = U;
                  U = tmp;
                }

                this.m = m;
                this.n = n;
                this.s = s;
                this.U = U;
                this.V = V;
              }

              /**
               * Solve a problem of least square (Ax=b) by using the SVD. Useful when A is singular. When A is not singular, it would be better to use qr.solve(value).
               * Example : We search to approximate x, with A matrix shape m*n, x vector size n, b vector size m (m > n). We will use :
               * var svd = SingularValueDecomposition(A);
               * var x = svd.solve(b);
               * @param {Matrix} value - Matrix 1D which is the vector b (in the equation Ax = b)
               * @return {Matrix} - The vector x
               */
              solve(value) {
                var Y = value;
                var e = this.threshold;
                var scols = this.s.length;
                var Ls = Matrix$1.zeros(scols, scols);

                for (let i = 0; i < scols; i++) {
                  if (Math.abs(this.s[i]) <= e) {
                    Ls[i][i] = 0;
                  } else {
                    Ls[i][i] = 1 / this.s[i];
                  }
                }

                var U = this.U;
                var V = this.rightSingularVectors;

                var VL = V.mmul(Ls);
                var vrows = V.rows;
                var urows = U.length;
                var VLU = Matrix$1.zeros(vrows, urows);

                for (let i = 0; i < vrows; i++) {
                  for (let j = 0; j < urows; j++) {
                    let sum = 0;
                    for (let k = 0; k < scols; k++) {
                      sum += VL[i][k] * U[j][k];
                    }
                    VLU[i][j] = sum;
                  }
                }

                return VLU.mmul(Y);
              }

              /**
               *
               * @param {Array<number>} value
               * @return {Matrix}
               */
              solveForDiagonal(value) {
                return this.solve(Matrix$1.diag(value));
              }

              /**
               * Get the inverse of the matrix. We compute the inverse of a matrix using SVD when this matrix is singular or ill-conditioned. Example :
               * var svd = SingularValueDecomposition(A);
               * var inverseA = svd.inverse();
               * @return {Matrix} - The approximation of the inverse of the matrix
               */
              inverse() {
                var V = this.V;
                var e = this.threshold;
                var vrows = V.length;
                var vcols = V[0].length;
                var X = new Matrix$1(vrows, this.s.length);

                for (let i = 0; i < vrows; i++) {
                  for (let j = 0; j < vcols; j++) {
                    if (Math.abs(this.s[j]) > e) {
                      X[i][j] = V[i][j] / this.s[j];
                    } else {
                      X[i][j] = 0;
                    }
                  }
                }

                var U = this.U;

                var urows = U.length;
                var ucols = U[0].length;
                var Y = new Matrix$1(vrows, urows);

                for (let i = 0; i < vrows; i++) {
                  for (let j = 0; j < urows; j++) {
                    let sum = 0;
                    for (let k = 0; k < ucols; k++) {
                      sum += X[i][k] * U[j][k];
                    }
                    Y[i][j] = sum;
                  }
                }

                return Y;
              }

              /**
               *
               * @return {number}
               */
              get condition() {
                return this.s[0] / this.s[Math.min(this.m, this.n) - 1];
              }

              /**
               *
               * @return {number}
               */
              get norm2() {
                return this.s[0];
              }

              /**
               *
               * @return {number}
               */
              get rank() {
                var tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;
                var r = 0;
                var s = this.s;
                for (var i = 0, ii = s.length; i < ii; i++) {
                  if (s[i] > tol) {
                    r++;
                  }
                }
                return r;
              }

              /**
               *
               * @return {Array<number>}
               */
              get diagonal() {
                return this.s;
              }

              /**
               *
               * @return {number}
               */
              get threshold() {
                return Number.EPSILON / 2 * Math.max(this.m, this.n) * this.s[0];
              }

              /**
               *
               * @return {Matrix}
               */
              get leftSingularVectors() {
                if (!Matrix$1.isMatrix(this.U)) {
                  this.U = new Matrix$1(this.U);
                }
                return this.U;
              }

              /**
               *
               * @return {Matrix}
               */
              get rightSingularVectors() {
                if (!Matrix$1.isMatrix(this.V)) {
                  this.V = new Matrix$1(this.V);
                }
                return this.V;
              }

              /**
               *
               * @return {Matrix}
               */
              get diagonalMatrix() {
                return Matrix$1.diag(this.s);
              }
            }

            /**
             * @private
             * Check that a row index is not out of bounds
             * @param {Matrix} matrix
             * @param {number} index
             * @param {boolean} [outer]
             */
            function checkRowIndex$1(matrix, index, outer) {
              var max = outer ? matrix.rows : matrix.rows - 1;
              if (index < 0 || index > max) {
                throw new RangeError('Row index out of range');
              }
            }

            /**
             * @private
             * Check that a column index is not out of bounds
             * @param {Matrix} matrix
             * @param {number} index
             * @param {boolean} [outer]
             */
            function checkColumnIndex$1(matrix, index, outer) {
              var max = outer ? matrix.columns : matrix.columns - 1;
              if (index < 0 || index > max) {
                throw new RangeError('Column index out of range');
              }
            }

            /**
             * @private
             * Check that the provided vector is an array with the right length
             * @param {Matrix} matrix
             * @param {Array|Matrix} vector
             * @return {Array}
             * @throws {RangeError}
             */
            function checkRowVector$1(matrix, vector) {
              if (vector.to1DArray) {
                vector = vector.to1DArray();
              }
              if (vector.length !== matrix.columns) {
                throw new RangeError(
                  'vector size must be the same as the number of columns'
                );
              }
              return vector;
            }

            /**
             * @private
             * Check that the provided vector is an array with the right length
             * @param {Matrix} matrix
             * @param {Array|Matrix} vector
             * @return {Array}
             * @throws {RangeError}
             */
            function checkColumnVector$1(matrix, vector) {
              if (vector.to1DArray) {
                vector = vector.to1DArray();
              }
              if (vector.length !== matrix.rows) {
                throw new RangeError('vector size must be the same as the number of rows');
              }
              return vector;
            }

            function checkIndices$1(matrix, rowIndices, columnIndices) {
              return {
                row: checkRowIndices$1(matrix, rowIndices),
                column: checkColumnIndices$1(matrix, columnIndices)
              };
            }

            function checkRowIndices$1(matrix, rowIndices) {
              if (typeof rowIndices !== 'object') {
                throw new TypeError('unexpected type for row indices');
              }

              var rowOut = rowIndices.some((r) => {
                return r < 0 || r >= matrix.rows;
              });

              if (rowOut) {
                throw new RangeError('row indices are out of range');
              }

              if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);

              return rowIndices;
            }

            function checkColumnIndices$1(matrix, columnIndices) {
              if (typeof columnIndices !== 'object') {
                throw new TypeError('unexpected type for column indices');
              }

              var columnOut = columnIndices.some((c) => {
                return c < 0 || c >= matrix.columns;
              });

              if (columnOut) {
                throw new RangeError('column indices are out of range');
              }
              if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);

              return columnIndices;
            }

            function checkRange$1(matrix, startRow, endRow, startColumn, endColumn) {
              if (arguments.length !== 5) {
                throw new RangeError('expected 4 arguments');
              }
              checkNumber('startRow', startRow);
              checkNumber('endRow', endRow);
              checkNumber('startColumn', startColumn);
              checkNumber('endColumn', endColumn);
              if (
                startRow > endRow ||
                startColumn > endColumn ||
                startRow < 0 ||
                startRow >= matrix.rows ||
                endRow < 0 ||
                endRow >= matrix.rows ||
                startColumn < 0 ||
                startColumn >= matrix.columns ||
                endColumn < 0 ||
                endColumn >= matrix.columns
              ) {
                throw new RangeError('Submatrix indices are out of range');
              }
            }

            function sumByRow$1(matrix) {
              var sum = Matrix$1.zeros(matrix.rows, 1);
              for (var i = 0; i < matrix.rows; ++i) {
                for (var j = 0; j < matrix.columns; ++j) {
                  sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));
                }
              }
              return sum;
            }

            function sumByColumn$1(matrix) {
              var sum = Matrix$1.zeros(1, matrix.columns);
              for (var i = 0; i < matrix.rows; ++i) {
                for (var j = 0; j < matrix.columns; ++j) {
                  sum.set(0, j, sum.get(0, j) + matrix.get(i, j));
                }
              }
              return sum;
            }

            function sumAll$1(matrix) {
              var v = 0;
              for (var i = 0; i < matrix.rows; i++) {
                for (var j = 0; j < matrix.columns; j++) {
                  v += matrix.get(i, j);
                }
              }
              return v;
            }

            function checkNumber(name, value) {
              if (typeof value !== 'number') {
                throw new TypeError(`${name} must be a number`);
              }
            }

            class BaseView$1 extends AbstractMatrix$1() {
              constructor(matrix, rows, columns) {
                super();
                this.matrix = matrix;
                this.rows = rows;
                this.columns = columns;
              }

              static get [Symbol.species]() {
                return Matrix$1;
              }
            }

            class MatrixTransposeView$1 extends BaseView$1 {
              constructor(matrix) {
                super(matrix, matrix.columns, matrix.rows);
              }

              set(rowIndex, columnIndex, value) {
                this.matrix.set(columnIndex, rowIndex, value);
                return this;
              }

              get(rowIndex, columnIndex) {
                return this.matrix.get(columnIndex, rowIndex);
              }
            }

            class MatrixRowView$1 extends BaseView$1 {
              constructor(matrix, row) {
                super(matrix, 1, matrix.columns);
                this.row = row;
              }

              set(rowIndex, columnIndex, value) {
                this.matrix.set(this.row, columnIndex, value);
                return this;
              }

              get(rowIndex, columnIndex) {
                return this.matrix.get(this.row, columnIndex);
              }
            }

            class MatrixSubView$1 extends BaseView$1 {
              constructor(matrix, startRow, endRow, startColumn, endColumn) {
                checkRange$1(matrix, startRow, endRow, startColumn, endColumn);
                super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);
                this.startRow = startRow;
                this.startColumn = startColumn;
              }

              set(rowIndex, columnIndex, value) {
                this.matrix.set(
                  this.startRow + rowIndex,
                  this.startColumn + columnIndex,
                  value
                );
                return this;
              }

              get(rowIndex, columnIndex) {
                return this.matrix.get(
                  this.startRow + rowIndex,
                  this.startColumn + columnIndex
                );
              }
            }

            class MatrixSelectionView$1 extends BaseView$1 {
              constructor(matrix, rowIndices, columnIndices) {
                var indices = checkIndices$1(matrix, rowIndices, columnIndices);
                super(matrix, indices.row.length, indices.column.length);
                this.rowIndices = indices.row;
                this.columnIndices = indices.column;
              }

              set(rowIndex, columnIndex, value) {
                this.matrix.set(
                  this.rowIndices[rowIndex],
                  this.columnIndices[columnIndex],
                  value
                );
                return this;
              }

              get(rowIndex, columnIndex) {
                return this.matrix.get(
                  this.rowIndices[rowIndex],
                  this.columnIndices[columnIndex]
                );
              }
            }

            class MatrixRowSelectionView$1 extends BaseView$1 {
              constructor(matrix, rowIndices) {
                rowIndices = checkRowIndices$1(matrix, rowIndices);
                super(matrix, rowIndices.length, matrix.columns);
                this.rowIndices = rowIndices;
              }

              set(rowIndex, columnIndex, value) {
                this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);
                return this;
              }

              get(rowIndex, columnIndex) {
                return this.matrix.get(this.rowIndices[rowIndex], columnIndex);
              }
            }

            class MatrixColumnSelectionView$1 extends BaseView$1 {
              constructor(matrix, columnIndices) {
                columnIndices = checkColumnIndices$1(matrix, columnIndices);
                super(matrix, matrix.rows, columnIndices.length);
                this.columnIndices = columnIndices;
              }

              set(rowIndex, columnIndex, value) {
                this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);
                return this;
              }

              get(rowIndex, columnIndex) {
                return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);
              }
            }

            class MatrixColumnView$1 extends BaseView$1 {
              constructor(matrix, column) {
                super(matrix, matrix.rows, 1);
                this.column = column;
              }

              set(rowIndex, columnIndex, value) {
                this.matrix.set(rowIndex, this.column, value);
                return this;
              }

              get(rowIndex) {
                return this.matrix.get(rowIndex, this.column);
              }
            }

            class MatrixFlipRowView$1 extends BaseView$1 {
              constructor(matrix) {
                super(matrix, matrix.rows, matrix.columns);
              }

              set(rowIndex, columnIndex, value) {
                this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);
                return this;
              }

              get(rowIndex, columnIndex) {
                return this.matrix.get(this.rows - rowIndex - 1, columnIndex);
              }
            }

            class MatrixFlipColumnView$1 extends BaseView$1 {
              constructor(matrix) {
                super(matrix, matrix.rows, matrix.columns);
              }

              set(rowIndex, columnIndex, value) {
                this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);
                return this;
              }

              get(rowIndex, columnIndex) {
                return this.matrix.get(rowIndex, this.columns - columnIndex - 1);
              }
            }

            function AbstractMatrix$1(superCtor) {
              if (superCtor === undefined) superCtor = Object;

              /**
               * Real matrix
               * @class Matrix
               * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,
               * 2D array containing the data or Matrix instance to clone
               * @param {number} [nColumns] - Number of columns of the new matrix
               */
              class Matrix extends superCtor {
                static get [Symbol.species]() {
                  return this;
                }

                /**
                 * Constructs a Matrix with the chosen dimensions from a 1D array
                 * @param {number} newRows - Number of rows
                 * @param {number} newColumns - Number of columns
                 * @param {Array} newData - A 1D array containing data for the matrix
                 * @return {Matrix} - The new matrix
                 */
                static from1DArray(newRows, newColumns, newData) {
                  var length = newRows * newColumns;
                  if (length !== newData.length) {
                    throw new RangeError('Data length does not match given dimensions');
                  }
                  var newMatrix = new this(newRows, newColumns);
                  for (var row = 0; row < newRows; row++) {
                    for (var column = 0; column < newColumns; column++) {
                      newMatrix.set(row, column, newData[row * newColumns + column]);
                    }
                  }
                  return newMatrix;
                }

                /**
                     * Creates a row vector, a matrix with only one row.
                     * @param {Array} newData - A 1D array containing data for the vector
                     * @return {Matrix} - The new matrix
                     */
                static rowVector(newData) {
                  var vector = new this(1, newData.length);
                  for (var i = 0; i < newData.length; i++) {
                    vector.set(0, i, newData[i]);
                  }
                  return vector;
                }

                /**
                     * Creates a column vector, a matrix with only one column.
                     * @param {Array} newData - A 1D array containing data for the vector
                     * @return {Matrix} - The new matrix
                     */
                static columnVector(newData) {
                  var vector = new this(newData.length, 1);
                  for (var i = 0; i < newData.length; i++) {
                    vector.set(i, 0, newData[i]);
                  }
                  return vector;
                }

                /**
                     * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                static empty(rows, columns) {
                  return new this(rows, columns);
                }

                /**
                     * Creates a matrix with the given dimensions. Values will be set to zero.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                static zeros(rows, columns) {
                  return this.empty(rows, columns).fill(0);
                }

                /**
                     * Creates a matrix with the given dimensions. Values will be set to one.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                static ones(rows, columns) {
                  return this.empty(rows, columns).fill(1);
                }

                /**
                     * Creates a matrix with the given dimensions. Values will be randomly set.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @param {function} [rng=Math.random] - Random number generator
                     * @return {Matrix} The new matrix
                     */
                static rand(rows, columns, rng) {
                  if (rng === undefined) rng = Math.random;
                  var matrix = this.empty(rows, columns);
                  for (var i = 0; i < rows; i++) {
                    for (var j = 0; j < columns; j++) {
                      matrix.set(i, j, rng());
                    }
                  }
                  return matrix;
                }

                /**
                     * Creates a matrix with the given dimensions. Values will be random integers.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @param {number} [maxValue=1000] - Maximum value
                     * @param {function} [rng=Math.random] - Random number generator
                     * @return {Matrix} The new matrix
                     */
                static randInt(rows, columns, maxValue, rng) {
                  if (maxValue === undefined) maxValue = 1000;
                  if (rng === undefined) rng = Math.random;
                  var matrix = this.empty(rows, columns);
                  for (var i = 0; i < rows; i++) {
                    for (var j = 0; j < columns; j++) {
                      var value = Math.floor(rng() * maxValue);
                      matrix.set(i, j, value);
                    }
                  }
                  return matrix;
                }

                /**
                     * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.
                     * @param {number} rows - Number of rows
                     * @param {number} [columns=rows] - Number of columns
                     * @param {number} [value=1] - Value to fill the diagonal with
                     * @return {Matrix} - The new identity matrix
                     */
                static eye(rows, columns, value) {
                  if (columns === undefined) columns = rows;
                  if (value === undefined) value = 1;
                  var min = Math.min(rows, columns);
                  var matrix = this.zeros(rows, columns);
                  for (var i = 0; i < min; i++) {
                    matrix.set(i, i, value);
                  }
                  return matrix;
                }

                /**
                     * Creates a diagonal matrix based on the given array.
                     * @param {Array} data - Array containing the data for the diagonal
                     * @param {number} [rows] - Number of rows (Default: data.length)
                     * @param {number} [columns] - Number of columns (Default: rows)
                     * @return {Matrix} - The new diagonal matrix
                     */
                static diag(data, rows, columns) {
                  var l = data.length;
                  if (rows === undefined) rows = l;
                  if (columns === undefined) columns = rows;
                  var min = Math.min(l, rows, columns);
                  var matrix = this.zeros(rows, columns);
                  for (var i = 0; i < min; i++) {
                    matrix.set(i, i, data[i]);
                  }
                  return matrix;
                }

                /**
                     * Returns a matrix whose elements are the minimum between matrix1 and matrix2
                     * @param {Matrix} matrix1
                     * @param {Matrix} matrix2
                     * @return {Matrix}
                     */
                static min(matrix1, matrix2) {
                  matrix1 = this.checkMatrix(matrix1);
                  matrix2 = this.checkMatrix(matrix2);
                  var rows = matrix1.rows;
                  var columns = matrix1.columns;
                  var result = new this(rows, columns);
                  for (var i = 0; i < rows; i++) {
                    for (var j = 0; j < columns; j++) {
                      result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));
                    }
                  }
                  return result;
                }

                /**
                     * Returns a matrix whose elements are the maximum between matrix1 and matrix2
                     * @param {Matrix} matrix1
                     * @param {Matrix} matrix2
                     * @return {Matrix}
                     */
                static max(matrix1, matrix2) {
                  matrix1 = this.checkMatrix(matrix1);
                  matrix2 = this.checkMatrix(matrix2);
                  var rows = matrix1.rows;
                  var columns = matrix1.columns;
                  var result = new this(rows, columns);
                  for (var i = 0; i < rows; i++) {
                    for (var j = 0; j < columns; j++) {
                      result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));
                    }
                  }
                  return result;
                }

                /**
                     * Check that the provided value is a Matrix and tries to instantiate one if not
                     * @param {*} value - The value to check
                     * @return {Matrix}
                     */
                static checkMatrix(value) {
                  return Matrix.isMatrix(value) ? value : new this(value);
                }

                /**
                     * Returns true if the argument is a Matrix, false otherwise
                     * @param {*} value - The value to check
                     * @return {boolean}
                     */
                static isMatrix(value) {
                  return (value != null) && (value.klass === 'Matrix');
                }

                /**
                     * @prop {number} size - The number of elements in the matrix.
                     */
                get size() {
                  return this.rows * this.columns;
                }

                /**
                     * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.
                     * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)
                     * @return {Matrix} this
                     */
                apply(callback) {
                  if (typeof callback !== 'function') {
                    throw new TypeError('callback must be a function');
                  }
                  var ii = this.rows;
                  var jj = this.columns;
                  for (var i = 0; i < ii; i++) {
                    for (var j = 0; j < jj; j++) {
                      callback.call(this, i, j);
                    }
                  }
                  return this;
                }

                /**
                     * Returns a new 1D array filled row by row with the matrix values
                     * @return {Array}
                     */
                to1DArray() {
                  var array = new Array(this.size);
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      array[i * this.columns + j] = this.get(i, j);
                    }
                  }
                  return array;
                }

                /**
                     * Returns a 2D array containing a copy of the data
                     * @return {Array}
                     */
                to2DArray() {
                  var copy = new Array(this.rows);
                  for (var i = 0; i < this.rows; i++) {
                    copy[i] = new Array(this.columns);
                    for (var j = 0; j < this.columns; j++) {
                      copy[i][j] = this.get(i, j);
                    }
                  }
                  return copy;
                }

                /**
                     * @return {boolean} true if the matrix has one row
                     */
                isRowVector() {
                  return this.rows === 1;
                }

                /**
                     * @return {boolean} true if the matrix has one column
                     */
                isColumnVector() {
                  return this.columns === 1;
                }

                /**
                     * @return {boolean} true if the matrix has one row or one column
                     */
                isVector() {
                  return (this.rows === 1) || (this.columns === 1);
                }

                /**
                     * @return {boolean} true if the matrix has the same number of rows and columns
                     */
                isSquare() {
                  return this.rows === this.columns;
                }

                /**
                     * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal
                     */
                isSymmetric() {
                  if (this.isSquare()) {
                    for (var i = 0; i < this.rows; i++) {
                      for (var j = 0; j <= i; j++) {
                        if (this.get(i, j) !== this.get(j, i)) {
                          return false;
                        }
                      }
                    }
                    return true;
                  }
                  return false;
                }

                /**
                     * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1
                     * @abstract
                     * @param {number} rowIndex - Index of the row
                     * @param {number} columnIndex - Index of the column
                     * @param {number} value - The new value for the element
                     * @return {Matrix} this
                     */
                set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars
                  throw new Error('set method is unimplemented');
                }

                /**
                     * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]
                     * @abstract
                     * @param {number} rowIndex - Index of the row
                     * @param {number} columnIndex - Index of the column
                     * @return {number}
                     */
                get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars
                  throw new Error('get method is unimplemented');
                }

                /**
                     * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of
                     * rows of the matrix, and colRep times the number of columns of the matrix
                     * @param {number} rowRep - Number of times the rows should be repeated
                     * @param {number} colRep - Number of times the columns should be re
                     * @return {Matrix}
                     * @example
                     * var matrix = new Matrix([[1,2]]);
                     * matrix.repeat(2); // [[1,2],[1,2]]
                     */
                repeat(rowRep, colRep) {
                  rowRep = rowRep || 1;
                  colRep = colRep || 1;
                  var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);
                  for (var i = 0; i < rowRep; i++) {
                    for (var j = 0; j < colRep; j++) {
                      matrix.setSubMatrix(this, this.rows * i, this.columns * j);
                    }
                  }
                  return matrix;
                }

                /**
                     * Fills the matrix with a given value. All elements will be set to this value.
                     * @param {number} value - New value
                     * @return {Matrix} this
                     */
                fill(value) {
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      this.set(i, j, value);
                    }
                  }
                  return this;
                }

                /**
                     * Negates the matrix. All elements will be multiplied by (-1)
                     * @return {Matrix} this
                     */
                neg() {
                  return this.mulS(-1);
                }

                /**
                     * Returns a new array from the given row index
                     * @param {number} index - Row index
                     * @return {Array}
                     */
                getRow(index) {
                  checkRowIndex$1(this, index);
                  var row = new Array(this.columns);
                  for (var i = 0; i < this.columns; i++) {
                    row[i] = this.get(index, i);
                  }
                  return row;
                }

                /**
                     * Returns a new row vector from the given row index
                     * @param {number} index - Row index
                     * @return {Matrix}
                     */
                getRowVector(index) {
                  return this.constructor.rowVector(this.getRow(index));
                }

                /**
                     * Sets a row at the given index
                     * @param {number} index - Row index
                     * @param {Array|Matrix} array - Array or vector
                     * @return {Matrix} this
                     */
                setRow(index, array) {
                  checkRowIndex$1(this, index);
                  array = checkRowVector$1(this, array);
                  for (var i = 0; i < this.columns; i++) {
                    this.set(index, i, array[i]);
                  }
                  return this;
                }

                /**
                     * Swaps two rows
                     * @param {number} row1 - First row index
                     * @param {number} row2 - Second row index
                     * @return {Matrix} this
                     */
                swapRows(row1, row2) {
                  checkRowIndex$1(this, row1);
                  checkRowIndex$1(this, row2);
                  for (var i = 0; i < this.columns; i++) {
                    var temp = this.get(row1, i);
                    this.set(row1, i, this.get(row2, i));
                    this.set(row2, i, temp);
                  }
                  return this;
                }

                /**
                     * Returns a new array from the given column index
                     * @param {number} index - Column index
                     * @return {Array}
                     */
                getColumn(index) {
                  checkColumnIndex$1(this, index);
                  var column = new Array(this.rows);
                  for (var i = 0; i < this.rows; i++) {
                    column[i] = this.get(i, index);
                  }
                  return column;
                }

                /**
                     * Returns a new column vector from the given column index
                     * @param {number} index - Column index
                     * @return {Matrix}
                     */
                getColumnVector(index) {
                  return this.constructor.columnVector(this.getColumn(index));
                }

                /**
                     * Sets a column at the given index
                     * @param {number} index - Column index
                     * @param {Array|Matrix} array - Array or vector
                     * @return {Matrix} this
                     */
                setColumn(index, array) {
                  checkColumnIndex$1(this, index);
                  array = checkColumnVector$1(this, array);
                  for (var i = 0; i < this.rows; i++) {
                    this.set(i, index, array[i]);
                  }
                  return this;
                }

                /**
                     * Swaps two columns
                     * @param {number} column1 - First column index
                     * @param {number} column2 - Second column index
                     * @return {Matrix} this
                     */
                swapColumns(column1, column2) {
                  checkColumnIndex$1(this, column1);
                  checkColumnIndex$1(this, column2);
                  for (var i = 0; i < this.rows; i++) {
                    var temp = this.get(i, column1);
                    this.set(i, column1, this.get(i, column2));
                    this.set(i, column2, temp);
                  }
                  return this;
                }

                /**
                     * Adds the values of a vector to each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                addRowVector(vector) {
                  vector = checkRowVector$1(this, vector);
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      this.set(i, j, this.get(i, j) + vector[j]);
                    }
                  }
                  return this;
                }

                /**
                     * Subtracts the values of a vector from each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                subRowVector(vector) {
                  vector = checkRowVector$1(this, vector);
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      this.set(i, j, this.get(i, j) - vector[j]);
                    }
                  }
                  return this;
                }

                /**
                     * Multiplies the values of a vector with each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                mulRowVector(vector) {
                  vector = checkRowVector$1(this, vector);
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      this.set(i, j, this.get(i, j) * vector[j]);
                    }
                  }
                  return this;
                }

                /**
                     * Divides the values of each row by those of a vector
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                divRowVector(vector) {
                  vector = checkRowVector$1(this, vector);
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      this.set(i, j, this.get(i, j) / vector[j]);
                    }
                  }
                  return this;
                }

                /**
                     * Adds the values of a vector to each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                addColumnVector(vector) {
                  vector = checkColumnVector$1(this, vector);
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      this.set(i, j, this.get(i, j) + vector[i]);
                    }
                  }
                  return this;
                }

                /**
                     * Subtracts the values of a vector from each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                subColumnVector(vector) {
                  vector = checkColumnVector$1(this, vector);
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      this.set(i, j, this.get(i, j) - vector[i]);
                    }
                  }
                  return this;
                }

                /**
                     * Multiplies the values of a vector with each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                mulColumnVector(vector) {
                  vector = checkColumnVector$1(this, vector);
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      this.set(i, j, this.get(i, j) * vector[i]);
                    }
                  }
                  return this;
                }

                /**
                     * Divides the values of each column by those of a vector
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                divColumnVector(vector) {
                  vector = checkColumnVector$1(this, vector);
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      this.set(i, j, this.get(i, j) / vector[i]);
                    }
                  }
                  return this;
                }

                /**
                     * Multiplies the values of a row with a scalar
                     * @param {number} index - Row index
                     * @param {number} value
                     * @return {Matrix} this
                     */
                mulRow(index, value) {
                  checkRowIndex$1(this, index);
                  for (var i = 0; i < this.columns; i++) {
                    this.set(index, i, this.get(index, i) * value);
                  }
                  return this;
                }

                /**
                     * Multiplies the values of a column with a scalar
                     * @param {number} index - Column index
                     * @param {number} value
                     * @return {Matrix} this
                     */
                mulColumn(index, value) {
                  checkColumnIndex$1(this, index);
                  for (var i = 0; i < this.rows; i++) {
                    this.set(i, index, this.get(i, index) * value);
                  }
                  return this;
                }

                /**
                     * Returns the maximum value of the matrix
                     * @return {number}
                     */
                max() {
                  var v = this.get(0, 0);
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      if (this.get(i, j) > v) {
                        v = this.get(i, j);
                      }
                    }
                  }
                  return v;
                }

                /**
                     * Returns the index of the maximum value
                     * @return {Array}
                     */
                maxIndex() {
                  var v = this.get(0, 0);
                  var idx = [0, 0];
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      if (this.get(i, j) > v) {
                        v = this.get(i, j);
                        idx[0] = i;
                        idx[1] = j;
                      }
                    }
                  }
                  return idx;
                }

                /**
                     * Returns the minimum value of the matrix
                     * @return {number}
                     */
                min() {
                  var v = this.get(0, 0);
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      if (this.get(i, j) < v) {
                        v = this.get(i, j);
                      }
                    }
                  }
                  return v;
                }

                /**
                     * Returns the index of the minimum value
                     * @return {Array}
                     */
                minIndex() {
                  var v = this.get(0, 0);
                  var idx = [0, 0];
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      if (this.get(i, j) < v) {
                        v = this.get(i, j);
                        idx[0] = i;
                        idx[1] = j;
                      }
                    }
                  }
                  return idx;
                }

                /**
                     * Returns the maximum value of one row
                     * @param {number} row - Row index
                     * @return {number}
                     */
                maxRow(row) {
                  checkRowIndex$1(this, row);
                  var v = this.get(row, 0);
                  for (var i = 1; i < this.columns; i++) {
                    if (this.get(row, i) > v) {
                      v = this.get(row, i);
                    }
                  }
                  return v;
                }

                /**
                     * Returns the index of the maximum value of one row
                     * @param {number} row - Row index
                     * @return {Array}
                     */
                maxRowIndex(row) {
                  checkRowIndex$1(this, row);
                  var v = this.get(row, 0);
                  var idx = [row, 0];
                  for (var i = 1; i < this.columns; i++) {
                    if (this.get(row, i) > v) {
                      v = this.get(row, i);
                      idx[1] = i;
                    }
                  }
                  return idx;
                }

                /**
                     * Returns the minimum value of one row
                     * @param {number} row - Row index
                     * @return {number}
                     */
                minRow(row) {
                  checkRowIndex$1(this, row);
                  var v = this.get(row, 0);
                  for (var i = 1; i < this.columns; i++) {
                    if (this.get(row, i) < v) {
                      v = this.get(row, i);
                    }
                  }
                  return v;
                }

                /**
                     * Returns the index of the maximum value of one row
                     * @param {number} row - Row index
                     * @return {Array}
                     */
                minRowIndex(row) {
                  checkRowIndex$1(this, row);
                  var v = this.get(row, 0);
                  var idx = [row, 0];
                  for (var i = 1; i < this.columns; i++) {
                    if (this.get(row, i) < v) {
                      v = this.get(row, i);
                      idx[1] = i;
                    }
                  }
                  return idx;
                }

                /**
                     * Returns the maximum value of one column
                     * @param {number} column - Column index
                     * @return {number}
                     */
                maxColumn(column) {
                  checkColumnIndex$1(this, column);
                  var v = this.get(0, column);
                  for (var i = 1; i < this.rows; i++) {
                    if (this.get(i, column) > v) {
                      v = this.get(i, column);
                    }
                  }
                  return v;
                }

                /**
                     * Returns the index of the maximum value of one column
                     * @param {number} column - Column index
                     * @return {Array}
                     */
                maxColumnIndex(column) {
                  checkColumnIndex$1(this, column);
                  var v = this.get(0, column);
                  var idx = [0, column];
                  for (var i = 1; i < this.rows; i++) {
                    if (this.get(i, column) > v) {
                      v = this.get(i, column);
                      idx[0] = i;
                    }
                  }
                  return idx;
                }

                /**
                     * Returns the minimum value of one column
                     * @param {number} column - Column index
                     * @return {number}
                     */
                minColumn(column) {
                  checkColumnIndex$1(this, column);
                  var v = this.get(0, column);
                  for (var i = 1; i < this.rows; i++) {
                    if (this.get(i, column) < v) {
                      v = this.get(i, column);
                    }
                  }
                  return v;
                }

                /**
                     * Returns the index of the minimum value of one column
                     * @param {number} column - Column index
                     * @return {Array}
                     */
                minColumnIndex(column) {
                  checkColumnIndex$1(this, column);
                  var v = this.get(0, column);
                  var idx = [0, column];
                  for (var i = 1; i < this.rows; i++) {
                    if (this.get(i, column) < v) {
                      v = this.get(i, column);
                      idx[0] = i;
                    }
                  }
                  return idx;
                }

                /**
                     * Returns an array containing the diagonal values of the matrix
                     * @return {Array}
                     */
                diag() {
                  var min = Math.min(this.rows, this.columns);
                  var diag = new Array(min);
                  for (var i = 0; i < min; i++) {
                    diag[i] = this.get(i, i);
                  }
                  return diag;
                }

                /**
                     * Returns the sum by the argument given, if no argument given,
                     * it returns the sum of all elements of the matrix.
                     * @param {string} by - sum by 'row' or 'column'.
                     * @return {Matrix|number}
                     */
                sum(by) {
                  switch (by) {
                    case 'row':
                      return sumByRow$1(this);
                    case 'column':
                      return sumByColumn$1(this);
                    default:
                      return sumAll$1(this);
                  }
                }

                /**
                     * Returns the mean of all elements of the matrix
                     * @return {number}
                     */
                mean() {
                  return this.sum() / this.size;
                }

                /**
                     * Returns the product of all elements of the matrix
                     * @return {number}
                     */
                prod() {
                  var prod = 1;
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      prod *= this.get(i, j);
                    }
                  }
                  return prod;
                }

                /**
                     * Returns the norm of a matrix.
                     * @param {string} type - "frobenius" (default) or "max" return resp. the Frobenius norm and the max norm.
                     * @return {number}
                     */
                norm(type = 'frobenius') {
                  var result = 0;
                  if (type === 'max') {
                    return this.max();
                  } else if (type === 'frobenius') {
                    for (var i = 0; i < this.rows; i++) {
                      for (var j = 0; j < this.columns; j++) {
                        result = result + this.get(i, j) * this.get(i, j);
                      }
                    }
                    return Math.sqrt(result);
                  } else {
                    throw new RangeError(`unknown norm type: ${type}`);
                  }
                }

                /**
                     * Computes the cumulative sum of the matrix elements (in place, row by row)
                     * @return {Matrix} this
                     */
                cumulativeSum() {
                  var sum = 0;
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      sum += this.get(i, j);
                      this.set(i, j, sum);
                    }
                  }
                  return this;
                }

                /**
                     * Computes the dot (scalar) product between the matrix and another
                     * @param {Matrix} vector2 vector
                     * @return {number}
                     */
                dot(vector2) {
                  if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();
                  var vector1 = this.to1DArray();
                  if (vector1.length !== vector2.length) {
                    throw new RangeError('vectors do not have the same size');
                  }
                  var dot = 0;
                  for (var i = 0; i < vector1.length; i++) {
                    dot += vector1[i] * vector2[i];
                  }
                  return dot;
                }

                /**
                     * Returns the matrix product between this and other
                     * @param {Matrix} other
                     * @return {Matrix}
                     */
                mmul(other) {
                  other = this.constructor.checkMatrix(other);
                  if (this.columns !== other.rows) {
                    // eslint-disable-next-line no-console
                    console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');
                  }

                  var m = this.rows;
                  var n = this.columns;
                  var p = other.columns;

                  var result = new this.constructor[Symbol.species](m, p);

                  var Bcolj = new Array(n);
                  for (var j = 0; j < p; j++) {
                    for (var k = 0; k < n; k++) {
                      Bcolj[k] = other.get(k, j);
                    }

                    for (var i = 0; i < m; i++) {
                      var s = 0;
                      for (k = 0; k < n; k++) {
                        s += this.get(i, k) * Bcolj[k];
                      }

                      result.set(i, j, s);
                    }
                  }
                  return result;
                }

                strassen2x2(other) {
                  var result = new this.constructor[Symbol.species](2, 2);
                  const a11 = this.get(0, 0);
                  const b11 = other.get(0, 0);
                  const a12 = this.get(0, 1);
                  const b12 = other.get(0, 1);
                  const a21 = this.get(1, 0);
                  const b21 = other.get(1, 0);
                  const a22 = this.get(1, 1);
                  const b22 = other.get(1, 1);

                  // Compute intermediate values.
                  const m1 = (a11 + a22) * (b11 + b22);
                  const m2 = (a21 + a22) * b11;
                  const m3 = a11 * (b12 - b22);
                  const m4 = a22 * (b21 - b11);
                  const m5 = (a11 + a12) * b22;
                  const m6 = (a21 - a11) * (b11 + b12);
                  const m7 = (a12 - a22) * (b21 + b22);

                  // Combine intermediate values into the output.
                  const c00 = m1 + m4 - m5 + m7;
                  const c01 = m3 + m5;
                  const c10 = m2 + m4;
                  const c11 = m1 - m2 + m3 + m6;

                  result.set(0, 0, c00);
                  result.set(0, 1, c01);
                  result.set(1, 0, c10);
                  result.set(1, 1, c11);
                  return result;
                }

                strassen3x3(other) {
                  var result = new this.constructor[Symbol.species](3, 3);

                  const a00 = this.get(0, 0);
                  const a01 = this.get(0, 1);
                  const a02 = this.get(0, 2);
                  const a10 = this.get(1, 0);
                  const a11 = this.get(1, 1);
                  const a12 = this.get(1, 2);
                  const a20 = this.get(2, 0);
                  const a21 = this.get(2, 1);
                  const a22 = this.get(2, 2);

                  const b00 = other.get(0, 0);
                  const b01 = other.get(0, 1);
                  const b02 = other.get(0, 2);
                  const b10 = other.get(1, 0);
                  const b11 = other.get(1, 1);
                  const b12 = other.get(1, 2);
                  const b20 = other.get(2, 0);
                  const b21 = other.get(2, 1);
                  const b22 = other.get(2, 2);

                  const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;
                  const m2 = (a00 - a10) * (-b01 + b11);
                  const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);
                  const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);
                  const m5 = (a10 + a11) * (-b00 + b01);
                  const m6 = a00 * b00;
                  const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);
                  const m8 = (-a00 + a20) * (b02 - b12);
                  const m9 = (a20 + a21) * (-b00 + b02);
                  const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;
                  const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);
                  const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);
                  const m13 = (a02 - a22) * (b11 - b21);
                  const m14 = a02 * b20;
                  const m15 = (a21 + a22) * (-b20 + b21);
                  const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);
                  const m17 = (a02 - a12) * (b12 - b22);
                  const m18 = (a11 + a12) * (-b20 + b22);
                  const m19 = a01 * b10;
                  const m20 = a12 * b21;
                  const m21 = a10 * b02;
                  const m22 = a20 * b01;
                  const m23 = a22 * b22;

                  const c00 = m6 + m14 + m19;
                  const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;
                  const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;
                  const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;
                  const c11 = m2 + m4 + m5 + m6 + m20;
                  const c12 = m14 + m16 + m17 + m18 + m21;
                  const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;
                  const c21 = m12 + m13 + m14 + m15 + m22;
                  const c22 = m6 + m7 + m8 + m9 + m23;

                  result.set(0, 0, c00);
                  result.set(0, 1, c01);
                  result.set(0, 2, c02);
                  result.set(1, 0, c10);
                  result.set(1, 1, c11);
                  result.set(1, 2, c12);
                  result.set(2, 0, c20);
                  result.set(2, 1, c21);
                  result.set(2, 2, c22);
                  return result;
                }

                /**
                     * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.
                     * @param {Matrix} y
                     * @return {Matrix}
                     */
                mmulStrassen(y) {
                  var x = this.clone();
                  var r1 = x.rows;
                  var c1 = x.columns;
                  var r2 = y.rows;
                  var c2 = y.columns;
                  if (c1 !== r2) {
                    // eslint-disable-next-line no-console
                    console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);
                  }

                  // Put a matrix into the top left of a matrix of zeros.
                  // `rows` and `cols` are the dimensions of the output matrix.
                  function embed(mat, rows, cols) {
                    var r = mat.rows;
                    var c = mat.columns;
                    if ((r === rows) && (c === cols)) {
                      return mat;
                    } else {
                      var resultat = Matrix.zeros(rows, cols);
                      resultat = resultat.setSubMatrix(mat, 0, 0);
                      return resultat;
                    }
                  }


                  // Make sure both matrices are the same size.
                  // This is exclusively for simplicity:
                  // this algorithm can be implemented with matrices of different sizes.

                  var r = Math.max(r1, r2);
                  var c = Math.max(c1, c2);
                  x = embed(x, r, c);
                  y = embed(y, r, c);

                  // Our recursive multiplication function.
                  function blockMult(a, b, rows, cols) {
                    // For small matrices, resort to naive multiplication.
                    if (rows <= 512 || cols <= 512) {
                      return a.mmul(b); // a is equivalent to this
                    }

                    // Apply dynamic padding.
                    if ((rows % 2 === 1) && (cols % 2 === 1)) {
                      a = embed(a, rows + 1, cols + 1);
                      b = embed(b, rows + 1, cols + 1);
                    } else if (rows % 2 === 1) {
                      a = embed(a, rows + 1, cols);
                      b = embed(b, rows + 1, cols);
                    } else if (cols % 2 === 1) {
                      a = embed(a, rows, cols + 1);
                      b = embed(b, rows, cols + 1);
                    }

                    var halfRows = parseInt(a.rows / 2, 10);
                    var halfCols = parseInt(a.columns / 2, 10);
                    // Subdivide input matrices.
                    var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);
                    var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);

                    var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);
                    var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);

                    var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);
                    var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);

                    var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);
                    var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);

                    // Compute intermediate values.
                    var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);
                    var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);
                    var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);
                    var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);
                    var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);
                    var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);
                    var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);

                    // Combine intermediate values into the output.
                    var c11 = Matrix.add(m1, m4);
                    c11.sub(m5);
                    c11.add(m7);
                    var c12 = Matrix.add(m3, m5);
                    var c21 = Matrix.add(m2, m4);
                    var c22 = Matrix.sub(m1, m2);
                    c22.add(m3);
                    c22.add(m6);

                    // Crop output to the desired size (undo dynamic padding).
                    var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);
                    resultat = resultat.setSubMatrix(c11, 0, 0);
                    resultat = resultat.setSubMatrix(c12, c11.rows, 0);
                    resultat = resultat.setSubMatrix(c21, 0, c11.columns);
                    resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);
                    return resultat.subMatrix(0, rows - 1, 0, cols - 1);
                  }
                  return blockMult(x, y, r, c);
                }

                /**
                     * Returns a row-by-row scaled matrix
                     * @param {number} [min=0] - Minimum scaled value
                     * @param {number} [max=1] - Maximum scaled value
                     * @return {Matrix} - The scaled matrix
                     */
                scaleRows(min, max) {
                  min = min === undefined ? 0 : min;
                  max = max === undefined ? 1 : max;
                  if (min >= max) {
                    throw new RangeError('min should be strictly smaller than max');
                  }
                  var newMatrix = this.constructor.empty(this.rows, this.columns);
                  for (var i = 0; i < this.rows; i++) {
                    var scaled = rescale(this.getRow(i), { min, max });
                    newMatrix.setRow(i, scaled);
                  }
                  return newMatrix;
                }

                /**
                     * Returns a new column-by-column scaled matrix
                     * @param {number} [min=0] - Minimum scaled value
                     * @param {number} [max=1] - Maximum scaled value
                     * @return {Matrix} - The new scaled matrix
                     * @example
                     * var matrix = new Matrix([[1,2],[-1,0]]);
                     * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]
                     */
                scaleColumns(min, max) {
                  min = min === undefined ? 0 : min;
                  max = max === undefined ? 1 : max;
                  if (min >= max) {
                    throw new RangeError('min should be strictly smaller than max');
                  }
                  var newMatrix = this.constructor.empty(this.rows, this.columns);
                  for (var i = 0; i < this.columns; i++) {
                    var scaled = rescale(this.getColumn(i), {
                      min: min,
                      max: max
                    });
                    newMatrix.setColumn(i, scaled);
                  }
                  return newMatrix;
                }


                /**
                     * Returns the Kronecker product (also known as tensor product) between this and other
                     * See https://en.wikipedia.org/wiki/Kronecker_product
                     * @param {Matrix} other
                     * @return {Matrix}
                     */
                kroneckerProduct(other) {
                  other = this.constructor.checkMatrix(other);

                  var m = this.rows;
                  var n = this.columns;
                  var p = other.rows;
                  var q = other.columns;

                  var result = new this.constructor[Symbol.species](m * p, n * q);
                  for (var i = 0; i < m; i++) {
                    for (var j = 0; j < n; j++) {
                      for (var k = 0; k < p; k++) {
                        for (var l = 0; l < q; l++) {
                          result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);
                        }
                      }
                    }
                  }
                  return result;
                }

                /**
                     * Transposes the matrix and returns a new one containing the result
                     * @return {Matrix}
                     */
                transpose() {
                  var result = new this.constructor[Symbol.species](this.columns, this.rows);
                  for (var i = 0; i < this.rows; i++) {
                    for (var j = 0; j < this.columns; j++) {
                      result.set(j, i, this.get(i, j));
                    }
                  }
                  return result;
                }

                /**
                     * Sorts the rows (in place)
                     * @param {function} compareFunction - usual Array.prototype.sort comparison function
                     * @return {Matrix} this
                     */
                sortRows(compareFunction) {
                  if (compareFunction === undefined) compareFunction = compareNumbers;
                  for (var i = 0; i < this.rows; i++) {
                    this.setRow(i, this.getRow(i).sort(compareFunction));
                  }
                  return this;
                }

                /**
                     * Sorts the columns (in place)
                     * @param {function} compareFunction - usual Array.prototype.sort comparison function
                     * @return {Matrix} this
                     */
                sortColumns(compareFunction) {
                  if (compareFunction === undefined) compareFunction = compareNumbers;
                  for (var i = 0; i < this.columns; i++) {
                    this.setColumn(i, this.getColumn(i).sort(compareFunction));
                  }
                  return this;
                }

                /**
                     * Returns a subset of the matrix
                     * @param {number} startRow - First row index
                     * @param {number} endRow - Last row index
                     * @param {number} startColumn - First column index
                     * @param {number} endColumn - Last column index
                     * @return {Matrix}
                     */
                subMatrix(startRow, endRow, startColumn, endColumn) {
                  checkRange$1(this, startRow, endRow, startColumn, endColumn);
                  var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);
                  for (var i = startRow; i <= endRow; i++) {
                    for (var j = startColumn; j <= endColumn; j++) {
                      newMatrix[i - startRow][j - startColumn] = this.get(i, j);
                    }
                  }
                  return newMatrix;
                }

                /**
                     * Returns a subset of the matrix based on an array of row indices
                     * @param {Array} indices - Array containing the row indices
                     * @param {number} [startColumn = 0] - First column index
                     * @param {number} [endColumn = this.columns-1] - Last column index
                     * @return {Matrix}
                     */
                subMatrixRow(indices, startColumn, endColumn) {
                  if (startColumn === undefined) startColumn = 0;
                  if (endColumn === undefined) endColumn = this.columns - 1;
                  if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {
                    throw new RangeError('Argument out of range');
                  }

                  var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);
                  for (var i = 0; i < indices.length; i++) {
                    for (var j = startColumn; j <= endColumn; j++) {
                      if (indices[i] < 0 || indices[i] >= this.rows) {
                        throw new RangeError(`Row index out of range: ${indices[i]}`);
                      }
                      newMatrix.set(i, j - startColumn, this.get(indices[i], j));
                    }
                  }
                  return newMatrix;
                }

                /**
                     * Returns a subset of the matrix based on an array of column indices
                     * @param {Array} indices - Array containing the column indices
                     * @param {number} [startRow = 0] - First row index
                     * @param {number} [endRow = this.rows-1] - Last row index
                     * @return {Matrix}
                     */
                subMatrixColumn(indices, startRow, endRow) {
                  if (startRow === undefined) startRow = 0;
                  if (endRow === undefined) endRow = this.rows - 1;
                  if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {
                    throw new RangeError('Argument out of range');
                  }

                  var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);
                  for (var i = 0; i < indices.length; i++) {
                    for (var j = startRow; j <= endRow; j++) {
                      if (indices[i] < 0 || indices[i] >= this.columns) {
                        throw new RangeError(`Column index out of range: ${indices[i]}`);
                      }
                      newMatrix.set(j - startRow, i, this.get(j, indices[i]));
                    }
                  }
                  return newMatrix;
                }

                /**
                     * Set a part of the matrix to the given sub-matrix
                     * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.
                     * @param {number} startRow - The index of the first row to set
                     * @param {number} startColumn - The index of the first column to set
                     * @return {Matrix}
                     */
                setSubMatrix(matrix, startRow, startColumn) {
                  matrix = this.constructor.checkMatrix(matrix);
                  var endRow = startRow + matrix.rows - 1;
                  var endColumn = startColumn + matrix.columns - 1;
                  checkRange$1(this, startRow, endRow, startColumn, endColumn);
                  for (var i = 0; i < matrix.rows; i++) {
                    for (var j = 0; j < matrix.columns; j++) {
                      this[startRow + i][startColumn + j] = matrix.get(i, j);
                    }
                  }
                  return this;
                }

                /**
                     * Return a new matrix based on a selection of rows and columns
                     * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.
                     * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.
                     * @return {Matrix} The new matrix
                     */
                selection(rowIndices, columnIndices) {
                  var indices = checkIndices$1(this, rowIndices, columnIndices);
                  var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);
                  for (var i = 0; i < indices.row.length; i++) {
                    var rowIndex = indices.row[i];
                    for (var j = 0; j < indices.column.length; j++) {
                      var columnIndex = indices.column[j];
                      newMatrix[i][j] = this.get(rowIndex, columnIndex);
                    }
                  }
                  return newMatrix;
                }

                /**
                     * Returns the trace of the matrix (sum of the diagonal elements)
                     * @return {number}
                     */
                trace() {
                  var min = Math.min(this.rows, this.columns);
                  var trace = 0;
                  for (var i = 0; i < min; i++) {
                    trace += this.get(i, i);
                  }
                  return trace;
                }

                /*
                     Matrix views
                     */

                /**
                     * Returns a view of the transposition of the matrix
                     * @return {MatrixTransposeView}
                     */
                transposeView() {
                  return new MatrixTransposeView$1(this);
                }

                /**
                     * Returns a view of the row vector with the given index
                     * @param {number} row - row index of the vector
                     * @return {MatrixRowView}
                     */
                rowView(row) {
                  checkRowIndex$1(this, row);
                  return new MatrixRowView$1(this, row);
                }

                /**
                     * Returns a view of the column vector with the given index
                     * @param {number} column - column index of the vector
                     * @return {MatrixColumnView}
                     */
                columnView(column) {
                  checkColumnIndex$1(this, column);
                  return new MatrixColumnView$1(this, column);
                }

                /**
                     * Returns a view of the matrix flipped in the row axis
                     * @return {MatrixFlipRowView}
                     */
                flipRowView() {
                  return new MatrixFlipRowView$1(this);
                }

                /**
                     * Returns a view of the matrix flipped in the column axis
                     * @return {MatrixFlipColumnView}
                     */
                flipColumnView() {
                  return new MatrixFlipColumnView$1(this);
                }

                /**
                     * Returns a view of a submatrix giving the index boundaries
                     * @param {number} startRow - first row index of the submatrix
                     * @param {number} endRow - last row index of the submatrix
                     * @param {number} startColumn - first column index of the submatrix
                     * @param {number} endColumn - last column index of the submatrix
                     * @return {MatrixSubView}
                     */
                subMatrixView(startRow, endRow, startColumn, endColumn) {
                  return new MatrixSubView$1(this, startRow, endRow, startColumn, endColumn);
                }

                /**
                     * Returns a view of the cross of the row indices and the column indices
                     * @example
                     * // resulting vector is [[2], [2]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])
                     * @param {Array<number>} rowIndices
                     * @param {Array<number>} columnIndices
                     * @return {MatrixSelectionView}
                     */
                selectionView(rowIndices, columnIndices) {
                  return new MatrixSelectionView$1(this, rowIndices, columnIndices);
                }

                /**
                     * Returns a view of the row indices
                     * @example
                     * // resulting vector is [[1,2,3], [1,2,3]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).rowSelectionView([0, 0])
                     * @param {Array<number>} rowIndices
                     * @return {MatrixRowSelectionView}
                     */
                rowSelectionView(rowIndices) {
                  return new MatrixRowSelectionView$1(this, rowIndices);
                }

                /**
                     * Returns a view of the column indices
                     * @example
                     * // resulting vector is [[2, 2], [5, 5]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).columnSelectionView([1, 1])
                     * @param {Array<number>} columnIndices
                     * @return {MatrixColumnSelectionView}
                     */
                columnSelectionView(columnIndices) {
                  return new MatrixColumnSelectionView$1(this, columnIndices);
                }


                /**
                    * Calculates and returns the determinant of a matrix as a Number
                    * @example
                    *   new Matrix([[1,2,3], [4,5,6]]).det()
                    * @return {number}
                    */
                det() {
                  if (this.isSquare()) {
                    var a, b, c, d;
                    if (this.columns === 2) {
                      // 2 x 2 matrix
                      a = this.get(0, 0);
                      b = this.get(0, 1);
                      c = this.get(1, 0);
                      d = this.get(1, 1);

                      return a * d - (b * c);
                    } else if (this.columns === 3) {
                      // 3 x 3 matrix
                      var subMatrix0, subMatrix1, subMatrix2;
                      subMatrix0 = this.selectionView([1, 2], [1, 2]);
                      subMatrix1 = this.selectionView([1, 2], [0, 2]);
                      subMatrix2 = this.selectionView([1, 2], [0, 1]);
                      a = this.get(0, 0);
                      b = this.get(0, 1);
                      c = this.get(0, 2);

                      return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();
                    } else {
                      // general purpose determinant using the LU decomposition
                      return new LuDecomposition$$1(this).determinant;
                    }
                  } else {
                    throw Error('Determinant can only be calculated for a square matrix.');
                  }
                }

                /**
                     * Returns inverse of a matrix if it exists or the pseudoinverse
                     * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)
                     * @return {Matrix} the (pseudo)inverted matrix.
                     */
                pseudoInverse(threshold) {
                  if (threshold === undefined) threshold = Number.EPSILON;
                  var svdSolution = new SingularValueDecomposition$$1(this, { autoTranspose: true });

                  var U = svdSolution.leftSingularVectors;
                  var V = svdSolution.rightSingularVectors;
                  var s = svdSolution.diagonal;

                  for (var i = 0; i < s.length; i++) {
                    if (Math.abs(s[i]) > threshold) {
                      s[i] = 1.0 / s[i];
                    } else {
                      s[i] = 0.0;
                    }
                  }

                  // convert list to diagonal
                  s = this.constructor[Symbol.species].diag(s);
                  return V.mmul(s.mmul(U.transposeView()));
                }

                /**
                     * Creates an exact and independent copy of the matrix
                     * @return {Matrix}
                     */
                clone() {
                  var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);
                  for (var row = 0; row < this.rows; row++) {
                    for (var column = 0; column < this.columns; column++) {
                      newMatrix.set(row, column, this.get(row, column));
                    }
                  }
                  return newMatrix;
                }
              }

              Matrix.prototype.klass = 'Matrix';

              function compareNumbers(a, b) {
                return a - b;
              }

              /*
                 Synonyms
                 */

              Matrix.random = Matrix.rand;
              Matrix.diagonal = Matrix.diag;
              Matrix.prototype.diagonal = Matrix.prototype.diag;
              Matrix.identity = Matrix.eye;
              Matrix.prototype.negate = Matrix.prototype.neg;
              Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;
              Matrix.prototype.determinant = Matrix.prototype.det;

              /*
                 Add dynamically instance and static methods for mathematical operations
                 */

              var inplaceOperator = `
(function %name%(value) {
    if (typeof value === 'number') return this.%name%S(value);
    return this.%name%M(value);
})
`;

              var inplaceOperatorScalar = `
(function %name%S(value) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) %op% value);
        }
    }
    return this;
})
`;

              var inplaceOperatorMatrix = `
(function %name%M(matrix) {
    matrix = this.constructor.checkMatrix(matrix);
    if (this.rows !== matrix.rows ||
        this.columns !== matrix.columns) {
        throw new RangeError('Matrices dimensions must be equal');
    }
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));
        }
    }
    return this;
})
`;

              var staticOperator = `
(function %name%(matrix, value) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%(value);
})
`;

              var inplaceMethod = `
(function %name%() {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j)));
        }
    }
    return this;
})
`;

              var staticMethod = `
(function %name%(matrix) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%();
})
`;

              var inplaceMethodWithArgs = `
(function %name%(%args%) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), %args%));
        }
    }
    return this;
})
`;

              var staticMethodWithArgs = `
(function %name%(matrix, %args%) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%(%args%);
})
`;


              var inplaceMethodWithOneArgScalar = `
(function %name%S(value) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), value));
        }
    }
    return this;
})
`;
              var inplaceMethodWithOneArgMatrix = `
(function %name%M(matrix) {
    matrix = this.constructor.checkMatrix(matrix);
    if (this.rows !== matrix.rows ||
        this.columns !== matrix.columns) {
        throw new RangeError('Matrices dimensions must be equal');
    }
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));
        }
    }
    return this;
})
`;

              var inplaceMethodWithOneArg = `
(function %name%(value) {
    if (typeof value === 'number') return this.%name%S(value);
    return this.%name%M(value);
})
`;

              var staticMethodWithOneArg = staticMethodWithArgs;

              var operators = [
                // Arithmetic operators
                ['+', 'add'],
                ['-', 'sub', 'subtract'],
                ['*', 'mul', 'multiply'],
                ['/', 'div', 'divide'],
                ['%', 'mod', 'modulus'],
                // Bitwise operators
                ['&', 'and'],
                ['|', 'or'],
                ['^', 'xor'],
                ['<<', 'leftShift'],
                ['>>', 'signPropagatingRightShift'],
                ['>>>', 'rightShift', 'zeroFillRightShift']
              ];

              var i;
              var eval2 = eval; // eslint-disable-line no-eval
              for (var operator of operators) {
                var inplaceOp = eval2(fillTemplateFunction(inplaceOperator, { name: operator[1], op: operator[0] }));
                var inplaceOpS = eval2(fillTemplateFunction(inplaceOperatorScalar, { name: `${operator[1]}S`, op: operator[0] }));
                var inplaceOpM = eval2(fillTemplateFunction(inplaceOperatorMatrix, { name: `${operator[1]}M`, op: operator[0] }));
                var staticOp = eval2(fillTemplateFunction(staticOperator, { name: operator[1] }));
                for (i = 1; i < operator.length; i++) {
                  Matrix.prototype[operator[i]] = inplaceOp;
                  Matrix.prototype[`${operator[i]}S`] = inplaceOpS;
                  Matrix.prototype[`${operator[i]}M`] = inplaceOpM;
                  Matrix[operator[i]] = staticOp;
                }
              }

              var methods = [['~', 'not']];

              [
                'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',
                'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',
                'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'
              ].forEach(function (mathMethod) {
                methods.push([`Math.${mathMethod}`, mathMethod]);
              });

              for (var method of methods) {
                var inplaceMeth = eval2(fillTemplateFunction(inplaceMethod, { name: method[1], method: method[0] }));
                var staticMeth = eval2(fillTemplateFunction(staticMethod, { name: method[1] }));
                for (i = 1; i < method.length; i++) {
                  Matrix.prototype[method[i]] = inplaceMeth;
                  Matrix[method[i]] = staticMeth;
                }
              }

              var methodsWithArgs = [['Math.pow', 1, 'pow']];

              for (var methodWithArg of methodsWithArgs) {
                var args = 'arg0';
                for (i = 1; i < methodWithArg[1]; i++) {
                  args += `, arg${i}`;
                }
                if (methodWithArg[1] !== 1) {
                  var inplaceMethWithArgs = eval2(fillTemplateFunction(inplaceMethodWithArgs, {
                    name: methodWithArg[2],
                    method: methodWithArg[0],
                    args: args
                  }));
                  var staticMethWithArgs = eval2(fillTemplateFunction(staticMethodWithArgs, { name: methodWithArg[2], args: args }));
                  for (i = 2; i < methodWithArg.length; i++) {
                    Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;
                    Matrix[methodWithArg[i]] = staticMethWithArgs;
                  }
                } else {
                  var tmplVar = {
                    name: methodWithArg[2],
                    args: args,
                    method: methodWithArg[0]
                  };
                  var inplaceMethod2 = eval2(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));
                  var inplaceMethodS = eval2(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));
                  var inplaceMethodM = eval2(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));
                  var staticMethod2 = eval2(fillTemplateFunction(staticMethodWithOneArg, tmplVar));
                  for (i = 2; i < methodWithArg.length; i++) {
                    Matrix.prototype[methodWithArg[i]] = inplaceMethod2;
                    Matrix.prototype[`${methodWithArg[i]}M`] = inplaceMethodM;
                    Matrix.prototype[`${methodWithArg[i]}S`] = inplaceMethodS;
                    Matrix[methodWithArg[i]] = staticMethod2;
                  }
                }
              }

              function fillTemplateFunction(template, values) {
                for (var value in values) {
                  template = template.replace(new RegExp(`%${value}%`, 'g'), values[value]);
                }
                return template;
              }

              return Matrix;
            }

            class Matrix$1 extends AbstractMatrix$1(Array) {
              constructor(nRows, nColumns) {
                var i;
                if (arguments.length === 1 && typeof nRows === 'number') {
                  return new Array(nRows);
                }
                if (Matrix$1.isMatrix(nRows)) {
                  return nRows.clone();
                } else if (Number.isInteger(nRows) && nRows > 0) {
                  // Create an empty matrix
                  super(nRows);
                  if (Number.isInteger(nColumns) && nColumns > 0) {
                    for (i = 0; i < nRows; i++) {
                      this[i] = new Array(nColumns);
                    }
                  } else {
                    throw new TypeError('nColumns must be a positive integer');
                  }
                } else if (Array.isArray(nRows)) {
                  // Copy the values from the 2D array
                  const matrix = nRows;
                  nRows = matrix.length;
                  nColumns = matrix[0].length;
                  if (typeof nColumns !== 'number' || nColumns === 0) {
                    throw new TypeError(
                      'Data must be a 2D array with at least one element'
                    );
                  }
                  super(nRows);
                  for (i = 0; i < nRows; i++) {
                    if (matrix[i].length !== nColumns) {
                      throw new RangeError('Inconsistent array dimensions');
                    }
                    this[i] = [].concat(matrix[i]);
                  }
                } else {
                  throw new TypeError(
                    'First argument must be a positive number or an array'
                  );
                }
                this.rows = nRows;
                this.columns = nColumns;
                return this;
              }

              set(rowIndex, columnIndex, value) {
                this[rowIndex][columnIndex] = value;
                return this;
              }

              get(rowIndex, columnIndex) {
                return this[rowIndex][columnIndex];
              }

              /**
               * Removes a row from the given index
               * @param {number} index - Row index
               * @return {Matrix} this
               */
              removeRow(index) {
                checkRowIndex$1(this, index);
                if (this.rows === 1) {
                  throw new RangeError('A matrix cannot have less than one row');
                }
                this.splice(index, 1);
                this.rows -= 1;
                return this;
              }

              /**
               * Adds a row at the given index
               * @param {number} [index = this.rows] - Row index
               * @param {Array|Matrix} array - Array or vector
               * @return {Matrix} this
               */
              addRow(index, array) {
                if (array === undefined) {
                  array = index;
                  index = this.rows;
                }
                checkRowIndex$1(this, index, true);
                array = checkRowVector$1(this, array, true);
                this.splice(index, 0, array);
                this.rows += 1;
                return this;
              }

              /**
               * Removes a column from the given index
               * @param {number} index - Column index
               * @return {Matrix} this
               */
              removeColumn(index) {
                checkColumnIndex$1(this, index);
                if (this.columns === 1) {
                  throw new RangeError('A matrix cannot have less than one column');
                }
                for (var i = 0; i < this.rows; i++) {
                  this[i].splice(index, 1);
                }
                this.columns -= 1;
                return this;
              }

              /**
               * Adds a column at the given index
               * @param {number} [index = this.columns] - Column index
               * @param {Array|Matrix} array - Array or vector
               * @return {Matrix} this
               */
              addColumn(index, array) {
                if (typeof array === 'undefined') {
                  array = index;
                  index = this.columns;
                }
                checkColumnIndex$1(this, index, true);
                array = checkColumnVector$1(this, array);
                for (var i = 0; i < this.rows; i++) {
                  this[i].splice(index, 0, array[i]);
                }
                this.columns += 1;
                return this;
              }
            }

            class WrapperMatrix1D$1 extends AbstractMatrix$1() {
              /**
               * @class WrapperMatrix1D
               * @param {Array<number>} data
               * @param {object} [options]
               * @param {object} [options.rows = 1]
               */
              constructor(data, options = {}) {
                const { rows = 1 } = options;

                if (data.length % rows !== 0) {
                  throw new Error('the data length is not divisible by the number of rows');
                }
                super();
                this.rows = rows;
                this.columns = data.length / rows;
                this.data = data;
              }

              set(rowIndex, columnIndex, value) {
                var index = this._calculateIndex(rowIndex, columnIndex);
                this.data[index] = value;
                return this;
              }

              get(rowIndex, columnIndex) {
                var index = this._calculateIndex(rowIndex, columnIndex);
                return this.data[index];
              }

              _calculateIndex(row, column) {
                return row * this.columns + column;
              }

              static get [Symbol.species]() {
                return Matrix$1;
              }
            }

            class WrapperMatrix2D$1 extends AbstractMatrix$1() {
              /**
               * @class WrapperMatrix2D
               * @param {Array<Array<number>>} data
               */
              constructor(data) {
                super();
                this.data = data;
                this.rows = data.length;
                this.columns = data[0].length;
              }

              set(rowIndex, columnIndex, value) {
                this.data[rowIndex][columnIndex] = value;
                return this;
              }

              get(rowIndex, columnIndex) {
                return this.data[rowIndex][columnIndex];
              }

              static get [Symbol.species]() {
                return Matrix$1;
              }
            }

            /**
             * @param {Array<Array<number>>|Array<number>} array
             * @param {object} [options]
             * @param {object} [options.rows = 1]
             * @return {WrapperMatrix1D|WrapperMatrix2D}
             */
            function wrap$1(array, options) {
              if (Array.isArray(array)) {
                if (array[0] && Array.isArray(array[0])) {
                  return new WrapperMatrix2D$1(array);
                } else {
                  return new WrapperMatrix1D$1(array, options);
                }
              } else {
                throw new Error('the argument is not an array');
              }
            }

            /**
             * @class QrDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs
             * @param {Matrix} value
             */
            class QrDecomposition$$1 {
              constructor(value) {
                value = WrapperMatrix2D$1.checkMatrix(value);

                var qr = value.clone();
                var m = value.rows;
                var n = value.columns;
                var rdiag = new Array(n);
                var i, j, k, s;

                for (k = 0; k < n; k++) {
                  var nrm = 0;
                  for (i = k; i < m; i++) {
                    nrm = hypotenuse$1(nrm, qr.get(i, k));
                  }
                  if (nrm !== 0) {
                    if (qr.get(k, k) < 0) {
                      nrm = -nrm;
                    }
                    for (i = k; i < m; i++) {
                      qr.set(i, k, qr.get(i, k) / nrm);
                    }
                    qr.set(k, k, qr.get(k, k) + 1);
                    for (j = k + 1; j < n; j++) {
                      s = 0;
                      for (i = k; i < m; i++) {
                        s += qr.get(i, k) * qr.get(i, j);
                      }
                      s = -s / qr.get(k, k);
                      for (i = k; i < m; i++) {
                        qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));
                      }
                    }
                  }
                  rdiag[k] = -nrm;
                }

                this.QR = qr;
                this.Rdiag = rdiag;
              }

              /**
               * Solve a problem of least square (Ax=b) by using the QR decomposition. Useful when A is rectangular, but not working when A is singular.
               * Example : We search to approximate x, with A matrix shape m*n, x vector size n, b vector size m (m > n). We will use :
               * var qr = QrDecomposition(A);
               * var x = qr.solve(b);
               * @param {Matrix} value - Matrix 1D which is the vector b (in the equation Ax = b)
               * @return {Matrix} - The vector x
               */
              solve(value) {
                value = Matrix$1.checkMatrix(value);

                var qr = this.QR;
                var m = qr.rows;

                if (value.rows !== m) {
                  throw new Error('Matrix row dimensions must agree');
                }
                if (!this.isFullRank()) {
                  throw new Error('Matrix is rank deficient');
                }

                var count = value.columns;
                var X = value.clone();
                var n = qr.columns;
                var i, j, k, s;

                for (k = 0; k < n; k++) {
                  for (j = 0; j < count; j++) {
                    s = 0;
                    for (i = k; i < m; i++) {
                      s += qr[i][k] * X[i][j];
                    }
                    s = -s / qr[k][k];
                    for (i = k; i < m; i++) {
                      X[i][j] += s * qr[i][k];
                    }
                  }
                }
                for (k = n - 1; k >= 0; k--) {
                  for (j = 0; j < count; j++) {
                    X[k][j] /= this.Rdiag[k];
                  }
                  for (i = 0; i < k; i++) {
                    for (j = 0; j < count; j++) {
                      X[i][j] -= X[k][j] * qr[i][k];
                    }
                  }
                }

                return X.subMatrix(0, n - 1, 0, count - 1);
              }

              /**
               *
               * @return {boolean}
               */
              isFullRank() {
                var columns = this.QR.columns;
                for (var i = 0; i < columns; i++) {
                  if (this.Rdiag[i] === 0) {
                    return false;
                  }
                }
                return true;
              }

              /**
               *
               * @return {Matrix}
               */
              get upperTriangularMatrix() {
                var qr = this.QR;
                var n = qr.columns;
                var X = new Matrix$1(n, n);
                var i, j;
                for (i = 0; i < n; i++) {
                  for (j = 0; j < n; j++) {
                    if (i < j) {
                      X[i][j] = qr[i][j];
                    } else if (i === j) {
                      X[i][j] = this.Rdiag[i];
                    } else {
                      X[i][j] = 0;
                    }
                  }
                }
                return X;
              }

              /**
               *
               * @return {Matrix}
               */
              get orthogonalMatrix() {
                var qr = this.QR;
                var rows = qr.rows;
                var columns = qr.columns;
                var X = new Matrix$1(rows, columns);
                var i, j, k, s;

                for (k = columns - 1; k >= 0; k--) {
                  for (i = 0; i < rows; i++) {
                    X[i][k] = 0;
                  }
                  X[k][k] = 1;
                  for (j = k; j < columns; j++) {
                    if (qr[k][k] !== 0) {
                      s = 0;
                      for (i = k; i < rows; i++) {
                        s += qr[i][k] * X[i][j];
                      }

                      s = -s / qr[k][k];

                      for (i = k; i < rows; i++) {
                        X[i][j] += s * qr[i][k];
                      }
                    }
                  }
                }
                return X;
              }
            }

            /**
             * Computes the inverse of a Matrix
             * @param {Matrix} matrix
             * @param {boolean} [useSVD=false]
             * @return {Matrix}
             */
            function inverse$$1(matrix, useSVD = false) {
              matrix = WrapperMatrix2D$1.checkMatrix(matrix);
              if (useSVD) {
                return new SingularValueDecomposition$$1(matrix).inverse();
              } else {
                return solve$$1(matrix, Matrix$1.eye(matrix.rows));
              }
            }

            /**
             *
             * @param {Matrix} leftHandSide
             * @param {Matrix} rightHandSide
             * @param {boolean} [useSVD = false]
             * @return {Matrix}
             */
            function solve$$1(leftHandSide, rightHandSide, useSVD = false) {
              leftHandSide = WrapperMatrix2D$1.checkMatrix(leftHandSide);
              rightHandSide = WrapperMatrix2D$1.checkMatrix(rightHandSide);
              if (useSVD) {
                return new SingularValueDecomposition$$1(leftHandSide).solve(rightHandSide);
              } else {
                return leftHandSide.isSquare()
                  ? new LuDecomposition$$1(leftHandSide).solve(rightHandSide)
                  : new QrDecomposition$$1(leftHandSide).solve(rightHandSide);
              }
            }

            // function used by rowsDependencies
            function xrange(n, exception) {
              var range = [];
              for (var i = 0; i < n; i++) {
                if (i !== exception) {
                  range.push(i);
                }
              }
              return range;
            }

            // function used by rowsDependencies
            function dependenciesOneRow(
              error,
              matrix,
              index,
              thresholdValue = 10e-10,
              thresholdError = 10e-10
            ) {
              if (error > thresholdError) {
                return new Array(matrix.rows + 1).fill(0);
              } else {
                var returnArray = matrix.addRow(index, [0]);
                for (var i = 0; i < returnArray.rows; i++) {
                  if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {
                    returnArray.set(i, 0, 0);
                  }
                }
                return returnArray.to1DArray();
              }
            }

            /**
             * Creates a matrix which represents the dependencies between rows.
             * If a row is a linear combination of others rows, the result will be a row with the coefficients of this combination.
             * For example : for A = [[2, 0, 0, 1], [0, 1, 6, 0], [0, 3, 0, 1], [0, 0, 1, 0], [0, 1, 2, 0]], the result will be [[0, 0, 0, 0, 0], [0, 0, 0, 4, 1], [0, 0, 0, 0, 0], [0, 0.25, 0, 0, -0.25], [0, 1, 0, -4, 0]]
             * @param {Matrix} matrix
             * @param {Object} [options] includes thresholdValue and thresholdError.
             * @param {number} [options.thresholdValue = 10e-10] If an absolute value is inferior to this threshold, it will equals zero.
             * @param {number} [options.thresholdError = 10e-10] If the error is inferior to that threshold, the linear combination found is accepted and the row is dependent from other rows.
             * @return {Matrix} the matrix which represents the dependencies between rows.
             */

            function linearDependencies(matrix, options = {}) {
              const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;

              var n = matrix.rows;
              var results = new Matrix$1(n, n);

              for (var i = 0; i < n; i++) {
                var b = Matrix$1.columnVector(matrix.getRow(i));
                var Abis = matrix.subMatrixRow(xrange(n, i)).transposeView();
                var svd = new SingularValueDecomposition$$1(Abis);
                var x = svd.solve(b);
                var error = max(
                  Matrix$1.sub(b, Abis.mmul(x))
                    .abs()
                    .to1DArray()
                );
                results.setRow(
                  i,
                  dependenciesOneRow(error, x, i, thresholdValue, thresholdError)
                );
              }
              return results;
            }

            /**
             * @class EigenvalueDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs
             * @param {Matrix} matrix
             * @param {object} [options]
             * @param {boolean} [options.assumeSymmetric=false]
             */
            class EigenvalueDecomposition$$1 {
              constructor(matrix, options = {}) {
                const { assumeSymmetric = false } = options;

                matrix = WrapperMatrix2D$1.checkMatrix(matrix);
                if (!matrix.isSquare()) {
                  throw new Error('Matrix is not a square matrix');
                }

                var n = matrix.columns;
                var V = getFilled2DArray$1(n, n, 0);
                var d = new Array(n);
                var e = new Array(n);
                var value = matrix;
                var i, j;

                var isSymmetric = false;
                if (assumeSymmetric) {
                  isSymmetric = true;
                } else {
                  isSymmetric = matrix.isSymmetric();
                }

                if (isSymmetric) {
                  for (i = 0; i < n; i++) {
                    for (j = 0; j < n; j++) {
                      V[i][j] = value.get(i, j);
                    }
                  }
                  tred2$1(n, e, d, V);
                  tql2$1(n, e, d, V);
                } else {
                  var H = getFilled2DArray$1(n, n, 0);
                  var ort = new Array(n);
                  for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                      H[i][j] = value.get(i, j);
                    }
                  }
                  orthes$1(n, H, ort, V);
                  hqr2$1(n, e, d, V, H);
                }

                this.n = n;
                this.e = e;
                this.d = d;
                this.V = V;
              }

              /**
               *
               * @return {Array<number>}
               */
              get realEigenvalues() {
                return this.d;
              }

              /**
               *
               * @return {Array<number>}
               */
              get imaginaryEigenvalues() {
                return this.e;
              }

              /**
               *
               * @return {Matrix}
               */
              get eigenvectorMatrix() {
                if (!Matrix$1.isMatrix(this.V)) {
                  this.V = new Matrix$1(this.V);
                }
                return this.V;
              }

              /**
               *
               * @return {Matrix}
               */
              get diagonalMatrix() {
                var n = this.n;
                var e = this.e;
                var d = this.d;
                var X = new Matrix$1(n, n);
                var i, j;
                for (i = 0; i < n; i++) {
                  for (j = 0; j < n; j++) {
                    X[i][j] = 0;
                  }
                  X[i][i] = d[i];
                  if (e[i] > 0) {
                    X[i][i + 1] = e[i];
                  } else if (e[i] < 0) {
                    X[i][i - 1] = e[i];
                  }
                }
                return X;
              }
            }

            function tred2$1(n, e, d, V) {
              var f, g, h, i, j, k, hh, scale;

              for (j = 0; j < n; j++) {
                d[j] = V[n - 1][j];
              }

              for (i = n - 1; i > 0; i--) {
                scale = 0;
                h = 0;
                for (k = 0; k < i; k++) {
                  scale = scale + Math.abs(d[k]);
                }

                if (scale === 0) {
                  e[i] = d[i - 1];
                  for (j = 0; j < i; j++) {
                    d[j] = V[i - 1][j];
                    V[i][j] = 0;
                    V[j][i] = 0;
                  }
                } else {
                  for (k = 0; k < i; k++) {
                    d[k] /= scale;
                    h += d[k] * d[k];
                  }

                  f = d[i - 1];
                  g = Math.sqrt(h);
                  if (f > 0) {
                    g = -g;
                  }

                  e[i] = scale * g;
                  h = h - f * g;
                  d[i - 1] = f - g;
                  for (j = 0; j < i; j++) {
                    e[j] = 0;
                  }

                  for (j = 0; j < i; j++) {
                    f = d[j];
                    V[j][i] = f;
                    g = e[j] + V[j][j] * f;
                    for (k = j + 1; k <= i - 1; k++) {
                      g += V[k][j] * d[k];
                      e[k] += V[k][j] * f;
                    }
                    e[j] = g;
                  }

                  f = 0;
                  for (j = 0; j < i; j++) {
                    e[j] /= h;
                    f += e[j] * d[j];
                  }

                  hh = f / (h + h);
                  for (j = 0; j < i; j++) {
                    e[j] -= hh * d[j];
                  }

                  for (j = 0; j < i; j++) {
                    f = d[j];
                    g = e[j];
                    for (k = j; k <= i - 1; k++) {
                      V[k][j] -= f * e[k] + g * d[k];
                    }
                    d[j] = V[i - 1][j];
                    V[i][j] = 0;
                  }
                }
                d[i] = h;
              }

              for (i = 0; i < n - 1; i++) {
                V[n - 1][i] = V[i][i];
                V[i][i] = 1;
                h = d[i + 1];
                if (h !== 0) {
                  for (k = 0; k <= i; k++) {
                    d[k] = V[k][i + 1] / h;
                  }

                  for (j = 0; j <= i; j++) {
                    g = 0;
                    for (k = 0; k <= i; k++) {
                      g += V[k][i + 1] * V[k][j];
                    }
                    for (k = 0; k <= i; k++) {
                      V[k][j] -= g * d[k];
                    }
                  }
                }

                for (k = 0; k <= i; k++) {
                  V[k][i + 1] = 0;
                }
              }

              for (j = 0; j < n; j++) {
                d[j] = V[n - 1][j];
                V[n - 1][j] = 0;
              }

              V[n - 1][n - 1] = 1;
              e[0] = 0;
            }

            function tql2$1(n, e, d, V) {
              var g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2;

              for (i = 1; i < n; i++) {
                e[i - 1] = e[i];
              }

              e[n - 1] = 0;

              var f = 0;
              var tst1 = 0;
              var eps = Number.EPSILON;

              for (l = 0; l < n; l++) {
                tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));
                m = l;
                while (m < n) {
                  if (Math.abs(e[m]) <= eps * tst1) {
                    break;
                  }
                  m++;
                }

                if (m > l) {
                  do {

                    g = d[l];
                    p = (d[l + 1] - g) / (2 * e[l]);
                    r = hypotenuse$1(p, 1);
                    if (p < 0) {
                      r = -r;
                    }

                    d[l] = e[l] / (p + r);
                    d[l + 1] = e[l] * (p + r);
                    dl1 = d[l + 1];
                    h = g - d[l];
                    for (i = l + 2; i < n; i++) {
                      d[i] -= h;
                    }

                    f = f + h;

                    p = d[m];
                    c = 1;
                    c2 = c;
                    c3 = c;
                    el1 = e[l + 1];
                    s = 0;
                    s2 = 0;
                    for (i = m - 1; i >= l; i--) {
                      c3 = c2;
                      c2 = c;
                      s2 = s;
                      g = c * e[i];
                      h = c * p;
                      r = hypotenuse$1(p, e[i]);
                      e[i + 1] = s * r;
                      s = e[i] / r;
                      c = p / r;
                      p = c * d[i] - s * g;
                      d[i + 1] = h + s * (c * g + s * d[i]);

                      for (k = 0; k < n; k++) {
                        h = V[k][i + 1];
                        V[k][i + 1] = s * V[k][i] + c * h;
                        V[k][i] = c * V[k][i] - s * h;
                      }
                    }

                    p = -s * s2 * c3 * el1 * e[l] / dl1;
                    e[l] = s * p;
                    d[l] = c * p;
                  } while (Math.abs(e[l]) > eps * tst1);
                }
                d[l] = d[l] + f;
                e[l] = 0;
              }

              for (i = 0; i < n - 1; i++) {
                k = i;
                p = d[i];
                for (j = i + 1; j < n; j++) {
                  if (d[j] < p) {
                    k = j;
                    p = d[j];
                  }
                }

                if (k !== i) {
                  d[k] = d[i];
                  d[i] = p;
                  for (j = 0; j < n; j++) {
                    p = V[j][i];
                    V[j][i] = V[j][k];
                    V[j][k] = p;
                  }
                }
              }
            }

            function orthes$1(n, H, ort, V) {
              var low = 0;
              var high = n - 1;
              var f, g, h, i, j, m;
              var scale;

              for (m = low + 1; m <= high - 1; m++) {
                scale = 0;
                for (i = m; i <= high; i++) {
                  scale = scale + Math.abs(H[i][m - 1]);
                }

                if (scale !== 0) {
                  h = 0;
                  for (i = high; i >= m; i--) {
                    ort[i] = H[i][m - 1] / scale;
                    h += ort[i] * ort[i];
                  }

                  g = Math.sqrt(h);
                  if (ort[m] > 0) {
                    g = -g;
                  }

                  h = h - ort[m] * g;
                  ort[m] = ort[m] - g;

                  for (j = m; j < n; j++) {
                    f = 0;
                    for (i = high; i >= m; i--) {
                      f += ort[i] * H[i][j];
                    }

                    f = f / h;
                    for (i = m; i <= high; i++) {
                      H[i][j] -= f * ort[i];
                    }
                  }

                  for (i = 0; i <= high; i++) {
                    f = 0;
                    for (j = high; j >= m; j--) {
                      f += ort[j] * H[i][j];
                    }

                    f = f / h;
                    for (j = m; j <= high; j++) {
                      H[i][j] -= f * ort[j];
                    }
                  }

                  ort[m] = scale * ort[m];
                  H[m][m - 1] = scale * g;
                }
              }

              for (i = 0; i < n; i++) {
                for (j = 0; j < n; j++) {
                  V[i][j] = i === j ? 1 : 0;
                }
              }

              for (m = high - 1; m >= low + 1; m--) {
                if (H[m][m - 1] !== 0) {
                  for (i = m + 1; i <= high; i++) {
                    ort[i] = H[i][m - 1];
                  }

                  for (j = m; j <= high; j++) {
                    g = 0;
                    for (i = m; i <= high; i++) {
                      g += ort[i] * V[i][j];
                    }

                    g = g / ort[m] / H[m][m - 1];
                    for (i = m; i <= high; i++) {
                      V[i][j] += g * ort[i];
                    }
                  }
                }
              }
            }

            function hqr2$1(nn, e, d, V, H) {
              var n = nn - 1;
              var low = 0;
              var high = nn - 1;
              var eps = Number.EPSILON;
              var exshift = 0;
              var norm = 0;
              var p = 0;
              var q = 0;
              var r = 0;
              var s = 0;
              var z = 0;
              var iter = 0;
              var i, j, k, l, m, t, w, x, y;
              var ra, sa, vr, vi;
              var notlast, cdivres;

              for (i = 0; i < nn; i++) {
                if (i < low || i > high) {
                  d[i] = H[i][i];
                  e[i] = 0;
                }

                for (j = Math.max(i - 1, 0); j < nn; j++) {
                  norm = norm + Math.abs(H[i][j]);
                }
              }

              while (n >= low) {
                l = n;
                while (l > low) {
                  s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);
                  if (s === 0) {
                    s = norm;
                  }
                  if (Math.abs(H[l][l - 1]) < eps * s) {
                    break;
                  }
                  l--;
                }

                if (l === n) {
                  H[n][n] = H[n][n] + exshift;
                  d[n] = H[n][n];
                  e[n] = 0;
                  n--;
                  iter = 0;
                } else if (l === n - 1) {
                  w = H[n][n - 1] * H[n - 1][n];
                  p = (H[n - 1][n - 1] - H[n][n]) / 2;
                  q = p * p + w;
                  z = Math.sqrt(Math.abs(q));
                  H[n][n] = H[n][n] + exshift;
                  H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;
                  x = H[n][n];

                  if (q >= 0) {
                    z = p >= 0 ? p + z : p - z;
                    d[n - 1] = x + z;
                    d[n] = d[n - 1];
                    if (z !== 0) {
                      d[n] = x - w / z;
                    }
                    e[n - 1] = 0;
                    e[n] = 0;
                    x = H[n][n - 1];
                    s = Math.abs(x) + Math.abs(z);
                    p = x / s;
                    q = z / s;
                    r = Math.sqrt(p * p + q * q);
                    p = p / r;
                    q = q / r;

                    for (j = n - 1; j < nn; j++) {
                      z = H[n - 1][j];
                      H[n - 1][j] = q * z + p * H[n][j];
                      H[n][j] = q * H[n][j] - p * z;
                    }

                    for (i = 0; i <= n; i++) {
                      z = H[i][n - 1];
                      H[i][n - 1] = q * z + p * H[i][n];
                      H[i][n] = q * H[i][n] - p * z;
                    }

                    for (i = low; i <= high; i++) {
                      z = V[i][n - 1];
                      V[i][n - 1] = q * z + p * V[i][n];
                      V[i][n] = q * V[i][n] - p * z;
                    }
                  } else {
                    d[n - 1] = x + p;
                    d[n] = x + p;
                    e[n - 1] = z;
                    e[n] = -z;
                  }

                  n = n - 2;
                  iter = 0;
                } else {
                  x = H[n][n];
                  y = 0;
                  w = 0;
                  if (l < n) {
                    y = H[n - 1][n - 1];
                    w = H[n][n - 1] * H[n - 1][n];
                  }

                  if (iter === 10) {
                    exshift += x;
                    for (i = low; i <= n; i++) {
                      H[i][i] -= x;
                    }
                    s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);
                    x = y = 0.75 * s;
                    w = -0.4375 * s * s;
                  }

                  if (iter === 30) {
                    s = (y - x) / 2;
                    s = s * s + w;
                    if (s > 0) {
                      s = Math.sqrt(s);
                      if (y < x) {
                        s = -s;
                      }
                      s = x - w / ((y - x) / 2 + s);
                      for (i = low; i <= n; i++) {
                        H[i][i] -= s;
                      }
                      exshift += s;
                      x = y = w = 0.964;
                    }
                  }

                  iter = iter + 1;

                  m = n - 2;
                  while (m >= l) {
                    z = H[m][m];
                    r = x - z;
                    s = y - z;
                    p = (r * s - w) / H[m + 1][m] + H[m][m + 1];
                    q = H[m + 1][m + 1] - z - r - s;
                    r = H[m + 2][m + 1];
                    s = Math.abs(p) + Math.abs(q) + Math.abs(r);
                    p = p / s;
                    q = q / s;
                    r = r / s;
                    if (m === l) {
                      break;
                    }
                    if (
                      Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) <
                      eps *
                        (Math.abs(p) *
                          (Math.abs(H[m - 1][m - 1]) +
                            Math.abs(z) +
                            Math.abs(H[m + 1][m + 1])))
                    ) {
                      break;
                    }
                    m--;
                  }

                  for (i = m + 2; i <= n; i++) {
                    H[i][i - 2] = 0;
                    if (i > m + 2) {
                      H[i][i - 3] = 0;
                    }
                  }

                  for (k = m; k <= n - 1; k++) {
                    notlast = k !== n - 1;
                    if (k !== m) {
                      p = H[k][k - 1];
                      q = H[k + 1][k - 1];
                      r = notlast ? H[k + 2][k - 1] : 0;
                      x = Math.abs(p) + Math.abs(q) + Math.abs(r);
                      if (x !== 0) {
                        p = p / x;
                        q = q / x;
                        r = r / x;
                      }
                    }

                    if (x === 0) {
                      break;
                    }

                    s = Math.sqrt(p * p + q * q + r * r);
                    if (p < 0) {
                      s = -s;
                    }

                    if (s !== 0) {
                      if (k !== m) {
                        H[k][k - 1] = -s * x;
                      } else if (l !== m) {
                        H[k][k - 1] = -H[k][k - 1];
                      }

                      p = p + s;
                      x = p / s;
                      y = q / s;
                      z = r / s;
                      q = q / p;
                      r = r / p;

                      for (j = k; j < nn; j++) {
                        p = H[k][j] + q * H[k + 1][j];
                        if (notlast) {
                          p = p + r * H[k + 2][j];
                          H[k + 2][j] = H[k + 2][j] - p * z;
                        }

                        H[k][j] = H[k][j] - p * x;
                        H[k + 1][j] = H[k + 1][j] - p * y;
                      }

                      for (i = 0; i <= Math.min(n, k + 3); i++) {
                        p = x * H[i][k] + y * H[i][k + 1];
                        if (notlast) {
                          p = p + z * H[i][k + 2];
                          H[i][k + 2] = H[i][k + 2] - p * r;
                        }

                        H[i][k] = H[i][k] - p;
                        H[i][k + 1] = H[i][k + 1] - p * q;
                      }

                      for (i = low; i <= high; i++) {
                        p = x * V[i][k] + y * V[i][k + 1];
                        if (notlast) {
                          p = p + z * V[i][k + 2];
                          V[i][k + 2] = V[i][k + 2] - p * r;
                        }

                        V[i][k] = V[i][k] - p;
                        V[i][k + 1] = V[i][k + 1] - p * q;
                      }
                    }
                  }
                }
              }

              if (norm === 0) {
                return;
              }

              for (n = nn - 1; n >= 0; n--) {
                p = d[n];
                q = e[n];

                if (q === 0) {
                  l = n;
                  H[n][n] = 1;
                  for (i = n - 1; i >= 0; i--) {
                    w = H[i][i] - p;
                    r = 0;
                    for (j = l; j <= n; j++) {
                      r = r + H[i][j] * H[j][n];
                    }

                    if (e[i] < 0) {
                      z = w;
                      s = r;
                    } else {
                      l = i;
                      if (e[i] === 0) {
                        H[i][n] = w !== 0 ? -r / w : -r / (eps * norm);
                      } else {
                        x = H[i][i + 1];
                        y = H[i + 1][i];
                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];
                        t = (x * s - z * r) / q;
                        H[i][n] = t;
                        H[i + 1][n] =
                          Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z;
                      }

                      t = Math.abs(H[i][n]);
                      if (eps * t * t > 1) {
                        for (j = i; j <= n; j++) {
                          H[j][n] = H[j][n] / t;
                        }
                      }
                    }
                  }
                } else if (q < 0) {
                  l = n - 1;

                  if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {
                    H[n - 1][n - 1] = q / H[n][n - 1];
                    H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];
                  } else {
                    cdivres = cdiv$1(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);
                    H[n - 1][n - 1] = cdivres[0];
                    H[n - 1][n] = cdivres[1];
                  }

                  H[n][n - 1] = 0;
                  H[n][n] = 1;
                  for (i = n - 2; i >= 0; i--) {
                    ra = 0;
                    sa = 0;
                    for (j = l; j <= n; j++) {
                      ra = ra + H[i][j] * H[j][n - 1];
                      sa = sa + H[i][j] * H[j][n];
                    }

                    w = H[i][i] - p;

                    if (e[i] < 0) {
                      z = w;
                      r = ra;
                      s = sa;
                    } else {
                      l = i;
                      if (e[i] === 0) {
                        cdivres = cdiv$1(-ra, -sa, w, q);
                        H[i][n - 1] = cdivres[0];
                        H[i][n] = cdivres[1];
                      } else {
                        x = H[i][i + 1];
                        y = H[i + 1][i];
                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;
                        vi = (d[i] - p) * 2 * q;
                        if (vr === 0 && vi === 0) {
                          vr =
                            eps *
                            norm *
                            (Math.abs(w) +
                              Math.abs(q) +
                              Math.abs(x) +
                              Math.abs(y) +
                              Math.abs(z));
                        }
                        cdivres = cdiv$1(
                          x * r - z * ra + q * sa,
                          x * s - z * sa - q * ra,
                          vr,
                          vi
                        );
                        H[i][n - 1] = cdivres[0];
                        H[i][n] = cdivres[1];
                        if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {
                          H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;
                          H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;
                        } else {
                          cdivres = cdiv$1(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);
                          H[i + 1][n - 1] = cdivres[0];
                          H[i + 1][n] = cdivres[1];
                        }
                      }

                      t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));
                      if (eps * t * t > 1) {
                        for (j = i; j <= n; j++) {
                          H[j][n - 1] = H[j][n - 1] / t;
                          H[j][n] = H[j][n] / t;
                        }
                      }
                    }
                  }
                }
              }

              for (i = 0; i < nn; i++) {
                if (i < low || i > high) {
                  for (j = i; j < nn; j++) {
                    V[i][j] = H[i][j];
                  }
                }
              }

              for (j = nn - 1; j >= low; j--) {
                for (i = low; i <= high; i++) {
                  z = 0;
                  for (k = low; k <= Math.min(j, high); k++) {
                    z = z + V[i][k] * H[k][j];
                  }
                  V[i][j] = z;
                }
              }
            }

            function cdiv$1(xr, xi, yr, yi) {
              var r, d;
              if (Math.abs(yr) > Math.abs(yi)) {
                r = yi / yr;
                d = yr + r * yi;
                return [(xr + r * xi) / d, (xi - r * xr) / d];
              } else {
                r = yr / yi;
                d = yi + r * yr;
                return [(r * xr + xi) / d, (r * xi - xr) / d];
              }
            }

            /**
             * @class CholeskyDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs
             * @param {Matrix} value
             */
            class CholeskyDecomposition$$1 {
              constructor(value) {
                value = WrapperMatrix2D$1.checkMatrix(value);
                if (!value.isSymmetric()) {
                  throw new Error('Matrix is not symmetric');
                }

                var a = value;
                var dimension = a.rows;
                var l = new Matrix$1(dimension, dimension);
                var positiveDefinite = true;
                var i, j, k;

                for (j = 0; j < dimension; j++) {
                  var Lrowj = l[j];
                  var d = 0;
                  for (k = 0; k < j; k++) {
                    var Lrowk = l[k];
                    var s = 0;
                    for (i = 0; i < k; i++) {
                      s += Lrowk[i] * Lrowj[i];
                    }
                    Lrowj[k] = s = (a.get(j, k) - s) / l[k][k];
                    d = d + s * s;
                  }

                  d = a.get(j, j) - d;

                  positiveDefinite &= d > 0;
                  l[j][j] = Math.sqrt(Math.max(d, 0));
                  for (k = j + 1; k < dimension; k++) {
                    l[j][k] = 0;
                  }
                }

                if (!positiveDefinite) {
                  throw new Error('Matrix is not positive definite');
                }

                this.L = l;
              }

              /**
               *
               * @param {Matrix} value
               * @return {Matrix}
               */
              solve(value) {
                value = WrapperMatrix2D$1.checkMatrix(value);

                var l = this.L;
                var dimension = l.rows;

                if (value.rows !== dimension) {
                  throw new Error('Matrix dimensions do not match');
                }

                var count = value.columns;
                var B = value.clone();
                var i, j, k;

                for (k = 0; k < dimension; k++) {
                  for (j = 0; j < count; j++) {
                    for (i = 0; i < k; i++) {
                      B[k][j] -= B[i][j] * l[k][i];
                    }
                    B[k][j] /= l[k][k];
                  }
                }

                for (k = dimension - 1; k >= 0; k--) {
                  for (j = 0; j < count; j++) {
                    for (i = k + 1; i < dimension; i++) {
                      B[k][j] -= B[i][j] * l[i][k];
                    }
                    B[k][j] /= l[k][k];
                  }
                }

                return B;
              }

              /**
               *
               * @return {Matrix}
               */
              get lowerTriangularMatrix() {
                return this.L;
              }
            }



            var require$$0$2 = /*#__PURE__*/Object.freeze({
                        default: Matrix$1,
                        Matrix: Matrix$1,
                        abstractMatrix: AbstractMatrix$1,
                        wrap: wrap$1,
                        WrapperMatrix2D: WrapperMatrix2D$1,
                        WrapperMatrix1D: WrapperMatrix1D$1,
                        solve: solve$$1,
                        inverse: inverse$$1,
                        linearDependencies: linearDependencies,
                        SingularValueDecomposition: SingularValueDecomposition$$1,
                        SVD: SingularValueDecomposition$$1,
                        EigenvalueDecomposition: EigenvalueDecomposition$$1,
                        EVD: EigenvalueDecomposition$$1,
                        CholeskyDecomposition: CholeskyDecomposition$$1,
                        CHO: CholeskyDecomposition$$1,
                        LuDecomposition: LuDecomposition$$1,
                        LU: LuDecomposition$$1,
                        QrDecomposition: QrDecomposition$$1,
                        QR: QrDecomposition$$1
            });

            var random = createCommonjsModule(function (module) {
            /*jshint eqnull:true*/
            (function (root) {

              var GLOBAL_KEY = "Random";

              var imul = (typeof Math.imul !== "function" || Math.imul(0xffffffff, 5) !== -5 ?
                function (a, b) {
                  var ah = (a >>> 16) & 0xffff;
                  var al = a & 0xffff;
                  var bh = (b >>> 16) & 0xffff;
                  var bl = b & 0xffff;
                  // the shift by 0 fixes the sign on the high part
                  // the final |0 converts the unsigned value into a signed value
                  return (al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0;
                } :
                Math.imul);

              var stringRepeat = (typeof String.prototype.repeat === "function" && "x".repeat(3) === "xxx" ?
                function (x, y) {
                  return x.repeat(y);
                } : function (pattern, count) {
                  var result = "";
                  while (count > 0) {
                    if (count & 1) {
                      result += pattern;
                    }
                    count >>= 1;
                    pattern += pattern;
                  }
                  return result;
                });

              function Random(engine) {
                if (!(this instanceof Random)) {
                  return new Random(engine);
                }

                if (engine == null) {
                  engine = Random.engines.nativeMath;
                } else if (typeof engine !== "function") {
                  throw new TypeError("Expected engine to be a function, got " + typeof engine);
                }
                this.engine = engine;
              }
              var proto = Random.prototype;

              Random.engines = {
                nativeMath: function () {
                  return (Math.random() * 0x100000000) | 0;
                },
                mt19937: (function (Int32Array) {
                  // http://en.wikipedia.org/wiki/Mersenne_twister
                  function refreshData(data) {
                    var k = 0;
                    var tmp = 0;
                    for (;
                      (k | 0) < 227; k = (k + 1) | 0) {
                      tmp = (data[k] & 0x80000000) | (data[(k + 1) | 0] & 0x7fffffff);
                      data[k] = data[(k + 397) | 0] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);
                    }

                    for (;
                      (k | 0) < 623; k = (k + 1) | 0) {
                      tmp = (data[k] & 0x80000000) | (data[(k + 1) | 0] & 0x7fffffff);
                      data[k] = data[(k - 227) | 0] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);
                    }

                    tmp = (data[623] & 0x80000000) | (data[0] & 0x7fffffff);
                    data[623] = data[396] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);
                  }

                  function temper(value) {
                    value ^= value >>> 11;
                    value ^= (value << 7) & 0x9d2c5680;
                    value ^= (value << 15) & 0xefc60000;
                    return value ^ (value >>> 18);
                  }

                  function seedWithArray(data, source) {
                    var i = 1;
                    var j = 0;
                    var sourceLength = source.length;
                    var k = Math.max(sourceLength, 624) | 0;
                    var previous = data[0] | 0;
                    for (;
                      (k | 0) > 0; --k) {
                      data[i] = previous = ((data[i] ^ imul((previous ^ (previous >>> 30)), 0x0019660d)) + (source[j] | 0) + (j | 0)) | 0;
                      i = (i + 1) | 0;
                      ++j;
                      if ((i | 0) > 623) {
                        data[0] = data[623];
                        i = 1;
                      }
                      if (j >= sourceLength) {
                        j = 0;
                      }
                    }
                    for (k = 623;
                      (k | 0) > 0; --k) {
                      data[i] = previous = ((data[i] ^ imul((previous ^ (previous >>> 30)), 0x5d588b65)) - i) | 0;
                      i = (i + 1) | 0;
                      if ((i | 0) > 623) {
                        data[0] = data[623];
                        i = 1;
                      }
                    }
                    data[0] = 0x80000000;
                  }

                  function mt19937() {
                    var data = new Int32Array(624);
                    var index = 0;
                    var uses = 0;

                    function next() {
                      if ((index | 0) >= 624) {
                        refreshData(data);
                        index = 0;
                      }

                      var value = data[index];
                      index = (index + 1) | 0;
                      uses += 1;
                      return temper(value) | 0;
                    }
                    next.getUseCount = function() {
                      return uses;
                    };
                    next.discard = function (count) {
                      uses += count;
                      if ((index | 0) >= 624) {
                        refreshData(data);
                        index = 0;
                      }
                      while ((count - index) > 624) {
                        count -= 624 - index;
                        refreshData(data);
                        index = 0;
                      }
                      index = (index + count) | 0;
                      return next;
                    };
                    next.seed = function (initial) {
                      var previous = 0;
                      data[0] = previous = initial | 0;

                      for (var i = 1; i < 624; i = (i + 1) | 0) {
                        data[i] = previous = (imul((previous ^ (previous >>> 30)), 0x6c078965) + i) | 0;
                      }
                      index = 624;
                      uses = 0;
                      return next;
                    };
                    next.seedWithArray = function (source) {
                      next.seed(0x012bd6aa);
                      seedWithArray(data, source);
                      return next;
                    };
                    next.autoSeed = function () {
                      return next.seedWithArray(Random.generateEntropyArray());
                    };
                    return next;
                  }

                  return mt19937;
                }(typeof Int32Array === "function" ? Int32Array : Array)),
                browserCrypto: (typeof crypto !== "undefined" && typeof crypto.getRandomValues === "function" && typeof Int32Array === "function") ? (function () {
                  var data = null;
                  var index = 128;

                  return function () {
                    if (index >= 128) {
                      if (data === null) {
                        data = new Int32Array(128);
                      }
                      crypto.getRandomValues(data);
                      index = 0;
                    }

                    return data[index++] | 0;
                  };
                }()) : null
              };

              Random.generateEntropyArray = function () {
                var array = [];
                var engine = Random.engines.nativeMath;
                for (var i = 0; i < 16; ++i) {
                  array[i] = engine() | 0;
                }
                array.push(new Date().getTime() | 0);
                return array;
              };

              function returnValue(value) {
                return function () {
                  return value;
                };
              }

              // [-0x80000000, 0x7fffffff]
              Random.int32 = function (engine) {
                return engine() | 0;
              };
              proto.int32 = function () {
                return Random.int32(this.engine);
              };

              // [0, 0xffffffff]
              Random.uint32 = function (engine) {
                return engine() >>> 0;
              };
              proto.uint32 = function () {
                return Random.uint32(this.engine);
              };

              // [0, 0x1fffffffffffff]
              Random.uint53 = function (engine) {
                var high = engine() & 0x1fffff;
                var low = engine() >>> 0;
                return (high * 0x100000000) + low;
              };
              proto.uint53 = function () {
                return Random.uint53(this.engine);
              };

              // [0, 0x20000000000000]
              Random.uint53Full = function (engine) {
                while (true) {
                  var high = engine() | 0;
                  if (high & 0x200000) {
                    if ((high & 0x3fffff) === 0x200000 && (engine() | 0) === 0) {
                      return 0x20000000000000;
                    }
                  } else {
                    var low = engine() >>> 0;
                    return ((high & 0x1fffff) * 0x100000000) + low;
                  }
                }
              };
              proto.uint53Full = function () {
                return Random.uint53Full(this.engine);
              };

              // [-0x20000000000000, 0x1fffffffffffff]
              Random.int53 = function (engine) {
                var high = engine() | 0;
                var low = engine() >>> 0;
                return ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);
              };
              proto.int53 = function () {
                return Random.int53(this.engine);
              };

              // [-0x20000000000000, 0x20000000000000]
              Random.int53Full = function (engine) {
                while (true) {
                  var high = engine() | 0;
                  if (high & 0x400000) {
                    if ((high & 0x7fffff) === 0x400000 && (engine() | 0) === 0) {
                      return 0x20000000000000;
                    }
                  } else {
                    var low = engine() >>> 0;
                    return ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);
                  }
                }
              };
              proto.int53Full = function () {
                return Random.int53Full(this.engine);
              };

              function add(generate, addend) {
                if (addend === 0) {
                  return generate;
                } else {
                  return function (engine) {
                    return generate(engine) + addend;
                  };
                }
              }

              Random.integer = (function () {
                function isPowerOfTwoMinusOne(value) {
                  return ((value + 1) & value) === 0;
                }

                function bitmask(masking) {
                  return function (engine) {
                    return engine() & masking;
                  };
                }

                function downscaleToLoopCheckedRange(range) {
                  var extendedRange = range + 1;
                  var maximum = extendedRange * Math.floor(0x100000000 / extendedRange);
                  return function (engine) {
                    var value = 0;
                    do {
                      value = engine() >>> 0;
                    } while (value >= maximum);
                    return value % extendedRange;
                  };
                }

                function downscaleToRange(range) {
                  if (isPowerOfTwoMinusOne(range)) {
                    return bitmask(range);
                  } else {
                    return downscaleToLoopCheckedRange(range);
                  }
                }

                function isEvenlyDivisibleByMaxInt32(value) {
                  return (value | 0) === 0;
                }

                function upscaleWithHighMasking(masking) {
                  return function (engine) {
                    var high = engine() & masking;
                    var low = engine() >>> 0;
                    return (high * 0x100000000) + low;
                  };
                }

                function upscaleToLoopCheckedRange(extendedRange) {
                  var maximum = extendedRange * Math.floor(0x20000000000000 / extendedRange);
                  return function (engine) {
                    var ret = 0;
                    do {
                      var high = engine() & 0x1fffff;
                      var low = engine() >>> 0;
                      ret = (high * 0x100000000) + low;
                    } while (ret >= maximum);
                    return ret % extendedRange;
                  };
                }

                function upscaleWithinU53(range) {
                  var extendedRange = range + 1;
                  if (isEvenlyDivisibleByMaxInt32(extendedRange)) {
                    var highRange = ((extendedRange / 0x100000000) | 0) - 1;
                    if (isPowerOfTwoMinusOne(highRange)) {
                      return upscaleWithHighMasking(highRange);
                    }
                  }
                  return upscaleToLoopCheckedRange(extendedRange);
                }

                function upscaleWithinI53AndLoopCheck(min, max) {
                  return function (engine) {
                    var ret = 0;
                    do {
                      var high = engine() | 0;
                      var low = engine() >>> 0;
                      ret = ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);
                    } while (ret < min || ret > max);
                    return ret;
                  };
                }

                return function (min, max) {
                  min = Math.floor(min);
                  max = Math.floor(max);
                  if (min < -0x20000000000000 || !isFinite(min)) {
                    throw new RangeError("Expected min to be at least " + (-0x20000000000000));
                  } else if (max > 0x20000000000000 || !isFinite(max)) {
                    throw new RangeError("Expected max to be at most " + 0x20000000000000);
                  }

                  var range = max - min;
                  if (range <= 0 || !isFinite(range)) {
                    return returnValue(min);
                  } else if (range === 0xffffffff) {
                    if (min === 0) {
                      return Random.uint32;
                    } else {
                      return add(Random.int32, min + 0x80000000);
                    }
                  } else if (range < 0xffffffff) {
                    return add(downscaleToRange(range), min);
                  } else if (range === 0x1fffffffffffff) {
                    return add(Random.uint53, min);
                  } else if (range < 0x1fffffffffffff) {
                    return add(upscaleWithinU53(range), min);
                  } else if (max - 1 - min === 0x1fffffffffffff) {
                    return add(Random.uint53Full, min);
                  } else if (min === -0x20000000000000 && max === 0x20000000000000) {
                    return Random.int53Full;
                  } else if (min === -0x20000000000000 && max === 0x1fffffffffffff) {
                    return Random.int53;
                  } else if (min === -0x1fffffffffffff && max === 0x20000000000000) {
                    return add(Random.int53, 1);
                  } else if (max === 0x20000000000000) {
                    return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);
                  } else {
                    return upscaleWithinI53AndLoopCheck(min, max);
                  }
                };
              }());
              proto.integer = function (min, max) {
                return Random.integer(min, max)(this.engine);
              };

              // [0, 1] (floating point)
              Random.realZeroToOneInclusive = function (engine) {
                return Random.uint53Full(engine) / 0x20000000000000;
              };
              proto.realZeroToOneInclusive = function () {
                return Random.realZeroToOneInclusive(this.engine);
              };

              // [0, 1) (floating point)
              Random.realZeroToOneExclusive = function (engine) {
                return Random.uint53(engine) / 0x20000000000000;
              };
              proto.realZeroToOneExclusive = function () {
                return Random.realZeroToOneExclusive(this.engine);
              };

              Random.real = (function () {
                function multiply(generate, multiplier) {
                  if (multiplier === 1) {
                    return generate;
                  } else if (multiplier === 0) {
                    return function () {
                      return 0;
                    };
                  } else {
                    return function (engine) {
                      return generate(engine) * multiplier;
                    };
                  }
                }

                return function (left, right, inclusive) {
                  if (!isFinite(left)) {
                    throw new RangeError("Expected left to be a finite number");
                  } else if (!isFinite(right)) {
                    throw new RangeError("Expected right to be a finite number");
                  }
                  return add(
                    multiply(
                      inclusive ? Random.realZeroToOneInclusive : Random.realZeroToOneExclusive,
                      right - left),
                    left);
                };
              }());
              proto.real = function (min, max, inclusive) {
                return Random.real(min, max, inclusive)(this.engine);
              };

              Random.bool = (function () {
                function isLeastBitTrue(engine) {
                  return (engine() & 1) === 1;
                }

                function lessThan(generate, value) {
                  return function (engine) {
                    return generate(engine) < value;
                  };
                }

                function probability(percentage) {
                  if (percentage <= 0) {
                    return returnValue(false);
                  } else if (percentage >= 1) {
                    return returnValue(true);
                  } else {
                    var scaled = percentage * 0x100000000;
                    if (scaled % 1 === 0) {
                      return lessThan(Random.int32, (scaled - 0x80000000) | 0);
                    } else {
                      return lessThan(Random.uint53, Math.round(percentage * 0x20000000000000));
                    }
                  }
                }

                return function (numerator, denominator) {
                  if (denominator == null) {
                    if (numerator == null) {
                      return isLeastBitTrue;
                    }
                    return probability(numerator);
                  } else {
                    if (numerator <= 0) {
                      return returnValue(false);
                    } else if (numerator >= denominator) {
                      return returnValue(true);
                    }
                    return lessThan(Random.integer(0, denominator - 1), numerator);
                  }
                };
              }());
              proto.bool = function (numerator, denominator) {
                return Random.bool(numerator, denominator)(this.engine);
              };

              function toInteger(value) {
                var number = +value;
                if (number < 0) {
                  return Math.ceil(number);
                } else {
                  return Math.floor(number);
                }
              }

              function convertSliceArgument(value, length) {
                if (value < 0) {
                  return Math.max(value + length, 0);
                } else {
                  return Math.min(value, length);
                }
              }
              Random.pick = function (engine, array, begin, end) {
                var length = array.length;
                var start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);
                var finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);
                if (start >= finish) {
                  return void 0;
                }
                var distribution = Random.integer(start, finish - 1);
                return array[distribution(engine)];
              };
              proto.pick = function (array, begin, end) {
                return Random.pick(this.engine, array, begin, end);
              };

              function returnUndefined() {
                return void 0;
              }
              var slice = Array.prototype.slice;
              Random.picker = function (array, begin, end) {
                var clone = slice.call(array, begin, end);
                if (!clone.length) {
                  return returnUndefined;
                }
                var distribution = Random.integer(0, clone.length - 1);
                return function (engine) {
                  return clone[distribution(engine)];
                };
              };

              Random.shuffle = function (engine, array, downTo) {
                var length = array.length;
                if (length) {
                  if (downTo == null) {
                    downTo = 0;
                  }
                  for (var i = (length - 1) >>> 0; i > downTo; --i) {
                    var distribution = Random.integer(0, i);
                    var j = distribution(engine);
                    if (i !== j) {
                      var tmp = array[i];
                      array[i] = array[j];
                      array[j] = tmp;
                    }
                  }
                }
                return array;
              };
              proto.shuffle = function (array) {
                return Random.shuffle(this.engine, array);
              };

              Random.sample = function (engine, population, sampleSize) {
                if (sampleSize < 0 || sampleSize > population.length || !isFinite(sampleSize)) {
                  throw new RangeError("Expected sampleSize to be within 0 and the length of the population");
                }

                if (sampleSize === 0) {
                  return [];
                }

                var clone = slice.call(population);
                var length = clone.length;
                if (length === sampleSize) {
                  return Random.shuffle(engine, clone, 0);
                }
                var tailLength = length - sampleSize;
                return Random.shuffle(engine, clone, tailLength - 1).slice(tailLength);
              };
              proto.sample = function (population, sampleSize) {
                return Random.sample(this.engine, population, sampleSize);
              };

              Random.die = function (sideCount) {
                return Random.integer(1, sideCount);
              };
              proto.die = function (sideCount) {
                return Random.die(sideCount)(this.engine);
              };

              Random.dice = function (sideCount, dieCount) {
                var distribution = Random.die(sideCount);
                return function (engine) {
                  var result = [];
                  result.length = dieCount;
                  for (var i = 0; i < dieCount; ++i) {
                    result[i] = distribution(engine);
                  }
                  return result;
                };
              };
              proto.dice = function (sideCount, dieCount) {
                return Random.dice(sideCount, dieCount)(this.engine);
              };

              // http://en.wikipedia.org/wiki/Universally_unique_identifier
              Random.uuid4 = (function () {
                function zeroPad(string, zeroCount) {
                  return stringRepeat("0", zeroCount - string.length) + string;
                }

                return function (engine) {
                  var a = engine() >>> 0;
                  var b = engine() | 0;
                  var c = engine() | 0;
                  var d = engine() >>> 0;

                  return (
                    zeroPad(a.toString(16), 8) +
                    "-" +
                    zeroPad((b & 0xffff).toString(16), 4) +
                    "-" +
                    zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +
                    "-" +
                    zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +
                    "-" +
                    zeroPad(((c >> 4) & 0xffff).toString(16), 4) +
                    zeroPad(d.toString(16), 8));
                };
              }());
              proto.uuid4 = function () {
                return Random.uuid4(this.engine);
              };

              Random.string = (function () {
                // has 2**x chars, for faster uniform distribution
                var DEFAULT_STRING_POOL = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-";

                return function (pool) {
                  if (pool == null) {
                    pool = DEFAULT_STRING_POOL;
                  }

                  var length = pool.length;
                  if (!length) {
                    throw new Error("Expected pool not to be an empty string");
                  }

                  var distribution = Random.integer(0, length - 1);
                  return function (engine, length) {
                    var result = "";
                    for (var i = 0; i < length; ++i) {
                      var j = distribution(engine);
                      result += pool.charAt(j);
                    }
                    return result;
                  };
                };
              }());
              proto.string = function (length, pool) {
                return Random.string(pool)(this.engine, length);
              };

              Random.hex = (function () {
                var LOWER_HEX_POOL = "0123456789abcdef";
                var lowerHex = Random.string(LOWER_HEX_POOL);
                var upperHex = Random.string(LOWER_HEX_POOL.toUpperCase());

                return function (upper) {
                  if (upper) {
                    return upperHex;
                  } else {
                    return lowerHex;
                  }
                };
              }());
              proto.hex = function (length, upper) {
                return Random.hex(upper)(this.engine, length);
              };

              Random.date = function (start, end) {
                if (!(start instanceof Date)) {
                  throw new TypeError("Expected start to be a Date, got " + typeof start);
                } else if (!(end instanceof Date)) {
                  throw new TypeError("Expected end to be a Date, got " + typeof end);
                }
                var distribution = Random.integer(start.getTime(), end.getTime());
                return function (engine) {
                  return new Date(distribution(engine));
                };
              };
              proto.date = function (start, end) {
                return Random.date(start, end)(this.engine);
              };

              if (typeof commonjsRequire === "function") {
                module.exports = Random;
              } else {
                (function () {
                  var oldGlobal = root[GLOBAL_KEY];
                  Random.noConflict = function () {
                    root[GLOBAL_KEY] = oldGlobal;
                    return this;
                  };
                }());
                root[GLOBAL_KEY] = Random;
              }
            }(commonjsGlobal));
            });

            function checkFloat(n) {
              return n > 0.0 && n <= 1.0;
            }

            /**
             * Select n with replacement elements on the training set and values, where n is the size of the training set.
             * @ignore
             * @param {Matrix} trainingSet
             * @param {Array} trainingValue
             * @param {number} seed - seed for the random selection, must be a 32-bit integer.
             * @return {object} with new X and y.
             */
            function examplesBaggingWithReplacement(trainingSet, trainingValue, seed) {
              var engine = random.engines.mt19937();
              var distribution = random.integer(0, trainingSet.rows - 1);
              if (seed === undefined) {
                engine = engine.autoSeed();
              } else if (Number.isInteger(seed)) {
                engine = engine.seed(seed);
              } else {
                throw new RangeError(`Expected seed must be undefined or integer not ${seed}`);
              }

              var Xr = new Array(trainingSet.rows);
              var yr = new Array(trainingSet.rows);

              for (var i = 0; i < trainingSet.rows; ++i) {
                var index = distribution(engine);
                Xr[i] = trainingSet[index];
                yr[i] = trainingValue[index];
              }

              return {
                X: new Matrix$1(Xr),
                y: yr
              };
            }

            /**
             * selects n features from the training set with or without replacement, returns the new training set and the indexes used.
             * @ignore
             * @param {Matrix} trainingSet
             * @param {number} n - features.
             * @param {boolean} replacement
             * @param {number} seed - seed for the random selection, must be a 32-bit integer.
             * @return {object}
             */
            function featureBagging(trainingSet, n, replacement, seed) {
              if (trainingSet.columns < n) {
                throw new RangeError('N should be less or equal to the number of columns of X');
              }

              var distribution = random.integer(0, trainingSet.columns - 1);
              var engine = random.engines.mt19937();
              if (seed === undefined) {
                engine = engine.autoSeed();
              } else if (Number.isInteger(seed)) {
                engine = engine.seed(seed);
              } else {
                throw new RangeError(`Expected seed must be undefined or integer not ${seed}`);
              }

              var toRet = new Matrix$1(trainingSet.rows, n);

              if (replacement) {
                var usedIndex = new Array(n);
                for (var i = 0; i < n; ++i) {
                  var index = distribution(engine);
                  usedIndex[i] = index;
                  toRet.setColumn(i, trainingSet.getColumn(index));
                }
              } else {
                usedIndex = new Set();
                index = distribution(engine);
                for (i = 0; i < n; ++i) {
                  while (usedIndex.has(index)) {
                    index = distribution(engine);
                  }
                  toRet.setColumn(i, trainingSet.getColumn(index));
                  usedIndex.add(index);
                }
                usedIndex = Array.from(usedIndex);
              }

              return {
                X: toRet,
                usedIndex: usedIndex
              };
            }

            /**
             * @class RandomForestBase
             */
            class RandomForestBase {
              /**
               * Create a new base random forest for a classifier or regression model.
               * @constructor
               * @param {object} options
               * @param {number|String} [options.maxFeatures] - the number of features used on each estimator.
               *        * if is an integer it selects maxFeatures elements over the sample features.
               *        * if is a float between (0, 1), it takes the percentage of features.
               * @param {boolean} [options.replacement] - use replacement over the sample features.
               * @param {number} [options.seed] - seed for feature and samples selection, must be a 32-bit integer.
               * @param {number} [options.nEstimators] - number of estimator to use.
               * @param {object} [options.treeOptions] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}
               * @param {boolean} [options.isClassifier] - boolean to check if is a classifier or regression model (used by subclasses).
               * @param {boolean} [options.useSampleBagging] - use bagging over training samples.
               * @param {object} model - for load purposes.
               */
              constructor(options, model) {
                if (options === true) {
                  this.replacement = model.replacement;
                  this.maxFeatures = model.maxFeatures;
                  this.nEstimators = model.nEstimators;
                  this.treeOptions = model.treeOptions;
                  this.isClassifier = model.isClassifier;
                  this.seed = model.seed;
                  this.n = model.n;
                  this.indexes = model.indexes;
                  this.useSampleBagging = model.useSampleBagging;

                  var Estimator = this.isClassifier ? DecisionTreeClassifier : DecisionTreeRegression;
                  this.estimators = model.estimators.map((est) => Estimator.load(est));
                } else {
                  this.replacement = options.replacement;
                  this.maxFeatures = options.maxFeatures;
                  this.nEstimators = options.nEstimators;
                  this.treeOptions = options.treeOptions;
                  this.isClassifier = options.isClassifier;
                  this.seed = options.seed;
                  this.useSampleBagging = options.useSampleBagging;
                }
              }

              /**
               * Train the decision tree with the given training set and labels.
               * @param {Matrix|Array} trainingSet
               * @param {Array} trainingValues
               */
              train(trainingSet, trainingValues) {
                trainingSet = Matrix$1.checkMatrix(trainingSet);

                this.maxFeatures = this.maxFeatures || trainingSet.columns;

                if (checkFloat(this.maxFeatures)) {
                  this.n = Math.floor(trainingSet.columns * this.maxFeatures);
                } else if (Number.isInteger(this.maxFeatures)) {
                  if (this.maxFeatures > trainingSet.columns) {
                    throw new RangeError(`The maxFeatures parameter should be less than ${trainingSet.columns}`);
                  } else {
                    this.n = this.maxFeatures;
                  }
                } else {
                  throw new RangeError(`Cannot process the maxFeatures parameter ${this.maxFeatures}`);
                }


                if (this.isClassifier) {
                  var Estimator = DecisionTreeClassifier;
                } else {
                  Estimator = DecisionTreeRegression;
                }

                this.estimators = new Array(this.nEstimators);
                this.indexes = new Array(this.nEstimators);

                for (var i = 0; i < this.nEstimators; ++i) {
                  var res = this.useSampleBagging ? examplesBaggingWithReplacement(trainingSet, trainingValues, this.seed) : { X: trainingSet, y: trainingValues };
                  var X = res.X;
                  var y = res.y;

                  res = featureBagging(X, this.n, this.replacement, this.seed);
                  X = res.X;

                  this.indexes[i] = res.usedIndex;
                  this.estimators[i] = new Estimator(this.treeOptions);
                  this.estimators[i].train(X, y);
                }
              }

              /**
               * Method that returns the way the algorithm generates the predictions, for example, in classification
               * you can return the mode of all predictions retrieved by the trees, or in case of regression you can
               * use the mean or the median.
               * @abstract
               * @param {Array} values - predictions of the estimators.
               * @return {number} prediction.
               */
              // eslint-disable-next-line no-unused-vars
              selection(values) {
                throw new Error('Abstract method \'selection\' not implemented!');
              }

              /**
               * Predicts the output given the matrix to predict.
               * @param {Matrix|Array} toPredict
               * @return {Array} predictions
               */
              predict(toPredict) {
                var predictionValues = new Array(this.nEstimators);
                toPredict = Matrix$1.checkMatrix(toPredict);
                for (var i = 0; i < this.nEstimators; ++i) {
                  var X = toPredict.columnSelectionView(this.indexes[i]); // get features for estimator
                  predictionValues[i] = this.estimators[i].predict(X);
                }

                predictionValues = new WrapperMatrix2D$1(predictionValues).transposeView();
                var predictions = new Array(predictionValues.rows);
                for (i = 0; i < predictionValues.rows; ++i) {
                  predictions[i] = this.selection(predictionValues.getRow(i));
                }

                return predictions;
              }

              /**
               * Export the current model to JSON.
               * @return {object} - Current model.
               */
              toJSON() {
                return {
                  indexes: this.indexes,
                  n: this.n,
                  replacement: this.replacement,
                  maxFeatures: this.maxFeatures,
                  nEstimators: this.nEstimators,
                  treeOptions: this.treeOptions,
                  isClassifier: this.isClassifier,
                  seed: this.seed,
                  estimators: this.estimators.map((est) => est.toJSON()),
                  useSampleBagging: this.useSampleBagging
                };
              }
            }

            const defaultOptions$2 = {
              maxFeatures: 1.0,
              replacement: true,
              nEstimators: 10,
              seed: 42,
              useSampleBagging: false
            };

            /**
             * @class RandomForestClassifier
             * @augments RandomForestBase
             */
            class RandomForestClassifier extends RandomForestBase {
              /**
                 * Create a new base random forest for a classifier or regression model.
                 * @constructor
                 * @param {object} options
                 * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.
                 *        * if is an integer it selects maxFeatures elements over the sample features.
                 *        * if is a float between (0, 1), it takes the percentage of features.
                 * @param {boolean} [options.replacement=true] - use replacement over the sample features.
                 * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.
                 * @param {number} [options.nEstimators=10] - number of estimator to use.
                 * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}
                 * @param {boolean} [options.useSampleBagging=false] - use bagging over training samples.
                 * @param {object} model - for load purposes.
                 */
              constructor(options, model) {
                if (options === true) {
                  super(true, model.baseModel);
                } else {
                  options = Object.assign({}, defaultOptions$2, options);
                  options.isClassifier = true;
                  super(options);
                }
              }

              /**
                 * retrieve the prediction given the selection method.
                 * @param {Array} values - predictions of the estimators.
                 * @return {number} prediction
                 */
              selection(values) {
                return mode(values);
              }

              /**
                 * Export the current model to JSON.
                 * @return {object} - Current model.
                 */
              toJSON() {
                var baseModel = super.toJSON();
                return {
                  baseModel: baseModel,
                  name: 'RFClassifier'
                };
              }

              /**
                 * Load a Decision tree classifier with the given model.
                 * @param {object} model
                 * @return {RandomForestClassifier}
                 */
              static load(model) {
                if (model.name !== 'RFClassifier') {
                  throw new RangeError(`Invalid model: ${model.name}`);
                }

                return new RandomForestClassifier(true, model);
              }
            }

            /**
             * Return the most repeated element on the array.
             * @param {Array} arr
             * @return {number} mode
             */
            function mode(arr) {
              return arr.sort((a, b) =>
                arr.filter((v) => v === a).length
                    - arr.filter((v) => v === b).length
              ).pop();
            }

            var medianQuickselect_min = createCommonjsModule(function (module) {
            (function(){function a(d){for(var e=0,f=d.length-1,g=void 0,h=void 0,i=void 0,j=c(e,f);!0;){if(f<=e)return d[j];if(f==e+1)return d[e]>d[f]&&b(d,e,f),d[j];for(g=c(e,f),d[g]>d[f]&&b(d,g,f),d[e]>d[f]&&b(d,e,f),d[g]>d[e]&&b(d,g,e),b(d,g,e+1),h=e+1,i=f;!0;){do h++;while(d[e]>d[h]);do i--;while(d[i]>d[e]);if(i<h)break;b(d,h,i);}b(d,e,i),i<=j&&(e=h),i>=j&&(f=i-1);}}var b=function b(d,e,f){var _ref;return _ref=[d[f],d[e]],d[e]=_ref[0],d[f]=_ref[1],_ref},c=function c(d,e){return ~~((d+e)/2)};module.exports?module.exports=a:window.median=a;})();
            });

            /**
             * Computes the median of the given values
             * @param {Array<number>} input
             * @return {number}
             */
            function median(input) {
                if (!Array.isArray(input)) {
                    throw new Error('input must be an array');
                }

                if (input.length === 0) {
                    throw new Error('input must not be empty');
                }

                return medianQuickselect_min(input.slice());
            }

            const selectionMethods = {
              mean: mean,
              median: median
            };

            const defaultOptions$3 = {
              maxFeatures: 1.0,
              replacement: false,
              nEstimators: 10,
              treeOptions: {},
              selectionMethod: 'mean',
              seed: 42,
              useSampleBagging: false
            };

            /**
             * @class RandomForestRegression
             * @augments RandomForestBase
             */
            class RandomForestRegression extends RandomForestBase {
              /**
                 * Create a new base random forest for a classifier or regression model.
                 * @constructor
                 * @param {object} options
                 * @param {number} [options.maxFeatures=1.0] - the number of features used on each estimator.
                 *        * if is an integer it selects maxFeatures elements over the sample features.
                 *        * if is a float between (0, 1), it takes the percentage of features.
                 * @param {boolean} [options.replacement=true] - use replacement over the sample features.
                 * @param {number} [options.seed=42] - seed for feature and samples selection, must be a 32-bit integer.
                 * @param {number} [options.nEstimators=10] - number of estimator to use.
                 * @param {object} [options.treeOptions={}] - options for the tree classifier, see [ml-cart]{@link https://mljs.github.io/decision-tree-cart/}
                 * @param {string} [options.selectionMethod="mean"] - the way to calculate the prediction from estimators, "mean" and "median" are supported.
                 * @param {boolean} [options.useSampleBagging=false] - use bagging over training samples.
                 * @param {object} model - for load purposes.
                 */
              constructor(options, model) {
                if (options === true) {
                  super(true, model.baseModel);
                  this.selectionMethod = model.selectionMethod;
                } else {
                  options = Object.assign({}, defaultOptions$3, options);

                  if (!(options.selectionMethod === 'mean' || options.selectionMethod === 'median')) {
                    throw new RangeError(`Unsupported selection method ${options.selectionMethod}`);
                  }

                  options.isClassifier = false;

                  super(options);
                  this.selectionMethod = options.selectionMethod;
                }
              }

              /**
                 * retrieve the prediction given the selection method.
                 * @param {Array} values - predictions of the estimators.
                 * @return {number} prediction
                 */
              selection(values) {
                return selectionMethods[this.selectionMethod](values);
              }

              /**
                 * Export the current model to JSON.
                 * @return {object} - Current model.
                 */
              toJSON() {
                var baseModel = super.toJSON();
                return {
                  baseModel: baseModel,
                  selectionMethod: this.selectionMethod,
                  name: 'RFRegression'
                };
              }

              /**
                 * Load a Decision tree classifier with the given model.
                 * @param {object} model
                 * @return {RandomForestRegression}
                 */
              static load(model) {
                if (model.name !== 'RFRegression') {
                  throw new RangeError(`Invalid model: ${model.name}`);
                }

                return new RandomForestRegression(true, model);
              }
            }



            var src$1 = /*#__PURE__*/Object.freeze({
                        RandomForestClassifier: RandomForestClassifier,
                        RandomForestRegression: RandomForestRegression
            });

            if (!Symbol.species) {
                Symbol.species = Symbol.for('@@species');
            }

            /**
             * @class LuDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs
             * @param {Matrix} matrix
             */
            class LuDecomposition$$1 {
                constructor(matrix) {
                    matrix = WrapperMatrix2D$2.checkMatrix(matrix);

                    var lu = matrix.clone();
                    var rows = lu.rows;
                    var columns = lu.columns;
                    var pivotVector = new Array(rows);
                    var pivotSign = 1;
                    var i, j, k, p, s, t, v;
                    var LUcolj, kmax;

                    for (i = 0; i < rows; i++) {
                        pivotVector[i] = i;
                    }

                    LUcolj = new Array(rows);

                    for (j = 0; j < columns; j++) {

                        for (i = 0; i < rows; i++) {
                            LUcolj[i] = lu.get(i, j);
                        }

                        for (i = 0; i < rows; i++) {
                            kmax = Math.min(i, j);
                            s = 0;
                            for (k = 0; k < kmax; k++) {
                                s += lu.get(i, k) * LUcolj[k];
                            }
                            LUcolj[i] -= s;
                            lu.set(i, j, LUcolj[i]);
                        }

                        p = j;
                        for (i = j + 1; i < rows; i++) {
                            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {
                                p = i;
                            }
                        }

                        if (p !== j) {
                            for (k = 0; k < columns; k++) {
                                t = lu.get(p, k);
                                lu.set(p, k, lu.get(j, k));
                                lu.set(j, k, t);
                            }

                            v = pivotVector[p];
                            pivotVector[p] = pivotVector[j];
                            pivotVector[j] = v;

                            pivotSign = -pivotSign;
                        }

                        if (j < rows && lu.get(j, j) !== 0) {
                            for (i = j + 1; i < rows; i++) {
                                lu.set(i, j, lu.get(i, j) / lu.get(j, j));
                            }
                        }
                    }

                    this.LU = lu;
                    this.pivotVector = pivotVector;
                    this.pivotSign = pivotSign;
                }

                /**
                 *
                 * @return {boolean}
                 */
                isSingular() {
                    var data = this.LU;
                    var col = data.columns;
                    for (var j = 0; j < col; j++) {
                        if (data[j][j] === 0) {
                            return true;
                        }
                    }
                    return false;
                }

                /**
                 *
                 * @param {Matrix} value
                 * @return {Matrix}
                 */
                solve(value) {
                    value = Matrix$2.checkMatrix(value);

                    var lu = this.LU;
                    var rows = lu.rows;

                    if (rows !== value.rows) {
                        throw new Error('Invalid matrix dimensions');
                    }
                    if (this.isSingular()) {
                        throw new Error('LU matrix is singular');
                    }

                    var count = value.columns;
                    var X = value.subMatrixRow(this.pivotVector, 0, count - 1);
                    var columns = lu.columns;
                    var i, j, k;

                    for (k = 0; k < columns; k++) {
                        for (i = k + 1; i < columns; i++) {
                            for (j = 0; j < count; j++) {
                                X[i][j] -= X[k][j] * lu[i][k];
                            }
                        }
                    }
                    for (k = columns - 1; k >= 0; k--) {
                        for (j = 0; j < count; j++) {
                            X[k][j] /= lu[k][k];
                        }
                        for (i = 0; i < k; i++) {
                            for (j = 0; j < count; j++) {
                                X[i][j] -= X[k][j] * lu[i][k];
                            }
                        }
                    }
                    return X;
                }

                /**
                 *
                 * @return {number}
                 */
                get determinant() {
                    var data = this.LU;
                    if (!data.isSquare()) {
                        throw new Error('Matrix must be square');
                    }
                    var determinant = this.pivotSign;
                    var col = data.columns;
                    for (var j = 0; j < col; j++) {
                        determinant *= data[j][j];
                    }
                    return determinant;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get lowerTriangularMatrix() {
                    var data = this.LU;
                    var rows = data.rows;
                    var columns = data.columns;
                    var X = new Matrix$2(rows, columns);
                    for (var i = 0; i < rows; i++) {
                        for (var j = 0; j < columns; j++) {
                            if (i > j) {
                                X[i][j] = data[i][j];
                            } else if (i === j) {
                                X[i][j] = 1;
                            } else {
                                X[i][j] = 0;
                            }
                        }
                    }
                    return X;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get upperTriangularMatrix() {
                    var data = this.LU;
                    var rows = data.rows;
                    var columns = data.columns;
                    var X = new Matrix$2(rows, columns);
                    for (var i = 0; i < rows; i++) {
                        for (var j = 0; j < columns; j++) {
                            if (i <= j) {
                                X[i][j] = data[i][j];
                            } else {
                                X[i][j] = 0;
                            }
                        }
                    }
                    return X;
                }

                /**
                 *
                 * @return {Array<number>}
                 */
                get pivotPermutationVector() {
                    return this.pivotVector.slice();
                }
            }

            function hypotenuse$2(a, b) {
                var r = 0;
                if (Math.abs(a) > Math.abs(b)) {
                    r = b / a;
                    return Math.abs(a) * Math.sqrt(1 + r * r);
                }
                if (b !== 0) {
                    r = a / b;
                    return Math.abs(b) * Math.sqrt(1 + r * r);
                }
                return 0;
            }

            function getFilled2DArray$2(rows, columns, value) {
                var array = new Array(rows);
                for (var i = 0; i < rows; i++) {
                    array[i] = new Array(columns);
                    for (var j = 0; j < columns; j++) {
                        array[i][j] = value;
                    }
                }
                return array;
            }

            /**
             * @class SingularValueDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs
             * @param {Matrix} value
             * @param {object} [options]
             * @param {boolean} [options.computeLeftSingularVectors=true]
             * @param {boolean} [options.computeRightSingularVectors=true]
             * @param {boolean} [options.autoTranspose=false]
             */
            class SingularValueDecomposition$$1 {
                constructor(value, options = {}) {
                    value = WrapperMatrix2D$2.checkMatrix(value);

                    var m = value.rows;
                    var n = value.columns;
                    var nu = Math.min(m, n);

                    const {
                        computeLeftSingularVectors = true,
                        computeRightSingularVectors = true,
                        autoTranspose = false
                    } = options;

                    var wantu = Boolean(computeLeftSingularVectors);
                    var wantv = Boolean(computeRightSingularVectors);

                    var swapped = false;
                    var a;
                    if (m < n) {
                        if (!autoTranspose) {
                            a = value.clone();
                            // eslint-disable-next-line no-console
                            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');
                        } else {
                            a = value.transpose();
                            m = a.rows;
                            n = a.columns;
                            swapped = true;
                            var aux = wantu;
                            wantu = wantv;
                            wantv = aux;
                        }
                    } else {
                        a = value.clone();
                    }

                    var s = new Array(Math.min(m + 1, n));
                    var U = getFilled2DArray$2(m, nu, 0);
                    var V = getFilled2DArray$2(n, n, 0);
                    var e = new Array(n);
                    var work = new Array(m);

                    var nct = Math.min(m - 1, n);
                    var nrt = Math.max(0, Math.min(n - 2, m));

                    var i, j, k, p, t, ks, f, cs, sn, max, kase,
                        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;

                    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {
                        if (k < nct) {
                            s[k] = 0;
                            for (i = k; i < m; i++) {
                                s[k] = hypotenuse$2(s[k], a[i][k]);
                            }
                            if (s[k] !== 0) {
                                if (a[k][k] < 0) {
                                    s[k] = -s[k];
                                }
                                for (i = k; i < m; i++) {
                                    a[i][k] /= s[k];
                                }
                                a[k][k] += 1;
                            }
                            s[k] = -s[k];
                        }

                        for (j = k + 1; j < n; j++) {
                            if ((k < nct) && (s[k] !== 0)) {
                                t = 0;
                                for (i = k; i < m; i++) {
                                    t += a[i][k] * a[i][j];
                                }
                                t = -t / a[k][k];
                                for (i = k; i < m; i++) {
                                    a[i][j] += t * a[i][k];
                                }
                            }
                            e[j] = a[k][j];
                        }

                        if (wantu && (k < nct)) {
                            for (i = k; i < m; i++) {
                                U[i][k] = a[i][k];
                            }
                        }

                        if (k < nrt) {
                            e[k] = 0;
                            for (i = k + 1; i < n; i++) {
                                e[k] = hypotenuse$2(e[k], e[i]);
                            }
                            if (e[k] !== 0) {
                                if (e[k + 1] < 0) {
                                    e[k] = 0 - e[k];
                                }
                                for (i = k + 1; i < n; i++) {
                                    e[i] /= e[k];
                                }
                                e[k + 1] += 1;
                            }
                            e[k] = -e[k];
                            if ((k + 1 < m) && (e[k] !== 0)) {
                                for (i = k + 1; i < m; i++) {
                                    work[i] = 0;
                                }
                                for (j = k + 1; j < n; j++) {
                                    for (i = k + 1; i < m; i++) {
                                        work[i] += e[j] * a[i][j];
                                    }
                                }
                                for (j = k + 1; j < n; j++) {
                                    t = -e[j] / e[k + 1];
                                    for (i = k + 1; i < m; i++) {
                                        a[i][j] += t * work[i];
                                    }
                                }
                            }
                            if (wantv) {
                                for (i = k + 1; i < n; i++) {
                                    V[i][k] = e[i];
                                }
                            }
                        }
                    }

                    p = Math.min(n, m + 1);
                    if (nct < n) {
                        s[nct] = a[nct][nct];
                    }
                    if (m < p) {
                        s[p - 1] = 0;
                    }
                    if (nrt + 1 < p) {
                        e[nrt] = a[nrt][p - 1];
                    }
                    e[p - 1] = 0;

                    if (wantu) {
                        for (j = nct; j < nu; j++) {
                            for (i = 0; i < m; i++) {
                                U[i][j] = 0;
                            }
                            U[j][j] = 1;
                        }
                        for (k = nct - 1; k >= 0; k--) {
                            if (s[k] !== 0) {
                                for (j = k + 1; j < nu; j++) {
                                    t = 0;
                                    for (i = k; i < m; i++) {
                                        t += U[i][k] * U[i][j];
                                    }
                                    t = -t / U[k][k];
                                    for (i = k; i < m; i++) {
                                        U[i][j] += t * U[i][k];
                                    }
                                }
                                for (i = k; i < m; i++) {
                                    U[i][k] = -U[i][k];
                                }
                                U[k][k] = 1 + U[k][k];
                                for (i = 0; i < k - 1; i++) {
                                    U[i][k] = 0;
                                }
                            } else {
                                for (i = 0; i < m; i++) {
                                    U[i][k] = 0;
                                }
                                U[k][k] = 1;
                            }
                        }
                    }

                    if (wantv) {
                        for (k = n - 1; k >= 0; k--) {
                            if ((k < nrt) && (e[k] !== 0)) {
                                for (j = k + 1; j < n; j++) {
                                    t = 0;
                                    for (i = k + 1; i < n; i++) {
                                        t += V[i][k] * V[i][j];
                                    }
                                    t = -t / V[k + 1][k];
                                    for (i = k + 1; i < n; i++) {
                                        V[i][j] += t * V[i][k];
                                    }
                                }
                            }
                            for (i = 0; i < n; i++) {
                                V[i][k] = 0;
                            }
                            V[k][k] = 1;
                        }
                    }

                    var pp = p - 1;
                    var eps = Number.EPSILON;
                    while (p > 0) {
                        for (k = p - 2; k >= -1; k--) {
                            if (k === -1) {
                                break;
                            }
                            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {
                                e[k] = 0;
                                break;
                            }
                        }
                        if (k === p - 2) {
                            kase = 4;
                        } else {
                            for (ks = p - 1; ks >= k; ks--) {
                                if (ks === k) {
                                    break;
                                }
                                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);
                                if (Math.abs(s[ks]) <= eps * t) {
                                    s[ks] = 0;
                                    break;
                                }
                            }
                            if (ks === k) {
                                kase = 3;
                            } else if (ks === p - 1) {
                                kase = 1;
                            } else {
                                kase = 2;
                                k = ks;
                            }
                        }

                        k++;

                        switch (kase) {
                            case 1: {
                                f = e[p - 2];
                                e[p - 2] = 0;
                                for (j = p - 2; j >= k; j--) {
                                    t = hypotenuse$2(s[j], f);
                                    cs = s[j] / t;
                                    sn = f / t;
                                    s[j] = t;
                                    if (j !== k) {
                                        f = -sn * e[j - 1];
                                        e[j - 1] = cs * e[j - 1];
                                    }
                                    if (wantv) {
                                        for (i = 0; i < n; i++) {
                                            t = cs * V[i][j] + sn * V[i][p - 1];
                                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];
                                            V[i][j] = t;
                                        }
                                    }
                                }
                                break;
                            }
                            case 2 : {
                                f = e[k - 1];
                                e[k - 1] = 0;
                                for (j = k; j < p; j++) {
                                    t = hypotenuse$2(s[j], f);
                                    cs = s[j] / t;
                                    sn = f / t;
                                    s[j] = t;
                                    f = -sn * e[j];
                                    e[j] = cs * e[j];
                                    if (wantu) {
                                        for (i = 0; i < m; i++) {
                                            t = cs * U[i][j] + sn * U[i][k - 1];
                                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];
                                            U[i][j] = t;
                                        }
                                    }
                                }
                                break;
                            }
                            case 3 : {
                                scale = Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2]), Math.abs(e[p - 2]), Math.abs(s[k]), Math.abs(e[k]));
                                sp = s[p - 1] / scale;
                                spm1 = s[p - 2] / scale;
                                epm1 = e[p - 2] / scale;
                                sk = s[k] / scale;
                                ek = e[k] / scale;
                                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;
                                c = (sp * epm1) * (sp * epm1);
                                shift = 0;
                                if ((b !== 0) || (c !== 0)) {
                                    shift = Math.sqrt(b * b + c);
                                    if (b < 0) {
                                        shift = -shift;
                                    }
                                    shift = c / (b + shift);
                                }
                                f = (sk + sp) * (sk - sp) + shift;
                                g = sk * ek;
                                for (j = k; j < p - 1; j++) {
                                    t = hypotenuse$2(f, g);
                                    cs = f / t;
                                    sn = g / t;
                                    if (j !== k) {
                                        e[j - 1] = t;
                                    }
                                    f = cs * s[j] + sn * e[j];
                                    e[j] = cs * e[j] - sn * s[j];
                                    g = sn * s[j + 1];
                                    s[j + 1] = cs * s[j + 1];
                                    if (wantv) {
                                        for (i = 0; i < n; i++) {
                                            t = cs * V[i][j] + sn * V[i][j + 1];
                                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];
                                            V[i][j] = t;
                                        }
                                    }
                                    t = hypotenuse$2(f, g);
                                    cs = f / t;
                                    sn = g / t;
                                    s[j] = t;
                                    f = cs * e[j] + sn * s[j + 1];
                                    s[j + 1] = -sn * e[j] + cs * s[j + 1];
                                    g = sn * e[j + 1];
                                    e[j + 1] = cs * e[j + 1];
                                    if (wantu && (j < m - 1)) {
                                        for (i = 0; i < m; i++) {
                                            t = cs * U[i][j] + sn * U[i][j + 1];
                                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];
                                            U[i][j] = t;
                                        }
                                    }
                                }
                                e[p - 2] = f;
                                break;
                            }
                            case 4: {
                                if (s[k] <= 0) {
                                    s[k] = (s[k] < 0 ? -s[k] : 0);
                                    if (wantv) {
                                        for (i = 0; i <= pp; i++) {
                                            V[i][k] = -V[i][k];
                                        }
                                    }
                                }
                                while (k < pp) {
                                    if (s[k] >= s[k + 1]) {
                                        break;
                                    }
                                    t = s[k];
                                    s[k] = s[k + 1];
                                    s[k + 1] = t;
                                    if (wantv && (k < n - 1)) {
                                        for (i = 0; i < n; i++) {
                                            t = V[i][k + 1];
                                            V[i][k + 1] = V[i][k];
                                            V[i][k] = t;
                                        }
                                    }
                                    if (wantu && (k < m - 1)) {
                                        for (i = 0; i < m; i++) {
                                            t = U[i][k + 1];
                                            U[i][k + 1] = U[i][k];
                                            U[i][k] = t;
                                        }
                                    }
                                    k++;
                                }
                                p--;
                                break;
                            }
                            // no default
                        }
                    }

                    if (swapped) {
                        var tmp = V;
                        V = U;
                        U = tmp;
                    }

                    this.m = m;
                    this.n = n;
                    this.s = s;
                    this.U = U;
                    this.V = V;
                }

                /**
                 * Solve a problem of least square (Ax=b) by using the SVD. Useful when A is singular. When A is not singular, it would be better to use qr.solve(value).
                 * Example : We search to approximate x, with A matrix shape m*n, x vector size n, b vector size m (m > n). We will use :
                 * var svd = SingularValueDecomposition(A);
                 * var x = svd.solve(b);
                 * @param {Matrix} value - Matrix 1D which is the vector b (in the equation Ax = b)
                 * @return {Matrix} - The vector x
                 */
                solve(value) {

                    var Y = value;
                    var e = this.threshold;
                    var scols = this.s.length;
                    var Ls = Matrix$2.zeros(scols, scols);
                    var i;

                    for (i = 0; i < scols; i++) {
                        if (Math.abs(this.s[i]) <= e) {
                            Ls[i][i] = 0;
                        } else {
                            Ls[i][i] = 1 / this.s[i];
                        }
                    }

                    var U = this.U;
                    var V = this.rightSingularVectors;

                    var VL = V.mmul(Ls);
                    var vrows = V.rows;
                    var urows = U.length;
                    var VLU = Matrix$2.zeros(vrows, urows);
                    var j, k, sum;

                    for (i = 0; i < vrows; i++) {
                        for (j = 0; j < urows; j++) {
                            sum = 0;
                            for (k = 0; k < scols; k++) {
                                sum += VL[i][k] * U[j][k];
                            }
                            VLU[i][j] = sum;
                        }
                    }

                    return VLU.mmul(Y);
                }

                /**
                 *
                 * @param {Array<number>} value
                 * @return {Matrix}
                 */
                solveForDiagonal(value) {
                    return this.solve(Matrix$2.diag(value));
                }

                /**
                 * Get the inverse of the matrix. We compute the inverse of a matrix using SVD when this matrix is singular or ill-conditioned. Example :
                 * var svd = SingularValueDecomposition(A);
                 * var inverseA = svd.inverse();
                 * @return {Matrix} - The approximation of the inverse of the matrix
                 */
                inverse() {
                    var V = this.V;
                    var e = this.threshold;
                    var vrows = V.length;
                    var vcols = V[0].length;
                    var X = new Matrix$2(vrows, this.s.length);
                    var i, j;

                    for (i = 0; i < vrows; i++) {
                        for (j = 0; j < vcols; j++) {
                            if (Math.abs(this.s[j]) > e) {
                                X[i][j] = V[i][j] / this.s[j];
                            } else {
                                X[i][j] = 0;
                            }
                        }
                    }

                    var U = this.U;

                    var urows = U.length;
                    var ucols = U[0].length;
                    var Y = new Matrix$2(vrows, urows);
                    var k, sum;

                    for (i = 0; i < vrows; i++) {
                        for (j = 0; j < urows; j++) {
                            sum = 0;
                            for (k = 0; k < ucols; k++) {
                                sum += X[i][k] * U[j][k];
                            }
                            Y[i][j] = sum;
                        }
                    }

                    return Y;
                }

                /**
                 *
                 * @return {number}
                 */
                get condition() {
                    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];
                }

                /**
                 *
                 * @return {number}
                 */
                get norm2() {
                    return this.s[0];
                }

                /**
                 *
                 * @return {number}
                 */
                get rank() {
                    var tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;
                    var r = 0;
                    var s = this.s;
                    for (var i = 0, ii = s.length; i < ii; i++) {
                        if (s[i] > tol) {
                            r++;
                        }
                    }
                    return r;
                }

                /**
                 *
                 * @return {Array<number>}
                 */
                get diagonal() {
                    return this.s;
                }

                /**
                 *
                 * @return {number}
                 */
                get threshold() {
                    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get leftSingularVectors() {
                    if (!Matrix$2.isMatrix(this.U)) {
                        this.U = new Matrix$2(this.U);
                    }
                    return this.U;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get rightSingularVectors() {
                    if (!Matrix$2.isMatrix(this.V)) {
                        this.V = new Matrix$2(this.V);
                    }
                    return this.V;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get diagonalMatrix() {
                    return Matrix$2.diag(this.s);
                }
            }

            /**
             * @private
             * Check that a row index is not out of bounds
             * @param {Matrix} matrix
             * @param {number} index
             * @param {boolean} [outer]
             */
            function checkRowIndex$2(matrix, index, outer) {
                var max = outer ? matrix.rows : matrix.rows - 1;
                if (index < 0 || index > max) {
                    throw new RangeError('Row index out of range');
                }
            }

            /**
             * @private
             * Check that a column index is not out of bounds
             * @param {Matrix} matrix
             * @param {number} index
             * @param {boolean} [outer]
             */
            function checkColumnIndex$2(matrix, index, outer) {
                var max = outer ? matrix.columns : matrix.columns - 1;
                if (index < 0 || index > max) {
                    throw new RangeError('Column index out of range');
                }
            }

            /**
             * @private
             * Check that the provided vector is an array with the right length
             * @param {Matrix} matrix
             * @param {Array|Matrix} vector
             * @return {Array}
             * @throws {RangeError}
             */
            function checkRowVector$2(matrix, vector) {
                if (vector.to1DArray) {
                    vector = vector.to1DArray();
                }
                if (vector.length !== matrix.columns) {
                    throw new RangeError('vector size must be the same as the number of columns');
                }
                return vector;
            }

            /**
             * @private
             * Check that the provided vector is an array with the right length
             * @param {Matrix} matrix
             * @param {Array|Matrix} vector
             * @return {Array}
             * @throws {RangeError}
             */
            function checkColumnVector$2(matrix, vector) {
                if (vector.to1DArray) {
                    vector = vector.to1DArray();
                }
                if (vector.length !== matrix.rows) {
                    throw new RangeError('vector size must be the same as the number of rows');
                }
                return vector;
            }

            function checkIndices$2(matrix, rowIndices, columnIndices) {
                return {
                    row: checkRowIndices$2(matrix, rowIndices),
                    column: checkColumnIndices$2(matrix, columnIndices)
                };
            }

            function checkRowIndices$2(matrix, rowIndices) {
                if (typeof rowIndices !== 'object') {
                    throw new TypeError('unexpected type for row indices');
                }

                var rowOut = rowIndices.some(r => {
                    return r < 0 || r >= matrix.rows;

                });

                if (rowOut) {
                    throw new RangeError('row indices are out of range');
                }

                if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);

                return rowIndices;
            }

            function checkColumnIndices$2(matrix, columnIndices) {
                if (typeof columnIndices !== 'object') {
                    throw new TypeError('unexpected type for column indices');
                }

                var columnOut = columnIndices.some(c => {
                    return c < 0 || c >= matrix.columns;
                });

                if (columnOut) {
                    throw new RangeError('column indices are out of range');
                }
                if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);

                return columnIndices;
            }

            function checkRange$2(matrix, startRow, endRow, startColumn, endColumn) {
                if (arguments.length !== 5) throw new TypeError('Invalid argument type');
                var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {
                    return typeof arg !== 'number';
                });
                if (notAllNumbers) throw new TypeError('Invalid argument type');
                if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {
                    throw new RangeError('Submatrix indices are out of range');
                }
            }

            function sumByRow$2(matrix) {
                var sum = Matrix$2.zeros(matrix.rows, 1);
                for (var i = 0; i < matrix.rows; ++i) {
                    for (var j = 0; j < matrix.columns; ++j) {
                        sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));
                    }
                }
                return sum;
            }

            function sumByColumn$2(matrix) {
                var sum = Matrix$2.zeros(1, matrix.columns);
                for (var i = 0; i < matrix.rows; ++i) {
                    for (var j = 0; j < matrix.columns; ++j) {
                        sum.set(0, j, sum.get(0, j) + matrix.get(i, j));
                    }
                }
                return sum;
            }

            function sumAll$2(matrix) {
                var v = 0;
                for (var i = 0; i < matrix.rows; i++) {
                    for (var j = 0; j < matrix.columns; j++) {
                        v += matrix.get(i, j);
                    }
                }
                return v;
            }

            class BaseView$2 extends AbstractMatrix$2() {
                constructor(matrix, rows, columns) {
                    super();
                    this.matrix = matrix;
                    this.rows = rows;
                    this.columns = columns;
                }

                static get [Symbol.species]() {
                    return Matrix$2;
                }
            }

            class MatrixTransposeView$2 extends BaseView$2 {
                constructor(matrix) {
                    super(matrix, matrix.columns, matrix.rows);
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(columnIndex, rowIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(columnIndex, rowIndex);
                }
            }

            class MatrixRowView$2 extends BaseView$2 {
                constructor(matrix, row) {
                    super(matrix, 1, matrix.columns);
                    this.row = row;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.row, columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.row, columnIndex);
                }
            }

            class MatrixSubView$2 extends BaseView$2 {
                constructor(matrix, startRow, endRow, startColumn, endColumn) {
                    checkRange$2(matrix, startRow, endRow, startColumn, endColumn);
                    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);
                    this.startRow = startRow;
                    this.startColumn = startColumn;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);
                }
            }

            class MatrixSelectionView$2 extends BaseView$2 {
                constructor(matrix, rowIndices, columnIndices) {
                    var indices = checkIndices$2(matrix, rowIndices, columnIndices);
                    super(matrix, indices.row.length, indices.column.length);
                    this.rowIndices = indices.row;
                    this.columnIndices = indices.column;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);
                }
            }

            class MatrixRowSelectionView$2 extends BaseView$2 {
                constructor(matrix, rowIndices) {
                    rowIndices = checkRowIndices$2(matrix, rowIndices);
                    super(matrix, rowIndices.length, matrix.columns);
                    this.rowIndices = rowIndices;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);
                }
            }

            class MatrixColumnSelectionView$2 extends BaseView$2 {
                constructor(matrix, columnIndices) {
                    columnIndices = checkColumnIndices$2(matrix, columnIndices);
                    super(matrix, matrix.rows, columnIndices.length);
                    this.columnIndices = columnIndices;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);
                }
            }

            class MatrixColumnView$2 extends BaseView$2 {
                constructor(matrix, column) {
                    super(matrix, matrix.rows, 1);
                    this.column = column;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(rowIndex, this.column, value);
                    return this;
                }

                get(rowIndex) {
                    return this.matrix.get(rowIndex, this.column);
                }
            }

            class MatrixFlipRowView$2 extends BaseView$2 {
                constructor(matrix) {
                    super(matrix, matrix.rows, matrix.columns);
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);
                }
            }

            class MatrixFlipColumnView$2 extends BaseView$2 {
                constructor(matrix) {
                    super(matrix, matrix.rows, matrix.columns);
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);
                }
            }

            function AbstractMatrix$2(superCtor) {
                if (superCtor === undefined) superCtor = Object;

                /**
                 * Real matrix
                 * @class Matrix
                 * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,
                 * 2D array containing the data or Matrix instance to clone
                 * @param {number} [nColumns] - Number of columns of the new matrix
                 */
                class Matrix extends superCtor {
                    static get [Symbol.species]() {
                        return this;
                    }

                    /**
                     * Constructs a Matrix with the chosen dimensions from a 1D array
                     * @param {number} newRows - Number of rows
                     * @param {number} newColumns - Number of columns
                     * @param {Array} newData - A 1D array containing data for the matrix
                     * @return {Matrix} - The new matrix
                     */
                    static from1DArray(newRows, newColumns, newData) {
                        var length = newRows * newColumns;
                        if (length !== newData.length) {
                            throw new RangeError('Data length does not match given dimensions');
                        }
                        var newMatrix = new this(newRows, newColumns);
                        for (var row = 0; row < newRows; row++) {
                            for (var column = 0; column < newColumns; column++) {
                                newMatrix.set(row, column, newData[row * newColumns + column]);
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Creates a row vector, a matrix with only one row.
                     * @param {Array} newData - A 1D array containing data for the vector
                     * @return {Matrix} - The new matrix
                     */
                    static rowVector(newData) {
                        var vector = new this(1, newData.length);
                        for (var i = 0; i < newData.length; i++) {
                            vector.set(0, i, newData[i]);
                        }
                        return vector;
                    }

                    /**
                     * Creates a column vector, a matrix with only one column.
                     * @param {Array} newData - A 1D array containing data for the vector
                     * @return {Matrix} - The new matrix
                     */
                    static columnVector(newData) {
                        var vector = new this(newData.length, 1);
                        for (var i = 0; i < newData.length; i++) {
                            vector.set(i, 0, newData[i]);
                        }
                        return vector;
                    }

                    /**
                     * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                    static empty(rows, columns) {
                        return new this(rows, columns);
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be set to zero.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                    static zeros(rows, columns) {
                        return this.empty(rows, columns).fill(0);
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be set to one.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                    static ones(rows, columns) {
                        return this.empty(rows, columns).fill(1);
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be randomly set.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @param {function} [rng=Math.random] - Random number generator
                     * @return {Matrix} The new matrix
                     */
                    static rand(rows, columns, rng) {
                        if (rng === undefined) rng = Math.random;
                        var matrix = this.empty(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                matrix.set(i, j, rng());
                            }
                        }
                        return matrix;
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be random integers.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @param {number} [maxValue=1000] - Maximum value
                     * @param {function} [rng=Math.random] - Random number generator
                     * @return {Matrix} The new matrix
                     */
                    static randInt(rows, columns, maxValue, rng) {
                        if (maxValue === undefined) maxValue = 1000;
                        if (rng === undefined) rng = Math.random;
                        var matrix = this.empty(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                var value = Math.floor(rng() * maxValue);
                                matrix.set(i, j, value);
                            }
                        }
                        return matrix;
                    }

                    /**
                     * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.
                     * @param {number} rows - Number of rows
                     * @param {number} [columns=rows] - Number of columns
                     * @param {number} [value=1] - Value to fill the diagonal with
                     * @return {Matrix} - The new identity matrix
                     */
                    static eye(rows, columns, value) {
                        if (columns === undefined) columns = rows;
                        if (value === undefined) value = 1;
                        var min = Math.min(rows, columns);
                        var matrix = this.zeros(rows, columns);
                        for (var i = 0; i < min; i++) {
                            matrix.set(i, i, value);
                        }
                        return matrix;
                    }

                    /**
                     * Creates a diagonal matrix based on the given array.
                     * @param {Array} data - Array containing the data for the diagonal
                     * @param {number} [rows] - Number of rows (Default: data.length)
                     * @param {number} [columns] - Number of columns (Default: rows)
                     * @return {Matrix} - The new diagonal matrix
                     */
                    static diag(data, rows, columns) {
                        var l = data.length;
                        if (rows === undefined) rows = l;
                        if (columns === undefined) columns = rows;
                        var min = Math.min(l, rows, columns);
                        var matrix = this.zeros(rows, columns);
                        for (var i = 0; i < min; i++) {
                            matrix.set(i, i, data[i]);
                        }
                        return matrix;
                    }

                    /**
                     * Returns a matrix whose elements are the minimum between matrix1 and matrix2
                     * @param {Matrix} matrix1
                     * @param {Matrix} matrix2
                     * @return {Matrix}
                     */
                    static min(matrix1, matrix2) {
                        matrix1 = this.checkMatrix(matrix1);
                        matrix2 = this.checkMatrix(matrix2);
                        var rows = matrix1.rows;
                        var columns = matrix1.columns;
                        var result = new this(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));
                            }
                        }
                        return result;
                    }

                    /**
                     * Returns a matrix whose elements are the maximum between matrix1 and matrix2
                     * @param {Matrix} matrix1
                     * @param {Matrix} matrix2
                     * @return {Matrix}
                     */
                    static max(matrix1, matrix2) {
                        matrix1 = this.checkMatrix(matrix1);
                        matrix2 = this.checkMatrix(matrix2);
                        var rows = matrix1.rows;
                        var columns = matrix1.columns;
                        var result = new this(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));
                            }
                        }
                        return result;
                    }

                    /**
                     * Check that the provided value is a Matrix and tries to instantiate one if not
                     * @param {*} value - The value to check
                     * @return {Matrix}
                     */
                    static checkMatrix(value) {
                        return Matrix.isMatrix(value) ? value : new this(value);
                    }

                    /**
                     * Returns true if the argument is a Matrix, false otherwise
                     * @param {*} value - The value to check
                     * @return {boolean}
                     */
                    static isMatrix(value) {
                        return (value != null) && (value.klass === 'Matrix');
                    }

                    /**
                     * @prop {number} size - The number of elements in the matrix.
                     */
                    get size() {
                        return this.rows * this.columns;
                    }

                    /**
                     * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.
                     * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)
                     * @return {Matrix} this
                     */
                    apply(callback) {
                        if (typeof callback !== 'function') {
                            throw new TypeError('callback must be a function');
                        }
                        var ii = this.rows;
                        var jj = this.columns;
                        for (var i = 0; i < ii; i++) {
                            for (var j = 0; j < jj; j++) {
                                callback.call(this, i, j);
                            }
                        }
                        return this;
                    }

                    /**
                     * Returns a new 1D array filled row by row with the matrix values
                     * @return {Array}
                     */
                    to1DArray() {
                        var array = new Array(this.size);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                array[i * this.columns + j] = this.get(i, j);
                            }
                        }
                        return array;
                    }

                    /**
                     * Returns a 2D array containing a copy of the data
                     * @return {Array}
                     */
                    to2DArray() {
                        var copy = new Array(this.rows);
                        for (var i = 0; i < this.rows; i++) {
                            copy[i] = new Array(this.columns);
                            for (var j = 0; j < this.columns; j++) {
                                copy[i][j] = this.get(i, j);
                            }
                        }
                        return copy;
                    }

                    /**
                     * @return {boolean} true if the matrix has one row
                     */
                    isRowVector() {
                        return this.rows === 1;
                    }

                    /**
                     * @return {boolean} true if the matrix has one column
                     */
                    isColumnVector() {
                        return this.columns === 1;
                    }

                    /**
                     * @return {boolean} true if the matrix has one row or one column
                     */
                    isVector() {
                        return (this.rows === 1) || (this.columns === 1);
                    }

                    /**
                     * @return {boolean} true if the matrix has the same number of rows and columns
                     */
                    isSquare() {
                        return this.rows === this.columns;
                    }

                    /**
                     * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal
                     */
                    isSymmetric() {
                        if (this.isSquare()) {
                            for (var i = 0; i < this.rows; i++) {
                                for (var j = 0; j <= i; j++) {
                                    if (this.get(i, j) !== this.get(j, i)) {
                                        return false;
                                    }
                                }
                            }
                            return true;
                        }
                        return false;
                    }

                    /**
                     * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1
                     * @abstract
                     * @param {number} rowIndex - Index of the row
                     * @param {number} columnIndex - Index of the column
                     * @param {number} value - The new value for the element
                     * @return {Matrix} this
                     */
                    set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars
                        throw new Error('set method is unimplemented');
                    }

                    /**
                     * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]
                     * @abstract
                     * @param {number} rowIndex - Index of the row
                     * @param {number} columnIndex - Index of the column
                     * @return {number}
                     */
                    get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars
                        throw new Error('get method is unimplemented');
                    }

                    /**
                     * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of
                     * rows of the matrix, and colRep times the number of columns of the matrix
                     * @param {number} rowRep - Number of times the rows should be repeated
                     * @param {number} colRep - Number of times the columns should be re
                     * @return {Matrix}
                     * @example
                     * var matrix = new Matrix([[1,2]]);
                     * matrix.repeat(2); // [[1,2],[1,2]]
                     */
                    repeat(rowRep, colRep) {
                        rowRep = rowRep || 1;
                        colRep = colRep || 1;
                        var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);
                        for (var i = 0; i < rowRep; i++) {
                            for (var j = 0; j < colRep; j++) {
                                matrix.setSubMatrix(this, this.rows * i, this.columns * j);
                            }
                        }
                        return matrix;
                    }

                    /**
                     * Fills the matrix with a given value. All elements will be set to this value.
                     * @param {number} value - New value
                     * @return {Matrix} this
                     */
                    fill(value) {
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, value);
                            }
                        }
                        return this;
                    }

                    /**
                     * Negates the matrix. All elements will be multiplied by (-1)
                     * @return {Matrix} this
                     */
                    neg() {
                        return this.mulS(-1);
                    }

                    /**
                     * Returns a new array from the given row index
                     * @param {number} index - Row index
                     * @return {Array}
                     */
                    getRow(index) {
                        checkRowIndex$2(this, index);
                        var row = new Array(this.columns);
                        for (var i = 0; i < this.columns; i++) {
                            row[i] = this.get(index, i);
                        }
                        return row;
                    }

                    /**
                     * Returns a new row vector from the given row index
                     * @param {number} index - Row index
                     * @return {Matrix}
                     */
                    getRowVector(index) {
                        return this.constructor.rowVector(this.getRow(index));
                    }

                    /**
                     * Sets a row at the given index
                     * @param {number} index - Row index
                     * @param {Array|Matrix} array - Array or vector
                     * @return {Matrix} this
                     */
                    setRow(index, array) {
                        checkRowIndex$2(this, index);
                        array = checkRowVector$2(this, array);
                        for (var i = 0; i < this.columns; i++) {
                            this.set(index, i, array[i]);
                        }
                        return this;
                    }

                    /**
                     * Swaps two rows
                     * @param {number} row1 - First row index
                     * @param {number} row2 - Second row index
                     * @return {Matrix} this
                     */
                    swapRows(row1, row2) {
                        checkRowIndex$2(this, row1);
                        checkRowIndex$2(this, row2);
                        for (var i = 0; i < this.columns; i++) {
                            var temp = this.get(row1, i);
                            this.set(row1, i, this.get(row2, i));
                            this.set(row2, i, temp);
                        }
                        return this;
                    }

                    /**
                     * Returns a new array from the given column index
                     * @param {number} index - Column index
                     * @return {Array}
                     */
                    getColumn(index) {
                        checkColumnIndex$2(this, index);
                        var column = new Array(this.rows);
                        for (var i = 0; i < this.rows; i++) {
                            column[i] = this.get(i, index);
                        }
                        return column;
                    }

                    /**
                     * Returns a new column vector from the given column index
                     * @param {number} index - Column index
                     * @return {Matrix}
                     */
                    getColumnVector(index) {
                        return this.constructor.columnVector(this.getColumn(index));
                    }

                    /**
                     * Sets a column at the given index
                     * @param {number} index - Column index
                     * @param {Array|Matrix} array - Array or vector
                     * @return {Matrix} this
                     */
                    setColumn(index, array) {
                        checkColumnIndex$2(this, index);
                        array = checkColumnVector$2(this, array);
                        for (var i = 0; i < this.rows; i++) {
                            this.set(i, index, array[i]);
                        }
                        return this;
                    }

                    /**
                     * Swaps two columns
                     * @param {number} column1 - First column index
                     * @param {number} column2 - Second column index
                     * @return {Matrix} this
                     */
                    swapColumns(column1, column2) {
                        checkColumnIndex$2(this, column1);
                        checkColumnIndex$2(this, column2);
                        for (var i = 0; i < this.rows; i++) {
                            var temp = this.get(i, column1);
                            this.set(i, column1, this.get(i, column2));
                            this.set(i, column2, temp);
                        }
                        return this;
                    }

                    /**
                     * Adds the values of a vector to each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    addRowVector(vector) {
                        vector = checkRowVector$2(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) + vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Subtracts the values of a vector from each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    subRowVector(vector) {
                        vector = checkRowVector$2(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) - vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a vector with each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    mulRowVector(vector) {
                        vector = checkRowVector$2(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) * vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Divides the values of each row by those of a vector
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    divRowVector(vector) {
                        vector = checkRowVector$2(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) / vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Adds the values of a vector to each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    addColumnVector(vector) {
                        vector = checkColumnVector$2(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) + vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Subtracts the values of a vector from each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    subColumnVector(vector) {
                        vector = checkColumnVector$2(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) - vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a vector with each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    mulColumnVector(vector) {
                        vector = checkColumnVector$2(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) * vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Divides the values of each column by those of a vector
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    divColumnVector(vector) {
                        vector = checkColumnVector$2(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) / vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a row with a scalar
                     * @param {number} index - Row index
                     * @param {number} value
                     * @return {Matrix} this
                     */
                    mulRow(index, value) {
                        checkRowIndex$2(this, index);
                        for (var i = 0; i < this.columns; i++) {
                            this.set(index, i, this.get(index, i) * value);
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a column with a scalar
                     * @param {number} index - Column index
                     * @param {number} value
                     * @return {Matrix} this
                     */
                    mulColumn(index, value) {
                        checkColumnIndex$2(this, index);
                        for (var i = 0; i < this.rows; i++) {
                            this.set(i, index, this.get(i, index) * value);
                        }
                        return this;
                    }

                    /**
                     * Returns the maximum value of the matrix
                     * @return {number}
                     */
                    max() {
                        var v = this.get(0, 0);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) > v) {
                                    v = this.get(i, j);
                                }
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value
                     * @return {Array}
                     */
                    maxIndex() {
                        var v = this.get(0, 0);
                        var idx = [0, 0];
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) > v) {
                                    v = this.get(i, j);
                                    idx[0] = i;
                                    idx[1] = j;
                                }
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the minimum value of the matrix
                     * @return {number}
                     */
                    min() {
                        var v = this.get(0, 0);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) < v) {
                                    v = this.get(i, j);
                                }
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the minimum value
                     * @return {Array}
                     */
                    minIndex() {
                        var v = this.get(0, 0);
                        var idx = [0, 0];
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) < v) {
                                    v = this.get(i, j);
                                    idx[0] = i;
                                    idx[1] = j;
                                }
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the maximum value of one row
                     * @param {number} row - Row index
                     * @return {number}
                     */
                    maxRow(row) {
                        checkRowIndex$2(this, row);
                        var v = this.get(row, 0);
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) > v) {
                                v = this.get(row, i);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value of one row
                     * @param {number} row - Row index
                     * @return {Array}
                     */
                    maxRowIndex(row) {
                        checkRowIndex$2(this, row);
                        var v = this.get(row, 0);
                        var idx = [row, 0];
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) > v) {
                                v = this.get(row, i);
                                idx[1] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the minimum value of one row
                     * @param {number} row - Row index
                     * @return {number}
                     */
                    minRow(row) {
                        checkRowIndex$2(this, row);
                        var v = this.get(row, 0);
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) < v) {
                                v = this.get(row, i);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value of one row
                     * @param {number} row - Row index
                     * @return {Array}
                     */
                    minRowIndex(row) {
                        checkRowIndex$2(this, row);
                        var v = this.get(row, 0);
                        var idx = [row, 0];
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) < v) {
                                v = this.get(row, i);
                                idx[1] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the maximum value of one column
                     * @param {number} column - Column index
                     * @return {number}
                     */
                    maxColumn(column) {
                        checkColumnIndex$2(this, column);
                        var v = this.get(0, column);
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) > v) {
                                v = this.get(i, column);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value of one column
                     * @param {number} column - Column index
                     * @return {Array}
                     */
                    maxColumnIndex(column) {
                        checkColumnIndex$2(this, column);
                        var v = this.get(0, column);
                        var idx = [0, column];
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) > v) {
                                v = this.get(i, column);
                                idx[0] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the minimum value of one column
                     * @param {number} column - Column index
                     * @return {number}
                     */
                    minColumn(column) {
                        checkColumnIndex$2(this, column);
                        var v = this.get(0, column);
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) < v) {
                                v = this.get(i, column);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the minimum value of one column
                     * @param {number} column - Column index
                     * @return {Array}
                     */
                    minColumnIndex(column) {
                        checkColumnIndex$2(this, column);
                        var v = this.get(0, column);
                        var idx = [0, column];
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) < v) {
                                v = this.get(i, column);
                                idx[0] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns an array containing the diagonal values of the matrix
                     * @return {Array}
                     */
                    diag() {
                        var min = Math.min(this.rows, this.columns);
                        var diag = new Array(min);
                        for (var i = 0; i < min; i++) {
                            diag[i] = this.get(i, i);
                        }
                        return diag;
                    }

                    /**
                     * Returns the sum by the argument given, if no argument given,
                     * it returns the sum of all elements of the matrix.
                     * @param {string} by - sum by 'row' or 'column'.
                     * @return {Matrix|number}
                     */
                    sum(by) {
                        switch (by) {
                            case 'row':
                                return sumByRow$2(this);
                            case 'column':
                                return sumByColumn$2(this);
                            default:
                                return sumAll$2(this);
                        }
                    }

                    /**
                     * Returns the mean of all elements of the matrix
                     * @return {number}
                     */
                    mean() {
                        return this.sum() / this.size;
                    }

                    /**
                     * Returns the product of all elements of the matrix
                     * @return {number}
                     */
                    prod() {
                        var prod = 1;
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                prod *= this.get(i, j);
                            }
                        }
                        return prod;
                    }

                    /**
                     * Returns the norm of a matrix.
                     * @param {string} type - "frobenius" (default) or "max" return resp. the Frobenius norm and the max norm.
                     * @return {number}
                     */
                    norm(type = 'frobenius') {
                        var result = 0;
                        if (type === 'max') {
                            return this.max();
                        } else if (type === 'frobenius') {
                            for (var i = 0; i < this.rows; i++) {
                                for (var j = 0; j < this.columns; j++) {
                                    result = result + this.get(i, j) * this.get(i, j);
                                }
                            }
                            return Math.sqrt(result);
                        } else {
                            throw new RangeError(`unknown norm type: ${type}`);
                        }
                    }

                    /**
                     * Computes the cumulative sum of the matrix elements (in place, row by row)
                     * @return {Matrix} this
                     */
                    cumulativeSum() {
                        var sum = 0;
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                sum += this.get(i, j);
                                this.set(i, j, sum);
                            }
                        }
                        return this;
                    }

                    /**
                     * Computes the dot (scalar) product between the matrix and another
                     * @param {Matrix} vector2 vector
                     * @return {number}
                     */
                    dot(vector2) {
                        if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();
                        var vector1 = this.to1DArray();
                        if (vector1.length !== vector2.length) {
                            throw new RangeError('vectors do not have the same size');
                        }
                        var dot = 0;
                        for (var i = 0; i < vector1.length; i++) {
                            dot += vector1[i] * vector2[i];
                        }
                        return dot;
                    }

                    /**
                     * Returns the matrix product between this and other
                     * @param {Matrix} other
                     * @return {Matrix}
                     */
                    mmul(other) {
                        other = this.constructor.checkMatrix(other);
                        if (this.columns !== other.rows) {
                            // eslint-disable-next-line no-console
                            console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');
                        }

                        var m = this.rows;
                        var n = this.columns;
                        var p = other.columns;

                        var result = new this.constructor[Symbol.species](m, p);

                        var Bcolj = new Array(n);
                        for (var j = 0; j < p; j++) {
                            for (var k = 0; k < n; k++) {
                                Bcolj[k] = other.get(k, j);
                            }

                            for (var i = 0; i < m; i++) {
                                var s = 0;
                                for (k = 0; k < n; k++) {
                                    s += this.get(i, k) * Bcolj[k];
                                }

                                result.set(i, j, s);
                            }
                        }
                        return result;
                    }

                    strassen2x2(other) {
                        var result = new this.constructor[Symbol.species](2, 2);
                        const a11 = this.get(0, 0);
                        const b11 = other.get(0, 0);
                        const a12 = this.get(0, 1);
                        const b12 = other.get(0, 1);
                        const a21 = this.get(1, 0);
                        const b21 = other.get(1, 0);
                        const a22 = this.get(1, 1);
                        const b22 = other.get(1, 1);

                        // Compute intermediate values.
                        const m1 = (a11 + a22) * (b11 + b22);
                        const m2 = (a21 + a22) * b11;
                        const m3 = a11 * (b12 - b22);
                        const m4 = a22 * (b21 - b11);
                        const m5 = (a11 + a12) * b22;
                        const m6 = (a21 - a11) * (b11 + b12);
                        const m7 = (a12 - a22) * (b21 + b22);

                        // Combine intermediate values into the output.
                        const c00 = m1 + m4 - m5 + m7;
                        const c01 = m3 + m5;
                        const c10 = m2 + m4;
                        const c11 = m1 - m2 + m3 + m6;

                        result.set(0, 0, c00);
                        result.set(0, 1, c01);
                        result.set(1, 0, c10);
                        result.set(1, 1, c11);
                        return result;
                    }

                    strassen3x3(other) {
                        var result = new this.constructor[Symbol.species](3, 3);

                        const a00 = this.get(0, 0);
                        const a01 = this.get(0, 1);
                        const a02 = this.get(0, 2);
                        const a10 = this.get(1, 0);
                        const a11 = this.get(1, 1);
                        const a12 = this.get(1, 2);
                        const a20 = this.get(2, 0);
                        const a21 = this.get(2, 1);
                        const a22 = this.get(2, 2);

                        const b00 = other.get(0, 0);
                        const b01 = other.get(0, 1);
                        const b02 = other.get(0, 2);
                        const b10 = other.get(1, 0);
                        const b11 = other.get(1, 1);
                        const b12 = other.get(1, 2);
                        const b20 = other.get(2, 0);
                        const b21 = other.get(2, 1);
                        const b22 = other.get(2, 2);

                        const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;
                        const m2 = (a00 - a10) * (-b01 + b11);
                        const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);
                        const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);
                        const m5 = (a10 + a11) * (-b00 + b01);
                        const m6 = a00 * b00;
                        const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);
                        const m8 = (-a00 + a20) * (b02 - b12);
                        const m9 = (a20 + a21) * (-b00 + b02);
                        const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;
                        const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);
                        const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);
                        const m13 = (a02 - a22) * (b11 - b21);
                        const m14 = a02 * b20;
                        const m15 = (a21 + a22) * (-b20 + b21);
                        const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);
                        const m17 = (a02 - a12) * (b12 - b22);
                        const m18 = (a11 + a12) * (-b20 + b22);
                        const m19 = a01 * b10;
                        const m20 = a12 * b21;
                        const m21 = a10 * b02;
                        const m22 = a20 * b01;
                        const m23 = a22 * b22;

                        const c00 = m6 + m14 + m19;
                        const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;
                        const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;
                        const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;
                        const c11 = m2 + m4 + m5 + m6 + m20;
                        const c12 = m14 + m16 + m17 + m18 + m21;
                        const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;
                        const c21 = m12 + m13 + m14 + m15 + m22;
                        const c22 = m6 + m7 + m8 + m9 + m23;

                        result.set(0, 0, c00);
                        result.set(0, 1, c01);
                        result.set(0, 2, c02);
                        result.set(1, 0, c10);
                        result.set(1, 1, c11);
                        result.set(1, 2, c12);
                        result.set(2, 0, c20);
                        result.set(2, 1, c21);
                        result.set(2, 2, c22);
                        return result;
                    }

                    /**
                     * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.
                     * @param {Matrix} y
                     * @return {Matrix}
                     */
                    mmulStrassen(y) {
                        var x = this.clone();
                        var r1 = x.rows;
                        var c1 = x.columns;
                        var r2 = y.rows;
                        var c2 = y.columns;
                        if (c1 !== r2) {
                            // eslint-disable-next-line no-console
                            console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);
                        }

                        // Put a matrix into the top left of a matrix of zeros.
                        // `rows` and `cols` are the dimensions of the output matrix.
                        function embed(mat, rows, cols) {
                            var r = mat.rows;
                            var c = mat.columns;
                            if ((r === rows) && (c === cols)) {
                                return mat;
                            } else {
                                var resultat = Matrix.zeros(rows, cols);
                                resultat = resultat.setSubMatrix(mat, 0, 0);
                                return resultat;
                            }
                        }


                        // Make sure both matrices are the same size.
                        // This is exclusively for simplicity:
                        // this algorithm can be implemented with matrices of different sizes.

                        var r = Math.max(r1, r2);
                        var c = Math.max(c1, c2);
                        x = embed(x, r, c);
                        y = embed(y, r, c);

                        // Our recursive multiplication function.
                        function blockMult(a, b, rows, cols) {
                            // For small matrices, resort to naive multiplication.
                            if (rows <= 512 || cols <= 512) {
                                return a.mmul(b); // a is equivalent to this
                            }

                            // Apply dynamic padding.
                            if ((rows % 2 === 1) && (cols % 2 === 1)) {
                                a = embed(a, rows + 1, cols + 1);
                                b = embed(b, rows + 1, cols + 1);
                            } else if (rows % 2 === 1) {
                                a = embed(a, rows + 1, cols);
                                b = embed(b, rows + 1, cols);
                            } else if (cols % 2 === 1) {
                                a = embed(a, rows, cols + 1);
                                b = embed(b, rows, cols + 1);
                            }

                            var halfRows = parseInt(a.rows / 2);
                            var halfCols = parseInt(a.columns / 2);
                            // Subdivide input matrices.
                            var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);
                            var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);

                            var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);
                            var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);

                            var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);
                            var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);

                            var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);
                            var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);

                            // Compute intermediate values.
                            var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);
                            var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);
                            var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);
                            var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);
                            var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);
                            var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);
                            var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);

                            // Combine intermediate values into the output.
                            var c11 = Matrix.add(m1, m4);
                            c11.sub(m5);
                            c11.add(m7);
                            var c12 = Matrix.add(m3, m5);
                            var c21 = Matrix.add(m2, m4);
                            var c22 = Matrix.sub(m1, m2);
                            c22.add(m3);
                            c22.add(m6);

                            //Crop output to the desired size (undo dynamic padding).
                            var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);
                            resultat = resultat.setSubMatrix(c11, 0, 0);
                            resultat = resultat.setSubMatrix(c12, c11.rows, 0);
                            resultat = resultat.setSubMatrix(c21, 0, c11.columns);
                            resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);
                            return resultat.subMatrix(0, rows - 1, 0, cols - 1);
                        }
                        return blockMult(x, y, r, c);
                    }

                    /**
                     * Returns a row-by-row scaled matrix
                     * @param {number} [min=0] - Minimum scaled value
                     * @param {number} [max=1] - Maximum scaled value
                     * @return {Matrix} - The scaled matrix
                     */
                    scaleRows(min, max) {
                        min = min === undefined ? 0 : min;
                        max = max === undefined ? 1 : max;
                        if (min >= max) {
                            throw new RangeError('min should be strictly smaller than max');
                        }
                        var newMatrix = this.constructor.empty(this.rows, this.columns);
                        for (var i = 0; i < this.rows; i++) {
                            var scaled = rescale(this.getRow(i), {min, max});
                            newMatrix.setRow(i, scaled);
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns a new column-by-column scaled matrix
                     * @param {number} [min=0] - Minimum scaled value
                     * @param {number} [max=1] - Maximum scaled value
                     * @return {Matrix} - The new scaled matrix
                     * @example
                     * var matrix = new Matrix([[1,2],[-1,0]]);
                     * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]
                     */
                    scaleColumns(min, max) {
                        min = min === undefined ? 0 : min;
                        max = max === undefined ? 1 : max;
                        if (min >= max) {
                            throw new RangeError('min should be strictly smaller than max');
                        }
                        var newMatrix = this.constructor.empty(this.rows, this.columns);
                        for (var i = 0; i < this.columns; i++) {
                            var scaled = rescale(this.getColumn(i), {
                                min: min,
                                max: max
                            });
                            newMatrix.setColumn(i, scaled);
                        }
                        return newMatrix;
                    }


                    /**
                     * Returns the Kronecker product (also known as tensor product) between this and other
                     * See https://en.wikipedia.org/wiki/Kronecker_product
                     * @param {Matrix} other
                     * @return {Matrix}
                     */
                    kroneckerProduct(other) {
                        other = this.constructor.checkMatrix(other);

                        var m = this.rows;
                        var n = this.columns;
                        var p = other.rows;
                        var q = other.columns;

                        var result = new this.constructor[Symbol.species](m * p, n * q);
                        for (var i = 0; i < m; i++) {
                            for (var j = 0; j < n; j++) {
                                for (var k = 0; k < p; k++) {
                                    for (var l = 0; l < q; l++) {
                                        result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);
                                    }
                                }
                            }
                        }
                        return result;
                    }

                    /**
                     * Transposes the matrix and returns a new one containing the result
                     * @return {Matrix}
                     */
                    transpose() {
                        var result = new this.constructor[Symbol.species](this.columns, this.rows);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                result.set(j, i, this.get(i, j));
                            }
                        }
                        return result;
                    }

                    /**
                     * Sorts the rows (in place)
                     * @param {function} compareFunction - usual Array.prototype.sort comparison function
                     * @return {Matrix} this
                     */
                    sortRows(compareFunction) {
                        if (compareFunction === undefined) compareFunction = compareNumbers;
                        for (var i = 0; i < this.rows; i++) {
                            this.setRow(i, this.getRow(i).sort(compareFunction));
                        }
                        return this;
                    }

                    /**
                     * Sorts the columns (in place)
                     * @param {function} compareFunction - usual Array.prototype.sort comparison function
                     * @return {Matrix} this
                     */
                    sortColumns(compareFunction) {
                        if (compareFunction === undefined) compareFunction = compareNumbers;
                        for (var i = 0; i < this.columns; i++) {
                            this.setColumn(i, this.getColumn(i).sort(compareFunction));
                        }
                        return this;
                    }

                    /**
                     * Returns a subset of the matrix
                     * @param {number} startRow - First row index
                     * @param {number} endRow - Last row index
                     * @param {number} startColumn - First column index
                     * @param {number} endColumn - Last column index
                     * @return {Matrix}
                     */
                    subMatrix(startRow, endRow, startColumn, endColumn) {
                        checkRange$2(this, startRow, endRow, startColumn, endColumn);
                        var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);
                        for (var i = startRow; i <= endRow; i++) {
                            for (var j = startColumn; j <= endColumn; j++) {
                                newMatrix[i - startRow][j - startColumn] = this.get(i, j);
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns a subset of the matrix based on an array of row indices
                     * @param {Array} indices - Array containing the row indices
                     * @param {number} [startColumn = 0] - First column index
                     * @param {number} [endColumn = this.columns-1] - Last column index
                     * @return {Matrix}
                     */
                    subMatrixRow(indices, startColumn, endColumn) {
                        if (startColumn === undefined) startColumn = 0;
                        if (endColumn === undefined) endColumn = this.columns - 1;
                        if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {
                            throw new RangeError('Argument out of range');
                        }

                        var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);
                        for (var i = 0; i < indices.length; i++) {
                            for (var j = startColumn; j <= endColumn; j++) {
                                if (indices[i] < 0 || indices[i] >= this.rows) {
                                    throw new RangeError('Row index out of range: ' + indices[i]);
                                }
                                newMatrix.set(i, j - startColumn, this.get(indices[i], j));
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns a subset of the matrix based on an array of column indices
                     * @param {Array} indices - Array containing the column indices
                     * @param {number} [startRow = 0] - First row index
                     * @param {number} [endRow = this.rows-1] - Last row index
                     * @return {Matrix}
                     */
                    subMatrixColumn(indices, startRow, endRow) {
                        if (startRow === undefined) startRow = 0;
                        if (endRow === undefined) endRow = this.rows - 1;
                        if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {
                            throw new RangeError('Argument out of range');
                        }

                        var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);
                        for (var i = 0; i < indices.length; i++) {
                            for (var j = startRow; j <= endRow; j++) {
                                if (indices[i] < 0 || indices[i] >= this.columns) {
                                    throw new RangeError('Column index out of range: ' + indices[i]);
                                }
                                newMatrix.set(j - startRow, i, this.get(j, indices[i]));
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Set a part of the matrix to the given sub-matrix
                     * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.
                     * @param {number} startRow - The index of the first row to set
                     * @param {number} startColumn - The index of the first column to set
                     * @return {Matrix}
                     */
                    setSubMatrix(matrix, startRow, startColumn) {
                        matrix = this.constructor.checkMatrix(matrix);
                        var endRow = startRow + matrix.rows - 1;
                        var endColumn = startColumn + matrix.columns - 1;
                        checkRange$2(this, startRow, endRow, startColumn, endColumn);
                        for (var i = 0; i < matrix.rows; i++) {
                            for (var j = 0; j < matrix.columns; j++) {
                                this[startRow + i][startColumn + j] = matrix.get(i, j);
                            }
                        }
                        return this;
                    }

                    /**
                     * Return a new matrix based on a selection of rows and columns
                     * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.
                     * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.
                     * @return {Matrix} The new matrix
                     */
                    selection(rowIndices, columnIndices) {
                        var indices = checkIndices$2(this, rowIndices, columnIndices);
                        var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);
                        for (var i = 0; i < indices.row.length; i++) {
                            var rowIndex = indices.row[i];
                            for (var j = 0; j < indices.column.length; j++) {
                                var columnIndex = indices.column[j];
                                newMatrix[i][j] = this.get(rowIndex, columnIndex);
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns the trace of the matrix (sum of the diagonal elements)
                     * @return {number}
                     */
                    trace() {
                        var min = Math.min(this.rows, this.columns);
                        var trace = 0;
                        for (var i = 0; i < min; i++) {
                            trace += this.get(i, i);
                        }
                        return trace;
                    }

                    /*
                     Matrix views
                     */

                    /**
                     * Returns a view of the transposition of the matrix
                     * @return {MatrixTransposeView}
                     */
                    transposeView() {
                        return new MatrixTransposeView$2(this);
                    }

                    /**
                     * Returns a view of the row vector with the given index
                     * @param {number} row - row index of the vector
                     * @return {MatrixRowView}
                     */
                    rowView(row) {
                        checkRowIndex$2(this, row);
                        return new MatrixRowView$2(this, row);
                    }

                    /**
                     * Returns a view of the column vector with the given index
                     * @param {number} column - column index of the vector
                     * @return {MatrixColumnView}
                     */
                    columnView(column) {
                        checkColumnIndex$2(this, column);
                        return new MatrixColumnView$2(this, column);
                    }

                    /**
                     * Returns a view of the matrix flipped in the row axis
                     * @return {MatrixFlipRowView}
                     */
                    flipRowView() {
                        return new MatrixFlipRowView$2(this);
                    }

                    /**
                     * Returns a view of the matrix flipped in the column axis
                     * @return {MatrixFlipColumnView}
                     */
                    flipColumnView() {
                        return new MatrixFlipColumnView$2(this);
                    }

                    /**
                     * Returns a view of a submatrix giving the index boundaries
                     * @param {number} startRow - first row index of the submatrix
                     * @param {number} endRow - last row index of the submatrix
                     * @param {number} startColumn - first column index of the submatrix
                     * @param {number} endColumn - last column index of the submatrix
                     * @return {MatrixSubView}
                     */
                    subMatrixView(startRow, endRow, startColumn, endColumn) {
                        return new MatrixSubView$2(this, startRow, endRow, startColumn, endColumn);
                    }

                    /**
                     * Returns a view of the cross of the row indices and the column indices
                     * @example
                     * // resulting vector is [[2], [2]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])
                     * @param {Array<number>} rowIndices
                     * @param {Array<number>} columnIndices
                     * @return {MatrixSelectionView}
                     */
                    selectionView(rowIndices, columnIndices) {
                        return new MatrixSelectionView$2(this, rowIndices, columnIndices);
                    }

                    /**
                     * Returns a view of the row indices
                     * @example
                     * // resulting vector is [[1,2,3], [1,2,3]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).rowSelectionView([0, 0])
                     * @param {Array<number>} rowIndices
                     * @return {MatrixRowSelectionView}
                     */
                    rowSelectionView(rowIndices) {
                        return new MatrixRowSelectionView$2(this, rowIndices);
                    }

                    /**
                     * Returns a view of the column indices
                     * @example
                     * // resulting vector is [[2, 2], [5, 5]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).columnSelectionView([1, 1])
                     * @param {Array<number>} columnIndices
                     * @return {MatrixColumnSelectionView}
                     */
                    columnSelectionView(columnIndices) {
                        return new MatrixColumnSelectionView$2(this, columnIndices);
                    }


                    /**
                    * Calculates and returns the determinant of a matrix as a Number
                    * @example
                    *   new Matrix([[1,2,3], [4,5,6]]).det()
                    * @return {number}
                    */
                    det() {
                        if (this.isSquare()) {
                            var a, b, c, d;
                            if (this.columns === 2) {
                                // 2 x 2 matrix
                                a = this.get(0, 0);
                                b = this.get(0, 1);
                                c = this.get(1, 0);
                                d = this.get(1, 1);

                                return a * d - (b * c);
                            } else if (this.columns === 3) {
                                // 3 x 3 matrix
                                var subMatrix0, subMatrix1, subMatrix2;
                                subMatrix0 = this.selectionView([1, 2], [1, 2]);
                                subMatrix1 = this.selectionView([1, 2], [0, 2]);
                                subMatrix2 = this.selectionView([1, 2], [0, 1]);
                                a = this.get(0, 0);
                                b = this.get(0, 1);
                                c = this.get(0, 2);

                                return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();
                            } else {
                                // general purpose determinant using the LU decomposition
                                return new LuDecomposition$$1(this).determinant;
                            }

                        } else {
                            throw Error('Determinant can only be calculated for a square matrix.');
                        }
                    }

                    /**
                     * Returns inverse of a matrix if it exists or the pseudoinverse
                     * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)
                     * @return {Matrix} the (pseudo)inverted matrix.
                     */
                    pseudoInverse(threshold) {
                        if (threshold === undefined) threshold = Number.EPSILON;
                        var svdSolution = new SingularValueDecomposition$$1(this, {autoTranspose: true});

                        var U = svdSolution.leftSingularVectors;
                        var V = svdSolution.rightSingularVectors;
                        var s = svdSolution.diagonal;

                        for (var i = 0; i < s.length; i++) {
                            if (Math.abs(s[i]) > threshold) {
                                s[i] = 1.0 / s[i];
                            } else {
                                s[i] = 0.0;
                            }
                        }

                        // convert list to diagonal
                        s = this.constructor[Symbol.species].diag(s);
                        return V.mmul(s.mmul(U.transposeView()));
                    }

                    /**
                     * Creates an exact and independent copy of the matrix
                     * @return {Matrix}
                     */
                    clone() {
                        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);
                        for (var row = 0; row < this.rows; row++) {
                            for (var column = 0; column < this.columns; column++) {
                                newMatrix.set(row, column, this.get(row, column));
                            }
                        }
                        return newMatrix;
                    }
                }

                Matrix.prototype.klass = 'Matrix';

                function compareNumbers(a, b) {
                    return a - b;
                }

                /*
                 Synonyms
                 */

                Matrix.random = Matrix.rand;
                Matrix.diagonal = Matrix.diag;
                Matrix.prototype.diagonal = Matrix.prototype.diag;
                Matrix.identity = Matrix.eye;
                Matrix.prototype.negate = Matrix.prototype.neg;
                Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;
                Matrix.prototype.determinant = Matrix.prototype.det;

                /*
                 Add dynamically instance and static methods for mathematical operations
                 */

                var inplaceOperator = `
(function %name%(value) {
    if (typeof value === 'number') return this.%name%S(value);
    return this.%name%M(value);
})
`;

                var inplaceOperatorScalar = `
(function %name%S(value) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) %op% value);
        }
    }
    return this;
})
`;

                var inplaceOperatorMatrix = `
(function %name%M(matrix) {
    matrix = this.constructor.checkMatrix(matrix);
    if (this.rows !== matrix.rows ||
        this.columns !== matrix.columns) {
        throw new RangeError('Matrices dimensions must be equal');
    }
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));
        }
    }
    return this;
})
`;

                var staticOperator = `
(function %name%(matrix, value) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%(value);
})
`;

                var inplaceMethod = `
(function %name%() {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j)));
        }
    }
    return this;
})
`;

                var staticMethod = `
(function %name%(matrix) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%();
})
`;

                var inplaceMethodWithArgs = `
(function %name%(%args%) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), %args%));
        }
    }
    return this;
})
`;

                var staticMethodWithArgs = `
(function %name%(matrix, %args%) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%(%args%);
})
`;


                var inplaceMethodWithOneArgScalar = `
(function %name%S(value) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), value));
        }
    }
    return this;
})
`;
                var inplaceMethodWithOneArgMatrix = `
(function %name%M(matrix) {
    matrix = this.constructor.checkMatrix(matrix);
    if (this.rows !== matrix.rows ||
        this.columns !== matrix.columns) {
        throw new RangeError('Matrices dimensions must be equal');
    }
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));
        }
    }
    return this;
})
`;

                var inplaceMethodWithOneArg = `
(function %name%(value) {
    if (typeof value === 'number') return this.%name%S(value);
    return this.%name%M(value);
})
`;

                var staticMethodWithOneArg = staticMethodWithArgs;

                var operators = [
                    // Arithmetic operators
                    ['+', 'add'],
                    ['-', 'sub', 'subtract'],
                    ['*', 'mul', 'multiply'],
                    ['/', 'div', 'divide'],
                    ['%', 'mod', 'modulus'],
                    // Bitwise operators
                    ['&', 'and'],
                    ['|', 'or'],
                    ['^', 'xor'],
                    ['<<', 'leftShift'],
                    ['>>', 'signPropagatingRightShift'],
                    ['>>>', 'rightShift', 'zeroFillRightShift']
                ];

                var i;
                var eval2 = eval;
                for (var operator of operators) {
                    var inplaceOp = eval2(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));
                    var inplaceOpS = eval2(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));
                    var inplaceOpM = eval2(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));
                    var staticOp = eval2(fillTemplateFunction(staticOperator, {name: operator[1]}));
                    for (i = 1; i < operator.length; i++) {
                        Matrix.prototype[operator[i]] = inplaceOp;
                        Matrix.prototype[operator[i] + 'S'] = inplaceOpS;
                        Matrix.prototype[operator[i] + 'M'] = inplaceOpM;
                        Matrix[operator[i]] = staticOp;
                    }
                }

                var methods = [
                    ['~', 'not']
                ];

                [
                    'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',
                    'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',
                    'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'
                ].forEach(function (mathMethod) {
                    methods.push(['Math.' + mathMethod, mathMethod]);
                });

                for (var method of methods) {
                    var inplaceMeth = eval2(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));
                    var staticMeth = eval2(fillTemplateFunction(staticMethod, {name: method[1]}));
                    for (i = 1; i < method.length; i++) {
                        Matrix.prototype[method[i]] = inplaceMeth;
                        Matrix[method[i]] = staticMeth;
                    }
                }

                var methodsWithArgs = [
                    ['Math.pow', 1, 'pow']
                ];

                for (var methodWithArg of methodsWithArgs) {
                    var args = 'arg0';
                    for (i = 1; i < methodWithArg[1]; i++) {
                        args += `, arg${i}`;
                    }
                    if (methodWithArg[1] !== 1) {
                        var inplaceMethWithArgs = eval2(fillTemplateFunction(inplaceMethodWithArgs, {
                            name: methodWithArg[2],
                            method: methodWithArg[0],
                            args: args
                        }));
                        var staticMethWithArgs = eval2(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));
                        for (i = 2; i < methodWithArg.length; i++) {
                            Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;
                            Matrix[methodWithArg[i]] = staticMethWithArgs;
                        }
                    } else {
                        var tmplVar = {
                            name: methodWithArg[2],
                            args: args,
                            method: methodWithArg[0]
                        };
                        var inplaceMethod2 = eval2(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));
                        var inplaceMethodS = eval2(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));
                        var inplaceMethodM = eval2(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));
                        var staticMethod2 = eval2(fillTemplateFunction(staticMethodWithOneArg, tmplVar));
                        for (i = 2; i < methodWithArg.length; i++) {
                            Matrix.prototype[methodWithArg[i]] = inplaceMethod2;
                            Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;
                            Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;
                            Matrix[methodWithArg[i]] = staticMethod2;
                        }
                    }
                }

                function fillTemplateFunction(template, values) {
                    for (var value in values) {
                        template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);
                    }
                    return template;
                }

                return Matrix;
            }

            class Matrix$2 extends AbstractMatrix$2(Array) {
                constructor(nRows, nColumns) {
                    var i;
                    if (arguments.length === 1 && typeof nRows === 'number') {
                        return new Array(nRows);
                    }
                    if (Matrix$2.isMatrix(nRows)) {
                        return nRows.clone();
                    } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix
                        super(nRows);
                        if (Number.isInteger(nColumns) && nColumns > 0) {
                            for (i = 0; i < nRows; i++) {
                                this[i] = new Array(nColumns);
                            }
                        } else {
                            throw new TypeError('nColumns must be a positive integer');
                        }
                    } else if (Array.isArray(nRows)) { // Copy the values from the 2D array
                        const matrix = nRows;
                        nRows = matrix.length;
                        nColumns = matrix[0].length;
                        if (typeof nColumns !== 'number' || nColumns === 0) {
                            throw new TypeError('Data must be a 2D array with at least one element');
                        }
                        super(nRows);
                        for (i = 0; i < nRows; i++) {
                            if (matrix[i].length !== nColumns) {
                                throw new RangeError('Inconsistent array dimensions');
                            }
                            this[i] = [].concat(matrix[i]);
                        }
                    } else {
                        throw new TypeError('First argument must be a positive number or an array');
                    }
                    this.rows = nRows;
                    this.columns = nColumns;
                    return this;
                }

                set(rowIndex, columnIndex, value) {
                    this[rowIndex][columnIndex] = value;
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this[rowIndex][columnIndex];
                }

                /**
                 * Removes a row from the given index
                 * @param {number} index - Row index
                 * @return {Matrix} this
                 */
                removeRow(index) {
                    checkRowIndex$2(this, index);
                    if (this.rows === 1) {
                        throw new RangeError('A matrix cannot have less than one row');
                    }
                    this.splice(index, 1);
                    this.rows -= 1;
                    return this;
                }

                /**
                 * Adds a row at the given index
                 * @param {number} [index = this.rows] - Row index
                 * @param {Array|Matrix} array - Array or vector
                 * @return {Matrix} this
                 */
                addRow(index, array) {
                    if (array === undefined) {
                        array = index;
                        index = this.rows;
                    }
                    checkRowIndex$2(this, index, true);
                    array = checkRowVector$2(this, array, true);
                    this.splice(index, 0, array);
                    this.rows += 1;
                    return this;
                }

                /**
                 * Removes a column from the given index
                 * @param {number} index - Column index
                 * @return {Matrix} this
                 */
                removeColumn(index) {
                    checkColumnIndex$2(this, index);
                    if (this.columns === 1) {
                        throw new RangeError('A matrix cannot have less than one column');
                    }
                    for (var i = 0; i < this.rows; i++) {
                        this[i].splice(index, 1);
                    }
                    this.columns -= 1;
                    return this;
                }

                /**
                 * Adds a column at the given index
                 * @param {number} [index = this.columns] - Column index
                 * @param {Array|Matrix} array - Array or vector
                 * @return {Matrix} this
                 */
                addColumn(index, array) {
                    if (typeof array === 'undefined') {
                        array = index;
                        index = this.columns;
                    }
                    checkColumnIndex$2(this, index, true);
                    array = checkColumnVector$2(this, array);
                    for (var i = 0; i < this.rows; i++) {
                        this[i].splice(index, 0, array[i]);
                    }
                    this.columns += 1;
                    return this;
                }
            }

            class WrapperMatrix1D$2 extends AbstractMatrix$2() {
                /**
                 * @class WrapperMatrix1D
                 * @param {Array<number>} data
                 * @param {object} [options]
                 * @param {object} [options.rows = 1]
                 */
                constructor(data, options = {}) {
                    const {
                        rows = 1
                    } = options;

                    if (data.length % rows !== 0) {
                        throw new Error('the data length is not divisible by the number of rows');
                    }
                    super();
                    this.rows = rows;
                    this.columns = data.length / rows;
                    this.data = data;
                }

                set(rowIndex, columnIndex, value) {
                    var index = this._calculateIndex(rowIndex, columnIndex);
                    this.data[index] = value;
                    return this;
                }

                get(rowIndex, columnIndex) {
                    var index = this._calculateIndex(rowIndex, columnIndex);
                    return this.data[index];
                }

                _calculateIndex(row, column) {
                    return (row * this.columns) + column;
                }

                static get [Symbol.species]() {
                    return Matrix$2;
                }
            }

            class WrapperMatrix2D$2 extends AbstractMatrix$2() {
                /**
                 * @class WrapperMatrix2D
                 * @param {Array<Array<number>>} data
                 */
                constructor(data) {
                    super();
                    this.data = data;
                    this.rows = data.length;
                    this.columns = data[0].length;
                }

                set(rowIndex, columnIndex, value) {
                    this.data[rowIndex][columnIndex] = value;
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.data[rowIndex][columnIndex];
                }

                static get [Symbol.species]() {
                    return Matrix$2;
                }
            }

            /**
             * @param {Array<Array<number>>|Array<number>} array
             * @param {object} [options]
             * @param {object} [options.rows = 1]
             * @return {WrapperMatrix1D|WrapperMatrix2D}
             */
            function wrap$2(array, options) {
                if (Array.isArray(array)) {
                    if (array[0] && Array.isArray(array[0])) {
                        return new WrapperMatrix2D$2(array);
                    } else {
                        return new WrapperMatrix1D$2(array, options);
                    }
                } else {
                    throw new Error('the argument is not an array');
                }
            }

            /**
             * @class QrDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs
             * @param {Matrix} value
             */
            class QrDecomposition$$1 {
                constructor(value) {
                    value = WrapperMatrix2D$2.checkMatrix(value);

                    var qr = value.clone();
                    var m = value.rows;
                    var n = value.columns;
                    var rdiag = new Array(n);
                    var i, j, k, s;

                    for (k = 0; k < n; k++) {
                        var nrm = 0;
                        for (i = k; i < m; i++) {
                            nrm = hypotenuse$2(nrm, qr.get(i, k));
                        }
                        if (nrm !== 0) {
                            if (qr.get(k, k) < 0) {
                                nrm = -nrm;
                            }
                            for (i = k; i < m; i++) {
                                qr.set(i, k, qr.get(i, k) / nrm);
                            }
                            qr.set(k, k, qr.get(k, k) + 1);
                            for (j = k + 1; j < n; j++) {
                                s = 0;
                                for (i = k; i < m; i++) {
                                    s += qr.get(i, k) * qr.get(i, j);
                                }
                                s = -s / qr.get(k, k);
                                for (i = k; i < m; i++) {
                                    qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));
                                }
                            }
                        }
                        rdiag[k] = -nrm;
                    }

                    this.QR = qr;
                    this.Rdiag = rdiag;
                }

                /**
                 * Solve a problem of least square (Ax=b) by using the QR decomposition. Useful when A is rectangular, but not working when A is singular.
                 * Example : We search to approximate x, with A matrix shape m*n, x vector size n, b vector size m (m > n). We will use :
                 * var qr = QrDecomposition(A);
                 * var x = qr.solve(b);
                 * @param {Matrix} value - Matrix 1D which is the vector b (in the equation Ax = b)
                 * @return {Matrix} - The vector x
                 */
                solve(value) {
                    value = Matrix$2.checkMatrix(value);

                    var qr = this.QR;
                    var m = qr.rows;

                    if (value.rows !== m) {
                        throw new Error('Matrix row dimensions must agree');
                    }
                    if (!this.isFullRank()) {
                        throw new Error('Matrix is rank deficient');
                    }

                    var count = value.columns;
                    var X = value.clone();
                    var n = qr.columns;
                    var i, j, k, s;

                    for (k = 0; k < n; k++) {
                        for (j = 0; j < count; j++) {
                            s = 0;
                            for (i = k; i < m; i++) {
                                s += qr[i][k] * X[i][j];
                            }
                            s = -s / qr[k][k];
                            for (i = k; i < m; i++) {
                                X[i][j] += s * qr[i][k];
                            }
                        }
                    }
                    for (k = n - 1; k >= 0; k--) {
                        for (j = 0; j < count; j++) {
                            X[k][j] /= this.Rdiag[k];
                        }
                        for (i = 0; i < k; i++) {
                            for (j = 0; j < count; j++) {
                                X[i][j] -= X[k][j] * qr[i][k];
                            }
                        }
                    }

                    return X.subMatrix(0, n - 1, 0, count - 1);
                }

                /**
                 *
                 * @return {boolean}
                 */
                isFullRank() {
                    var columns = this.QR.columns;
                    for (var i = 0; i < columns; i++) {
                        if (this.Rdiag[i] === 0) {
                            return false;
                        }
                    }
                    return true;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get upperTriangularMatrix() {
                    var qr = this.QR;
                    var n = qr.columns;
                    var X = new Matrix$2(n, n);
                    var i, j;
                    for (i = 0; i < n; i++) {
                        for (j = 0; j < n; j++) {
                            if (i < j) {
                                X[i][j] = qr[i][j];
                            } else if (i === j) {
                                X[i][j] = this.Rdiag[i];
                            } else {
                                X[i][j] = 0;
                            }
                        }
                    }
                    return X;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get orthogonalMatrix() {
                    var qr = this.QR;
                    var rows = qr.rows;
                    var columns = qr.columns;
                    var X = new Matrix$2(rows, columns);
                    var i, j, k, s;

                    for (k = columns - 1; k >= 0; k--) {
                        for (i = 0; i < rows; i++) {
                            X[i][k] = 0;
                        }
                        X[k][k] = 1;
                        for (j = k; j < columns; j++) {
                            if (qr[k][k] !== 0) {
                                s = 0;
                                for (i = k; i < rows; i++) {
                                    s += qr[i][k] * X[i][j];
                                }

                                s = -s / qr[k][k];

                                for (i = k; i < rows; i++) {
                                    X[i][j] += s * qr[i][k];
                                }
                            }
                        }
                    }
                    return X;
                }
            }

            /**
             * Computes the inverse of a Matrix
             * @param {Matrix} matrix
             * @param {boolean} [useSVD=false]
             * @return {Matrix}
             */
            function inverse$$1(matrix, useSVD = false) {
                matrix = WrapperMatrix2D$2.checkMatrix(matrix);
                if (useSVD) {
                    return new SingularValueDecomposition$$1(matrix).inverse();
                } else {
                    return solve$$1(matrix, Matrix$2.eye(matrix.rows));
                }
            }

            /**
             *
             * @param {Matrix} leftHandSide
             * @param {Matrix} rightHandSide
             * @param {boolean} [useSVD = false]
             * @return {Matrix}
             */
            function solve$$1(leftHandSide, rightHandSide, useSVD = false) {
                leftHandSide = WrapperMatrix2D$2.checkMatrix(leftHandSide);
                rightHandSide = WrapperMatrix2D$2.checkMatrix(rightHandSide);
                if (useSVD) {
                    return new SingularValueDecomposition$$1(leftHandSide).solve(rightHandSide);
                } else {
                    return leftHandSide.isSquare() ? new LuDecomposition$$1(leftHandSide).solve(rightHandSide) : new QrDecomposition$$1(leftHandSide).solve(rightHandSide);
                }
            }

            /**
             * @class EigenvalueDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs
             * @param {Matrix} matrix
             * @param {object} [options]
             * @param {boolean} [options.assumeSymmetric=false]
             */
            class EigenvalueDecomposition$$1 {
                constructor(matrix, options = {}) {
                    const {
                        assumeSymmetric = false
                    } = options;

                    matrix = WrapperMatrix2D$2.checkMatrix(matrix);
                    if (!matrix.isSquare()) {
                        throw new Error('Matrix is not a square matrix');
                    }

                    var n = matrix.columns;
                    var V = getFilled2DArray$2(n, n, 0);
                    var d = new Array(n);
                    var e = new Array(n);
                    var value = matrix;
                    var i, j;

                    var isSymmetric = false;
                    if (assumeSymmetric) {
                        isSymmetric = true;
                    } else {
                        isSymmetric = matrix.isSymmetric();
                    }

                    if (isSymmetric) {
                        for (i = 0; i < n; i++) {
                            for (j = 0; j < n; j++) {
                                V[i][j] = value.get(i, j);
                            }
                        }
                        tred2$2(n, e, d, V);
                        tql2$2(n, e, d, V);
                    } else {
                        var H = getFilled2DArray$2(n, n, 0);
                        var ort = new Array(n);
                        for (j = 0; j < n; j++) {
                            for (i = 0; i < n; i++) {
                                H[i][j] = value.get(i, j);
                            }
                        }
                        orthes$2(n, H, ort, V);
                        hqr2$2(n, e, d, V, H);
                    }

                    this.n = n;
                    this.e = e;
                    this.d = d;
                    this.V = V;
                }

                /**
                 *
                 * @return {Array<number>}
                 */
                get realEigenvalues() {
                    return this.d;
                }

                /**
                 *
                 * @return {Array<number>}
                 */
                get imaginaryEigenvalues() {
                    return this.e;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get eigenvectorMatrix() {
                    if (!Matrix$2.isMatrix(this.V)) {
                        this.V = new Matrix$2(this.V);
                    }
                    return this.V;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get diagonalMatrix() {
                    var n = this.n;
                    var e = this.e;
                    var d = this.d;
                    var X = new Matrix$2(n, n);
                    var i, j;
                    for (i = 0; i < n; i++) {
                        for (j = 0; j < n; j++) {
                            X[i][j] = 0;
                        }
                        X[i][i] = d[i];
                        if (e[i] > 0) {
                            X[i][i + 1] = e[i];
                        } else if (e[i] < 0) {
                            X[i][i - 1] = e[i];
                        }
                    }
                    return X;
                }
            }

            function tred2$2(n, e, d, V) {
                var f, g, h, i, j, k,
                    hh, scale;

                for (j = 0; j < n; j++) {
                    d[j] = V[n - 1][j];
                }

                for (i = n - 1; i > 0; i--) {
                    scale = 0;
                    h = 0;
                    for (k = 0; k < i; k++) {
                        scale = scale + Math.abs(d[k]);
                    }

                    if (scale === 0) {
                        e[i] = d[i - 1];
                        for (j = 0; j < i; j++) {
                            d[j] = V[i - 1][j];
                            V[i][j] = 0;
                            V[j][i] = 0;
                        }
                    } else {
                        for (k = 0; k < i; k++) {
                            d[k] /= scale;
                            h += d[k] * d[k];
                        }

                        f = d[i - 1];
                        g = Math.sqrt(h);
                        if (f > 0) {
                            g = -g;
                        }

                        e[i] = scale * g;
                        h = h - f * g;
                        d[i - 1] = f - g;
                        for (j = 0; j < i; j++) {
                            e[j] = 0;
                        }

                        for (j = 0; j < i; j++) {
                            f = d[j];
                            V[j][i] = f;
                            g = e[j] + V[j][j] * f;
                            for (k = j + 1; k <= i - 1; k++) {
                                g += V[k][j] * d[k];
                                e[k] += V[k][j] * f;
                            }
                            e[j] = g;
                        }

                        f = 0;
                        for (j = 0; j < i; j++) {
                            e[j] /= h;
                            f += e[j] * d[j];
                        }

                        hh = f / (h + h);
                        for (j = 0; j < i; j++) {
                            e[j] -= hh * d[j];
                        }

                        for (j = 0; j < i; j++) {
                            f = d[j];
                            g = e[j];
                            for (k = j; k <= i - 1; k++) {
                                V[k][j] -= (f * e[k] + g * d[k]);
                            }
                            d[j] = V[i - 1][j];
                            V[i][j] = 0;
                        }
                    }
                    d[i] = h;
                }

                for (i = 0; i < n - 1; i++) {
                    V[n - 1][i] = V[i][i];
                    V[i][i] = 1;
                    h = d[i + 1];
                    if (h !== 0) {
                        for (k = 0; k <= i; k++) {
                            d[k] = V[k][i + 1] / h;
                        }

                        for (j = 0; j <= i; j++) {
                            g = 0;
                            for (k = 0; k <= i; k++) {
                                g += V[k][i + 1] * V[k][j];
                            }
                            for (k = 0; k <= i; k++) {
                                V[k][j] -= g * d[k];
                            }
                        }
                    }

                    for (k = 0; k <= i; k++) {
                        V[k][i + 1] = 0;
                    }
                }

                for (j = 0; j < n; j++) {
                    d[j] = V[n - 1][j];
                    V[n - 1][j] = 0;
                }

                V[n - 1][n - 1] = 1;
                e[0] = 0;
            }

            function tql2$2(n, e, d, V) {

                var g, h, i, j, k, l, m, p, r,
                    dl1, c, c2, c3, el1, s, s2;

                for (i = 1; i < n; i++) {
                    e[i - 1] = e[i];
                }

                e[n - 1] = 0;

                var f = 0;
                var tst1 = 0;
                var eps = Number.EPSILON;

                for (l = 0; l < n; l++) {
                    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));
                    m = l;
                    while (m < n) {
                        if (Math.abs(e[m]) <= eps * tst1) {
                            break;
                        }
                        m++;
                    }

                    if (m > l) {
                        do {

                            g = d[l];
                            p = (d[l + 1] - g) / (2 * e[l]);
                            r = hypotenuse$2(p, 1);
                            if (p < 0) {
                                r = -r;
                            }

                            d[l] = e[l] / (p + r);
                            d[l + 1] = e[l] * (p + r);
                            dl1 = d[l + 1];
                            h = g - d[l];
                            for (i = l + 2; i < n; i++) {
                                d[i] -= h;
                            }

                            f = f + h;

                            p = d[m];
                            c = 1;
                            c2 = c;
                            c3 = c;
                            el1 = e[l + 1];
                            s = 0;
                            s2 = 0;
                            for (i = m - 1; i >= l; i--) {
                                c3 = c2;
                                c2 = c;
                                s2 = s;
                                g = c * e[i];
                                h = c * p;
                                r = hypotenuse$2(p, e[i]);
                                e[i + 1] = s * r;
                                s = e[i] / r;
                                c = p / r;
                                p = c * d[i] - s * g;
                                d[i + 1] = h + s * (c * g + s * d[i]);

                                for (k = 0; k < n; k++) {
                                    h = V[k][i + 1];
                                    V[k][i + 1] = s * V[k][i] + c * h;
                                    V[k][i] = c * V[k][i] - s * h;
                                }
                            }

                            p = -s * s2 * c3 * el1 * e[l] / dl1;
                            e[l] = s * p;
                            d[l] = c * p;

                        }
                        while (Math.abs(e[l]) > eps * tst1);
                    }
                    d[l] = d[l] + f;
                    e[l] = 0;
                }

                for (i = 0; i < n - 1; i++) {
                    k = i;
                    p = d[i];
                    for (j = i + 1; j < n; j++) {
                        if (d[j] < p) {
                            k = j;
                            p = d[j];
                        }
                    }

                    if (k !== i) {
                        d[k] = d[i];
                        d[i] = p;
                        for (j = 0; j < n; j++) {
                            p = V[j][i];
                            V[j][i] = V[j][k];
                            V[j][k] = p;
                        }
                    }
                }
            }

            function orthes$2(n, H, ort, V) {

                var low = 0;
                var high = n - 1;
                var f, g, h, i, j, m;
                var scale;

                for (m = low + 1; m <= high - 1; m++) {
                    scale = 0;
                    for (i = m; i <= high; i++) {
                        scale = scale + Math.abs(H[i][m - 1]);
                    }

                    if (scale !== 0) {
                        h = 0;
                        for (i = high; i >= m; i--) {
                            ort[i] = H[i][m - 1] / scale;
                            h += ort[i] * ort[i];
                        }

                        g = Math.sqrt(h);
                        if (ort[m] > 0) {
                            g = -g;
                        }

                        h = h - ort[m] * g;
                        ort[m] = ort[m] - g;

                        for (j = m; j < n; j++) {
                            f = 0;
                            for (i = high; i >= m; i--) {
                                f += ort[i] * H[i][j];
                            }

                            f = f / h;
                            for (i = m; i <= high; i++) {
                                H[i][j] -= f * ort[i];
                            }
                        }

                        for (i = 0; i <= high; i++) {
                            f = 0;
                            for (j = high; j >= m; j--) {
                                f += ort[j] * H[i][j];
                            }

                            f = f / h;
                            for (j = m; j <= high; j++) {
                                H[i][j] -= f * ort[j];
                            }
                        }

                        ort[m] = scale * ort[m];
                        H[m][m - 1] = scale * g;
                    }
                }

                for (i = 0; i < n; i++) {
                    for (j = 0; j < n; j++) {
                        V[i][j] = (i === j ? 1 : 0);
                    }
                }

                for (m = high - 1; m >= low + 1; m--) {
                    if (H[m][m - 1] !== 0) {
                        for (i = m + 1; i <= high; i++) {
                            ort[i] = H[i][m - 1];
                        }

                        for (j = m; j <= high; j++) {
                            g = 0;
                            for (i = m; i <= high; i++) {
                                g += ort[i] * V[i][j];
                            }

                            g = (g / ort[m]) / H[m][m - 1];
                            for (i = m; i <= high; i++) {
                                V[i][j] += g * ort[i];
                            }
                        }
                    }
                }
            }

            function hqr2$2(nn, e, d, V, H) {
                var n = nn - 1;
                var low = 0;
                var high = nn - 1;
                var eps = Number.EPSILON;
                var exshift = 0;
                var norm = 0;
                var p = 0;
                var q = 0;
                var r = 0;
                var s = 0;
                var z = 0;
                var iter = 0;
                var i, j, k, l, m, t, w, x, y;
                var ra, sa, vr, vi;
                var notlast, cdivres;

                for (i = 0; i < nn; i++) {
                    if (i < low || i > high) {
                        d[i] = H[i][i];
                        e[i] = 0;
                    }

                    for (j = Math.max(i - 1, 0); j < nn; j++) {
                        norm = norm + Math.abs(H[i][j]);
                    }
                }

                while (n >= low) {
                    l = n;
                    while (l > low) {
                        s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);
                        if (s === 0) {
                            s = norm;
                        }
                        if (Math.abs(H[l][l - 1]) < eps * s) {
                            break;
                        }
                        l--;
                    }

                    if (l === n) {
                        H[n][n] = H[n][n] + exshift;
                        d[n] = H[n][n];
                        e[n] = 0;
                        n--;
                        iter = 0;
                    } else if (l === n - 1) {
                        w = H[n][n - 1] * H[n - 1][n];
                        p = (H[n - 1][n - 1] - H[n][n]) / 2;
                        q = p * p + w;
                        z = Math.sqrt(Math.abs(q));
                        H[n][n] = H[n][n] + exshift;
                        H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;
                        x = H[n][n];

                        if (q >= 0) {
                            z = (p >= 0) ? (p + z) : (p - z);
                            d[n - 1] = x + z;
                            d[n] = d[n - 1];
                            if (z !== 0) {
                                d[n] = x - w / z;
                            }
                            e[n - 1] = 0;
                            e[n] = 0;
                            x = H[n][n - 1];
                            s = Math.abs(x) + Math.abs(z);
                            p = x / s;
                            q = z / s;
                            r = Math.sqrt(p * p + q * q);
                            p = p / r;
                            q = q / r;

                            for (j = n - 1; j < nn; j++) {
                                z = H[n - 1][j];
                                H[n - 1][j] = q * z + p * H[n][j];
                                H[n][j] = q * H[n][j] - p * z;
                            }

                            for (i = 0; i <= n; i++) {
                                z = H[i][n - 1];
                                H[i][n - 1] = q * z + p * H[i][n];
                                H[i][n] = q * H[i][n] - p * z;
                            }

                            for (i = low; i <= high; i++) {
                                z = V[i][n - 1];
                                V[i][n - 1] = q * z + p * V[i][n];
                                V[i][n] = q * V[i][n] - p * z;
                            }
                        } else {
                            d[n - 1] = x + p;
                            d[n] = x + p;
                            e[n - 1] = z;
                            e[n] = -z;
                        }

                        n = n - 2;
                        iter = 0;
                    } else {
                        x = H[n][n];
                        y = 0;
                        w = 0;
                        if (l < n) {
                            y = H[n - 1][n - 1];
                            w = H[n][n - 1] * H[n - 1][n];
                        }

                        if (iter === 10) {
                            exshift += x;
                            for (i = low; i <= n; i++) {
                                H[i][i] -= x;
                            }
                            s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);
                            x = y = 0.75 * s;
                            w = -0.4375 * s * s;
                        }

                        if (iter === 30) {
                            s = (y - x) / 2;
                            s = s * s + w;
                            if (s > 0) {
                                s = Math.sqrt(s);
                                if (y < x) {
                                    s = -s;
                                }
                                s = x - w / ((y - x) / 2 + s);
                                for (i = low; i <= n; i++) {
                                    H[i][i] -= s;
                                }
                                exshift += s;
                                x = y = w = 0.964;
                            }
                        }

                        iter = iter + 1;

                        m = n - 2;
                        while (m >= l) {
                            z = H[m][m];
                            r = x - z;
                            s = y - z;
                            p = (r * s - w) / H[m + 1][m] + H[m][m + 1];
                            q = H[m + 1][m + 1] - z - r - s;
                            r = H[m + 2][m + 1];
                            s = Math.abs(p) + Math.abs(q) + Math.abs(r);
                            p = p / s;
                            q = q / s;
                            r = r / s;
                            if (m === l) {
                                break;
                            }
                            if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {
                                break;
                            }
                            m--;
                        }

                        for (i = m + 2; i <= n; i++) {
                            H[i][i - 2] = 0;
                            if (i > m + 2) {
                                H[i][i - 3] = 0;
                            }
                        }

                        for (k = m; k <= n - 1; k++) {
                            notlast = (k !== n - 1);
                            if (k !== m) {
                                p = H[k][k - 1];
                                q = H[k + 1][k - 1];
                                r = (notlast ? H[k + 2][k - 1] : 0);
                                x = Math.abs(p) + Math.abs(q) + Math.abs(r);
                                if (x !== 0) {
                                    p = p / x;
                                    q = q / x;
                                    r = r / x;
                                }
                            }

                            if (x === 0) {
                                break;
                            }

                            s = Math.sqrt(p * p + q * q + r * r);
                            if (p < 0) {
                                s = -s;
                            }

                            if (s !== 0) {
                                if (k !== m) {
                                    H[k][k - 1] = -s * x;
                                } else if (l !== m) {
                                    H[k][k - 1] = -H[k][k - 1];
                                }

                                p = p + s;
                                x = p / s;
                                y = q / s;
                                z = r / s;
                                q = q / p;
                                r = r / p;

                                for (j = k; j < nn; j++) {
                                    p = H[k][j] + q * H[k + 1][j];
                                    if (notlast) {
                                        p = p + r * H[k + 2][j];
                                        H[k + 2][j] = H[k + 2][j] - p * z;
                                    }

                                    H[k][j] = H[k][j] - p * x;
                                    H[k + 1][j] = H[k + 1][j] - p * y;
                                }

                                for (i = 0; i <= Math.min(n, k + 3); i++) {
                                    p = x * H[i][k] + y * H[i][k + 1];
                                    if (notlast) {
                                        p = p + z * H[i][k + 2];
                                        H[i][k + 2] = H[i][k + 2] - p * r;
                                    }

                                    H[i][k] = H[i][k] - p;
                                    H[i][k + 1] = H[i][k + 1] - p * q;
                                }

                                for (i = low; i <= high; i++) {
                                    p = x * V[i][k] + y * V[i][k + 1];
                                    if (notlast) {
                                        p = p + z * V[i][k + 2];
                                        V[i][k + 2] = V[i][k + 2] - p * r;
                                    }

                                    V[i][k] = V[i][k] - p;
                                    V[i][k + 1] = V[i][k + 1] - p * q;
                                }
                            }
                        }
                    }
                }

                if (norm === 0) {
                    return;
                }

                for (n = nn - 1; n >= 0; n--) {
                    p = d[n];
                    q = e[n];

                    if (q === 0) {
                        l = n;
                        H[n][n] = 1;
                        for (i = n - 1; i >= 0; i--) {
                            w = H[i][i] - p;
                            r = 0;
                            for (j = l; j <= n; j++) {
                                r = r + H[i][j] * H[j][n];
                            }

                            if (e[i] < 0) {
                                z = w;
                                s = r;
                            } else {
                                l = i;
                                if (e[i] === 0) {
                                    H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));
                                } else {
                                    x = H[i][i + 1];
                                    y = H[i + 1][i];
                                    q = (d[i] - p) * (d[i] - p) + e[i] * e[i];
                                    t = (x * s - z * r) / q;
                                    H[i][n] = t;
                                    H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);
                                }

                                t = Math.abs(H[i][n]);
                                if ((eps * t) * t > 1) {
                                    for (j = i; j <= n; j++) {
                                        H[j][n] = H[j][n] / t;
                                    }
                                }
                            }
                        }
                    } else if (q < 0) {
                        l = n - 1;

                        if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {
                            H[n - 1][n - 1] = q / H[n][n - 1];
                            H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];
                        } else {
                            cdivres = cdiv$2(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);
                            H[n - 1][n - 1] = cdivres[0];
                            H[n - 1][n] = cdivres[1];
                        }

                        H[n][n - 1] = 0;
                        H[n][n] = 1;
                        for (i = n - 2; i >= 0; i--) {
                            ra = 0;
                            sa = 0;
                            for (j = l; j <= n; j++) {
                                ra = ra + H[i][j] * H[j][n - 1];
                                sa = sa + H[i][j] * H[j][n];
                            }

                            w = H[i][i] - p;

                            if (e[i] < 0) {
                                z = w;
                                r = ra;
                                s = sa;
                            } else {
                                l = i;
                                if (e[i] === 0) {
                                    cdivres = cdiv$2(-ra, -sa, w, q);
                                    H[i][n - 1] = cdivres[0];
                                    H[i][n] = cdivres[1];
                                } else {
                                    x = H[i][i + 1];
                                    y = H[i + 1][i];
                                    vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;
                                    vi = (d[i] - p) * 2 * q;
                                    if (vr === 0 && vi === 0) {
                                        vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));
                                    }
                                    cdivres = cdiv$2(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);
                                    H[i][n - 1] = cdivres[0];
                                    H[i][n] = cdivres[1];
                                    if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {
                                        H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;
                                        H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;
                                    } else {
                                        cdivres = cdiv$2(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);
                                        H[i + 1][n - 1] = cdivres[0];
                                        H[i + 1][n] = cdivres[1];
                                    }
                                }

                                t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));
                                if ((eps * t) * t > 1) {
                                    for (j = i; j <= n; j++) {
                                        H[j][n - 1] = H[j][n - 1] / t;
                                        H[j][n] = H[j][n] / t;
                                    }
                                }
                            }
                        }
                    }
                }

                for (i = 0; i < nn; i++) {
                    if (i < low || i > high) {
                        for (j = i; j < nn; j++) {
                            V[i][j] = H[i][j];
                        }
                    }
                }

                for (j = nn - 1; j >= low; j--) {
                    for (i = low; i <= high; i++) {
                        z = 0;
                        for (k = low; k <= Math.min(j, high); k++) {
                            z = z + V[i][k] * H[k][j];
                        }
                        V[i][j] = z;
                    }
                }
            }

            function cdiv$2(xr, xi, yr, yi) {
                var r, d;
                if (Math.abs(yr) > Math.abs(yi)) {
                    r = yi / yr;
                    d = yr + r * yi;
                    return [(xr + r * xi) / d, (xi - r * xr) / d];
                } else {
                    r = yr / yi;
                    d = yi + r * yr;
                    return [(r * xr + xi) / d, (r * xi - xr) / d];
                }
            }

            /**
             * @class CholeskyDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs
             * @param {Matrix} value
             */
            class CholeskyDecomposition$$1 {
                constructor(value) {
                    value = WrapperMatrix2D$2.checkMatrix(value);
                    if (!value.isSymmetric()) {
                        throw new Error('Matrix is not symmetric');
                    }

                    var a = value;
                    var dimension = a.rows;
                    var l = new Matrix$2(dimension, dimension);
                    var positiveDefinite = true;
                    var i, j, k;

                    for (j = 0; j < dimension; j++) {
                        var Lrowj = l[j];
                        var d = 0;
                        for (k = 0; k < j; k++) {
                            var Lrowk = l[k];
                            var s = 0;
                            for (i = 0; i < k; i++) {
                                s += Lrowk[i] * Lrowj[i];
                            }
                            Lrowj[k] = s = (a.get(j, k) - s) / l[k][k];
                            d = d + s * s;
                        }

                        d = a.get(j, j) - d;

                        positiveDefinite &= (d > 0);
                        l[j][j] = Math.sqrt(Math.max(d, 0));
                        for (k = j + 1; k < dimension; k++) {
                            l[j][k] = 0;
                        }
                    }

                    if (!positiveDefinite) {
                        throw new Error('Matrix is not positive definite');
                    }

                    this.L = l;
                }

                /**
                 *
                 * @param {Matrix} value
                 * @return {Matrix}
                 */
                solve(value) {
                    value = WrapperMatrix2D$2.checkMatrix(value);

                    var l = this.L;
                    var dimension = l.rows;

                    if (value.rows !== dimension) {
                        throw new Error('Matrix dimensions do not match');
                    }

                    var count = value.columns;
                    var B = value.clone();
                    var i, j, k;

                    for (k = 0; k < dimension; k++) {
                        for (j = 0; j < count; j++) {
                            for (i = 0; i < k; i++) {
                                B[k][j] -= B[i][j] * l[k][i];
                            }
                            B[k][j] /= l[k][k];
                        }
                    }

                    for (k = dimension - 1; k >= 0; k--) {
                        for (j = 0; j < count; j++) {
                            for (i = k + 1; i < dimension; i++) {
                                B[k][j] -= B[i][j] * l[i][k];
                            }
                            B[k][j] /= l[k][k];
                        }
                    }

                    return B;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get lowerTriangularMatrix() {
                    return this.L;
                }
            }



            var src$2 = /*#__PURE__*/Object.freeze({
                        default: Matrix$2,
                        Matrix: Matrix$2,
                        abstractMatrix: AbstractMatrix$2,
                        wrap: wrap$2,
                        WrapperMatrix2D: WrapperMatrix2D$2,
                        WrapperMatrix1D: WrapperMatrix1D$2,
                        solve: solve$$1,
                        inverse: inverse$$1,
                        SingularValueDecomposition: SingularValueDecomposition$$1,
                        SVD: SingularValueDecomposition$$1,
                        EigenvalueDecomposition: EigenvalueDecomposition$$1,
                        EVD: EigenvalueDecomposition$$1,
                        CholeskyDecomposition: CholeskyDecomposition$$1,
                        CHO: CholeskyDecomposition$$1,
                        LuDecomposition: LuDecomposition$$1,
                        LU: LuDecomposition$$1,
                        QrDecomposition: QrDecomposition$$1,
                        QR: QrDecomposition$$1
            });

            var array = createCommonjsModule(function (module, exports) {

            function compareNumbers(a, b) {
                return a - b;
            }

            /**
             * Computes the sum of the given values
             * @param {Array} values
             * @returns {number}
             */
            exports.sum = function sum(values) {
                var sum = 0;
                for (var i = 0; i < values.length; i++) {
                    sum += values[i];
                }
                return sum;
            };

            /**
             * Computes the maximum of the given values
             * @param {Array} values
             * @returns {number}
             */
            exports.max = function max(values) {
                var max = values[0];
                var l = values.length;
                for (var i = 1; i < l; i++) {
                    if (values[i] > max) max = values[i];
                }
                return max;
            };

            /**
             * Computes the minimum of the given values
             * @param {Array} values
             * @returns {number}
             */
            exports.min = function min(values) {
                var min = values[0];
                var l = values.length;
                for (var i = 1; i < l; i++) {
                    if (values[i] < min) min = values[i];
                }
                return min;
            };

            /**
             * Computes the min and max of the given values
             * @param {Array} values
             * @returns {{min: number, max: number}}
             */
            exports.minMax = function minMax(values) {
                var min = values[0];
                var max = values[0];
                var l = values.length;
                for (var i = 1; i < l; i++) {
                    if (values[i] < min) min = values[i];
                    if (values[i] > max) max = values[i];
                }
                return {
                    min: min,
                    max: max
                };
            };

            /**
             * Computes the arithmetic mean of the given values
             * @param {Array} values
             * @returns {number}
             */
            exports.arithmeticMean = function arithmeticMean(values) {
                var sum = 0;
                var l = values.length;
                for (var i = 0; i < l; i++) {
                    sum += values[i];
                }
                return sum / l;
            };

            /**
             * {@link arithmeticMean}
             */
            exports.mean = exports.arithmeticMean;

            /**
             * Computes the geometric mean of the given values
             * @param {Array} values
             * @returns {number}
             */
            exports.geometricMean = function geometricMean(values) {
                var mul = 1;
                var l = values.length;
                for (var i = 0; i < l; i++) {
                    mul *= values[i];
                }
                return Math.pow(mul, 1 / l);
            };

            /**
             * Computes the mean of the log of the given values
             * If the return value is exponentiated, it gives the same result as the
             * geometric mean.
             * @param {Array} values
             * @returns {number}
             */
            exports.logMean = function logMean(values) {
                var lnsum = 0;
                var l = values.length;
                for (var i = 0; i < l; i++) {
                    lnsum += Math.log(values[i]);
                }
                return lnsum / l;
            };

            /**
             * Computes the weighted grand mean for a list of means and sample sizes
             * @param {Array} means - Mean values for each set of samples
             * @param {Array} samples - Number of original values for each set of samples
             * @returns {number}
             */
            exports.grandMean = function grandMean(means, samples) {
                var sum = 0;
                var n = 0;
                var l = means.length;
                for (var i = 0; i < l; i++) {
                    sum += samples[i] * means[i];
                    n += samples[i];
                }
                return sum / n;
            };

            /**
             * Computes the truncated mean of the given values using a given percentage
             * @param {Array} values
             * @param {number} percent - The percentage of values to keep (range: [0,1])
             * @param {boolean} [alreadySorted=false]
             * @returns {number}
             */
            exports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {
                if (alreadySorted === undefined) alreadySorted = false;
                if (!alreadySorted) {
                    values = [].concat(values).sort(compareNumbers);
                }
                var l = values.length;
                var k = Math.floor(l * percent);
                var sum = 0;
                for (var i = k; i < (l - k); i++) {
                    sum += values[i];
                }
                return sum / (l - 2 * k);
            };

            /**
             * Computes the harmonic mean of the given values
             * @param {Array} values
             * @returns {number}
             */
            exports.harmonicMean = function harmonicMean(values) {
                var sum = 0;
                var l = values.length;
                for (var i = 0; i < l; i++) {
                    if (values[i] === 0) {
                        throw new RangeError('value at index ' + i + 'is zero');
                    }
                    sum += 1 / values[i];
                }
                return l / sum;
            };

            /**
             * Computes the contraharmonic mean of the given values
             * @param {Array} values
             * @returns {number}
             */
            exports.contraHarmonicMean = function contraHarmonicMean(values) {
                var r1 = 0;
                var r2 = 0;
                var l = values.length;
                for (var i = 0; i < l; i++) {
                    r1 += values[i] * values[i];
                    r2 += values[i];
                }
                if (r2 < 0) {
                    throw new RangeError('sum of values is negative');
                }
                return r1 / r2;
            };

            /**
             * Computes the median of the given values
             * @param {Array} values
             * @param {boolean} [alreadySorted=false]
             * @returns {number}
             */
            exports.median = function median(values, alreadySorted) {
                if (alreadySorted === undefined) alreadySorted = false;
                if (!alreadySorted) {
                    values = [].concat(values).sort(compareNumbers);
                }
                var l = values.length;
                var half = Math.floor(l / 2);
                if (l % 2 === 0) {
                    return (values[half - 1] + values[half]) * 0.5;
                } else {
                    return values[half];
                }
            };

            /**
             * Computes the variance of the given values
             * @param {Array} values
             * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.
             * @returns {number}
             */
            exports.variance = function variance(values, unbiased) {
                if (unbiased === undefined) unbiased = true;
                var theMean = exports.mean(values);
                var theVariance = 0;
                var l = values.length;

                for (var i = 0; i < l; i++) {
                    var x = values[i] - theMean;
                    theVariance += x * x;
                }

                if (unbiased) {
                    return theVariance / (l - 1);
                } else {
                    return theVariance / l;
                }
            };

            /**
             * Computes the standard deviation of the given values
             * @param {Array} values
             * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.
             * @returns {number}
             */
            exports.standardDeviation = function standardDeviation(values, unbiased) {
                return Math.sqrt(exports.variance(values, unbiased));
            };

            exports.standardError = function standardError(values) {
                return exports.standardDeviation(values) / Math.sqrt(values.length);
            };

            /**
             * IEEE Transactions on biomedical engineering, vol. 52, no. 1, january 2005, p. 76-
             * Calculate the standard deviation via the Median of the absolute deviation
             *  The formula for the standard deviation only holds for Gaussian random variables.
             * @returns {{mean: number, stdev: number}}
             */
            exports.robustMeanAndStdev = function robustMeanAndStdev(y) {
                var mean = 0, stdev = 0;
                var length = y.length, i = 0;
                for (i = 0; i < length; i++) {
                    mean += y[i];
                }
                mean /= length;
                var averageDeviations = new Array(length);
                for (i = 0; i < length; i++)
                    averageDeviations[i] = Math.abs(y[i] - mean);
                averageDeviations.sort(compareNumbers);
                if (length % 2 === 1) {
                    stdev = averageDeviations[(length - 1) / 2] / 0.6745;
                } else {
                    stdev = 0.5 * (averageDeviations[length / 2] + averageDeviations[length / 2 - 1]) / 0.6745;
                }

                return {
                    mean: mean,
                    stdev: stdev
                };
            };

            exports.quartiles = function quartiles(values, alreadySorted) {
                if (typeof (alreadySorted) === 'undefined') alreadySorted = false;
                if (!alreadySorted) {
                    values = [].concat(values).sort(compareNumbers);
                }

                var quart = values.length / 4;
                var q1 = values[Math.ceil(quart) - 1];
                var q2 = exports.median(values, true);
                var q3 = values[Math.ceil(quart * 3) - 1];

                return {q1: q1, q2: q2, q3: q3};
            };

            exports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {
                return Math.sqrt(exports.pooledVariance(samples, unbiased));
            };

            exports.pooledVariance = function pooledVariance(samples, unbiased) {
                if (typeof (unbiased) === 'undefined') unbiased = true;
                var sum = 0;
                var length = 0, l = samples.length;
                for (var i = 0; i < l; i++) {
                    var values = samples[i];
                    var vari = exports.variance(values);

                    sum += (values.length - 1) * vari;

                    if (unbiased)
                        length += values.length - 1;
                    else
                        length += values.length;
                }
                return sum / length;
            };

            exports.mode = function mode(values) {
                var l = values.length,
                    itemCount = new Array(l),
                    i;
                for (i = 0; i < l; i++) {
                    itemCount[i] = 0;
                }
                var itemArray = new Array(l);
                var count = 0;

                for (i = 0; i < l; i++) {
                    var index = itemArray.indexOf(values[i]);
                    if (index >= 0)
                        itemCount[index]++;
                    else {
                        itemArray[count] = values[i];
                        itemCount[count] = 1;
                        count++;
                    }
                }

                var maxValue = 0, maxIndex = 0;
                for (i = 0; i < count; i++) {
                    if (itemCount[i] > maxValue) {
                        maxValue = itemCount[i];
                        maxIndex = i;
                    }
                }

                return itemArray[maxIndex];
            };

            exports.covariance = function covariance(vector1, vector2, unbiased) {
                if (typeof (unbiased) === 'undefined') unbiased = true;
                var mean1 = exports.mean(vector1);
                var mean2 = exports.mean(vector2);

                if (vector1.length !== vector2.length)
                    throw 'Vectors do not have the same dimensions';

                var cov = 0, l = vector1.length;
                for (var i = 0; i < l; i++) {
                    var x = vector1[i] - mean1;
                    var y = vector2[i] - mean2;
                    cov += x * y;
                }

                if (unbiased)
                    return cov / (l - 1);
                else
                    return cov / l;
            };

            exports.skewness = function skewness(values, unbiased) {
                if (typeof (unbiased) === 'undefined') unbiased = true;
                var theMean = exports.mean(values);

                var s2 = 0, s3 = 0, l = values.length;
                for (var i = 0; i < l; i++) {
                    var dev = values[i] - theMean;
                    s2 += dev * dev;
                    s3 += dev * dev * dev;
                }
                var m2 = s2 / l;
                var m3 = s3 / l;

                var g = m3 / (Math.pow(m2, 3 / 2.0));
                if (unbiased) {
                    var a = Math.sqrt(l * (l - 1));
                    var b = l - 2;
                    return (a / b) * g;
                } else {
                    return g;
                }
            };

            exports.kurtosis = function kurtosis(values, unbiased) {
                if (typeof (unbiased) === 'undefined') unbiased = true;
                var theMean = exports.mean(values);
                var n = values.length, s2 = 0, s4 = 0;

                for (var i = 0; i < n; i++) {
                    var dev = values[i] - theMean;
                    s2 += dev * dev;
                    s4 += dev * dev * dev * dev;
                }
                var m2 = s2 / n;
                var m4 = s4 / n;

                if (unbiased) {
                    var v = s2 / (n - 1);
                    var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));
                    var b = s4 / (v * v);
                    var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));

                    return a * b - 3 * c;
                } else {
                    return m4 / (m2 * m2) - 3;
                }
            };

            exports.entropy = function entropy(values, eps) {
                if (typeof (eps) === 'undefined') eps = 0;
                var sum = 0, l = values.length;
                for (var i = 0; i < l; i++)
                    sum += values[i] * Math.log(values[i] + eps);
                return -sum;
            };

            exports.weightedMean = function weightedMean(values, weights) {
                var sum = 0, l = values.length;
                for (var i = 0; i < l; i++)
                    sum += values[i] * weights[i];
                return sum;
            };

            exports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {
                return Math.sqrt(exports.weightedVariance(values, weights));
            };

            exports.weightedVariance = function weightedVariance(values, weights) {
                var theMean = exports.weightedMean(values, weights);
                var vari = 0, l = values.length;
                var a = 0, b = 0;

                for (var i = 0; i < l; i++) {
                    var z = values[i] - theMean;
                    var w = weights[i];

                    vari += w * (z * z);
                    b += w;
                    a += w * w;
                }

                return vari * (b / (b * b - a));
            };

            exports.center = function center(values, inPlace) {
                if (typeof (inPlace) === 'undefined') inPlace = false;

                var result = values;
                if (!inPlace)
                    result = [].concat(values);

                var theMean = exports.mean(result), l = result.length;
                for (var i = 0; i < l; i++)
                    result[i] -= theMean;
            };

            exports.standardize = function standardize(values, standardDev, inPlace) {
                if (typeof (standardDev) === 'undefined') standardDev = exports.standardDeviation(values);
                if (typeof (inPlace) === 'undefined') inPlace = false;
                var l = values.length;
                var result = inPlace ? values : new Array(l);
                for (var i = 0; i < l; i++)
                    result[i] = values[i] / standardDev;
                return result;
            };

            exports.cumulativeSum = function cumulativeSum(array) {
                var l = array.length;
                var result = new Array(l);
                result[0] = array[0];
                for (var i = 1; i < l; i++)
                    result[i] = result[i - 1] + array[i];
                return result;
            };
            });
            var array_1 = array.sum;
            var array_2 = array.max;
            var array_3 = array.min;
            var array_4 = array.minMax;
            var array_5 = array.arithmeticMean;
            var array_6 = array.mean;
            var array_7 = array.geometricMean;
            var array_8 = array.logMean;
            var array_9 = array.grandMean;
            var array_10 = array.truncatedMean;
            var array_11 = array.harmonicMean;
            var array_12 = array.contraHarmonicMean;
            var array_13 = array.median;
            var array_14 = array.variance;
            var array_15 = array.standardDeviation;
            var array_16 = array.standardError;
            var array_17 = array.robustMeanAndStdev;
            var array_18 = array.quartiles;
            var array_19 = array.pooledStandardDeviation;
            var array_20 = array.pooledVariance;
            var array_21 = array.mode;
            var array_22 = array.covariance;
            var array_23 = array.skewness;
            var array_24 = array.kurtosis;
            var array_25 = array.entropy;
            var array_26 = array.weightedMean;
            var array_27 = array.weightedStandardDeviation;
            var array_28 = array.weightedVariance;
            var array_29 = array.center;
            var array_30 = array.standardize;
            var array_31 = array.cumulativeSum;

            var matrix = createCommonjsModule(function (module, exports) {



            function compareNumbers(a, b) {
                return a - b;
            }

            exports.max = function max(matrix) {
                var max = -Infinity;
                for (var i = 0; i < matrix.length; i++) {
                    for (var j = 0; j < matrix[i].length; j++) {
                        if (matrix[i][j] > max) max = matrix[i][j];
                    }
                }
                return max;
            };

            exports.min = function min(matrix) {
                var min = Infinity;
                for (var i = 0; i < matrix.length; i++) {
                    for (var j = 0; j < matrix[i].length; j++) {
                        if (matrix[i][j] < min) min = matrix[i][j];
                    }
                }
                return min;
            };

            exports.minMax = function minMax(matrix) {
                var min = Infinity;
                var max = -Infinity;
                for (var i = 0; i < matrix.length; i++) {
                    for (var j = 0; j < matrix[i].length; j++) {
                        if (matrix[i][j] < min) min = matrix[i][j];
                        if (matrix[i][j] > max) max = matrix[i][j];
                    }
                }
                return {
                    min:min,
                    max:max
                };
            };

            exports.entropy = function entropy(matrix, eps) {
                if (typeof (eps) === 'undefined') {
                    eps = 0;
                }
                var sum = 0,
                    l1 = matrix.length,
                    l2 = matrix[0].length;
                for (var i = 0; i < l1; i++) {
                    for (var j = 0; j < l2; j++) {
                        sum += matrix[i][j] * Math.log(matrix[i][j] + eps);
                    }
                }
                return -sum;
            };

            exports.mean = function mean(matrix, dimension) {
                if (typeof (dimension) === 'undefined') {
                    dimension = 0;
                }
                var rows = matrix.length,
                    cols = matrix[0].length,
                    theMean, N, i, j;

                if (dimension === -1) {
                    theMean = [0];
                    N = rows * cols;
                    for (i = 0; i < rows; i++) {
                        for (j = 0; j < cols; j++) {
                            theMean[0] += matrix[i][j];
                        }
                    }
                    theMean[0] /= N;
                } else if (dimension === 0) {
                    theMean = new Array(cols);
                    N = rows;
                    for (j = 0; j < cols; j++) {
                        theMean[j] = 0;
                        for (i = 0; i < rows; i++) {
                            theMean[j] += matrix[i][j];
                        }
                        theMean[j] /= N;
                    }
                } else if (dimension === 1) {
                    theMean = new Array(rows);
                    N = cols;
                    for (j = 0; j < rows; j++) {
                        theMean[j] = 0;
                        for (i = 0; i < cols; i++) {
                            theMean[j] += matrix[j][i];
                        }
                        theMean[j] /= N;
                    }
                } else {
                    throw new Error('Invalid dimension');
                }
                return theMean;
            };

            exports.sum = function sum(matrix, dimension) {
                if (typeof (dimension) === 'undefined') {
                    dimension = 0;
                }
                var rows = matrix.length,
                    cols = matrix[0].length,
                    theSum, i, j;

                if (dimension === -1) {
                    theSum = [0];
                    for (i = 0; i < rows; i++) {
                        for (j = 0; j < cols; j++) {
                            theSum[0] += matrix[i][j];
                        }
                    }
                } else if (dimension === 0) {
                    theSum = new Array(cols);
                    for (j = 0; j < cols; j++) {
                        theSum[j] = 0;
                        for (i = 0; i < rows; i++) {
                            theSum[j] += matrix[i][j];
                        }
                    }
                } else if (dimension === 1) {
                    theSum = new Array(rows);
                    for (j = 0; j < rows; j++) {
                        theSum[j] = 0;
                        for (i = 0; i < cols; i++) {
                            theSum[j] += matrix[j][i];
                        }
                    }
                } else {
                    throw new Error('Invalid dimension');
                }
                return theSum;
            };

            exports.product = function product(matrix, dimension) {
                if (typeof (dimension) === 'undefined') {
                    dimension = 0;
                }
                var rows = matrix.length,
                    cols = matrix[0].length,
                    theProduct, i, j;

                if (dimension === -1) {
                    theProduct = [1];
                    for (i = 0; i < rows; i++) {
                        for (j = 0; j < cols; j++) {
                            theProduct[0] *= matrix[i][j];
                        }
                    }
                } else if (dimension === 0) {
                    theProduct = new Array(cols);
                    for (j = 0; j < cols; j++) {
                        theProduct[j] = 1;
                        for (i = 0; i < rows; i++) {
                            theProduct[j] *= matrix[i][j];
                        }
                    }
                } else if (dimension === 1) {
                    theProduct = new Array(rows);
                    for (j = 0; j < rows; j++) {
                        theProduct[j] = 1;
                        for (i = 0; i < cols; i++) {
                            theProduct[j] *= matrix[j][i];
                        }
                    }
                } else {
                    throw new Error('Invalid dimension');
                }
                return theProduct;
            };

            exports.standardDeviation = function standardDeviation(matrix, means, unbiased) {
                var vari = exports.variance(matrix, means, unbiased), l = vari.length;
                for (var i = 0; i < l; i++) {
                    vari[i] = Math.sqrt(vari[i]);
                }
                return vari;
            };

            exports.variance = function variance(matrix, means, unbiased) {
                if (typeof (unbiased) === 'undefined') {
                    unbiased = true;
                }
                means = means || exports.mean(matrix);
                var rows = matrix.length;
                if (rows === 0) return [];
                var cols = matrix[0].length;
                var vari = new Array(cols);

                for (var j = 0; j < cols; j++) {
                    var sum1 = 0, sum2 = 0, x = 0;
                    for (var i = 0; i < rows; i++) {
                        x = matrix[i][j] - means[j];
                        sum1 += x;
                        sum2 += x * x;
                    }
                    if (unbiased) {
                        vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);
                    } else {
                        vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;
                    }
                }
                return vari;
            };

            exports.median = function median(matrix) {
                var rows = matrix.length, cols = matrix[0].length;
                var medians = new Array(cols);

                for (var i = 0; i < cols; i++) {
                    var data = new Array(rows);
                    for (var j = 0; j < rows; j++) {
                        data[j] = matrix[j][i];
                    }
                    data.sort(compareNumbers);
                    var N = data.length;
                    if (N % 2 === 0) {
                        medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;
                    } else {
                        medians[i] = data[Math.floor(N / 2)];
                    }
                }
                return medians;
            };

            exports.mode = function mode(matrix) {
                var rows = matrix.length,
                    cols = matrix[0].length,
                    modes = new Array(cols),
                    i, j;
                for (i = 0; i < cols; i++) {
                    var itemCount = new Array(rows);
                    for (var k = 0; k < rows; k++) {
                        itemCount[k] = 0;
                    }
                    var itemArray = new Array(rows);
                    var count = 0;

                    for (j = 0; j < rows; j++) {
                        var index = itemArray.indexOf(matrix[j][i]);
                        if (index >= 0) {
                            itemCount[index]++;
                        } else {
                            itemArray[count] = matrix[j][i];
                            itemCount[count] = 1;
                            count++;
                        }
                    }

                    var maxValue = 0, maxIndex = 0;
                    for (j = 0; j < count; j++) {
                        if (itemCount[j] > maxValue) {
                            maxValue = itemCount[j];
                            maxIndex = j;
                        }
                    }

                    modes[i] = itemArray[maxIndex];
                }
                return modes;
            };

            exports.skewness = function skewness(matrix, unbiased) {
                if (typeof (unbiased) === 'undefined') unbiased = true;
                var means = exports.mean(matrix);
                var n = matrix.length, l = means.length;
                var skew = new Array(l);

                for (var j = 0; j < l; j++) {
                    var s2 = 0, s3 = 0;
                    for (var i = 0; i < n; i++) {
                        var dev = matrix[i][j] - means[j];
                        s2 += dev * dev;
                        s3 += dev * dev * dev;
                    }

                    var m2 = s2 / n;
                    var m3 = s3 / n;
                    var g = m3 / Math.pow(m2, 3 / 2);

                    if (unbiased) {
                        var a = Math.sqrt(n * (n - 1));
                        var b = n - 2;
                        skew[j] = (a / b) * g;
                    } else {
                        skew[j] = g;
                    }
                }
                return skew;
            };

            exports.kurtosis = function kurtosis(matrix, unbiased) {
                if (typeof (unbiased) === 'undefined') unbiased = true;
                var means = exports.mean(matrix);
                var n = matrix.length, m = matrix[0].length;
                var kurt = new Array(m);

                for (var j = 0; j < m; j++) {
                    var s2 = 0, s4 = 0;
                    for (var i = 0; i < n; i++) {
                        var dev = matrix[i][j] - means[j];
                        s2 += dev * dev;
                        s4 += dev * dev * dev * dev;
                    }
                    var m2 = s2 / n;
                    var m4 = s4 / n;

                    if (unbiased) {
                        var v = s2 / (n - 1);
                        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));
                        var b = s4 / (v * v);
                        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));
                        kurt[j] = a * b - 3 * c;
                    } else {
                        kurt[j] = m4 / (m2 * m2) - 3;
                    }
                }
                return kurt;
            };

            exports.standardError = function standardError(matrix) {
                var samples = matrix.length;
                var standardDeviations = exports.standardDeviation(matrix);
                var l = standardDeviations.length;
                var standardErrors = new Array(l);
                var sqrtN = Math.sqrt(samples);

                for (var i = 0; i < l; i++) {
                    standardErrors[i] = standardDeviations[i] / sqrtN;
                }
                return standardErrors;
            };

            exports.covariance = function covariance(matrix, dimension) {
                return exports.scatter(matrix, undefined, dimension);
            };

            exports.scatter = function scatter(matrix, divisor, dimension) {
                if (typeof (dimension) === 'undefined') {
                    dimension = 0;
                }
                if (typeof (divisor) === 'undefined') {
                    if (dimension === 0) {
                        divisor = matrix.length - 1;
                    } else if (dimension === 1) {
                        divisor = matrix[0].length - 1;
                    }
                }
                var means = exports.mean(matrix, dimension);
                var rows = matrix.length;
                if (rows === 0) {
                    return [[]];
                }
                var cols = matrix[0].length,
                    cov, i, j, s, k;

                if (dimension === 0) {
                    cov = new Array(cols);
                    for (i = 0; i < cols; i++) {
                        cov[i] = new Array(cols);
                    }
                    for (i = 0; i < cols; i++) {
                        for (j = i; j < cols; j++) {
                            s = 0;
                            for (k = 0; k < rows; k++) {
                                s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);
                            }
                            s /= divisor;
                            cov[i][j] = s;
                            cov[j][i] = s;
                        }
                    }
                } else if (dimension === 1) {
                    cov = new Array(rows);
                    for (i = 0; i < rows; i++) {
                        cov[i] = new Array(rows);
                    }
                    for (i = 0; i < rows; i++) {
                        for (j = i; j < rows; j++) {
                            s = 0;
                            for (k = 0; k < cols; k++) {
                                s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);
                            }
                            s /= divisor;
                            cov[i][j] = s;
                            cov[j][i] = s;
                        }
                    }
                } else {
                    throw new Error('Invalid dimension');
                }

                return cov;
            };

            exports.correlation = function correlation(matrix) {
                var means = exports.mean(matrix),
                    standardDeviations = exports.standardDeviation(matrix, true, means),
                    scores = exports.zScores(matrix, means, standardDeviations),
                    rows = matrix.length,
                    cols = matrix[0].length,
                    i, j;

                var cor = new Array(cols);
                for (i = 0; i < cols; i++) {
                    cor[i] = new Array(cols);
                }
                for (i = 0; i < cols; i++) {
                    for (j = i; j < cols; j++) {
                        var c = 0;
                        for (var k = 0, l = scores.length; k < l; k++) {
                            c += scores[k][j] * scores[k][i];
                        }
                        c /= rows - 1;
                        cor[i][j] = c;
                        cor[j][i] = c;
                    }
                }
                return cor;
            };

            exports.zScores = function zScores(matrix, means, standardDeviations) {
                means = means || exports.mean(matrix);
                if (typeof (standardDeviations) === 'undefined') standardDeviations = exports.standardDeviation(matrix, true, means);
                return exports.standardize(exports.center(matrix, means, false), standardDeviations, true);
            };

            exports.center = function center(matrix, means, inPlace) {
                means = means || exports.mean(matrix);
                var result = matrix,
                    l = matrix.length,
                    i, j, jj;

                if (!inPlace) {
                    result = new Array(l);
                    for (i = 0; i < l; i++) {
                        result[i] = new Array(matrix[i].length);
                    }
                }

                for (i = 0; i < l; i++) {
                    var row = result[i];
                    for (j = 0, jj = row.length; j < jj; j++) {
                        row[j] = matrix[i][j] - means[j];
                    }
                }
                return result;
            };

            exports.standardize = function standardize(matrix, standardDeviations, inPlace) {
                if (typeof (standardDeviations) === 'undefined') standardDeviations = exports.standardDeviation(matrix);
                var result = matrix,
                    l = matrix.length,
                    i, j, jj;

                if (!inPlace) {
                    result = new Array(l);
                    for (i = 0; i < l; i++) {
                        result[i] = new Array(matrix[i].length);
                    }
                }

                for (i = 0; i < l; i++) {
                    var resultRow = result[i];
                    var sourceRow = matrix[i];
                    for (j = 0, jj = resultRow.length; j < jj; j++) {
                        if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {
                            resultRow[j] = sourceRow[j] / standardDeviations[j];
                        }
                    }
                }
                return result;
            };

            exports.weightedVariance = function weightedVariance(matrix, weights) {
                var means = exports.mean(matrix);
                var rows = matrix.length;
                if (rows === 0) return [];
                var cols = matrix[0].length;
                var vari = new Array(cols);

                for (var j = 0; j < cols; j++) {
                    var sum = 0;
                    var a = 0, b = 0;

                    for (var i = 0; i < rows; i++) {
                        var z = matrix[i][j] - means[j];
                        var w = weights[i];

                        sum += w * (z * z);
                        b += w;
                        a += w * w;
                    }

                    vari[j] = sum * (b / (b * b - a));
                }

                return vari;
            };

            exports.weightedMean = function weightedMean(matrix, weights, dimension) {
                if (typeof (dimension) === 'undefined') {
                    dimension = 0;
                }
                var rows = matrix.length;
                if (rows === 0) return [];
                var cols = matrix[0].length,
                    means, i, ii, j, w, row;

                if (dimension === 0) {
                    means = new Array(cols);
                    for (i = 0; i < cols; i++) {
                        means[i] = 0;
                    }
                    for (i = 0; i < rows; i++) {
                        row = matrix[i];
                        w = weights[i];
                        for (j = 0; j < cols; j++) {
                            means[j] += row[j] * w;
                        }
                    }
                } else if (dimension === 1) {
                    means = new Array(rows);
                    for (i = 0; i < rows; i++) {
                        means[i] = 0;
                    }
                    for (j = 0; j < rows; j++) {
                        row = matrix[j];
                        w = weights[j];
                        for (i = 0; i < cols; i++) {
                            means[j] += row[i] * w;
                        }
                    }
                } else {
                    throw new Error('Invalid dimension');
                }

                var weightSum = array.sum(weights);
                if (weightSum !== 0) {
                    for (i = 0, ii = means.length; i < ii; i++) {
                        means[i] /= weightSum;
                    }
                }
                return means;
            };

            exports.weightedCovariance = function weightedCovariance(matrix, weights, means, dimension) {
                dimension = dimension || 0;
                means = means || exports.weightedMean(matrix, weights, dimension);
                var s1 = 0, s2 = 0;
                for (var i = 0, ii = weights.length; i < ii; i++) {
                    s1 += weights[i];
                    s2 += weights[i] * weights[i];
                }
                var factor = s1 / (s1 * s1 - s2);
                return exports.weightedScatter(matrix, weights, means, factor, dimension);
            };

            exports.weightedScatter = function weightedScatter(matrix, weights, means, factor, dimension) {
                dimension = dimension || 0;
                means = means || exports.weightedMean(matrix, weights, dimension);
                if (typeof (factor) === 'undefined') {
                    factor = 1;
                }
                var rows = matrix.length;
                if (rows === 0) {
                    return [[]];
                }
                var cols = matrix[0].length,
                    cov, i, j, k, s;

                if (dimension === 0) {
                    cov = new Array(cols);
                    for (i = 0; i < cols; i++) {
                        cov[i] = new Array(cols);
                    }
                    for (i = 0; i < cols; i++) {
                        for (j = i; j < cols; j++) {
                            s = 0;
                            for (k = 0; k < rows; k++) {
                                s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);
                            }
                            cov[i][j] = s * factor;
                            cov[j][i] = s * factor;
                        }
                    }
                } else if (dimension === 1) {
                    cov = new Array(rows);
                    for (i = 0; i < rows; i++) {
                        cov[i] = new Array(rows);
                    }
                    for (i = 0; i < rows; i++) {
                        for (j = i; j < rows; j++) {
                            s = 0;
                            for (k = 0; k < cols; k++) {
                                s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);
                            }
                            cov[i][j] = s * factor;
                            cov[j][i] = s * factor;
                        }
                    }
                } else {
                    throw new Error('Invalid dimension');
                }

                return cov;
            };
            });
            var matrix_1 = matrix.max;
            var matrix_2 = matrix.min;
            var matrix_3 = matrix.minMax;
            var matrix_4 = matrix.entropy;
            var matrix_5 = matrix.mean;
            var matrix_6 = matrix.sum;
            var matrix_7 = matrix.product;
            var matrix_8 = matrix.standardDeviation;
            var matrix_9 = matrix.variance;
            var matrix_10 = matrix.median;
            var matrix_11 = matrix.mode;
            var matrix_12 = matrix.skewness;
            var matrix_13 = matrix.kurtosis;
            var matrix_14 = matrix.standardError;
            var matrix_15 = matrix.covariance;
            var matrix_16 = matrix.scatter;
            var matrix_17 = matrix.correlation;
            var matrix_18 = matrix.zScores;
            var matrix_19 = matrix.center;
            var matrix_20 = matrix.standardize;
            var matrix_21 = matrix.weightedVariance;
            var matrix_22 = matrix.weightedMean;
            var matrix_23 = matrix.weightedCovariance;
            var matrix_24 = matrix.weightedScatter;

            const Matrix$3 = src$2.Matrix;
            const EVD = src$2.EVD;
            const SVD = src$2.SVD;

            const mean$2 = matrix.mean;
            const stdev = matrix.standardDeviation;

            const defaultOptions$4 = {
                isCovarianceMatrix: false,
                center: true,
                scale: false
            };

            /**
             * Creates new PCA (Principal Component Analysis) from the dataset
             * @param {Matrix} dataset - dataset or covariance matrix
             * @param {Object} options
             * @param {boolean} [options.isCovarianceMatrix=false] - true if the dataset is a covariance matrix
             * @param {boolean} [options.center=true] - should the data be centered (subtract the mean)
             * @param {boolean} [options.scale=false] - should the data be scaled (divide by the standard deviation)
             * */
            class PCA {
                constructor(dataset, options) {
                    if (dataset === true) {
                        const model = options;
                        this.center = model.center;
                        this.scale = model.scale;
                        this.means = model.means;
                        this.stdevs = model.stdevs;
                        this.U = Matrix$3.checkMatrix(model.U);
                        this.S = model.S;
                        return;
                    }

                    options = Object.assign({}, defaultOptions$4, options);

                    this.center = false;
                    this.scale = false;
                    this.means = null;
                    this.stdevs = null;

                    if (options.isCovarianceMatrix) { // user provided a covariance matrix instead of dataset
                        this._computeFromCovarianceMatrix(dataset);
                        return;
                    }

                    var useCovarianceMatrix;
                    if (typeof options.useCovarianceMatrix === 'boolean') {
                        useCovarianceMatrix = options.useCovarianceMatrix;
                    } else {
                        useCovarianceMatrix = dataset.length > dataset[0].length;
                    }

                    if (useCovarianceMatrix) { // user provided a dataset but wants us to compute and use the covariance matrix
                        dataset = this._adjust(dataset, options);
                        const covarianceMatrix = dataset.transposeView().mmul(dataset).div(dataset.rows - 1);
                        this._computeFromCovarianceMatrix(covarianceMatrix);
                    } else {
                        dataset = this._adjust(dataset, options);
                        var svd = new SVD(dataset, {
                            computeLeftSingularVectors: false,
                            computeRightSingularVectors: true,
                            autoTranspose: true
                        });

                        this.U = svd.rightSingularVectors;

                        const singularValues = svd.diagonal;
                        const eigenvalues = new Array(singularValues.length);
                        for (var i = 0; i < singularValues.length; i++) {
                            eigenvalues[i] = singularValues[i] * singularValues[i] / (dataset.length - 1);
                        }
                        this.S = eigenvalues;
                    }
                }

                /**
                 * Load a PCA model from JSON
                 * @param {Object} model
                 * @return {PCA}
                 */
                static load(model) {
                    if (model.name !== 'PCA')
                        throw new RangeError('Invalid model: ' + model.name);
                    return new PCA(true, model);
                }


                /**
                 * Project the dataset into the PCA space
                 * @param {Matrix} dataset
                 * @param {Object} options
                 * @return {Matrix} dataset projected in the PCA space
                 */
                predict(dataset, options = {}) {
                    const {
                       nComponents = this.U.columns
                    } = options;

                    dataset = new Matrix$3(dataset);
                    if (this.center) {
                        dataset.subRowVector(this.means);
                        if (this.scale) {
                            dataset.divRowVector(this.stdevs);
                        }
                    }

                    var predictions = dataset.mmul(this.U);
                    return predictions.subMatrix(0, predictions.rows - 1, 0, nComponents - 1);
                }

                /**
                 * Returns the proportion of variance for each component
                 * @return {[number]}
                 */
                getExplainedVariance() {
                    var sum = 0;
                    for (var i = 0; i < this.S.length; i++) {
                        sum += this.S[i];
                    }
                    return this.S.map(value => value / sum);
                }

                /**
                 * Returns the cumulative proportion of variance
                 * @return {[number]}
                 */
                getCumulativeVariance() {
                    var explained = this.getExplainedVariance();
                    for (var i = 1; i < explained.length; i++) {
                        explained[i] += explained[i - 1];
                    }
                    return explained;
                }

                /**
                 * Returns the Eigenvectors of the covariance matrix
                 * @returns {Matrix}
                 */
                getEigenvectors() {
                    return this.U;
                }

                /**
                 * Returns the Eigenvalues (on the diagonal)
                 * @returns {[number]}
                 */
                getEigenvalues() {
                    return this.S;
                }

                /**
                 * Returns the standard deviations of the principal components
                 * @returns {[number]}
                 */
                getStandardDeviations() {
                    return this.S.map(x => Math.sqrt(x));
                }

                /**
                 * Returns the loadings matrix
                 * @return {Matrix}
                 */
                getLoadings() {
                    return this.U.transpose();
                }

                /**
                 * Export the current model to a JSON object
                 * @return {Object} model
                 */
                toJSON() {
                    return {
                        name: 'PCA',
                        center: this.center,
                        scale: this.scale,
                        means: this.means,
                        stdevs: this.stdevs,
                        U: this.U,
                        S: this.S,
                    };
                }

                _adjust(dataset, options) {
                    this.center = !!options.center;
                    this.scale = !!options.scale;

                    dataset = new Matrix$3(dataset);

                    if (this.center) {
                        const means = mean$2(dataset);
                        const stdevs = this.scale ? stdev(dataset, means, true) : null;
                        this.means = means;
                        dataset.subRowVector(means);
                        if (this.scale) {
                            for (var i = 0; i < stdevs.length; i++) {
                                if (stdevs[i] === 0) {
                                    throw new RangeError('Cannot scale the dataset (standard deviation is zero at index ' + i);
                                }
                            }
                            this.stdevs = stdevs;
                            dataset.divRowVector(stdevs);
                        }
                    }

                    return dataset;
                }

                _computeFromCovarianceMatrix(dataset) {
                    const evd = new EVD(dataset, {assumeSymmetric: true});
                    this.U = evd.eigenvectorMatrix;
                    for (var i = 0; i < this.U.length; i++) {
                        this.U[i].reverse();
                    }
                    this.S = evd.realEigenvalues.reverse();
                }
            }

            var pca = PCA;

            function squaredEuclidean(p, q) {
                var d = 0;
                for (var i = 0; i < p.length; i++) {
                    d += (p[i] - q[i]) * (p[i] - q[i]);
                }
                return d;
            }

            function euclidean(p, q) {
                return Math.sqrt(squaredEuclidean(p, q));
            }

            var euclidean_1 = euclidean;
            euclidean.squared = squaredEuclidean;

            var heap = createCommonjsModule(function (module, exports) {
            // Generated by CoffeeScript 1.8.0
            (function() {
              var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

              floor = Math.floor, min = Math.min;


              /*
              Default comparison function to be used
               */

              defaultCmp = function(x, y) {
                if (x < y) {
                  return -1;
                }
                if (x > y) {
                  return 1;
                }
                return 0;
              };


              /*
              Insert item x in list a, and keep it sorted assuming a is sorted.
              
              If x is already in a, insert it to the right of the rightmost x.
              
              Optional args lo (default 0) and hi (default a.length) bound the slice
              of a to be searched.
               */

              insort = function(a, x, lo, hi, cmp) {
                var mid;
                if (lo == null) {
                  lo = 0;
                }
                if (cmp == null) {
                  cmp = defaultCmp;
                }
                if (lo < 0) {
                  throw new Error('lo must be non-negative');
                }
                if (hi == null) {
                  hi = a.length;
                }
                while (lo < hi) {
                  mid = floor((lo + hi) / 2);
                  if (cmp(x, a[mid]) < 0) {
                    hi = mid;
                  } else {
                    lo = mid + 1;
                  }
                }
                return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);
              };


              /*
              Push item onto heap, maintaining the heap invariant.
               */

              heappush = function(array, item, cmp) {
                if (cmp == null) {
                  cmp = defaultCmp;
                }
                array.push(item);
                return _siftdown(array, 0, array.length - 1, cmp);
              };


              /*
              Pop the smallest item off the heap, maintaining the heap invariant.
               */

              heappop = function(array, cmp) {
                var lastelt, returnitem;
                if (cmp == null) {
                  cmp = defaultCmp;
                }
                lastelt = array.pop();
                if (array.length) {
                  returnitem = array[0];
                  array[0] = lastelt;
                  _siftup(array, 0, cmp);
                } else {
                  returnitem = lastelt;
                }
                return returnitem;
              };


              /*
              Pop and return the current smallest value, and add the new item.
              
              This is more efficient than heappop() followed by heappush(), and can be
              more appropriate when using a fixed size heap. Note that the value
              returned may be larger than item! That constrains reasonable use of
              this routine unless written as part of a conditional replacement:
                  if item > array[0]
                    item = heapreplace(array, item)
               */

              heapreplace = function(array, item, cmp) {
                var returnitem;
                if (cmp == null) {
                  cmp = defaultCmp;
                }
                returnitem = array[0];
                array[0] = item;
                _siftup(array, 0, cmp);
                return returnitem;
              };


              /*
              Fast version of a heappush followed by a heappop.
               */

              heappushpop = function(array, item, cmp) {
                var _ref;
                if (cmp == null) {
                  cmp = defaultCmp;
                }
                if (array.length && cmp(array[0], item) < 0) {
                  _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
                  _siftup(array, 0, cmp);
                }
                return item;
              };


              /*
              Transform list into a heap, in-place, in O(array.length) time.
               */

              heapify = function(array, cmp) {
                var i, _i, _len, _ref1, _results, _results1;
                if (cmp == null) {
                  cmp = defaultCmp;
                }
                _ref1 = (function() {
                  _results1 = [];
                  for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }
                  return _results1;
                }).apply(this).reverse();
                _results = [];
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  i = _ref1[_i];
                  _results.push(_siftup(array, i, cmp));
                }
                return _results;
              };


              /*
              Update the position of the given item in the heap.
              This function should be called every time the item is being modified.
               */

              updateItem = function(array, item, cmp) {
                var pos;
                if (cmp == null) {
                  cmp = defaultCmp;
                }
                pos = array.indexOf(item);
                if (pos === -1) {
                  return;
                }
                _siftdown(array, 0, pos, cmp);
                return _siftup(array, pos, cmp);
              };


              /*
              Find the n largest elements in a dataset.
               */

              nlargest = function(array, n, cmp) {
                var elem, result, _i, _len, _ref;
                if (cmp == null) {
                  cmp = defaultCmp;
                }
                result = array.slice(0, n);
                if (!result.length) {
                  return result;
                }
                heapify(result, cmp);
                _ref = array.slice(n);
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  elem = _ref[_i];
                  heappushpop(result, elem, cmp);
                }
                return result.sort(cmp).reverse();
              };


              /*
              Find the n smallest elements in a dataset.
               */

              nsmallest = function(array, n, cmp) {
                var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
                if (cmp == null) {
                  cmp = defaultCmp;
                }
                if (n * 10 <= array.length) {
                  result = array.slice(0, n).sort(cmp);
                  if (!result.length) {
                    return result;
                  }
                  los = result[result.length - 1];
                  _ref = array.slice(n);
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    elem = _ref[_i];
                    if (cmp(elem, los) < 0) {
                      insort(result, elem, 0, null, cmp);
                      result.pop();
                      los = result[result.length - 1];
                    }
                  }
                  return result;
                }
                heapify(array, cmp);
                _results = [];
                for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
                  _results.push(heappop(array, cmp));
                }
                return _results;
              };

              _siftdown = function(array, startpos, pos, cmp) {
                var newitem, parent, parentpos;
                if (cmp == null) {
                  cmp = defaultCmp;
                }
                newitem = array[pos];
                while (pos > startpos) {
                  parentpos = (pos - 1) >> 1;
                  parent = array[parentpos];
                  if (cmp(newitem, parent) < 0) {
                    array[pos] = parent;
                    pos = parentpos;
                    continue;
                  }
                  break;
                }
                return array[pos] = newitem;
              };

              _siftup = function(array, pos, cmp) {
                var childpos, endpos, newitem, rightpos, startpos;
                if (cmp == null) {
                  cmp = defaultCmp;
                }
                endpos = array.length;
                startpos = pos;
                newitem = array[pos];
                childpos = 2 * pos + 1;
                while (childpos < endpos) {
                  rightpos = childpos + 1;
                  if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
                    childpos = rightpos;
                  }
                  array[pos] = array[childpos];
                  pos = childpos;
                  childpos = 2 * pos + 1;
                }
                array[pos] = newitem;
                return _siftdown(array, startpos, pos, cmp);
              };

              Heap = (function() {
                Heap.push = heappush;

                Heap.pop = heappop;

                Heap.replace = heapreplace;

                Heap.pushpop = heappushpop;

                Heap.heapify = heapify;

                Heap.updateItem = updateItem;

                Heap.nlargest = nlargest;

                Heap.nsmallest = nsmallest;

                function Heap(cmp) {
                  this.cmp = cmp != null ? cmp : defaultCmp;
                  this.nodes = [];
                }

                Heap.prototype.push = function(x) {
                  return heappush(this.nodes, x, this.cmp);
                };

                Heap.prototype.pop = function() {
                  return heappop(this.nodes, this.cmp);
                };

                Heap.prototype.peek = function() {
                  return this.nodes[0];
                };

                Heap.prototype.contains = function(x) {
                  return this.nodes.indexOf(x) !== -1;
                };

                Heap.prototype.replace = function(x) {
                  return heapreplace(this.nodes, x, this.cmp);
                };

                Heap.prototype.pushpop = function(x) {
                  return heappushpop(this.nodes, x, this.cmp);
                };

                Heap.prototype.heapify = function() {
                  return heapify(this.nodes, this.cmp);
                };

                Heap.prototype.updateItem = function(x) {
                  return updateItem(this.nodes, x, this.cmp);
                };

                Heap.prototype.clear = function() {
                  return this.nodes = [];
                };

                Heap.prototype.empty = function() {
                  return this.nodes.length === 0;
                };

                Heap.prototype.size = function() {
                  return this.nodes.length;
                };

                Heap.prototype.clone = function() {
                  var heap;
                  heap = new Heap();
                  heap.nodes = this.nodes.slice(0);
                  return heap;
                };

                Heap.prototype.toArray = function() {
                  return this.nodes.slice(0);
                };

                Heap.prototype.insert = Heap.prototype.push;

                Heap.prototype.top = Heap.prototype.peek;

                Heap.prototype.front = Heap.prototype.peek;

                Heap.prototype.has = Heap.prototype.contains;

                Heap.prototype.copy = Heap.prototype.clone;

                return Heap;

              })();

              (function(root, factory) {
                {
                  return module.exports = factory();
                }
              })(this, function() {
                return Heap;
              });

            }).call(commonjsGlobal);
            });

            var heap$1 = heap;

            function Cluster() {
                this.children = [];
                this.distance = -1;
                this.index = [];
            }

            /**
             * Creates an array of values where maximum distance smaller than the threshold
             * @param {number} threshold
             * @return {Array <Cluster>}
             */
            Cluster.prototype.cut = function (threshold) {
                if (threshold < 0) throw new RangeError('Threshold too small');
                var root = new Cluster();
                root.children = this.children;
                root.distance = this.distance;
                root.index = this.index;
                var list = [root];
                var ans = [];
                while (list.length > 0) {
                    var aux = list.shift();
                    if (threshold >= aux.distance) {
                        ans.push(aux);
                    } else {
                        list = list.concat(aux.children);
                    }
                }
                return ans;
            };

            /**
             * Merge the leaves in the minimum way to have 'minGroups' number of clusters
             * @param {number} minGroups - Them minimum number of children the first level of the tree should have
             * @return {Cluster}
             */
            Cluster.prototype.group = function (minGroups) {
                if (!Number.isInteger(minGroups) || minGroups < 1) throw new RangeError('Number of groups must be a positive integer');

                const heap = new heap$1(function (a, b) {
                    return b.distance - a.distance;
                });

                heap.push(this);

                while (heap.size() < minGroups) {
                    var first = heap.pop();
                    if (first.children.length === 0) {
                        break;
                    }
                    first.children.forEach(child => heap.push(child));
                }

                var root = new Cluster();
                root.children = heap.toArray();
                root.distance = this.distance;

                return root;
            };

            /**
             * Traverses the tree depth-first and provide callback to be called on each individual node
             * @param {function} cb - The callback to be called on each node encounter
             * @type {Cluster}
             */
            Cluster.prototype.traverse = function (cb) {
                function visit(root, callback) {
                    callback(root);
                    if (root.children) {
                        for (var i = root.children.length - 1; i >= 0; i--) {
                            visit(root.children[i], callback);
                        }
                    }
                }
                visit(this, cb);
            };

            var Cluster_1 = Cluster;

            function ClusterLeaf(index) {
                Cluster_1.call(this);
                this.index = index;
                this.distance = 0;
                this.children = [];
            }

            util$2.inherits(ClusterLeaf, Cluster_1);

            var ClusterLeaf_1 = ClusterLeaf;

            /**
             * Computes a distance/similarity matrix given an array of data and a distance/similarity function.
             * @param {Array} data An array of data
             * @param {function} distanceFn  A function that accepts two arguments and computes a distance/similarity between them
             * @return {Array<Array>} The similarity matrix. The similarity matrix is square and has a size equal to the length of
             * the data array
             */
            function distanceMatrix(data, distanceFn) {
                const length = data.length;
                let result = Array.from({length}).map(() => Array.from({length}));

                // Compute upper distance matrix
                for (let i = 0; i < length; i++) {
                    for (let j = 0; j <= i; j++) {
                        result[i][j] = distanceFn(data[i], data[j]);
                    }
                }

                // Copy to lower distance matrix
                for (let i = 0; i < length; i++) {
                    for (let j = i + 1; j < length; j++) {
                        result[i][j] = result[j][i];
                    }
                }

                return result;
            }

            var src$3 = distanceMatrix;

            /**
             * @private
             * @param cluster1
             * @param cluster2
             * @param disFun
             * @returns {number}
             */
            function simpleLink(cluster1, cluster2, disFun) {
                var m = 10e100;
                for (var i = 0; i < cluster1.length; i++) {
                    for (var j = 0; j < cluster2.length; j++) {
                        var d = disFun[cluster1[i]][ cluster2[j]];
                        m = Math.min(d, m);
                    }
                }
                return m;
            }

            /**
             * @private
             * @param cluster1
             * @param cluster2
             * @param disFun
             * @returns {number}
             */
            function completeLink(cluster1, cluster2, disFun) {
                var m = -1;
                for (var i = 0; i < cluster1.length; i++) {
                    for (var j = 0; j < cluster2.length; j++) {
                        var d = disFun[cluster1[i]][ cluster2[j]];
                        m = Math.max(d, m);
                    }
                }
                return m;
            }

            /**
             * @private
             * @param cluster1
             * @param cluster2
             * @param disFun
             * @returns {number}
             */
            function averageLink(cluster1, cluster2, disFun) {
                var m = 0;
                for (var i = 0; i < cluster1.length; i++) {
                    for (var j = 0; j < cluster2.length; j++) {
                        m += disFun[cluster1[i]][ cluster2[j]];
                    }
                }
                return m / (cluster1.length * cluster2.length);
            }

            /**
             * @private
             * @param cluster1
             * @param cluster2
             * @param disFun
             * @returns {*}
             */
            function centroidLink(cluster1, cluster2, disFun) {
                var dist = new Array(cluster1.length * cluster2.length);
                for (var i = 0; i < cluster1.length; i++) {
                    for (var j = 0; j < cluster2.length; j++) {
                        dist[i * cluster2.length + j] = (disFun[cluster1[i]][ cluster2[j]]);
                    }
                }
                return median$1(dist);
            }

            /**
             * @private
             * @param cluster1
             * @param cluster2
             * @param disFun
             * @returns {number}
             */
            function wardLink(cluster1, cluster2, disFun) {
                return centroidLink(cluster1, cluster2, disFun)
                    * cluster1.length * cluster2.length / (cluster1.length + cluster2.length);
            }

            function compareNumbers(a, b) {
                return a - b;
            }

            function median$1(values, alreadySorted) {
                if (alreadySorted === undefined) alreadySorted = false;
                if (!alreadySorted) {
                    values = [].concat(values).sort(compareNumbers);
                }
                var l = values.length;
                var half = Math.floor(l / 2);
                if (l % 2 === 0) {
                    return (values[half - 1] + values[half]) * 0.5;
                } else {
                    return values[half];
                }
            }

            var defaultOptions$5 = {
                disFunc: euclidean_1,
                kind: 'single',
                isDistanceMatrix: false

            };

            /**
             * Continuously merge nodes that have the least dissimilarity
             * @param {Array <Array <number>>} distance - Array of points to be clustered
             * @param {json} options
             * @option isDistanceMatrix: Is the input a distance matrix?
             * @constructor
             */
            function agnes(data, options) {
                options = Object.assign({}, defaultOptions$5, options);
                var len = data.length;
                var distance = data;//If source
                if (!options.isDistanceMatrix) {
                    distance = src$3(data, options.disFunc);
                }


                // allows to use a string or a given function
                if (typeof options.kind === 'string') {
                    switch (options.kind) {
                        case 'single':
                            options.kind = simpleLink;
                            break;
                        case 'complete':
                            options.kind = completeLink;
                            break;
                        case 'average':
                            options.kind = averageLink;
                            break;
                        case 'centroid':
                            options.kind = centroidLink;
                            break;
                        case 'ward':
                            options.kind = wardLink;
                            break;
                        default:
                            throw new RangeError('Unknown kind of similarity');
                    }
                } else if (typeof options.kind !== 'function') {
                    throw new TypeError('Undefined kind of similarity');
                }

                var list = new Array(len);
                for (var i = 0; i < distance.length; i++) {
                    list[i] = new ClusterLeaf_1(i);
                }
                var min = 10e5,
                    d = {},
                    dis = 0;

                while (list.length > 1) {
                    // calculates the minimum distance
                    d = {};
                    min = 10e5;
                    for (var j = 0; j < list.length; j++) {
                        for (var k = j + 1; k < list.length; k++) {
                            var fdistance, sdistance;
                            if (list[j] instanceof ClusterLeaf_1) {
                                fdistance = [list[j].index];
                            } else {
                                fdistance = new Array(list[j].index.length);
                                for (var e = 0; e < fdistance.length; e++) {
                                    fdistance[e] = list[j].index[e].index;
                                }
                            }
                            if (list[k] instanceof ClusterLeaf_1) {
                                sdistance = [list[k].index];
                            } else {
                                sdistance = new Array(list[k].index.length);
                                for (var f = 0; f < sdistance.length; f++) {
                                    sdistance[f] = list[k].index[f].index;
                                }
                            }
                            dis = options.kind(fdistance, sdistance, distance).toFixed(4);
                            if (dis in d) {
                                d[dis].push([list[j], list[k]]);
                            } else {
                                d[dis] = [[list[j], list[k]]];
                            }
                            min = Math.min(dis, min);
                        }
                    }
                    // cluster dots
                    var dmin = d[min.toFixed(4)];
                    var clustered = new Array(dmin.length);
                    var aux,
                        count = 0;
                    while (dmin.length > 0) {
                        aux = dmin.shift();
                        for (var q = 0; q < dmin.length; q++) {
                            var int = dmin[q].filter(function (n) {
                                //noinspection JSReferencingMutableVariableFromClosure
                                return aux.indexOf(n) !== -1;
                            });
                            if (int.length > 0) {
                                var diff = dmin[q].filter(function (n) {
                                    //noinspection JSReferencingMutableVariableFromClosure
                                    return aux.indexOf(n) === -1;
                                });
                                aux = aux.concat(diff);
                                dmin.splice(q--, 1);
                            }
                        }
                        clustered[count++] = aux;
                    }
                    clustered.length = count;

                    for (var ii = 0; ii < clustered.length; ii++) {
                        var obj = new Cluster_1();
                        obj.children = clustered[ii].concat();
                        obj.distance = min;
                        obj.index = new Array(len);
                        var indCount = 0;
                        for (var jj = 0; jj < clustered[ii].length; jj++) {
                            if (clustered[ii][jj] instanceof ClusterLeaf_1) {
                                obj.index[indCount++] = clustered[ii][jj];
                            } else {
                                indCount += clustered[ii][jj].index.length;
                                obj.index = clustered[ii][jj].index.concat(obj.index);
                            }
                            list.splice((list.indexOf(clustered[ii][jj])), 1);
                        }
                        obj.index.length = indCount;
                        list.push(obj);
                    }
                }
                return list[0];
            }

            var agnes_1 = agnes;

            /**
             * @private
             * @param {Array <Array <number>>} cluster1
             * @param {Array <Array <number>>} cluster2
             * @param {function} disFun
             * @returns {number}
             */
            function simpleLink$1(cluster1, cluster2, disFun) {
                var m = 10e100;
                for (var i = 0; i < cluster1.length; i++) {
                    for (var j = i; j < cluster2.length; j++) {
                        var d = disFun(cluster1[i], cluster2[j]);
                        m = Math.min(d, m);
                    }
                }
                return m;
            }

            /**
             * @private
             * @param {Array <Array <number>>} cluster1
             * @param {Array <Array <number>>} cluster2
             * @param {function} disFun
             * @returns {number}
             */
            function completeLink$1(cluster1, cluster2, disFun) {
                var m = -1;
                for (var i = 0; i < cluster1.length; i++) {
                    for (var j = i; j < cluster2.length; j++) {
                        var d = disFun(cluster1[i], cluster2[j]);
                        m = Math.max(d, m);
                    }
                }
                return m;
            }

            /**
             * @private
             * @param {Array <Array <number>>} cluster1
             * @param {Array <Array <number>>} cluster2
             * @param {function} disFun
             * @returns {number}
             */
            function averageLink$1(cluster1, cluster2, disFun) {
                var m = 0;
                for (var i = 0; i < cluster1.length; i++) {
                    for (var j = 0; j < cluster2.length; j++) {
                        m += disFun(cluster1[i], cluster2[j]);
                    }
                }
                return m / (cluster1.length * cluster2.length);
            }

            /**
             * @private
             * @param {Array <Array <number>>} cluster1
             * @param {Array <Array <number>>} cluster2
             * @param {function} disFun
             * @returns {number}
             */
            function centroidLink$1(cluster1, cluster2, disFun) {
                var x1 = 0,
                    y1 = 0,
                    x2 = 0,
                    y2 = 0;
                for (var i = 0; i < cluster1.length; i++) {
                    x1 += cluster1[i][0];
                    y1 += cluster1[i][1];
                }
                for (var j = 0; j < cluster2.length; j++) {
                    x2 += cluster2[j][0];
                    y2 += cluster2[j][1];
                }
                x1 /= cluster1.length;
                y1 /= cluster1.length;
                x2 /= cluster2.length;
                y2 /= cluster2.length;
                return disFun([x1, y1], [x2, y2]);
            }

            /**
             * @private
             * @param {Array <Array <number>>} cluster1
             * @param {Array <Array <number>>} cluster2
             * @param {function} disFun
             * @returns {number}
             */
            function wardLink$1(cluster1, cluster2, disFun) {
                var x1 = 0,
                    y1 = 0,
                    x2 = 0,
                    y2 = 0;
                for (var i = 0; i < cluster1.length; i++) {
                    x1 += cluster1[i][0];
                    y1 += cluster1[i][1];
                }
                for (var j = 0; j < cluster2.length; j++) {
                    x2 += cluster2[j][0];
                    y2 += cluster2[j][1];
                }
                x1 /= cluster1.length;
                y1 /= cluster1.length;
                x2 /= cluster2.length;
                y2 /= cluster2.length;
                return disFun([x1, y1], [x2, y2]) * cluster1.length * cluster2.length / (cluster1.length + cluster2.length);
            }

            /**
             * @private
             * Returns the most distant point and his distance
             * @param {Array <Array <number>>} splitting - Clusters to split
             * @param {Array <Array <number>>} data - Original data
             * @param {function} disFun - Distance function
             * @returns {{d: number, p: number}} - d: maximum difference between points, p: the point more distant
             */
            function diff(splitting, data, disFun) {
                var ans = {
                    d: 0,
                    p: 0
                };

                var Ci = new Array(splitting[0].length);
                for (var e = 0; e < splitting[0].length; e++) {
                    Ci[e] = data[splitting[0][e]];
                }
                var Cj = new Array(splitting[1].length);
                for (var f = 0; f < splitting[1].length; f++) {
                    Cj[f] = data[splitting[1][f]];
                }

                var dist, ndist;
                for (var i = 0; i < Ci.length; i++) {
                    dist = 0;
                    for (var j = 0; j < Ci.length; j++) {
                        if (i !== j) {
                            dist += disFun(Ci[i], Ci[j]);
                        }
                    }
                    dist /= (Ci.length - 1);
                    ndist = 0;
                    for (var k = 0; k < Cj.length; k++) {
                        ndist += disFun(Ci[i], Cj[k]);
                    }
                    ndist /= Cj.length;
                    if ((dist - ndist) > ans.d) {
                        ans.d = (dist - ndist);
                        ans.p = i;
                    }
                }
                return ans;
            }

            var defaultOptions$6 = {
                dist: euclidean_1,
                kind: 'single'
            };

            /**
             * @private
             * Intra-cluster distance
             * @param {Array} index
             * @param {Array} data
             * @param {function} disFun
             * @returns {number}
             */
            function intrDist(index, data, disFun) {
                var dist = 0,
                    count = 0;
                for (var i = 0; i < index.length; i++) {
                    for (var j = i; j < index.length; j++) {
                        dist += disFun(data[index[i].index], data[index[j].index]);
                        count++;
                    }
                }
                return dist / count;
            }

            /**
             * Splits the higher level clusters
             * @param {Array <Array <number>>} data - Array of points to be clustered
             * @param {json} options
             * @constructor
             */
            function diana(data, options) {
                options = Object.assign({}, defaultOptions$6, options);
                if (typeof options.kind === 'string') {
                    switch (options.kind) {
                        case 'single':
                            options.kind = simpleLink$1;
                            break;
                        case 'complete':
                            options.kind = completeLink$1;
                            break;
                        case 'average':
                            options.kind = averageLink$1;
                            break;
                        case 'centroid':
                            options.kind = centroidLink$1;
                            break;
                        case 'ward':
                            options.kind = wardLink$1;
                            break;
                        default:
                            throw new RangeError('Unknown kind of similarity');
                    }
                } else if (typeof options.kind !== 'function') {
                    throw new TypeError('Undefined kind of similarity');
                }
                var tree = new Cluster_1();
                tree.children = new Array(data.length);
                tree.index = new Array(data.length);
                for (var ind = 0; ind < data.length; ind++) {
                    tree.children[ind] = new ClusterLeaf_1(ind);
                    tree.index[ind] = new ClusterLeaf_1(ind);
                }

                tree.distance = intrDist(tree.index, data, options.dist);
                var m, M, clId,
                    dist, rebel;
                var list = [tree];
                while (list.length > 0) {
                    M = 0;
                    clId = 0;
                    for (var i = 0; i < list.length; i++) {
                        m = 0;
                        for (var j = 0; j < list[i].length; j++) {
                            for (var l = (j + 1); l < list[i].length; l++) {
                                m = Math.max(options.dist(data[list[i].index[j].index], data[list[i].index[l].index]), m);
                            }
                        }
                        if (m > M) {
                            M = m;
                            clId = i;
                        }
                    }
                    M = 0;
                    if (list[clId].index.length === 2) {
                        list[clId].children = [list[clId].index[0], list[clId].index[1]];
                        list[clId].distance = options.dist(data[list[clId].index[0].index], data[list[clId].index[1].index]);
                    } else if (list[clId].index.length === 3) {
                        list[clId].children = [list[clId].index[0], list[clId].index[1], list[clId].index[2]];
                        var d = [
                            options.dist(data[list[clId].index[0].index], data[list[clId].index[1].index]),
                            options.dist(data[list[clId].index[1].index], data[list[clId].index[2].index])
                        ];
                        list[clId].distance = (d[0] + d[1]) / 2;
                    } else {
                        var C = new Cluster_1();
                        var sG = new Cluster_1();
                        var splitting = [new Array(list[clId].index.length), []];
                        for (var spl = 0; spl < splitting[0].length; spl++) {
                            splitting[0][spl] = spl;
                        }
                        for (var ii = 0; ii < splitting[0].length; ii++) {
                            dist = 0;
                            for (var jj = 0; jj < splitting[0].length; jj++) {
                                if (ii !== jj) {
                                    dist += options.dist(data[list[clId].index[splitting[0][jj]].index], data[list[clId].index[splitting[0][ii]].index]);
                                }
                            }
                            dist /= (splitting[0].length - 1);
                            if (dist > M) {
                                M = dist;
                                rebel = ii;
                            }
                        }
                        splitting[1] = [rebel];
                        splitting[0].splice(rebel, 1);
                        dist = diff(splitting, data, options.dist);
                        while (dist.d > 0) {
                            splitting[1].push(splitting[0][dist.p]);
                            splitting[0].splice(dist.p, 1);
                            dist = diff(splitting, data, options.dist);
                        }
                        var fData = new Array(splitting[0].length);
                        C.index = new Array(splitting[0].length);
                        for (var e = 0; e < fData.length; e++) {
                            fData[e] = data[list[clId].index[splitting[0][e]].index];
                            C.index[e] = list[clId].index[splitting[0][e]];
                            C.children[e] = list[clId].index[splitting[0][e]];
                        }
                        var sData = new Array(splitting[1].length);
                        sG.index = new Array(splitting[1].length);
                        for (var f = 0; f < sData.length; f++) {
                            sData[f] = data[list[clId].index[splitting[1][f]].index];
                            sG.index[f] = list[clId].index[splitting[1][f]];
                            sG.children[f] = list[clId].index[splitting[1][f]];
                        }
                        C.distance = intrDist(C.index, data, options.dist);
                        sG.distance = intrDist(sG.index, data, options.dist);
                        list.push(C);
                        list.push(sG);
                        list[clId].children = [C, sG];
                    }
                    list.splice(clId, 1);
                }
                return tree;
            }

            var diana_1 = diana;

            var agnes$1 = agnes_1;
            var diana$1 = diana_1;
            //exports.birch = require('./birch');
            //exports.cure = require('./cure');
            //exports.chameleon = require('./chameleon');

            var src$4 = {
            	agnes: agnes$1,
            	diana: diana$1
            };

            const squaredDistance = euclidean_1.squared;

            const defaultOptions$7 = {
                distanceFunction: squaredDistance,
                similarityFunction: false,
                returnVector: false
            };

            /**
             * Find the nearest vector in a list to a sample vector
             * @param {Array<Array<number>>} listVectors - List of vectors with same dimensions
             * @param {Array<number>} vector - Reference vector to "classify"
             * @param {object} [options] - Options object
             * @param {function} [options.distanceFunction = squaredDistance] - Function that receives two vectors and return their distance value as number
             * @param {function} [options.similarityFunction = undefined] - Function that receives two vectors and return their similarity value as number
             * @param {boolean} [options.returnVector = false] - Return the nearest vector instead of its index
             * @return {number|Array<number>} - The index or the content of the nearest vector
             */
            function nearestVector(listVectors, vector, options) {
                options = options || defaultOptions$7;
                const distanceFunction = options.distanceFunction || defaultOptions$7.distanceFunction;
                const similarityFunction = options.similarityFunction || defaultOptions$7.similarityFunction;
                const returnVector = options.returnVector || defaultOptions$7.returnVector;

                var vectorIndex = -1;
                if (typeof similarityFunction === 'function') {

                    // maximum similarity
                    var maxSim = Number.MIN_VALUE;
                    for (var j = 0; j < listVectors.length; j++) {
                        var sim = similarityFunction(vector, listVectors[j]);
                        if (sim > maxSim) {
                            maxSim = sim;
                            vectorIndex = j;
                        }
                    }
                } else if (typeof distanceFunction === 'function') {

                    // minimum distance
                    var minDist = Number.MAX_VALUE;
                    for (var i = 0; i < listVectors.length; i++) {
                        var dist = distanceFunction(vector, listVectors[i]);
                        if (dist < minDist) {
                            minDist = dist;
                            vectorIndex = i;
                        }
                    }
                } else {
                    throw new Error('A similarity or distance function it\'s required');
                }

                if (returnVector) {
                    return listVectors[vectorIndex];
                } else {
                    return vectorIndex;
                }
            }

            var src$5 = nearestVector;

            /**
             * Calculates the distance matrix for a given array of points
             * @ignore
             * @param {Array<Array<Number>>} data - the [x,y,z,...] points to cluster
             * @param {Function} distance - Distance function to use between the points
             * @return {Array<Array<Number>>} - matrix with the distance values
             */
            function calculateDistanceMatrix(data, distance) {
                var distanceMatrix = new Array(data.length);
                for (var i = 0; i < data.length; ++i) {
                    for (var j = i; j < data.length; ++j) {
                        if (!distanceMatrix[i]) {
                            distanceMatrix[i] = new Array(data.length);
                        }
                        if (!distanceMatrix[j]) {
                            distanceMatrix[j] = new Array(data.length);
                        }
                        const dist = distance(data[i], data[j]);
                        distanceMatrix[i][j] = dist;
                        distanceMatrix[j][i] = dist;
                    }
                }
                return distanceMatrix;
            }

            /**
             * Updates the cluster identifier based in the new data
             * @ignore
             * @param {Array<Array<Number>>} data - the [x,y,z,...] points to cluster
             * @param {Array<Array<Number>>} centers - the K centers in format [x,y,z,...]
             * @param {Array <Number>} clusterID - the cluster identifier for each data dot
             * @param {Function} distance - Distance function to use between the points
             * @returns {Array} the cluster identifier for each data dot
             */
            function updateClusterID(data, centers, clusterID, distance) {
                for (var i = 0; i < data.length; i++) {
                    clusterID[i] = src$5(centers, data[i], {distanceFunction: distance});
                }
                return clusterID;
            }

            /**
             * Update the center values based in the new configurations of the clusters
             * @ignore
             * @param {Array <Array <Number>>} data - the [x,y,z,...] points to cluster
             * @param {Array <Number>} clusterID - the cluster identifier for each data dot
             * @param {Number} K - Number of clusters
             * @returns {Array} he K centers in format [x,y,z,...]
             */
            function updateCenters(data, clusterID, K) {
                const nDim = data[0].length;

                // creates empty centers with 0 size
                var centers = new Array(K);
                var centersLen = new Array(K);
                for (var i = 0; i < K; i++) {
                    centers[i] = new Array(nDim);
                    centersLen[i] = 0;
                    for (var j = 0; j < nDim; j++) {
                        centers[i][j] = 0;
                    }
                }

                // add the value for all dimensions of the point
                for (var l = 0; l < data.length; l++) {
                    centersLen[clusterID[l]]++;
                    for (var dim = 0; dim < nDim; dim++) {
                        centers[clusterID[l]][dim] += data[l][dim];
                    }
                }

                // divides by length
                for (var id = 0; id < K; id++) {
                    for (var d = 0; d < nDim; d++) {
                        centers[id][d] /= centersLen[id];
                    }
                }
                return centers;
            }

            /**
             * The centers have moved more than the tolerance value?
             * @ignore
             * @param {Array<Array<Number>>} centers - the K centers in format [x,y,z,...]
             * @param {Array<Array<Number>>} oldCenters - the K old centers in format [x,y,z,...]
             * @param {Function} distanceFunction - Distance function to use between the points
             * @param {Number} tolerance - Allowed distance for the centroids to move
             * @return {boolean}
             */
            function converged(centers, oldCenters, distanceFunction, tolerance) {
                for (var i = 0; i < centers.length; i++) {
                    if (distanceFunction(centers[i], oldCenters[i]) > tolerance) {
                        return false;
                    }
                }
                return true;
            }

            var updateClusterID_1 = updateClusterID;
            var updateCenters_1 = updateCenters;
            var calculateDistanceMatrix_1 = calculateDistanceMatrix;
            var converged_1 = converged;

            var utils = {
            	updateClusterID: updateClusterID_1,
            	updateCenters: updateCenters_1,
            	calculateDistanceMatrix: calculateDistanceMatrix_1,
            	converged: converged_1
            };

            var Picker = createCommonjsModule(function (module) {
            (function(undefined) {

              // Node.js usage:
              //
              // var Picker = require('RandomSelection').Picker;
              // var greetingPicker = new Picker(['hello', 'hi', 'howdy']);
              // var greeting = greetingPicker.pick();

              // Our namespace. Exported members will be attached to this.
              var ns;

              // Set our namespace based on whether we are running in Node.js or the browser.
              if (module.exports) {
                // We are running in Node.
                ns = module.exports;
              }
              else {
                // We are running in the browser.
                // `this` is the `window`.
                // Use window.RandomSelection as our namespace.
                ns = this.RandomSelection = {};
              }

              // Gets a shallow copy of the given array.
              function clone(arr) {
              	var newArr = [];
              	for (var i=0; i<arr.length; i++) {
              		newArr.push(arr[i]);
              	}
              	return newArr;
              }

              // Gets a random option until all options have been returns. Then cycles again.
              function pick() {
                if (this._remainingOptions.length === 0) {
                  this._remainingOptions = clone(this._originalOptions);
                }

                var index = Math.floor(Math.random() * this._remainingOptions.length);
                return this._remainingOptions.splice(index, 1)[0];
              }

              // Export our Picker object.
              ns.Picker = function(arrayOfOptions) {
                this._originalOptions = arrayOfOptions;
                this._remainingOptions = [];
              };

              ns.Picker.prototype = {
                pick: pick
              };

            }).call(commonjsGlobal);
            });

            const Picker$1 = Picker.Picker;

            /**
             * Choose K different random points from the original data
             * @ignore
             * @param {Array<Array<Number>>} data - Points in the format to cluster [x,y,z,...]
             * @param {Number} K - Number of clusters
             * @return {Array<Array<Number>>} - Initial random points
             */
            function random$1(data, K) {
                const rand = new Picker$1(data);
                var ans = new Array(K);

                for (var i = 0; i < K; ++i) {
                    ans[i] = rand.pick();
                }
                return ans;
            }

            /**
             * Chooses the most distant points to a first random pick
             * @ignore
             * @param {Array<Array<Number>>} data - Points in the format to cluster [x,y,z,...]
             * @param {Number} K - Number of clusters
             * @param {Array<Array<Number>>} distanceMatrix - matrix with the distance values
             * @return {Array<Array<Number>>} - Initial random points
             */
            function mostDistant(data, K, distanceMatrix) {
                var ans = new Array(K);

                // chooses a random point as initial cluster
                ans[0] = Math.floor(Math.random() * data.length);

                if (K > 1) {
                    // chooses the more distant point
                    var maxDist = {dist: -1, index: -1};
                    for (var l = 0; l < data.length; ++l) {
                        if (distanceMatrix[ans[0]][l] > maxDist.dist) {
                            maxDist.dist = distanceMatrix[ans[0]][l];
                            maxDist.index = l;
                        }
                    }
                    ans[1] = maxDist.index;

                    if (K > 2) {
                        // chooses the set of points that maximises the min distance
                        for (var k = 2; k < K; ++k) {
                            var center = {dist: -1, index: -1};
                            for (var m = 0; m < data.length; ++m) {

                                // minimum distance to centers
                                var minDistCent = {dist: Number.MAX_VALUE, index: -1};
                                for (var n = 0; n < k; ++n) {
                                    if (distanceMatrix[n][m] < minDistCent.dist && ans.indexOf(m) === -1) {
                                        minDistCent = {
                                            dist: distanceMatrix[n][m],
                                            index: m
                                        };
                                    }
                                }

                                if (minDistCent.dist !== Number.MAX_VALUE && minDistCent.dist > center.dist) {
                                    center = Object.assign({}, minDistCent);
                                }
                            }

                            ans[k] = center.index;
                        }
                    }
                }

                return ans.map((index) => data[index]);
            }

            var random_1 = random$1;
            var mostDistant_1 = mostDistant;

            var initialization = {
            	random: random_1,
            	mostDistant: mostDistant_1
            };

            const distanceSymbol = Symbol('distance');

            /**
             * Result of the kmeans algorithm
             * @param {Array<Number>} clusters - the cluster identifier for each data dot
             * @param {Array<Array<Object>>} centroids - the K centers in format [x,y,z,...], the error and size of the cluster
             * @param {Boolean} converged - Converge criteria satisfied
             * @param {Number} iterations - Current number of iterations
             * @param {Function} distance - (*Private*) Distance function to use between the points
             * @constructor
             */
            function KMeansResult(clusters, centroids, converged, iterations, distance) {
                this.clusters = clusters;
                this.centroids = centroids;
                this.converged = converged;
                this.iterations = iterations;
                this[distanceSymbol] = distance;
            }

            /**
             * Allows to compute for a new array of points their cluster id
             * @param {Array<Array<Number>>} data - the [x,y,z,...] points to cluster
             * @return {Array<Number>} - cluster id for each point
             */
            KMeansResult.prototype.nearest = function (data) {
                var clusterID = new Array(data.length);
                var centroids = this.centroids.map(function (centroid) {
                    return centroid.centroid;
                });
                return utils.updateClusterID(data, centroids, clusterID, this[distanceSymbol]);
            };

            /**
             * Returns a KMeansResult with the error and size of the cluster
             * @ignore
             * @param {Array<Array<Number>>} data - the [x,y,z,...] points to cluster
             * @return {KMeansResult}
             */
            KMeansResult.prototype.computeInformation = function (data) {
                var enrichedCentroids = this.centroids.map(function (centroid) {
                    return {
                        centroid: centroid,
                        error: 0,
                        size: 0
                    };
                });

                for (var i = 0; i < data.length; i++) {
                    enrichedCentroids[this.clusters[i]].error += this[distanceSymbol](data[i], this.centroids[this.clusters[i]]);
                    enrichedCentroids[this.clusters[i]].size++;
                }

                for (var j = 0; j < this.centroids.length; j++) {
                    enrichedCentroids[j].error /= enrichedCentroids[j].size;
                }

                return new KMeansResult(this.clusters, enrichedCentroids, this.converged, this.iterations, this[distanceSymbol]);
            };

            var KMeansResult_1 = KMeansResult;

            const squaredDistance$1 = euclidean_1.squared;

            const defaultOptions$8 = {
                maxIterations: 100,
                tolerance: 1e-6,
                withIterations: false,
                initialization: 'mostDistant',
                distanceFunction: squaredDistance$1
            };

            /**
             * Each step operation for kmeans
             * @ignore
             * @param {Array<Array<Number>>} centers - the K centers in format [x,y,z,...]
             * @param {Array<Array<Number>>} data - the [x,y,z,...] points to cluster
             * @param {Array<Number>} clusterID - the cluster identifier for each data dot
             * @param {Number} K - Number of clusters
             * @param {Object} [options] - Option object
             * @param {Number} iterations - Current number of iterations
             * @return {KMeansResult}
             */
            function step(centers, data, clusterID, K, options, iterations) {
                clusterID = utils.updateClusterID(data, centers, clusterID, options.distanceFunction);
                var newCenters = utils.updateCenters(data, clusterID, K);
                var converged = utils.converged(newCenters, centers, options.distanceFunction, options.tolerance);
                return new KMeansResult_1(clusterID, newCenters, converged, iterations, options.distanceFunction);
            }

            /**
             * Generator version for the algorithm
             * @ignore
             * @param {Array<Array<Number>>} centers - the K centers in format [x,y,z,...]
             * @param {Array<Array<Number>>} data - the [x,y,z,...] points to cluster
             * @param {Array<Number>} clusterID - the cluster identifier for each data dot
             * @param {Number} K - Number of clusters
             * @param {Object} [options] - Option object
             */
            function* kmeansGenerator(centers, data, clusterID, K, options) {
                var converged = false;
                var stepNumber = 0;
                var stepResult;
                while (!converged && (stepNumber < options.maxIterations)) {
                    stepResult = step(centers, data, clusterID, K, options, ++stepNumber);
                    yield stepResult.computeInformation(data);
                    converged = stepResult.converged;
                    centers = stepResult.centroids;
                }
            }

            /**
             * K-means algorithm
             * @param {Array<Array<Number>>} data - Points in the format to cluster [x,y,z,...]
             * @param {Number} K - Number of clusters
             * @param {Object} [options] - Option object
             * @param {Number} [options.maxIterations = 100] - Maximum of iterations allowed
             * @param {Number} [options.tolerance = 1e-6] - Error tolerance
             * @param {Boolean} [options.withIterations = false] - Store clusters and centroids for each iteration
             * @param {Function} [options.distanceFunction = squaredDistance] - Distance function to use between the points
             * @param {String|Array<Array<Number>>} [options.initialization = 'moreDistant'] - K centers in format [x,y,z,...] or a method for initialize the data:
             *  * `'random'` will choose K random different values.
             *  * `'mostDistant'` will choose the more distant points to a first random pick
             * @returns {KMeansResult} - Cluster identifier for each data dot and centroids with the following fields:
             *  * `'clusters'`: Array of indexes for the clusters.
             *  * `'centroids'`: Array with the resulting centroids.
             *  * `'iterations'`: Number of iterations that took to converge
             */
            function kmeans(data, K, options) {
                options = Object.assign({}, defaultOptions$8, options);

                if (K <= 0 || K > data.length || !Number.isInteger(K)) {
                    throw new Error('K should be a positive integer bigger than the number of points');
                }

                var centers;
                if (Array.isArray(options.initialization)) {
                    if (options.initialization.length !== K) {
                        throw new Error('The initial centers should have the same length as K');
                    } else {
                        centers = options.initialization;
                    }
                } else {
                    switch (options.initialization) {
                        case 'random':
                            centers = initialization.random(data, K);
                            break;
                        case 'mostDistant':
                            centers = initialization.mostDistant(data, K, utils.calculateDistanceMatrix(data, options.distanceFunction));
                            break;
                        default:
                            throw new Error('Unknown initialization method: "' + options.initialization + '"');
                    }
                }

                // infinite loop until convergence
                if (options.maxIterations === 0) {
                    options.maxIterations = Number.MAX_VALUE;
                }

                var clusterID = new Array(data.length);
                if (options.withIterations) {
                    return kmeansGenerator(centers, data, clusterID, K, options);
                } else {
                    var converged = false;
                    var stepNumber = 0;
                    var stepResult;
                    while (!converged && (stepNumber < options.maxIterations)) {
                        stepResult = step(centers, data, clusterID, K, options, ++stepNumber);
                        converged = stepResult.converged;
                        centers = stepResult.centroids;
                    }
                    return stepResult.computeInformation(data);
                }
            }

            var kmeans_1 = kmeans;

            const squaredEuclidean$1 = euclidean_1.squared;

            const defaultOptions$9 = {
                sigma: 1
            };

            class GaussianKernel {
                constructor(options) {
                    options = Object.assign({}, defaultOptions$9, options);
                    this.sigma = options.sigma;
                    this.divisor = 2 * options.sigma * options.sigma;
                }

                compute(x, y) {
                    const distance = squaredEuclidean$1(x, y);
                    return Math.exp(-distance / this.divisor);
                }
            }

            var gaussianKernel = GaussianKernel;

            const defaultOptions$a = {
                degree: 1,
                constant: 1,
                scale: 1
            };

            class PolynomialKernel {
                constructor(options) {
                    options = Object.assign({}, defaultOptions$a, options);

                    this.degree = options.degree;
                    this.constant = options.constant;
                    this.scale = options.scale;
                }

                compute(x, y) {
                    var sum = 0;
                    for (var i = 0; i < x.length; i++) {
                        sum += x[i] * y[i];
                    }
                    return Math.pow(this.scale * sum + this.constant, this.degree);
                }
            }

            var polynomialKernel = PolynomialKernel;

            const defaultOptions$b = {
                sigma: 1,
                degree: 1
            };

            class ANOVAKernel {
                constructor(options) {
                    options = Object.assign({}, defaultOptions$b, options);
                    this.sigma = options.sigma;
                    this.degree = options.degree;
                }

                compute(x, y) {
                    var sum = 0;
                    var len = Math.min(x.length, y.length);
                    for (var i = 1; i <= len; ++i) {
                        sum += Math.pow(Math.exp(-this.sigma * Math.pow(Math.pow(x[i - 1], i) -
                                Math.pow(y[i - 1], i), 2)), this.degree);
                    }
                    return sum;
                }
            }

            var anovaKernel = ANOVAKernel;

            const squaredEuclidean$2 = euclidean_1.squared;

            const defaultOptions$c = {
                sigma: 1
            };

            class CauchyKernel {
                constructor(options) {
                    options = Object.assign({}, defaultOptions$c, options);
                    this.sigma = options.sigma;
                }

                compute(x, y) {
                    return 1 / (1 + squaredEuclidean$2(x, y) / (this.sigma * this.sigma));
                }
            }

            var cauchyKernel = CauchyKernel;

            const defaultOptions$d = {
                sigma: 1
            };

            class ExponentialKernel {
                constructor(options) {
                    options = Object.assign({}, defaultOptions$d, options);
                    this.sigma = options.sigma;
                    this.divisor = 2 * options.sigma * options.sigma;
                }

                compute(x, y) {
                    const distance = euclidean_1(x, y);
                    return Math.exp(-distance / this.divisor);
                }
            }

            var exponentialKernel = ExponentialKernel;

            class HistogramIntersectionKernel {
                compute(x, y) {
                    var min = Math.min(x.length, y.length);
                    var sum = 0;
                    for (var i = 0; i < min; ++i) {
                        sum += Math.min(x[i], y[i]);
                    }

                    return sum;
                }
            }

            var histogramIntersectionKernel = HistogramIntersectionKernel;

            const defaultOptions$e = {
                sigma: 1
            };

            class LaplacianKernel {
                constructor(options) {
                    options = Object.assign({}, defaultOptions$e, options);
                    this.sigma = options.sigma;
                }

                compute(x, y) {
                    const distance = euclidean_1(x, y);
                    return Math.exp(-distance / this.sigma);
                }
            }

            var laplacianKernel = LaplacianKernel;

            const squaredEuclidean$3 = euclidean_1.squared;

            const defaultOptions$f = {
                constant: 1
            };

            class MultiquadraticKernel {
                constructor(options) {
                    options = Object.assign({}, defaultOptions$f, options);
                    this.constant = options.constant;
                }

                compute(x, y) {
                    return Math.sqrt(squaredEuclidean$3(x, y) + this.constant * this.constant);
                }
            }

            var multiquadraticKernel = MultiquadraticKernel;

            const squaredEuclidean$4 = euclidean_1.squared;

            const defaultOptions$g = {
                constant: 1
            };

            class RationalQuadraticKernel {
                constructor(options) {
                    options = Object.assign({}, defaultOptions$g, options);
                    this.constant = options.constant;
                }

                compute(x, y) {
                    const distance = squaredEuclidean$4(x, y);
                    return 1 - (distance / (distance + this.constant));
                }
            }

            var rationalQuadraticKernel = RationalQuadraticKernel;

            const defaultOptions$h = {
                alpha: 0.01,
                constant: -Math.E
            };

            class SigmoidKernel {
                constructor(options) {
                    options = Object.assign({}, defaultOptions$h, options);
                    this.alpha = options.alpha;
                    this.constant = options.constant;
                }

                compute(x, y) {
                    var sum = 0;
                    for (var i = 0; i < x.length; i++) {
                        sum += x[i] * y[i];
                    }
                    return Math.tanh(this.alpha * sum + this.constant);
                }
            }

            var sigmoidKernel = SigmoidKernel;

            const Matrix$4 = require$$0$2.Matrix;












            const kernelType = {
                gaussian: gaussianKernel,
                rbf: gaussianKernel,
                polynomial: polynomialKernel,
                poly: polynomialKernel,
                anova: anovaKernel,
                cauchy: cauchyKernel,
                exponential: exponentialKernel,
                histogram: histogramIntersectionKernel,
                min: histogramIntersectionKernel,
                laplacian: laplacianKernel,
                multiquadratic: multiquadraticKernel,
                rational: rationalQuadraticKernel,
                sigmoid: sigmoidKernel,
                mlp: sigmoidKernel
            };

            class Kernel {
                constructor(type, options) {
                    this.kernelType = type;
                    if (type === 'linear') return;

                    if (typeof type === 'string') {
                        type = type.toLowerCase();

                        var KernelConstructor = kernelType[type];
                        if (KernelConstructor) {
                            this.kernelFunction = new KernelConstructor(options);
                        } else {
                            throw new Error('unsupported kernel type: ' + type);
                        }
                    } else if (typeof type === 'object' && typeof type.compute === 'function') {
                        this.kernelFunction = type;
                    } else {
                        throw new TypeError('first argument must be a valid kernel type or instance');
                    }
                }

                compute(inputs, landmarks) {
                    if (landmarks === undefined) {
                        landmarks = inputs;
                    }

                    if (this.kernelType === 'linear') {
                        var matrix = new Matrix$4(inputs);
                        return matrix.mmul(new Matrix$4(landmarks).transposeView());
                    }

                    const kernelMatrix = new Matrix$4(inputs.length, landmarks.length);
                    var i, j;
                    if (inputs === landmarks) { // fast path, matrix is symmetric
                        for (i = 0; i < inputs.length; i++) {
                            for (j = i; j < inputs.length; j++) {
                                kernelMatrix[i][j] = kernelMatrix[j][i] = this.kernelFunction.compute(inputs[i], inputs[j]);
                            }
                        }
                    } else {
                        for (i = 0; i < inputs.length; i++) {
                            for (j = 0; j < landmarks.length; j++) {
                                kernelMatrix[i][j] = this.kernelFunction.compute(inputs[i], landmarks[j]);
                            }
                        }
                    }
                    return kernelMatrix;
                }
            }

            var kernel = Kernel;

            var array$1 = array;
            var matrix$1 = matrix;

            var mlStat = {
            	array: array$1,
            	matrix: matrix$1
            };

            const stat = mlStat.array;

            var defaultOptions$i = {
                C: 1,
                tol: 1e-4,
                maxPasses: 10,
                maxIterations: 10000,
                kernel: 'linear',
                alphaTol: 1e-6,
                random: Math.random,
                whitening: true
            };

            /**
             * Simplified version of the Sequential Minimal Optimization algorithm for training
             * support vector machines
             * @param {{Object}} options - SVM options
             * @param {Number} [options.C=1] - regularization parameter
             * @param {Number} [options.tol=1e-4] - numerical tolerance
             * @param {Number} [options.alphaTol=1e-6] - alpha tolerance, threshold to decide support vectors
             * @param {Number} [options.maxPasses=10] - max number of times to iterate over alphas without changing
             * @param {Number} [options.maxIterations=10000] - max number of iterations
             * @param {String} [options.kernel=linear] - the kind of kernel. {@link https://github.com/mljs/kernel/tree/1252de5f9012776e6e0eb06c7b434b8631fb21f0 List of kernels}
             * @param {Function} [options.random=Math.random] - custom random number generator
             * @constructor
             */
            function SVM(options) {
                this.options = Object.assign({}, defaultOptions$i, options);

                this.kernel = new kernel(this.options.kernel, this.options.kernelOptions);
                this.b = 0;
            }

            /**
             * Train the SVM model
             * @param {Array <Array <number>>} features - training data features
             * @param {Array <number>} labels - training data labels in the domain {1,-1}
             */
            SVM.prototype.train = function (features, labels) {
                if (features.length !== labels.length) {
                    throw new Error('Features and labels should have the same length');
                }
                if (features.length < 2) {
                    throw new Error('Cannot train with less than 2 observations');
                }
                this._trained = false;
                this._loaded = false;
                this.N = labels.length;
                this.D = features[0].length;
                if (this.options.whitening) {
                    this.X = new Array(this.N);
                    for (var i = 0; i < this.N; i++) {
                        this.X[i] = new Array(this.D);
                    }
                    this.minMax = new Array(this.D);
                    // Apply normalization and keep normalization parameters
                    for (var j = 0; j < this.D; j++) {
                        var d = new Array(this.N);
                        for (i = 0; i < this.N; i++) {
                            d[i] = features[i][j];
                        }
                        this.minMax[j] = stat.minMax(d);
                        for (i = 0; i < this.N; i++) {
                            this.X[i][j] = (features[i][j] - this.minMax[j].min) / (this.minMax[j].max - this.minMax[j].min);
                        }
                    }
                } else {
                    this.X = features;
                }
                this.Y = labels;
                this.b = 0;
                this.W = undefined;

                var kernel$$1 = this.kernel.compute(this.X);
                var m = labels.length;
                var alpha = new Array(m).fill(0);
                this.alphas = alpha;
                for (var a = 0; a < m; a++)
                    alpha[a] = 0;

                var b1 = 0,
                    b2 = 0,
                    iter = 0,
                    passes = 0,
                    Ei = 0,
                    Ej = 0,
                    ai = 0,
                    aj = 0,
                    L = 0,
                    H = 0,
                    eta = 0;

                while (passes < this.options.maxPasses && iter < this.options.maxIterations) {
                    var numChange = 0;
                    for (i = 0; i < m; i++) {
                        Ei = this._marginOnePrecomputed(i, kernel$$1) - labels[i];
                        if (labels[i] * Ei < -this.options.tol && alpha[i] < this.options.C || labels[i] * Ei > this.options.tol && alpha[i] > 0) {
                            j = i;
                            while (j === i) j = Math.floor(this.options.random() * m);
                            Ej = this._marginOnePrecomputed(j, kernel$$1) - labels[j];
                            ai = alpha[i];
                            aj = alpha[j];
                            if (labels[i] === labels[j]) {
                                L = Math.max(0, ai + aj - this.options.C);
                                H = Math.min(this.options.C, ai + aj);
                            } else  {
                                L = Math.max(0, aj - ai);
                                H = Math.min(this.options.C, this.options.C + aj + ai);
                            }
                            if (Math.abs(L - H) < 1e-4) continue;

                            eta = 2 * kernel$$1[i][j] - kernel$$1[i][i] - kernel$$1[j][j];
                            if (eta >= 0) continue;
                            var newaj = alpha[j] - labels[j] * (Ei - Ej) / eta;
                            if (newaj > H)
                                newaj = H;
                            else if (newaj < L)
                                newaj = L;
                            if (Math.abs(aj - newaj) < 10e-4) continue;
                            alpha[j] = newaj;
                            alpha[i] = alpha[i] + labels[i] * labels[j] * (aj - newaj);
                            b1 = this.b - Ei - labels[i] * (alpha[i] - ai) * kernel$$1[i][i] - labels[j] * (alpha[j] - aj) * kernel$$1[i][j];
                            b2 = this.b - Ej - labels[i] * (alpha[i] - ai) * kernel$$1[i][j] - labels[j] * (alpha[j] - aj) * kernel$$1[j][j];
                            this.b = (b1 + b2) / 2;
                            if (alpha[i] < this.options.C && alpha[i] > 0) this.b = b1;
                            if (alpha[j] < this.options.C && alpha[j] > 0) this.b = b2;
                            numChange += 1;
                        }
                    }
                    iter++;
                    if (numChange === 0)
                        passes += 1;
                    else
                        passes = 0;
                }
                if (iter === this.options.maxIterations) {
                    throw new Error('max iterations reached');
                }

                this.iterations = iter;

                // Compute the weights (useful for fast decision on new test instances when linear SVM)
                if (this.options.kernel === 'linear') {
                    this.W = new Array(this.D);
                    for (var r = 0; r < this.D; r++) {
                        this.W[r] = 0;
                        for (var w = 0; w < m; w++)
                            this.W[r] += labels[w] * alpha[w] * this.X[w][r];
                    }
                }

                // Keep only support vectors
                // It will compute decision on new test instances faster
                // We also keep the index of the support vectors
                // in the original data
                var nX = [];
                var nY = [];
                var nAlphas = [];
                this._supportVectorIdx = [];
                for (i = 0; i < this.N; i++) {
                    if (this.alphas[i] > this.options.alphaTol) {
                        nX.push(this.X[i]);
                        nY.push(labels[i]);
                        nAlphas.push(this.alphas[i]);
                        this._supportVectorIdx.push(i);

                    }
                }
                this.X = nX;
                this.Y = nY;
                this.N = nX.length;
                this.alphas = nAlphas;


                // A flag to say this SVM has been trained
                this._trained = true;
            };

            /**
             * Get prediction ({-1,1}) given one observation's features.
             * @private
             * @param p The observation's features.
             * @returns {number} Classification result ({-1,1})
             */
            SVM.prototype.predictOne = function (p) {
                var margin = this.marginOne(p);
                return margin > 0 ? 1 : -1;
            };

            /**
             * Predict the classification outcome of a trained svm given one or several observations' features.
             * @param {Array} features - The observation(s)' features
             * @returns {Array<Number>|Number} An array of {-1, 1} if several observations are given or a number if one observation
             * is given
             */
            SVM.prototype.predict = function (features) {
                if (!this._trained && !this._loaded) throw new Error('Cannot predict, you need to train the SVM first');
                if (Array.isArray(features) && Array.isArray(features[0])) {
                    return features.map(this.predictOne.bind(this));
                } else {
                    return this.predictOne(features);
                }
            };

            /**
             * Get margin given one observation's features
             * @private
             * @param {Array<Number>} features - Features
             * @returns {Number} - The computed margin
             */
            SVM.prototype.marginOne = function (features, noWhitening) {
                // Apply normalization
                if (this.options.whitening && !noWhitening) {
                    features = this._applyWhitening(features);
                }
                var ans = this.b, i;
                if (this.options.kernel === 'linear' && this.W) {
                    // Use weights, it's faster
                    for (i = 0; i < this.W.length; i++) {
                        ans += this.W[i] * features[i];
                    }
                } else {
                    for (i = 0; i < this.N; i++) {
                        ans += this.alphas[i] * this.Y[i] * this.kernel.compute([features], [this.X[i]])[0][0];
                    }
                }
                return ans;
            };


            /**
             * Get a margin using the precomputed kernel. Much faster than normal margin computation
             * @private
             * @param {Number} index - Train data index
             * @param {Array< Array<Number> >} kernel - The precomputed kernel
             * @returns {number} Computed margin
             * @private
             */
            SVM.prototype._marginOnePrecomputed = function (index, kernel$$1) {
                var ans = this.b, i;
                for (i = 0; i < this.N; i++) {
                    ans += this.alphas[i] * this.Y[i] * kernel$$1[index][i];
                }
                return ans;
            };


            /**
             * Returns the margin of one or several observations given its features
             * @param {Array <Array<Number> >|Array<Number>} features - Features from on or several observations.
             * @returns {Number|Array} The computed margin. Is an Array if several observations' features given, or a Number if
             * only one observation's features given
             */
            SVM.prototype.margin = function (features) {
                if (Array.isArray(features)) {
                    return features.map(this.marginOne.bind(this));
                } else {
                    return this.marginOne(features);
                }
            };

            /**
             * Get support vectors indexes of the trained classifier. WARINNG: this method does not work for svm instances
             * created from {@link #SVM.load load} if linear kernel
             * @returns {Array<Number>} The indices in the training vector of the support vectors
             */
            SVM.prototype.supportVectors = function () {
                if (!this._trained && !this._loaded) throw new Error('Cannot get support vectors, you need to train the SVM first');
                if (this._loaded && this.options.kernel === 'linear') throw new Error('Cannot get support vectors from saved linear model, you need to train the SVM to have them');
                return this._supportVectorIdx;
            };

            /**
             * Create a SVM instance from a saved model
             * @param {Object} model -  Object such as returned by a trained SVM instance with {@link #SVM#toJSON toJSON}
             * @returns {SVM} Instance of svm classifier
             */
            SVM.load = function (model) {
                this._loaded = true;
                this._trained = false;
                var svm = new SVM(model.options);
                if (model.options.kernel === 'linear') {
                    svm.W = model.W.slice();
                    svm.D = svm.W.length;
                } else {
                    svm.X = model.X.slice();
                    svm.Y = model.Y.slice();
                    svm.alphas = model.alphas.slice();
                    svm.N = svm.X.length;
                    svm.D = svm.X[0].length;
                }
                svm.minMax = model.minMax;
                svm.b = model.b;
                svm._loaded = true;
                svm._trained = false;
                return svm;
            };

            /**
             * Export the minimal object that enables to reload the model
             * @returns {Object} Model object that can be reused with {@link #SVM.load load}
             */
            SVM.prototype.toJSON = function () {
                if (!this._trained && !this._loaded) throw new Error('Cannot export, you need to train the SVM first');
                var model = {};
                model.options = Object.assign({}, this.options);
                model.b = this.b;
                model.minMax = this.minMax;
                if (model.options.kernel === 'linear') {
                    model.W = this.W.slice();
                } else {
                    // Exporting non-linear models is heavier
                    model.X = this.X.slice();
                    model.Y = this.Y.slice();
                    model.alphas = this.alphas.slice();
                }
                return model;
            };

            SVM.prototype._applyWhitening = function (features) {
                if (!this.minMax) throw new Error('Could not apply whitening');
                var whitened = new Array(features.length);
                for (var j = 0; j < features.length; j++) {
                    whitened[j] = (features[j] - this.minMax[j].min) / (this.minMax[j].max - this.minMax[j].min);
                }
                return whitened;
            };

            var svm = SVM;

            if (!Symbol.species) {
                Symbol.species = Symbol.for('@@species');
            }

            /**
             * @class LuDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs
             * @param {Matrix} matrix
             */
            class LuDecomposition$$1 {
                constructor(matrix) {
                    matrix = WrapperMatrix2D$3.checkMatrix(matrix);

                    var lu = matrix.clone();
                    var rows = lu.rows;
                    var columns = lu.columns;
                    var pivotVector = new Array(rows);
                    var pivotSign = 1;
                    var i, j, k, p, s, t, v;
                    var LUcolj, kmax;

                    for (i = 0; i < rows; i++) {
                        pivotVector[i] = i;
                    }

                    LUcolj = new Array(rows);

                    for (j = 0; j < columns; j++) {

                        for (i = 0; i < rows; i++) {
                            LUcolj[i] = lu.get(i, j);
                        }

                        for (i = 0; i < rows; i++) {
                            kmax = Math.min(i, j);
                            s = 0;
                            for (k = 0; k < kmax; k++) {
                                s += lu.get(i, k) * LUcolj[k];
                            }
                            LUcolj[i] -= s;
                            lu.set(i, j, LUcolj[i]);
                        }

                        p = j;
                        for (i = j + 1; i < rows; i++) {
                            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {
                                p = i;
                            }
                        }

                        if (p !== j) {
                            for (k = 0; k < columns; k++) {
                                t = lu.get(p, k);
                                lu.set(p, k, lu.get(j, k));
                                lu.set(j, k, t);
                            }

                            v = pivotVector[p];
                            pivotVector[p] = pivotVector[j];
                            pivotVector[j] = v;

                            pivotSign = -pivotSign;
                        }

                        if (j < rows && lu.get(j, j) !== 0) {
                            for (i = j + 1; i < rows; i++) {
                                lu.set(i, j, lu.get(i, j) / lu.get(j, j));
                            }
                        }
                    }

                    this.LU = lu;
                    this.pivotVector = pivotVector;
                    this.pivotSign = pivotSign;
                }

                /**
                 *
                 * @return {boolean}
                 */
                isSingular() {
                    var data = this.LU;
                    var col = data.columns;
                    for (var j = 0; j < col; j++) {
                        if (data[j][j] === 0) {
                            return true;
                        }
                    }
                    return false;
                }

                /**
                 *
                 * @param {Matrix} value
                 * @return {Matrix}
                 */
                solve(value) {
                    value = Matrix$5.checkMatrix(value);

                    var lu = this.LU;
                    var rows = lu.rows;

                    if (rows !== value.rows) {
                        throw new Error('Invalid matrix dimensions');
                    }
                    if (this.isSingular()) {
                        throw new Error('LU matrix is singular');
                    }

                    var count = value.columns;
                    var X = value.subMatrixRow(this.pivotVector, 0, count - 1);
                    var columns = lu.columns;
                    var i, j, k;

                    for (k = 0; k < columns; k++) {
                        for (i = k + 1; i < columns; i++) {
                            for (j = 0; j < count; j++) {
                                X[i][j] -= X[k][j] * lu[i][k];
                            }
                        }
                    }
                    for (k = columns - 1; k >= 0; k--) {
                        for (j = 0; j < count; j++) {
                            X[k][j] /= lu[k][k];
                        }
                        for (i = 0; i < k; i++) {
                            for (j = 0; j < count; j++) {
                                X[i][j] -= X[k][j] * lu[i][k];
                            }
                        }
                    }
                    return X;
                }

                /**
                 *
                 * @return {number}
                 */
                get determinant() {
                    var data = this.LU;
                    if (!data.isSquare()) {
                        throw new Error('Matrix must be square');
                    }
                    var determinant = this.pivotSign;
                    var col = data.columns;
                    for (var j = 0; j < col; j++) {
                        determinant *= data[j][j];
                    }
                    return determinant;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get lowerTriangularMatrix() {
                    var data = this.LU;
                    var rows = data.rows;
                    var columns = data.columns;
                    var X = new Matrix$5(rows, columns);
                    for (var i = 0; i < rows; i++) {
                        for (var j = 0; j < columns; j++) {
                            if (i > j) {
                                X[i][j] = data[i][j];
                            } else if (i === j) {
                                X[i][j] = 1;
                            } else {
                                X[i][j] = 0;
                            }
                        }
                    }
                    return X;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get upperTriangularMatrix() {
                    var data = this.LU;
                    var rows = data.rows;
                    var columns = data.columns;
                    var X = new Matrix$5(rows, columns);
                    for (var i = 0; i < rows; i++) {
                        for (var j = 0; j < columns; j++) {
                            if (i <= j) {
                                X[i][j] = data[i][j];
                            } else {
                                X[i][j] = 0;
                            }
                        }
                    }
                    return X;
                }

                /**
                 *
                 * @return {Array<number>}
                 */
                get pivotPermutationVector() {
                    return this.pivotVector.slice();
                }
            }

            function hypotenuse$3(a, b) {
                var r = 0;
                if (Math.abs(a) > Math.abs(b)) {
                    r = b / a;
                    return Math.abs(a) * Math.sqrt(1 + r * r);
                }
                if (b !== 0) {
                    r = a / b;
                    return Math.abs(b) * Math.sqrt(1 + r * r);
                }
                return 0;
            }

            function getFilled2DArray$3(rows, columns, value) {
                var array = new Array(rows);
                for (var i = 0; i < rows; i++) {
                    array[i] = new Array(columns);
                    for (var j = 0; j < columns; j++) {
                        array[i][j] = value;
                    }
                }
                return array;
            }

            /**
             * @class SingularValueDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs
             * @param {Matrix} value
             * @param {object} [options]
             * @param {boolean} [options.computeLeftSingularVectors=true]
             * @param {boolean} [options.computeRightSingularVectors=true]
             * @param {boolean} [options.autoTranspose=false]
             */
            class SingularValueDecomposition$$1 {
                constructor(value, options = {}) {
                    value = WrapperMatrix2D$3.checkMatrix(value);

                    var m = value.rows;
                    var n = value.columns;
                    var nu = Math.min(m, n);

                    const {
                        computeLeftSingularVectors = true,
                        computeRightSingularVectors = true,
                        autoTranspose = false
                    } = options;

                    var wantu = Boolean(computeLeftSingularVectors);
                    var wantv = Boolean(computeRightSingularVectors);

                    var swapped = false;
                    var a;
                    if (m < n) {
                        if (!autoTranspose) {
                            a = value.clone();
                            // eslint-disable-next-line no-console
                            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');
                        } else {
                            a = value.transpose();
                            m = a.rows;
                            n = a.columns;
                            swapped = true;
                            var aux = wantu;
                            wantu = wantv;
                            wantv = aux;
                        }
                    } else {
                        a = value.clone();
                    }

                    var s = new Array(Math.min(m + 1, n));
                    var U = getFilled2DArray$3(m, nu, 0);
                    var V = getFilled2DArray$3(n, n, 0);
                    var e = new Array(n);
                    var work = new Array(m);

                    var nct = Math.min(m - 1, n);
                    var nrt = Math.max(0, Math.min(n - 2, m));

                    var i, j, k, p, t, ks, f, cs, sn, max, kase,
                        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;

                    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {
                        if (k < nct) {
                            s[k] = 0;
                            for (i = k; i < m; i++) {
                                s[k] = hypotenuse$3(s[k], a[i][k]);
                            }
                            if (s[k] !== 0) {
                                if (a[k][k] < 0) {
                                    s[k] = -s[k];
                                }
                                for (i = k; i < m; i++) {
                                    a[i][k] /= s[k];
                                }
                                a[k][k] += 1;
                            }
                            s[k] = -s[k];
                        }

                        for (j = k + 1; j < n; j++) {
                            if ((k < nct) && (s[k] !== 0)) {
                                t = 0;
                                for (i = k; i < m; i++) {
                                    t += a[i][k] * a[i][j];
                                }
                                t = -t / a[k][k];
                                for (i = k; i < m; i++) {
                                    a[i][j] += t * a[i][k];
                                }
                            }
                            e[j] = a[k][j];
                        }

                        if (wantu && (k < nct)) {
                            for (i = k; i < m; i++) {
                                U[i][k] = a[i][k];
                            }
                        }

                        if (k < nrt) {
                            e[k] = 0;
                            for (i = k + 1; i < n; i++) {
                                e[k] = hypotenuse$3(e[k], e[i]);
                            }
                            if (e[k] !== 0) {
                                if (e[k + 1] < 0) {
                                    e[k] = 0 - e[k];
                                }
                                for (i = k + 1; i < n; i++) {
                                    e[i] /= e[k];
                                }
                                e[k + 1] += 1;
                            }
                            e[k] = -e[k];
                            if ((k + 1 < m) && (e[k] !== 0)) {
                                for (i = k + 1; i < m; i++) {
                                    work[i] = 0;
                                }
                                for (j = k + 1; j < n; j++) {
                                    for (i = k + 1; i < m; i++) {
                                        work[i] += e[j] * a[i][j];
                                    }
                                }
                                for (j = k + 1; j < n; j++) {
                                    t = -e[j] / e[k + 1];
                                    for (i = k + 1; i < m; i++) {
                                        a[i][j] += t * work[i];
                                    }
                                }
                            }
                            if (wantv) {
                                for (i = k + 1; i < n; i++) {
                                    V[i][k] = e[i];
                                }
                            }
                        }
                    }

                    p = Math.min(n, m + 1);
                    if (nct < n) {
                        s[nct] = a[nct][nct];
                    }
                    if (m < p) {
                        s[p - 1] = 0;
                    }
                    if (nrt + 1 < p) {
                        e[nrt] = a[nrt][p - 1];
                    }
                    e[p - 1] = 0;

                    if (wantu) {
                        for (j = nct; j < nu; j++) {
                            for (i = 0; i < m; i++) {
                                U[i][j] = 0;
                            }
                            U[j][j] = 1;
                        }
                        for (k = nct - 1; k >= 0; k--) {
                            if (s[k] !== 0) {
                                for (j = k + 1; j < nu; j++) {
                                    t = 0;
                                    for (i = k; i < m; i++) {
                                        t += U[i][k] * U[i][j];
                                    }
                                    t = -t / U[k][k];
                                    for (i = k; i < m; i++) {
                                        U[i][j] += t * U[i][k];
                                    }
                                }
                                for (i = k; i < m; i++) {
                                    U[i][k] = -U[i][k];
                                }
                                U[k][k] = 1 + U[k][k];
                                for (i = 0; i < k - 1; i++) {
                                    U[i][k] = 0;
                                }
                            } else {
                                for (i = 0; i < m; i++) {
                                    U[i][k] = 0;
                                }
                                U[k][k] = 1;
                            }
                        }
                    }

                    if (wantv) {
                        for (k = n - 1; k >= 0; k--) {
                            if ((k < nrt) && (e[k] !== 0)) {
                                for (j = k + 1; j < n; j++) {
                                    t = 0;
                                    for (i = k + 1; i < n; i++) {
                                        t += V[i][k] * V[i][j];
                                    }
                                    t = -t / V[k + 1][k];
                                    for (i = k + 1; i < n; i++) {
                                        V[i][j] += t * V[i][k];
                                    }
                                }
                            }
                            for (i = 0; i < n; i++) {
                                V[i][k] = 0;
                            }
                            V[k][k] = 1;
                        }
                    }

                    var pp = p - 1;
                    var eps = Number.EPSILON;
                    while (p > 0) {
                        for (k = p - 2; k >= -1; k--) {
                            if (k === -1) {
                                break;
                            }
                            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {
                                e[k] = 0;
                                break;
                            }
                        }
                        if (k === p - 2) {
                            kase = 4;
                        } else {
                            for (ks = p - 1; ks >= k; ks--) {
                                if (ks === k) {
                                    break;
                                }
                                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);
                                if (Math.abs(s[ks]) <= eps * t) {
                                    s[ks] = 0;
                                    break;
                                }
                            }
                            if (ks === k) {
                                kase = 3;
                            } else if (ks === p - 1) {
                                kase = 1;
                            } else {
                                kase = 2;
                                k = ks;
                            }
                        }

                        k++;

                        switch (kase) {
                            case 1: {
                                f = e[p - 2];
                                e[p - 2] = 0;
                                for (j = p - 2; j >= k; j--) {
                                    t = hypotenuse$3(s[j], f);
                                    cs = s[j] / t;
                                    sn = f / t;
                                    s[j] = t;
                                    if (j !== k) {
                                        f = -sn * e[j - 1];
                                        e[j - 1] = cs * e[j - 1];
                                    }
                                    if (wantv) {
                                        for (i = 0; i < n; i++) {
                                            t = cs * V[i][j] + sn * V[i][p - 1];
                                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];
                                            V[i][j] = t;
                                        }
                                    }
                                }
                                break;
                            }
                            case 2 : {
                                f = e[k - 1];
                                e[k - 1] = 0;
                                for (j = k; j < p; j++) {
                                    t = hypotenuse$3(s[j], f);
                                    cs = s[j] / t;
                                    sn = f / t;
                                    s[j] = t;
                                    f = -sn * e[j];
                                    e[j] = cs * e[j];
                                    if (wantu) {
                                        for (i = 0; i < m; i++) {
                                            t = cs * U[i][j] + sn * U[i][k - 1];
                                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];
                                            U[i][j] = t;
                                        }
                                    }
                                }
                                break;
                            }
                            case 3 : {
                                scale = Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2]), Math.abs(e[p - 2]), Math.abs(s[k]), Math.abs(e[k]));
                                sp = s[p - 1] / scale;
                                spm1 = s[p - 2] / scale;
                                epm1 = e[p - 2] / scale;
                                sk = s[k] / scale;
                                ek = e[k] / scale;
                                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;
                                c = (sp * epm1) * (sp * epm1);
                                shift = 0;
                                if ((b !== 0) || (c !== 0)) {
                                    shift = Math.sqrt(b * b + c);
                                    if (b < 0) {
                                        shift = -shift;
                                    }
                                    shift = c / (b + shift);
                                }
                                f = (sk + sp) * (sk - sp) + shift;
                                g = sk * ek;
                                for (j = k; j < p - 1; j++) {
                                    t = hypotenuse$3(f, g);
                                    cs = f / t;
                                    sn = g / t;
                                    if (j !== k) {
                                        e[j - 1] = t;
                                    }
                                    f = cs * s[j] + sn * e[j];
                                    e[j] = cs * e[j] - sn * s[j];
                                    g = sn * s[j + 1];
                                    s[j + 1] = cs * s[j + 1];
                                    if (wantv) {
                                        for (i = 0; i < n; i++) {
                                            t = cs * V[i][j] + sn * V[i][j + 1];
                                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];
                                            V[i][j] = t;
                                        }
                                    }
                                    t = hypotenuse$3(f, g);
                                    cs = f / t;
                                    sn = g / t;
                                    s[j] = t;
                                    f = cs * e[j] + sn * s[j + 1];
                                    s[j + 1] = -sn * e[j] + cs * s[j + 1];
                                    g = sn * e[j + 1];
                                    e[j + 1] = cs * e[j + 1];
                                    if (wantu && (j < m - 1)) {
                                        for (i = 0; i < m; i++) {
                                            t = cs * U[i][j] + sn * U[i][j + 1];
                                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];
                                            U[i][j] = t;
                                        }
                                    }
                                }
                                e[p - 2] = f;
                                break;
                            }
                            case 4: {
                                if (s[k] <= 0) {
                                    s[k] = (s[k] < 0 ? -s[k] : 0);
                                    if (wantv) {
                                        for (i = 0; i <= pp; i++) {
                                            V[i][k] = -V[i][k];
                                        }
                                    }
                                }
                                while (k < pp) {
                                    if (s[k] >= s[k + 1]) {
                                        break;
                                    }
                                    t = s[k];
                                    s[k] = s[k + 1];
                                    s[k + 1] = t;
                                    if (wantv && (k < n - 1)) {
                                        for (i = 0; i < n; i++) {
                                            t = V[i][k + 1];
                                            V[i][k + 1] = V[i][k];
                                            V[i][k] = t;
                                        }
                                    }
                                    if (wantu && (k < m - 1)) {
                                        for (i = 0; i < m; i++) {
                                            t = U[i][k + 1];
                                            U[i][k + 1] = U[i][k];
                                            U[i][k] = t;
                                        }
                                    }
                                    k++;
                                }
                                p--;
                                break;
                            }
                            // no default
                        }
                    }

                    if (swapped) {
                        var tmp = V;
                        V = U;
                        U = tmp;
                    }

                    this.m = m;
                    this.n = n;
                    this.s = s;
                    this.U = U;
                    this.V = V;
                }

                /**
                 * Solve a problem of least square (Ax=b) by using the SVD. Useful when A is singular. When A is not singular, it would be better to use qr.solve(value).
                 * Example : We search to approximate x, with A matrix shape m*n, x vector size n, b vector size m (m > n). We will use :
                 * var svd = SingularValueDecomposition(A);
                 * var x = svd.solve(b);
                 * @param {Matrix} value - Matrix 1D which is the vector b (in the equation Ax = b)
                 * @return {Matrix} - The vector x
                 */
                solve(value) {

                    var Y = value;
                    var e = this.threshold;
                    var scols = this.s.length;
                    var Ls = Matrix$5.zeros(scols, scols);
                    var i;

                    for (i = 0; i < scols; i++) {
                        if (Math.abs(this.s[i]) <= e) {
                            Ls[i][i] = 0;
                        } else {
                            Ls[i][i] = 1 / this.s[i];
                        }
                    }

                    var U = this.U;
                    var V = this.rightSingularVectors;

                    var VL = V.mmul(Ls);
                    var vrows = V.rows;
                    var urows = U.length;
                    var VLU = Matrix$5.zeros(vrows, urows);
                    var j, k, sum;

                    for (i = 0; i < vrows; i++) {
                        for (j = 0; j < urows; j++) {
                            sum = 0;
                            for (k = 0; k < scols; k++) {
                                sum += VL[i][k] * U[j][k];
                            }
                            VLU[i][j] = sum;
                        }
                    }

                    return VLU.mmul(Y);
                }

                /**
                 *
                 * @param {Array<number>} value
                 * @return {Matrix}
                 */
                solveForDiagonal(value) {
                    return this.solve(Matrix$5.diag(value));
                }

                /**
                 * Get the inverse of the matrix. We compute the inverse of a matrix using SVD when this matrix is singular or ill-conditioned. Example :
                 * var svd = SingularValueDecomposition(A);
                 * var inverseA = svd.inverse();
                 * @return {Matrix} - The approximation of the inverse of the matrix
                 */
                inverse() {
                    var V = this.V;
                    var e = this.threshold;
                    var vrows = V.length;
                    var vcols = V[0].length;
                    var X = new Matrix$5(vrows, this.s.length);
                    var i, j;

                    for (i = 0; i < vrows; i++) {
                        for (j = 0; j < vcols; j++) {
                            if (Math.abs(this.s[j]) > e) {
                                X[i][j] = V[i][j] / this.s[j];
                            } else {
                                X[i][j] = 0;
                            }
                        }
                    }

                    var U = this.U;

                    var urows = U.length;
                    var ucols = U[0].length;
                    var Y = new Matrix$5(vrows, urows);
                    var k, sum;

                    for (i = 0; i < vrows; i++) {
                        for (j = 0; j < urows; j++) {
                            sum = 0;
                            for (k = 0; k < ucols; k++) {
                                sum += X[i][k] * U[j][k];
                            }
                            Y[i][j] = sum;
                        }
                    }

                    return Y;
                }

                /**
                 *
                 * @return {number}
                 */
                get condition() {
                    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];
                }

                /**
                 *
                 * @return {number}
                 */
                get norm2() {
                    return this.s[0];
                }

                /**
                 *
                 * @return {number}
                 */
                get rank() {
                    var tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;
                    var r = 0;
                    var s = this.s;
                    for (var i = 0, ii = s.length; i < ii; i++) {
                        if (s[i] > tol) {
                            r++;
                        }
                    }
                    return r;
                }

                /**
                 *
                 * @return {Array<number>}
                 */
                get diagonal() {
                    return this.s;
                }

                /**
                 *
                 * @return {number}
                 */
                get threshold() {
                    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get leftSingularVectors() {
                    if (!Matrix$5.isMatrix(this.U)) {
                        this.U = new Matrix$5(this.U);
                    }
                    return this.U;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get rightSingularVectors() {
                    if (!Matrix$5.isMatrix(this.V)) {
                        this.V = new Matrix$5(this.V);
                    }
                    return this.V;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get diagonalMatrix() {
                    return Matrix$5.diag(this.s);
                }
            }

            /**
             * @private
             * Check that a row index is not out of bounds
             * @param {Matrix} matrix
             * @param {number} index
             * @param {boolean} [outer]
             */
            function checkRowIndex$3(matrix, index, outer) {
                var max = outer ? matrix.rows : matrix.rows - 1;
                if (index < 0 || index > max) {
                    throw new RangeError('Row index out of range');
                }
            }

            /**
             * @private
             * Check that a column index is not out of bounds
             * @param {Matrix} matrix
             * @param {number} index
             * @param {boolean} [outer]
             */
            function checkColumnIndex$3(matrix, index, outer) {
                var max = outer ? matrix.columns : matrix.columns - 1;
                if (index < 0 || index > max) {
                    throw new RangeError('Column index out of range');
                }
            }

            /**
             * @private
             * Check that the provided vector is an array with the right length
             * @param {Matrix} matrix
             * @param {Array|Matrix} vector
             * @return {Array}
             * @throws {RangeError}
             */
            function checkRowVector$3(matrix, vector) {
                if (vector.to1DArray) {
                    vector = vector.to1DArray();
                }
                if (vector.length !== matrix.columns) {
                    throw new RangeError('vector size must be the same as the number of columns');
                }
                return vector;
            }

            /**
             * @private
             * Check that the provided vector is an array with the right length
             * @param {Matrix} matrix
             * @param {Array|Matrix} vector
             * @return {Array}
             * @throws {RangeError}
             */
            function checkColumnVector$3(matrix, vector) {
                if (vector.to1DArray) {
                    vector = vector.to1DArray();
                }
                if (vector.length !== matrix.rows) {
                    throw new RangeError('vector size must be the same as the number of rows');
                }
                return vector;
            }

            function checkIndices$3(matrix, rowIndices, columnIndices) {
                return {
                    row: checkRowIndices$3(matrix, rowIndices),
                    column: checkColumnIndices$3(matrix, columnIndices)
                };
            }

            function checkRowIndices$3(matrix, rowIndices) {
                if (typeof rowIndices !== 'object') {
                    throw new TypeError('unexpected type for row indices');
                }

                var rowOut = rowIndices.some(r => {
                    return r < 0 || r >= matrix.rows;

                });

                if (rowOut) {
                    throw new RangeError('row indices are out of range');
                }

                if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);

                return rowIndices;
            }

            function checkColumnIndices$3(matrix, columnIndices) {
                if (typeof columnIndices !== 'object') {
                    throw new TypeError('unexpected type for column indices');
                }

                var columnOut = columnIndices.some(c => {
                    return c < 0 || c >= matrix.columns;
                });

                if (columnOut) {
                    throw new RangeError('column indices are out of range');
                }
                if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);

                return columnIndices;
            }

            function checkRange$3(matrix, startRow, endRow, startColumn, endColumn) {
                if (arguments.length !== 5) throw new TypeError('Invalid argument type');
                var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {
                    return typeof arg !== 'number';
                });
                if (notAllNumbers) throw new TypeError('Invalid argument type');
                if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {
                    throw new RangeError('Submatrix indices are out of range');
                }
            }

            function sumByRow$3(matrix) {
                var sum = Matrix$5.zeros(matrix.rows, 1);
                for (var i = 0; i < matrix.rows; ++i) {
                    for (var j = 0; j < matrix.columns; ++j) {
                        sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));
                    }
                }
                return sum;
            }

            function sumByColumn$3(matrix) {
                var sum = Matrix$5.zeros(1, matrix.columns);
                for (var i = 0; i < matrix.rows; ++i) {
                    for (var j = 0; j < matrix.columns; ++j) {
                        sum.set(0, j, sum.get(0, j) + matrix.get(i, j));
                    }
                }
                return sum;
            }

            function sumAll$3(matrix) {
                var v = 0;
                for (var i = 0; i < matrix.rows; i++) {
                    for (var j = 0; j < matrix.columns; j++) {
                        v += matrix.get(i, j);
                    }
                }
                return v;
            }

            class BaseView$3 extends AbstractMatrix$3() {
                constructor(matrix, rows, columns) {
                    super();
                    this.matrix = matrix;
                    this.rows = rows;
                    this.columns = columns;
                }

                static get [Symbol.species]() {
                    return Matrix$5;
                }
            }

            class MatrixTransposeView$3 extends BaseView$3 {
                constructor(matrix) {
                    super(matrix, matrix.columns, matrix.rows);
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(columnIndex, rowIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(columnIndex, rowIndex);
                }
            }

            class MatrixRowView$3 extends BaseView$3 {
                constructor(matrix, row) {
                    super(matrix, 1, matrix.columns);
                    this.row = row;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.row, columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.row, columnIndex);
                }
            }

            class MatrixSubView$3 extends BaseView$3 {
                constructor(matrix, startRow, endRow, startColumn, endColumn) {
                    checkRange$3(matrix, startRow, endRow, startColumn, endColumn);
                    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);
                    this.startRow = startRow;
                    this.startColumn = startColumn;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);
                }
            }

            class MatrixSelectionView$3 extends BaseView$3 {
                constructor(matrix, rowIndices, columnIndices) {
                    var indices = checkIndices$3(matrix, rowIndices, columnIndices);
                    super(matrix, indices.row.length, indices.column.length);
                    this.rowIndices = indices.row;
                    this.columnIndices = indices.column;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);
                }
            }

            class MatrixRowSelectionView$3 extends BaseView$3 {
                constructor(matrix, rowIndices) {
                    rowIndices = checkRowIndices$3(matrix, rowIndices);
                    super(matrix, rowIndices.length, matrix.columns);
                    this.rowIndices = rowIndices;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);
                }
            }

            class MatrixColumnSelectionView$3 extends BaseView$3 {
                constructor(matrix, columnIndices) {
                    columnIndices = checkColumnIndices$3(matrix, columnIndices);
                    super(matrix, matrix.rows, columnIndices.length);
                    this.columnIndices = columnIndices;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);
                }
            }

            class MatrixColumnView$3 extends BaseView$3 {
                constructor(matrix, column) {
                    super(matrix, matrix.rows, 1);
                    this.column = column;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(rowIndex, this.column, value);
                    return this;
                }

                get(rowIndex) {
                    return this.matrix.get(rowIndex, this.column);
                }
            }

            class MatrixFlipRowView$3 extends BaseView$3 {
                constructor(matrix) {
                    super(matrix, matrix.rows, matrix.columns);
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);
                }
            }

            class MatrixFlipColumnView$3 extends BaseView$3 {
                constructor(matrix) {
                    super(matrix, matrix.rows, matrix.columns);
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);
                }
            }

            function AbstractMatrix$3(superCtor) {
                if (superCtor === undefined) superCtor = Object;

                /**
                 * Real matrix
                 * @class Matrix
                 * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,
                 * 2D array containing the data or Matrix instance to clone
                 * @param {number} [nColumns] - Number of columns of the new matrix
                 */
                class Matrix extends superCtor {
                    static get [Symbol.species]() {
                        return this;
                    }

                    /**
                     * Constructs a Matrix with the chosen dimensions from a 1D array
                     * @param {number} newRows - Number of rows
                     * @param {number} newColumns - Number of columns
                     * @param {Array} newData - A 1D array containing data for the matrix
                     * @return {Matrix} - The new matrix
                     */
                    static from1DArray(newRows, newColumns, newData) {
                        var length = newRows * newColumns;
                        if (length !== newData.length) {
                            throw new RangeError('Data length does not match given dimensions');
                        }
                        var newMatrix = new this(newRows, newColumns);
                        for (var row = 0; row < newRows; row++) {
                            for (var column = 0; column < newColumns; column++) {
                                newMatrix.set(row, column, newData[row * newColumns + column]);
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Creates a row vector, a matrix with only one row.
                     * @param {Array} newData - A 1D array containing data for the vector
                     * @return {Matrix} - The new matrix
                     */
                    static rowVector(newData) {
                        var vector = new this(1, newData.length);
                        for (var i = 0; i < newData.length; i++) {
                            vector.set(0, i, newData[i]);
                        }
                        return vector;
                    }

                    /**
                     * Creates a column vector, a matrix with only one column.
                     * @param {Array} newData - A 1D array containing data for the vector
                     * @return {Matrix} - The new matrix
                     */
                    static columnVector(newData) {
                        var vector = new this(newData.length, 1);
                        for (var i = 0; i < newData.length; i++) {
                            vector.set(i, 0, newData[i]);
                        }
                        return vector;
                    }

                    /**
                     * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                    static empty(rows, columns) {
                        return new this(rows, columns);
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be set to zero.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                    static zeros(rows, columns) {
                        return this.empty(rows, columns).fill(0);
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be set to one.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                    static ones(rows, columns) {
                        return this.empty(rows, columns).fill(1);
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be randomly set.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @param {function} [rng=Math.random] - Random number generator
                     * @return {Matrix} The new matrix
                     */
                    static rand(rows, columns, rng) {
                        if (rng === undefined) rng = Math.random;
                        var matrix = this.empty(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                matrix.set(i, j, rng());
                            }
                        }
                        return matrix;
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be random integers.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @param {number} [maxValue=1000] - Maximum value
                     * @param {function} [rng=Math.random] - Random number generator
                     * @return {Matrix} The new matrix
                     */
                    static randInt(rows, columns, maxValue, rng) {
                        if (maxValue === undefined) maxValue = 1000;
                        if (rng === undefined) rng = Math.random;
                        var matrix = this.empty(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                var value = Math.floor(rng() * maxValue);
                                matrix.set(i, j, value);
                            }
                        }
                        return matrix;
                    }

                    /**
                     * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.
                     * @param {number} rows - Number of rows
                     * @param {number} [columns=rows] - Number of columns
                     * @param {number} [value=1] - Value to fill the diagonal with
                     * @return {Matrix} - The new identity matrix
                     */
                    static eye(rows, columns, value) {
                        if (columns === undefined) columns = rows;
                        if (value === undefined) value = 1;
                        var min = Math.min(rows, columns);
                        var matrix = this.zeros(rows, columns);
                        for (var i = 0; i < min; i++) {
                            matrix.set(i, i, value);
                        }
                        return matrix;
                    }

                    /**
                     * Creates a diagonal matrix based on the given array.
                     * @param {Array} data - Array containing the data for the diagonal
                     * @param {number} [rows] - Number of rows (Default: data.length)
                     * @param {number} [columns] - Number of columns (Default: rows)
                     * @return {Matrix} - The new diagonal matrix
                     */
                    static diag(data, rows, columns) {
                        var l = data.length;
                        if (rows === undefined) rows = l;
                        if (columns === undefined) columns = rows;
                        var min = Math.min(l, rows, columns);
                        var matrix = this.zeros(rows, columns);
                        for (var i = 0; i < min; i++) {
                            matrix.set(i, i, data[i]);
                        }
                        return matrix;
                    }

                    /**
                     * Returns a matrix whose elements are the minimum between matrix1 and matrix2
                     * @param {Matrix} matrix1
                     * @param {Matrix} matrix2
                     * @return {Matrix}
                     */
                    static min(matrix1, matrix2) {
                        matrix1 = this.checkMatrix(matrix1);
                        matrix2 = this.checkMatrix(matrix2);
                        var rows = matrix1.rows;
                        var columns = matrix1.columns;
                        var result = new this(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));
                            }
                        }
                        return result;
                    }

                    /**
                     * Returns a matrix whose elements are the maximum between matrix1 and matrix2
                     * @param {Matrix} matrix1
                     * @param {Matrix} matrix2
                     * @return {Matrix}
                     */
                    static max(matrix1, matrix2) {
                        matrix1 = this.checkMatrix(matrix1);
                        matrix2 = this.checkMatrix(matrix2);
                        var rows = matrix1.rows;
                        var columns = matrix1.columns;
                        var result = new this(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));
                            }
                        }
                        return result;
                    }

                    /**
                     * Check that the provided value is a Matrix and tries to instantiate one if not
                     * @param {*} value - The value to check
                     * @return {Matrix}
                     */
                    static checkMatrix(value) {
                        return Matrix.isMatrix(value) ? value : new this(value);
                    }

                    /**
                     * Returns true if the argument is a Matrix, false otherwise
                     * @param {*} value - The value to check
                     * @return {boolean}
                     */
                    static isMatrix(value) {
                        return (value != null) && (value.klass === 'Matrix');
                    }

                    /**
                     * @prop {number} size - The number of elements in the matrix.
                     */
                    get size() {
                        return this.rows * this.columns;
                    }

                    /**
                     * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.
                     * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)
                     * @return {Matrix} this
                     */
                    apply(callback) {
                        if (typeof callback !== 'function') {
                            throw new TypeError('callback must be a function');
                        }
                        var ii = this.rows;
                        var jj = this.columns;
                        for (var i = 0; i < ii; i++) {
                            for (var j = 0; j < jj; j++) {
                                callback.call(this, i, j);
                            }
                        }
                        return this;
                    }

                    /**
                     * Returns a new 1D array filled row by row with the matrix values
                     * @return {Array}
                     */
                    to1DArray() {
                        var array = new Array(this.size);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                array[i * this.columns + j] = this.get(i, j);
                            }
                        }
                        return array;
                    }

                    /**
                     * Returns a 2D array containing a copy of the data
                     * @return {Array}
                     */
                    to2DArray() {
                        var copy = new Array(this.rows);
                        for (var i = 0; i < this.rows; i++) {
                            copy[i] = new Array(this.columns);
                            for (var j = 0; j < this.columns; j++) {
                                copy[i][j] = this.get(i, j);
                            }
                        }
                        return copy;
                    }

                    /**
                     * @return {boolean} true if the matrix has one row
                     */
                    isRowVector() {
                        return this.rows === 1;
                    }

                    /**
                     * @return {boolean} true if the matrix has one column
                     */
                    isColumnVector() {
                        return this.columns === 1;
                    }

                    /**
                     * @return {boolean} true if the matrix has one row or one column
                     */
                    isVector() {
                        return (this.rows === 1) || (this.columns === 1);
                    }

                    /**
                     * @return {boolean} true if the matrix has the same number of rows and columns
                     */
                    isSquare() {
                        return this.rows === this.columns;
                    }

                    /**
                     * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal
                     */
                    isSymmetric() {
                        if (this.isSquare()) {
                            for (var i = 0; i < this.rows; i++) {
                                for (var j = 0; j <= i; j++) {
                                    if (this.get(i, j) !== this.get(j, i)) {
                                        return false;
                                    }
                                }
                            }
                            return true;
                        }
                        return false;
                    }

                    /**
                     * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1
                     * @abstract
                     * @param {number} rowIndex - Index of the row
                     * @param {number} columnIndex - Index of the column
                     * @param {number} value - The new value for the element
                     * @return {Matrix} this
                     */
                    set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars
                        throw new Error('set method is unimplemented');
                    }

                    /**
                     * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]
                     * @abstract
                     * @param {number} rowIndex - Index of the row
                     * @param {number} columnIndex - Index of the column
                     * @return {number}
                     */
                    get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars
                        throw new Error('get method is unimplemented');
                    }

                    /**
                     * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of
                     * rows of the matrix, and colRep times the number of columns of the matrix
                     * @param {number} rowRep - Number of times the rows should be repeated
                     * @param {number} colRep - Number of times the columns should be re
                     * @return {Matrix}
                     * @example
                     * var matrix = new Matrix([[1,2]]);
                     * matrix.repeat(2); // [[1,2],[1,2]]
                     */
                    repeat(rowRep, colRep) {
                        rowRep = rowRep || 1;
                        colRep = colRep || 1;
                        var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);
                        for (var i = 0; i < rowRep; i++) {
                            for (var j = 0; j < colRep; j++) {
                                matrix.setSubMatrix(this, this.rows * i, this.columns * j);
                            }
                        }
                        return matrix;
                    }

                    /**
                     * Fills the matrix with a given value. All elements will be set to this value.
                     * @param {number} value - New value
                     * @return {Matrix} this
                     */
                    fill(value) {
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, value);
                            }
                        }
                        return this;
                    }

                    /**
                     * Negates the matrix. All elements will be multiplied by (-1)
                     * @return {Matrix} this
                     */
                    neg() {
                        return this.mulS(-1);
                    }

                    /**
                     * Returns a new array from the given row index
                     * @param {number} index - Row index
                     * @return {Array}
                     */
                    getRow(index) {
                        checkRowIndex$3(this, index);
                        var row = new Array(this.columns);
                        for (var i = 0; i < this.columns; i++) {
                            row[i] = this.get(index, i);
                        }
                        return row;
                    }

                    /**
                     * Returns a new row vector from the given row index
                     * @param {number} index - Row index
                     * @return {Matrix}
                     */
                    getRowVector(index) {
                        return this.constructor.rowVector(this.getRow(index));
                    }

                    /**
                     * Sets a row at the given index
                     * @param {number} index - Row index
                     * @param {Array|Matrix} array - Array or vector
                     * @return {Matrix} this
                     */
                    setRow(index, array) {
                        checkRowIndex$3(this, index);
                        array = checkRowVector$3(this, array);
                        for (var i = 0; i < this.columns; i++) {
                            this.set(index, i, array[i]);
                        }
                        return this;
                    }

                    /**
                     * Swaps two rows
                     * @param {number} row1 - First row index
                     * @param {number} row2 - Second row index
                     * @return {Matrix} this
                     */
                    swapRows(row1, row2) {
                        checkRowIndex$3(this, row1);
                        checkRowIndex$3(this, row2);
                        for (var i = 0; i < this.columns; i++) {
                            var temp = this.get(row1, i);
                            this.set(row1, i, this.get(row2, i));
                            this.set(row2, i, temp);
                        }
                        return this;
                    }

                    /**
                     * Returns a new array from the given column index
                     * @param {number} index - Column index
                     * @return {Array}
                     */
                    getColumn(index) {
                        checkColumnIndex$3(this, index);
                        var column = new Array(this.rows);
                        for (var i = 0; i < this.rows; i++) {
                            column[i] = this.get(i, index);
                        }
                        return column;
                    }

                    /**
                     * Returns a new column vector from the given column index
                     * @param {number} index - Column index
                     * @return {Matrix}
                     */
                    getColumnVector(index) {
                        return this.constructor.columnVector(this.getColumn(index));
                    }

                    /**
                     * Sets a column at the given index
                     * @param {number} index - Column index
                     * @param {Array|Matrix} array - Array or vector
                     * @return {Matrix} this
                     */
                    setColumn(index, array) {
                        checkColumnIndex$3(this, index);
                        array = checkColumnVector$3(this, array);
                        for (var i = 0; i < this.rows; i++) {
                            this.set(i, index, array[i]);
                        }
                        return this;
                    }

                    /**
                     * Swaps two columns
                     * @param {number} column1 - First column index
                     * @param {number} column2 - Second column index
                     * @return {Matrix} this
                     */
                    swapColumns(column1, column2) {
                        checkColumnIndex$3(this, column1);
                        checkColumnIndex$3(this, column2);
                        for (var i = 0; i < this.rows; i++) {
                            var temp = this.get(i, column1);
                            this.set(i, column1, this.get(i, column2));
                            this.set(i, column2, temp);
                        }
                        return this;
                    }

                    /**
                     * Adds the values of a vector to each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    addRowVector(vector) {
                        vector = checkRowVector$3(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) + vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Subtracts the values of a vector from each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    subRowVector(vector) {
                        vector = checkRowVector$3(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) - vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a vector with each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    mulRowVector(vector) {
                        vector = checkRowVector$3(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) * vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Divides the values of each row by those of a vector
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    divRowVector(vector) {
                        vector = checkRowVector$3(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) / vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Adds the values of a vector to each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    addColumnVector(vector) {
                        vector = checkColumnVector$3(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) + vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Subtracts the values of a vector from each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    subColumnVector(vector) {
                        vector = checkColumnVector$3(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) - vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a vector with each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    mulColumnVector(vector) {
                        vector = checkColumnVector$3(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) * vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Divides the values of each column by those of a vector
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    divColumnVector(vector) {
                        vector = checkColumnVector$3(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) / vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a row with a scalar
                     * @param {number} index - Row index
                     * @param {number} value
                     * @return {Matrix} this
                     */
                    mulRow(index, value) {
                        checkRowIndex$3(this, index);
                        for (var i = 0; i < this.columns; i++) {
                            this.set(index, i, this.get(index, i) * value);
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a column with a scalar
                     * @param {number} index - Column index
                     * @param {number} value
                     * @return {Matrix} this
                     */
                    mulColumn(index, value) {
                        checkColumnIndex$3(this, index);
                        for (var i = 0; i < this.rows; i++) {
                            this.set(i, index, this.get(i, index) * value);
                        }
                        return this;
                    }

                    /**
                     * Returns the maximum value of the matrix
                     * @return {number}
                     */
                    max() {
                        var v = this.get(0, 0);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) > v) {
                                    v = this.get(i, j);
                                }
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value
                     * @return {Array}
                     */
                    maxIndex() {
                        var v = this.get(0, 0);
                        var idx = [0, 0];
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) > v) {
                                    v = this.get(i, j);
                                    idx[0] = i;
                                    idx[1] = j;
                                }
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the minimum value of the matrix
                     * @return {number}
                     */
                    min() {
                        var v = this.get(0, 0);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) < v) {
                                    v = this.get(i, j);
                                }
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the minimum value
                     * @return {Array}
                     */
                    minIndex() {
                        var v = this.get(0, 0);
                        var idx = [0, 0];
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) < v) {
                                    v = this.get(i, j);
                                    idx[0] = i;
                                    idx[1] = j;
                                }
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the maximum value of one row
                     * @param {number} row - Row index
                     * @return {number}
                     */
                    maxRow(row) {
                        checkRowIndex$3(this, row);
                        var v = this.get(row, 0);
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) > v) {
                                v = this.get(row, i);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value of one row
                     * @param {number} row - Row index
                     * @return {Array}
                     */
                    maxRowIndex(row) {
                        checkRowIndex$3(this, row);
                        var v = this.get(row, 0);
                        var idx = [row, 0];
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) > v) {
                                v = this.get(row, i);
                                idx[1] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the minimum value of one row
                     * @param {number} row - Row index
                     * @return {number}
                     */
                    minRow(row) {
                        checkRowIndex$3(this, row);
                        var v = this.get(row, 0);
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) < v) {
                                v = this.get(row, i);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value of one row
                     * @param {number} row - Row index
                     * @return {Array}
                     */
                    minRowIndex(row) {
                        checkRowIndex$3(this, row);
                        var v = this.get(row, 0);
                        var idx = [row, 0];
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) < v) {
                                v = this.get(row, i);
                                idx[1] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the maximum value of one column
                     * @param {number} column - Column index
                     * @return {number}
                     */
                    maxColumn(column) {
                        checkColumnIndex$3(this, column);
                        var v = this.get(0, column);
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) > v) {
                                v = this.get(i, column);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value of one column
                     * @param {number} column - Column index
                     * @return {Array}
                     */
                    maxColumnIndex(column) {
                        checkColumnIndex$3(this, column);
                        var v = this.get(0, column);
                        var idx = [0, column];
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) > v) {
                                v = this.get(i, column);
                                idx[0] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the minimum value of one column
                     * @param {number} column - Column index
                     * @return {number}
                     */
                    minColumn(column) {
                        checkColumnIndex$3(this, column);
                        var v = this.get(0, column);
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) < v) {
                                v = this.get(i, column);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the minimum value of one column
                     * @param {number} column - Column index
                     * @return {Array}
                     */
                    minColumnIndex(column) {
                        checkColumnIndex$3(this, column);
                        var v = this.get(0, column);
                        var idx = [0, column];
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) < v) {
                                v = this.get(i, column);
                                idx[0] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns an array containing the diagonal values of the matrix
                     * @return {Array}
                     */
                    diag() {
                        var min = Math.min(this.rows, this.columns);
                        var diag = new Array(min);
                        for (var i = 0; i < min; i++) {
                            diag[i] = this.get(i, i);
                        }
                        return diag;
                    }

                    /**
                     * Returns the sum by the argument given, if no argument given,
                     * it returns the sum of all elements of the matrix.
                     * @param {string} by - sum by 'row' or 'column'.
                     * @return {Matrix|number}
                     */
                    sum(by) {
                        switch (by) {
                            case 'row':
                                return sumByRow$3(this);
                            case 'column':
                                return sumByColumn$3(this);
                            default:
                                return sumAll$3(this);
                        }
                    }

                    /**
                     * Returns the mean of all elements of the matrix
                     * @return {number}
                     */
                    mean() {
                        return this.sum() / this.size;
                    }

                    /**
                     * Returns the product of all elements of the matrix
                     * @return {number}
                     */
                    prod() {
                        var prod = 1;
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                prod *= this.get(i, j);
                            }
                        }
                        return prod;
                    }

                    /**
                     * Returns the norm of a matrix.
                     * @param {string} type - "frobenius" (default) or "max" return resp. the Frobenius norm and the max norm.
                     * @return {number}
                     */
                    norm(type = 'frobenius') {
                        var result = 0;
                        if (type === 'max') {
                            return this.max();
                        } else if (type === 'frobenius') {
                            for (var i = 0; i < this.rows; i++) {
                                for (var j = 0; j < this.columns; j++) {
                                    result = result + this.get(i, j) * this.get(i, j);
                                }
                            }
                            return Math.sqrt(result);
                        } else {
                            throw new RangeError(`unknown norm type: ${type}`);
                        }
                    }

                    /**
                     * Computes the cumulative sum of the matrix elements (in place, row by row)
                     * @return {Matrix} this
                     */
                    cumulativeSum() {
                        var sum = 0;
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                sum += this.get(i, j);
                                this.set(i, j, sum);
                            }
                        }
                        return this;
                    }

                    /**
                     * Computes the dot (scalar) product between the matrix and another
                     * @param {Matrix} vector2 vector
                     * @return {number}
                     */
                    dot(vector2) {
                        if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();
                        var vector1 = this.to1DArray();
                        if (vector1.length !== vector2.length) {
                            throw new RangeError('vectors do not have the same size');
                        }
                        var dot = 0;
                        for (var i = 0; i < vector1.length; i++) {
                            dot += vector1[i] * vector2[i];
                        }
                        return dot;
                    }

                    /**
                     * Returns the matrix product between this and other
                     * @param {Matrix} other
                     * @return {Matrix}
                     */
                    mmul(other) {
                        other = this.constructor.checkMatrix(other);
                        if (this.columns !== other.rows) {
                            // eslint-disable-next-line no-console
                            console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');
                        }

                        var m = this.rows;
                        var n = this.columns;
                        var p = other.columns;

                        var result = new this.constructor[Symbol.species](m, p);

                        var Bcolj = new Array(n);
                        for (var j = 0; j < p; j++) {
                            for (var k = 0; k < n; k++) {
                                Bcolj[k] = other.get(k, j);
                            }

                            for (var i = 0; i < m; i++) {
                                var s = 0;
                                for (k = 0; k < n; k++) {
                                    s += this.get(i, k) * Bcolj[k];
                                }

                                result.set(i, j, s);
                            }
                        }
                        return result;
                    }

                    strassen2x2(other) {
                        var result = new this.constructor[Symbol.species](2, 2);
                        const a11 = this.get(0, 0);
                        const b11 = other.get(0, 0);
                        const a12 = this.get(0, 1);
                        const b12 = other.get(0, 1);
                        const a21 = this.get(1, 0);
                        const b21 = other.get(1, 0);
                        const a22 = this.get(1, 1);
                        const b22 = other.get(1, 1);

                        // Compute intermediate values.
                        const m1 = (a11 + a22) * (b11 + b22);
                        const m2 = (a21 + a22) * b11;
                        const m3 = a11 * (b12 - b22);
                        const m4 = a22 * (b21 - b11);
                        const m5 = (a11 + a12) * b22;
                        const m6 = (a21 - a11) * (b11 + b12);
                        const m7 = (a12 - a22) * (b21 + b22);

                        // Combine intermediate values into the output.
                        const c00 = m1 + m4 - m5 + m7;
                        const c01 = m3 + m5;
                        const c10 = m2 + m4;
                        const c11 = m1 - m2 + m3 + m6;

                        result.set(0, 0, c00);
                        result.set(0, 1, c01);
                        result.set(1, 0, c10);
                        result.set(1, 1, c11);
                        return result;
                    }

                    strassen3x3(other) {
                        var result = new this.constructor[Symbol.species](3, 3);

                        const a00 = this.get(0, 0);
                        const a01 = this.get(0, 1);
                        const a02 = this.get(0, 2);
                        const a10 = this.get(1, 0);
                        const a11 = this.get(1, 1);
                        const a12 = this.get(1, 2);
                        const a20 = this.get(2, 0);
                        const a21 = this.get(2, 1);
                        const a22 = this.get(2, 2);

                        const b00 = other.get(0, 0);
                        const b01 = other.get(0, 1);
                        const b02 = other.get(0, 2);
                        const b10 = other.get(1, 0);
                        const b11 = other.get(1, 1);
                        const b12 = other.get(1, 2);
                        const b20 = other.get(2, 0);
                        const b21 = other.get(2, 1);
                        const b22 = other.get(2, 2);

                        const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;
                        const m2 = (a00 - a10) * (-b01 + b11);
                        const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);
                        const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);
                        const m5 = (a10 + a11) * (-b00 + b01);
                        const m6 = a00 * b00;
                        const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);
                        const m8 = (-a00 + a20) * (b02 - b12);
                        const m9 = (a20 + a21) * (-b00 + b02);
                        const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;
                        const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);
                        const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);
                        const m13 = (a02 - a22) * (b11 - b21);
                        const m14 = a02 * b20;
                        const m15 = (a21 + a22) * (-b20 + b21);
                        const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);
                        const m17 = (a02 - a12) * (b12 - b22);
                        const m18 = (a11 + a12) * (-b20 + b22);
                        const m19 = a01 * b10;
                        const m20 = a12 * b21;
                        const m21 = a10 * b02;
                        const m22 = a20 * b01;
                        const m23 = a22 * b22;

                        const c00 = m6 + m14 + m19;
                        const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;
                        const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;
                        const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;
                        const c11 = m2 + m4 + m5 + m6 + m20;
                        const c12 = m14 + m16 + m17 + m18 + m21;
                        const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;
                        const c21 = m12 + m13 + m14 + m15 + m22;
                        const c22 = m6 + m7 + m8 + m9 + m23;

                        result.set(0, 0, c00);
                        result.set(0, 1, c01);
                        result.set(0, 2, c02);
                        result.set(1, 0, c10);
                        result.set(1, 1, c11);
                        result.set(1, 2, c12);
                        result.set(2, 0, c20);
                        result.set(2, 1, c21);
                        result.set(2, 2, c22);
                        return result;
                    }

                    /**
                     * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.
                     * @param {Matrix} y
                     * @return {Matrix}
                     */
                    mmulStrassen(y) {
                        var x = this.clone();
                        var r1 = x.rows;
                        var c1 = x.columns;
                        var r2 = y.rows;
                        var c2 = y.columns;
                        if (c1 !== r2) {
                            // eslint-disable-next-line no-console
                            console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);
                        }

                        // Put a matrix into the top left of a matrix of zeros.
                        // `rows` and `cols` are the dimensions of the output matrix.
                        function embed(mat, rows, cols) {
                            var r = mat.rows;
                            var c = mat.columns;
                            if ((r === rows) && (c === cols)) {
                                return mat;
                            } else {
                                var resultat = Matrix.zeros(rows, cols);
                                resultat = resultat.setSubMatrix(mat, 0, 0);
                                return resultat;
                            }
                        }


                        // Make sure both matrices are the same size.
                        // This is exclusively for simplicity:
                        // this algorithm can be implemented with matrices of different sizes.

                        var r = Math.max(r1, r2);
                        var c = Math.max(c1, c2);
                        x = embed(x, r, c);
                        y = embed(y, r, c);

                        // Our recursive multiplication function.
                        function blockMult(a, b, rows, cols) {
                            // For small matrices, resort to naive multiplication.
                            if (rows <= 512 || cols <= 512) {
                                return a.mmul(b); // a is equivalent to this
                            }

                            // Apply dynamic padding.
                            if ((rows % 2 === 1) && (cols % 2 === 1)) {
                                a = embed(a, rows + 1, cols + 1);
                                b = embed(b, rows + 1, cols + 1);
                            } else if (rows % 2 === 1) {
                                a = embed(a, rows + 1, cols);
                                b = embed(b, rows + 1, cols);
                            } else if (cols % 2 === 1) {
                                a = embed(a, rows, cols + 1);
                                b = embed(b, rows, cols + 1);
                            }

                            var halfRows = parseInt(a.rows / 2);
                            var halfCols = parseInt(a.columns / 2);
                            // Subdivide input matrices.
                            var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);
                            var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);

                            var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);
                            var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);

                            var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);
                            var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);

                            var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);
                            var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);

                            // Compute intermediate values.
                            var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);
                            var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);
                            var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);
                            var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);
                            var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);
                            var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);
                            var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);

                            // Combine intermediate values into the output.
                            var c11 = Matrix.add(m1, m4);
                            c11.sub(m5);
                            c11.add(m7);
                            var c12 = Matrix.add(m3, m5);
                            var c21 = Matrix.add(m2, m4);
                            var c22 = Matrix.sub(m1, m2);
                            c22.add(m3);
                            c22.add(m6);

                            //Crop output to the desired size (undo dynamic padding).
                            var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);
                            resultat = resultat.setSubMatrix(c11, 0, 0);
                            resultat = resultat.setSubMatrix(c12, c11.rows, 0);
                            resultat = resultat.setSubMatrix(c21, 0, c11.columns);
                            resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);
                            return resultat.subMatrix(0, rows - 1, 0, cols - 1);
                        }
                        return blockMult(x, y, r, c);
                    }

                    /**
                     * Returns a row-by-row scaled matrix
                     * @param {number} [min=0] - Minimum scaled value
                     * @param {number} [max=1] - Maximum scaled value
                     * @return {Matrix} - The scaled matrix
                     */
                    scaleRows(min, max) {
                        min = min === undefined ? 0 : min;
                        max = max === undefined ? 1 : max;
                        if (min >= max) {
                            throw new RangeError('min should be strictly smaller than max');
                        }
                        var newMatrix = this.constructor.empty(this.rows, this.columns);
                        for (var i = 0; i < this.rows; i++) {
                            var scaled = rescale(this.getRow(i), {min, max});
                            newMatrix.setRow(i, scaled);
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns a new column-by-column scaled matrix
                     * @param {number} [min=0] - Minimum scaled value
                     * @param {number} [max=1] - Maximum scaled value
                     * @return {Matrix} - The new scaled matrix
                     * @example
                     * var matrix = new Matrix([[1,2],[-1,0]]);
                     * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]
                     */
                    scaleColumns(min, max) {
                        min = min === undefined ? 0 : min;
                        max = max === undefined ? 1 : max;
                        if (min >= max) {
                            throw new RangeError('min should be strictly smaller than max');
                        }
                        var newMatrix = this.constructor.empty(this.rows, this.columns);
                        for (var i = 0; i < this.columns; i++) {
                            var scaled = rescale(this.getColumn(i), {
                                min: min,
                                max: max
                            });
                            newMatrix.setColumn(i, scaled);
                        }
                        return newMatrix;
                    }


                    /**
                     * Returns the Kronecker product (also known as tensor product) between this and other
                     * See https://en.wikipedia.org/wiki/Kronecker_product
                     * @param {Matrix} other
                     * @return {Matrix}
                     */
                    kroneckerProduct(other) {
                        other = this.constructor.checkMatrix(other);

                        var m = this.rows;
                        var n = this.columns;
                        var p = other.rows;
                        var q = other.columns;

                        var result = new this.constructor[Symbol.species](m * p, n * q);
                        for (var i = 0; i < m; i++) {
                            for (var j = 0; j < n; j++) {
                                for (var k = 0; k < p; k++) {
                                    for (var l = 0; l < q; l++) {
                                        result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);
                                    }
                                }
                            }
                        }
                        return result;
                    }

                    /**
                     * Transposes the matrix and returns a new one containing the result
                     * @return {Matrix}
                     */
                    transpose() {
                        var result = new this.constructor[Symbol.species](this.columns, this.rows);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                result.set(j, i, this.get(i, j));
                            }
                        }
                        return result;
                    }

                    /**
                     * Sorts the rows (in place)
                     * @param {function} compareFunction - usual Array.prototype.sort comparison function
                     * @return {Matrix} this
                     */
                    sortRows(compareFunction) {
                        if (compareFunction === undefined) compareFunction = compareNumbers;
                        for (var i = 0; i < this.rows; i++) {
                            this.setRow(i, this.getRow(i).sort(compareFunction));
                        }
                        return this;
                    }

                    /**
                     * Sorts the columns (in place)
                     * @param {function} compareFunction - usual Array.prototype.sort comparison function
                     * @return {Matrix} this
                     */
                    sortColumns(compareFunction) {
                        if (compareFunction === undefined) compareFunction = compareNumbers;
                        for (var i = 0; i < this.columns; i++) {
                            this.setColumn(i, this.getColumn(i).sort(compareFunction));
                        }
                        return this;
                    }

                    /**
                     * Returns a subset of the matrix
                     * @param {number} startRow - First row index
                     * @param {number} endRow - Last row index
                     * @param {number} startColumn - First column index
                     * @param {number} endColumn - Last column index
                     * @return {Matrix}
                     */
                    subMatrix(startRow, endRow, startColumn, endColumn) {
                        checkRange$3(this, startRow, endRow, startColumn, endColumn);
                        var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);
                        for (var i = startRow; i <= endRow; i++) {
                            for (var j = startColumn; j <= endColumn; j++) {
                                newMatrix[i - startRow][j - startColumn] = this.get(i, j);
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns a subset of the matrix based on an array of row indices
                     * @param {Array} indices - Array containing the row indices
                     * @param {number} [startColumn = 0] - First column index
                     * @param {number} [endColumn = this.columns-1] - Last column index
                     * @return {Matrix}
                     */
                    subMatrixRow(indices, startColumn, endColumn) {
                        if (startColumn === undefined) startColumn = 0;
                        if (endColumn === undefined) endColumn = this.columns - 1;
                        if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {
                            throw new RangeError('Argument out of range');
                        }

                        var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);
                        for (var i = 0; i < indices.length; i++) {
                            for (var j = startColumn; j <= endColumn; j++) {
                                if (indices[i] < 0 || indices[i] >= this.rows) {
                                    throw new RangeError('Row index out of range: ' + indices[i]);
                                }
                                newMatrix.set(i, j - startColumn, this.get(indices[i], j));
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns a subset of the matrix based on an array of column indices
                     * @param {Array} indices - Array containing the column indices
                     * @param {number} [startRow = 0] - First row index
                     * @param {number} [endRow = this.rows-1] - Last row index
                     * @return {Matrix}
                     */
                    subMatrixColumn(indices, startRow, endRow) {
                        if (startRow === undefined) startRow = 0;
                        if (endRow === undefined) endRow = this.rows - 1;
                        if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {
                            throw new RangeError('Argument out of range');
                        }

                        var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);
                        for (var i = 0; i < indices.length; i++) {
                            for (var j = startRow; j <= endRow; j++) {
                                if (indices[i] < 0 || indices[i] >= this.columns) {
                                    throw new RangeError('Column index out of range: ' + indices[i]);
                                }
                                newMatrix.set(j - startRow, i, this.get(j, indices[i]));
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Set a part of the matrix to the given sub-matrix
                     * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.
                     * @param {number} startRow - The index of the first row to set
                     * @param {number} startColumn - The index of the first column to set
                     * @return {Matrix}
                     */
                    setSubMatrix(matrix, startRow, startColumn) {
                        matrix = this.constructor.checkMatrix(matrix);
                        var endRow = startRow + matrix.rows - 1;
                        var endColumn = startColumn + matrix.columns - 1;
                        checkRange$3(this, startRow, endRow, startColumn, endColumn);
                        for (var i = 0; i < matrix.rows; i++) {
                            for (var j = 0; j < matrix.columns; j++) {
                                this[startRow + i][startColumn + j] = matrix.get(i, j);
                            }
                        }
                        return this;
                    }

                    /**
                     * Return a new matrix based on a selection of rows and columns
                     * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.
                     * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.
                     * @return {Matrix} The new matrix
                     */
                    selection(rowIndices, columnIndices) {
                        var indices = checkIndices$3(this, rowIndices, columnIndices);
                        var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);
                        for (var i = 0; i < indices.row.length; i++) {
                            var rowIndex = indices.row[i];
                            for (var j = 0; j < indices.column.length; j++) {
                                var columnIndex = indices.column[j];
                                newMatrix[i][j] = this.get(rowIndex, columnIndex);
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns the trace of the matrix (sum of the diagonal elements)
                     * @return {number}
                     */
                    trace() {
                        var min = Math.min(this.rows, this.columns);
                        var trace = 0;
                        for (var i = 0; i < min; i++) {
                            trace += this.get(i, i);
                        }
                        return trace;
                    }

                    /*
                     Matrix views
                     */

                    /**
                     * Returns a view of the transposition of the matrix
                     * @return {MatrixTransposeView}
                     */
                    transposeView() {
                        return new MatrixTransposeView$3(this);
                    }

                    /**
                     * Returns a view of the row vector with the given index
                     * @param {number} row - row index of the vector
                     * @return {MatrixRowView}
                     */
                    rowView(row) {
                        checkRowIndex$3(this, row);
                        return new MatrixRowView$3(this, row);
                    }

                    /**
                     * Returns a view of the column vector with the given index
                     * @param {number} column - column index of the vector
                     * @return {MatrixColumnView}
                     */
                    columnView(column) {
                        checkColumnIndex$3(this, column);
                        return new MatrixColumnView$3(this, column);
                    }

                    /**
                     * Returns a view of the matrix flipped in the row axis
                     * @return {MatrixFlipRowView}
                     */
                    flipRowView() {
                        return new MatrixFlipRowView$3(this);
                    }

                    /**
                     * Returns a view of the matrix flipped in the column axis
                     * @return {MatrixFlipColumnView}
                     */
                    flipColumnView() {
                        return new MatrixFlipColumnView$3(this);
                    }

                    /**
                     * Returns a view of a submatrix giving the index boundaries
                     * @param {number} startRow - first row index of the submatrix
                     * @param {number} endRow - last row index of the submatrix
                     * @param {number} startColumn - first column index of the submatrix
                     * @param {number} endColumn - last column index of the submatrix
                     * @return {MatrixSubView}
                     */
                    subMatrixView(startRow, endRow, startColumn, endColumn) {
                        return new MatrixSubView$3(this, startRow, endRow, startColumn, endColumn);
                    }

                    /**
                     * Returns a view of the cross of the row indices and the column indices
                     * @example
                     * // resulting vector is [[2], [2]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])
                     * @param {Array<number>} rowIndices
                     * @param {Array<number>} columnIndices
                     * @return {MatrixSelectionView}
                     */
                    selectionView(rowIndices, columnIndices) {
                        return new MatrixSelectionView$3(this, rowIndices, columnIndices);
                    }

                    /**
                     * Returns a view of the row indices
                     * @example
                     * // resulting vector is [[1,2,3], [1,2,3]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).rowSelectionView([0, 0])
                     * @param {Array<number>} rowIndices
                     * @return {MatrixRowSelectionView}
                     */
                    rowSelectionView(rowIndices) {
                        return new MatrixRowSelectionView$3(this, rowIndices);
                    }

                    /**
                     * Returns a view of the column indices
                     * @example
                     * // resulting vector is [[2, 2], [5, 5]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).columnSelectionView([1, 1])
                     * @param {Array<number>} columnIndices
                     * @return {MatrixColumnSelectionView}
                     */
                    columnSelectionView(columnIndices) {
                        return new MatrixColumnSelectionView$3(this, columnIndices);
                    }


                    /**
                    * Calculates and returns the determinant of a matrix as a Number
                    * @example
                    *   new Matrix([[1,2,3], [4,5,6]]).det()
                    * @return {number}
                    */
                    det() {
                        if (this.isSquare()) {
                            var a, b, c, d;
                            if (this.columns === 2) {
                                // 2 x 2 matrix
                                a = this.get(0, 0);
                                b = this.get(0, 1);
                                c = this.get(1, 0);
                                d = this.get(1, 1);

                                return a * d - (b * c);
                            } else if (this.columns === 3) {
                                // 3 x 3 matrix
                                var subMatrix0, subMatrix1, subMatrix2;
                                subMatrix0 = this.selectionView([1, 2], [1, 2]);
                                subMatrix1 = this.selectionView([1, 2], [0, 2]);
                                subMatrix2 = this.selectionView([1, 2], [0, 1]);
                                a = this.get(0, 0);
                                b = this.get(0, 1);
                                c = this.get(0, 2);

                                return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();
                            } else {
                                // general purpose determinant using the LU decomposition
                                return new LuDecomposition$$1(this).determinant;
                            }

                        } else {
                            throw Error('Determinant can only be calculated for a square matrix.');
                        }
                    }

                    /**
                     * Returns inverse of a matrix if it exists or the pseudoinverse
                     * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)
                     * @return {Matrix} the (pseudo)inverted matrix.
                     */
                    pseudoInverse(threshold) {
                        if (threshold === undefined) threshold = Number.EPSILON;
                        var svdSolution = new SingularValueDecomposition$$1(this, {autoTranspose: true});

                        var U = svdSolution.leftSingularVectors;
                        var V = svdSolution.rightSingularVectors;
                        var s = svdSolution.diagonal;

                        for (var i = 0; i < s.length; i++) {
                            if (Math.abs(s[i]) > threshold) {
                                s[i] = 1.0 / s[i];
                            } else {
                                s[i] = 0.0;
                            }
                        }

                        // convert list to diagonal
                        s = this.constructor[Symbol.species].diag(s);
                        return V.mmul(s.mmul(U.transposeView()));
                    }

                    /**
                     * Creates an exact and independent copy of the matrix
                     * @return {Matrix}
                     */
                    clone() {
                        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);
                        for (var row = 0; row < this.rows; row++) {
                            for (var column = 0; column < this.columns; column++) {
                                newMatrix.set(row, column, this.get(row, column));
                            }
                        }
                        return newMatrix;
                    }
                }

                Matrix.prototype.klass = 'Matrix';

                function compareNumbers(a, b) {
                    return a - b;
                }

                /*
                 Synonyms
                 */

                Matrix.random = Matrix.rand;
                Matrix.diagonal = Matrix.diag;
                Matrix.prototype.diagonal = Matrix.prototype.diag;
                Matrix.identity = Matrix.eye;
                Matrix.prototype.negate = Matrix.prototype.neg;
                Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;
                Matrix.prototype.determinant = Matrix.prototype.det;

                /*
                 Add dynamically instance and static methods for mathematical operations
                 */

                var inplaceOperator = `
(function %name%(value) {
    if (typeof value === 'number') return this.%name%S(value);
    return this.%name%M(value);
})
`;

                var inplaceOperatorScalar = `
(function %name%S(value) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) %op% value);
        }
    }
    return this;
})
`;

                var inplaceOperatorMatrix = `
(function %name%M(matrix) {
    matrix = this.constructor.checkMatrix(matrix);
    if (this.rows !== matrix.rows ||
        this.columns !== matrix.columns) {
        throw new RangeError('Matrices dimensions must be equal');
    }
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));
        }
    }
    return this;
})
`;

                var staticOperator = `
(function %name%(matrix, value) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%(value);
})
`;

                var inplaceMethod = `
(function %name%() {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j)));
        }
    }
    return this;
})
`;

                var staticMethod = `
(function %name%(matrix) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%();
})
`;

                var inplaceMethodWithArgs = `
(function %name%(%args%) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), %args%));
        }
    }
    return this;
})
`;

                var staticMethodWithArgs = `
(function %name%(matrix, %args%) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%(%args%);
})
`;


                var inplaceMethodWithOneArgScalar = `
(function %name%S(value) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), value));
        }
    }
    return this;
})
`;
                var inplaceMethodWithOneArgMatrix = `
(function %name%M(matrix) {
    matrix = this.constructor.checkMatrix(matrix);
    if (this.rows !== matrix.rows ||
        this.columns !== matrix.columns) {
        throw new RangeError('Matrices dimensions must be equal');
    }
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));
        }
    }
    return this;
})
`;

                var inplaceMethodWithOneArg = `
(function %name%(value) {
    if (typeof value === 'number') return this.%name%S(value);
    return this.%name%M(value);
})
`;

                var staticMethodWithOneArg = staticMethodWithArgs;

                var operators = [
                    // Arithmetic operators
                    ['+', 'add'],
                    ['-', 'sub', 'subtract'],
                    ['*', 'mul', 'multiply'],
                    ['/', 'div', 'divide'],
                    ['%', 'mod', 'modulus'],
                    // Bitwise operators
                    ['&', 'and'],
                    ['|', 'or'],
                    ['^', 'xor'],
                    ['<<', 'leftShift'],
                    ['>>', 'signPropagatingRightShift'],
                    ['>>>', 'rightShift', 'zeroFillRightShift']
                ];

                var i;
                var eval2 = eval;
                for (var operator of operators) {
                    var inplaceOp = eval2(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));
                    var inplaceOpS = eval2(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));
                    var inplaceOpM = eval2(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));
                    var staticOp = eval2(fillTemplateFunction(staticOperator, {name: operator[1]}));
                    for (i = 1; i < operator.length; i++) {
                        Matrix.prototype[operator[i]] = inplaceOp;
                        Matrix.prototype[operator[i] + 'S'] = inplaceOpS;
                        Matrix.prototype[operator[i] + 'M'] = inplaceOpM;
                        Matrix[operator[i]] = staticOp;
                    }
                }

                var methods = [
                    ['~', 'not']
                ];

                [
                    'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',
                    'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',
                    'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'
                ].forEach(function (mathMethod) {
                    methods.push(['Math.' + mathMethod, mathMethod]);
                });

                for (var method of methods) {
                    var inplaceMeth = eval2(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));
                    var staticMeth = eval2(fillTemplateFunction(staticMethod, {name: method[1]}));
                    for (i = 1; i < method.length; i++) {
                        Matrix.prototype[method[i]] = inplaceMeth;
                        Matrix[method[i]] = staticMeth;
                    }
                }

                var methodsWithArgs = [
                    ['Math.pow', 1, 'pow']
                ];

                for (var methodWithArg of methodsWithArgs) {
                    var args = 'arg0';
                    for (i = 1; i < methodWithArg[1]; i++) {
                        args += `, arg${i}`;
                    }
                    if (methodWithArg[1] !== 1) {
                        var inplaceMethWithArgs = eval2(fillTemplateFunction(inplaceMethodWithArgs, {
                            name: methodWithArg[2],
                            method: methodWithArg[0],
                            args: args
                        }));
                        var staticMethWithArgs = eval2(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));
                        for (i = 2; i < methodWithArg.length; i++) {
                            Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;
                            Matrix[methodWithArg[i]] = staticMethWithArgs;
                        }
                    } else {
                        var tmplVar = {
                            name: methodWithArg[2],
                            args: args,
                            method: methodWithArg[0]
                        };
                        var inplaceMethod2 = eval2(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));
                        var inplaceMethodS = eval2(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));
                        var inplaceMethodM = eval2(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));
                        var staticMethod2 = eval2(fillTemplateFunction(staticMethodWithOneArg, tmplVar));
                        for (i = 2; i < methodWithArg.length; i++) {
                            Matrix.prototype[methodWithArg[i]] = inplaceMethod2;
                            Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;
                            Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;
                            Matrix[methodWithArg[i]] = staticMethod2;
                        }
                    }
                }

                function fillTemplateFunction(template, values) {
                    for (var value in values) {
                        template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);
                    }
                    return template;
                }

                return Matrix;
            }

            class Matrix$5 extends AbstractMatrix$3(Array) {
                constructor(nRows, nColumns) {
                    var i;
                    if (arguments.length === 1 && typeof nRows === 'number') {
                        return new Array(nRows);
                    }
                    if (Matrix$5.isMatrix(nRows)) {
                        return nRows.clone();
                    } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix
                        super(nRows);
                        if (Number.isInteger(nColumns) && nColumns > 0) {
                            for (i = 0; i < nRows; i++) {
                                this[i] = new Array(nColumns);
                            }
                        } else {
                            throw new TypeError('nColumns must be a positive integer');
                        }
                    } else if (Array.isArray(nRows)) { // Copy the values from the 2D array
                        const matrix = nRows;
                        nRows = matrix.length;
                        nColumns = matrix[0].length;
                        if (typeof nColumns !== 'number' || nColumns === 0) {
                            throw new TypeError('Data must be a 2D array with at least one element');
                        }
                        super(nRows);
                        for (i = 0; i < nRows; i++) {
                            if (matrix[i].length !== nColumns) {
                                throw new RangeError('Inconsistent array dimensions');
                            }
                            this[i] = [].concat(matrix[i]);
                        }
                    } else {
                        throw new TypeError('First argument must be a positive number or an array');
                    }
                    this.rows = nRows;
                    this.columns = nColumns;
                    return this;
                }

                set(rowIndex, columnIndex, value) {
                    this[rowIndex][columnIndex] = value;
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this[rowIndex][columnIndex];
                }

                /**
                 * Removes a row from the given index
                 * @param {number} index - Row index
                 * @return {Matrix} this
                 */
                removeRow(index) {
                    checkRowIndex$3(this, index);
                    if (this.rows === 1) {
                        throw new RangeError('A matrix cannot have less than one row');
                    }
                    this.splice(index, 1);
                    this.rows -= 1;
                    return this;
                }

                /**
                 * Adds a row at the given index
                 * @param {number} [index = this.rows] - Row index
                 * @param {Array|Matrix} array - Array or vector
                 * @return {Matrix} this
                 */
                addRow(index, array) {
                    if (array === undefined) {
                        array = index;
                        index = this.rows;
                    }
                    checkRowIndex$3(this, index, true);
                    array = checkRowVector$3(this, array, true);
                    this.splice(index, 0, array);
                    this.rows += 1;
                    return this;
                }

                /**
                 * Removes a column from the given index
                 * @param {number} index - Column index
                 * @return {Matrix} this
                 */
                removeColumn(index) {
                    checkColumnIndex$3(this, index);
                    if (this.columns === 1) {
                        throw new RangeError('A matrix cannot have less than one column');
                    }
                    for (var i = 0; i < this.rows; i++) {
                        this[i].splice(index, 1);
                    }
                    this.columns -= 1;
                    return this;
                }

                /**
                 * Adds a column at the given index
                 * @param {number} [index = this.columns] - Column index
                 * @param {Array|Matrix} array - Array or vector
                 * @return {Matrix} this
                 */
                addColumn(index, array) {
                    if (typeof array === 'undefined') {
                        array = index;
                        index = this.columns;
                    }
                    checkColumnIndex$3(this, index, true);
                    array = checkColumnVector$3(this, array);
                    for (var i = 0; i < this.rows; i++) {
                        this[i].splice(index, 0, array[i]);
                    }
                    this.columns += 1;
                    return this;
                }
            }

            class WrapperMatrix1D$3 extends AbstractMatrix$3() {
                /**
                 * @class WrapperMatrix1D
                 * @param {Array<number>} data
                 * @param {object} [options]
                 * @param {object} [options.rows = 1]
                 */
                constructor(data, options = {}) {
                    const {
                        rows = 1
                    } = options;

                    if (data.length % rows !== 0) {
                        throw new Error('the data length is not divisible by the number of rows');
                    }
                    super();
                    this.rows = rows;
                    this.columns = data.length / rows;
                    this.data = data;
                }

                set(rowIndex, columnIndex, value) {
                    var index = this._calculateIndex(rowIndex, columnIndex);
                    this.data[index] = value;
                    return this;
                }

                get(rowIndex, columnIndex) {
                    var index = this._calculateIndex(rowIndex, columnIndex);
                    return this.data[index];
                }

                _calculateIndex(row, column) {
                    return (row * this.columns) + column;
                }

                static get [Symbol.species]() {
                    return Matrix$5;
                }
            }

            class WrapperMatrix2D$3 extends AbstractMatrix$3() {
                /**
                 * @class WrapperMatrix2D
                 * @param {Array<Array<number>>} data
                 */
                constructor(data) {
                    super();
                    this.data = data;
                    this.rows = data.length;
                    this.columns = data[0].length;
                }

                set(rowIndex, columnIndex, value) {
                    this.data[rowIndex][columnIndex] = value;
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.data[rowIndex][columnIndex];
                }

                static get [Symbol.species]() {
                    return Matrix$5;
                }
            }

            /**
             * @private
             * Function that retuns an array of matrices of the cases that belong to each class.
             * @param {Matrix} X - dataset
             * @param {Array} y - predictions
             * @return {Array}
             */
            function separateClasses(X, y) {
                var features = X.columns;

                var classes = 0;
                var totalPerClasses = new Array(10000); // max upperbound of classes
                for (var i = 0; i < y.length; i++) {
                    if (totalPerClasses[y[i]] === undefined) {
                        totalPerClasses[y[i]] = 0;
                        classes++;
                    }
                    totalPerClasses[y[i]]++;
                }
                var separatedClasses = new Array(classes);
                var currentIndex = new Array(classes);
                for (i = 0; i < classes; ++i) {
                    separatedClasses[i] = new Matrix$5(totalPerClasses[i], features);
                    currentIndex[i] = 0;
                }
                for (i = 0; i < X.rows; ++i) {
                    separatedClasses[y[i]].setRow(currentIndex[y[i]], X.getRow(i));
                    currentIndex[y[i]]++;
                }
                return separatedClasses;
            }

            /**
             * @class GaussianNB
             */
            class GaussianNB {

                /**
                 * @constructor
                 * Constructor for the Gaussian Naive Bayes classifier, the parameters here is just for loading purposes.
                 *
                 * @param {boolean} reload
                 * @param {object} model
                 */
                constructor(reload, model) {
                    if (reload) {
                        this.means = model.means;
                        this.calculateProbabilities = model.calculateProbabilities;
                    }
                }

                /**
                 * Function that trains the classifier with a matrix that represents the training set and an array that
                 * represents the label of each row in the training set. the labels must be numbers between 0 to n-1 where
                 * n represents the number of classes.
                 *
                 * WARNING: in the case that one class, all the cases in one or more features have the same value, the
                 * Naive Bayes classifier will not work well.
                 * @param {Matrix|Array} trainingSet
                 * @param {Matrix|Array} trainingLabels
                 */
                train(trainingSet, trainingLabels) {
                    var C1 = Math.sqrt(2 * Math.PI); // constant to precalculate the squared root
                    trainingSet = Matrix$5.checkMatrix(trainingSet);//if (!Matrix.isMatrix(trainingSet)) trainingSet = new Matrix(trainingSet);

                    if (trainingSet.rows !== trainingLabels.length) {
                        throw new RangeError('the size of the training set and the training labels must be the same.');
                    }

                    var separatedClasses = separateClasses(trainingSet, trainingLabels);
                    var calculateProbabilities = new Array(separatedClasses.length);
                    this.means = new Array(separatedClasses.length);
                    for (var i = 0; i < separatedClasses.length; ++i) {
                        var means = mlStat.matrix.mean(separatedClasses[i]);
                        var std = mlStat.matrix.standardDeviation(separatedClasses[i], means);

                        var logPriorProbability = Math.log(separatedClasses[i].rows / trainingSet.rows);
                        calculateProbabilities[i] = new Array(means.length + 1);

                        calculateProbabilities[i][0] = logPriorProbability;
                        for (var j = 1; j < means.length + 1; ++j) {
                            var currentStd = std[j - 1];
                            calculateProbabilities[i][j] = [(1 / (C1 * currentStd)), -2 * currentStd * currentStd];
                        }

                        this.means[i] = means;
                    }

                    this.calculateProbabilities = calculateProbabilities;
                }

                /**
                 * function that predicts each row of the dataset (must be a matrix).
                 *
                 * @param {Matrix|Array} dataset
                 * @return {Array}
                 */
                predict(dataset) {
                    if (dataset[0].length === this.calculateProbabilities[0].length) {
                        throw new RangeError('the dataset must have the same features as the training set');
                    }

                    var predictions = new Array(dataset.length);

                    for (var i = 0; i < predictions.length; ++i) {
                        predictions[i] = getCurrentClass(dataset[i], this.means, this.calculateProbabilities);
                    }

                    return predictions;
                }

                /**
                 * Function that export the NaiveBayes model.
                 * @return {object}
                 */
                toJSON() {
                    return {
                        modelName: 'NaiveBayes',
                        means: this.means,
                        calculateProbabilities: this.calculateProbabilities
                    };
                }

                /**
                 * Function that create a GaussianNB classifier with the given model.
                 * @param {object} model
                 * @return {GaussianNB}
                 */
                static load(model) {
                    if (model.modelName !== 'NaiveBayes') {
                        throw new RangeError('The current model is not a Multinomial Naive Bayes, current model:', model.name);
                    }

                    return new GaussianNB(true, model);
                }
            }

            /**
             * @private
             * Function the retrieves a prediction with one case.
             *
             * @param {Array} currentCase
             * @param {Array} mean - Precalculated means of each class trained
             * @param {Array} classes - Precalculated value of each class (Prior probability and probability function of each feature)
             * @return {number}
             */
            function getCurrentClass(currentCase, mean, classes) {
                var maxProbability = 0;
                var predictedClass = -1;

                // going through all precalculated values for the classes
                for (var i = 0; i < classes.length; ++i) {
                    var currentProbability = classes[i][0]; // initialize with the prior probability
                    for (var j = 1; j < classes[0][1].length + 1; ++j) {
                        currentProbability += calculateLogProbability(currentCase[j - 1], mean[i][j - 1], classes[i][j][0], classes[i][j][1]);
                    }

                    currentProbability = Math.exp(currentProbability);
                    if (currentProbability > maxProbability) {
                        maxProbability = currentProbability;
                        predictedClass = i;
                    }
                }

                return predictedClass;
            }

            /**
             * @private
             * function that retrieves the probability of the feature given the class.
             * @param {number} value - value of the feature.
             * @param {number} mean - mean of the feature for the given class.
             * @param {number} C1 - precalculated value of (1 / (sqrt(2*pi) * std)).
             * @param {number} C2 - precalculated value of (2 * std^2) for the denominator of the exponential.
             * @return {number}
             */
            function calculateLogProbability(value, mean, C1, C2) {
                value = value - mean;
                return Math.log(C1 * Math.exp((value * value) / C2));
            }

            /**
             * @class MultinomialNB
             */
            class MultinomialNB {

                /**
                 * @constructor
                 * Constructor for Multinomial Naive Bayes, the model parameter is for load purposes.
                 *
                 * @param {object} model - for load purposes.
                 */
                constructor(model) {
                    if (model) {
                        this.conditionalProbability = Matrix$5.checkMatrix(model.conditionalProbability);
                        this.priorProbability = Matrix$5.checkMatrix(model.priorProbability);
                    }
                }

                /**
                 * Train the classifier with the current training set and labels, the labels must be numbers between 0 and n.
                 * @param {Matrix|Array} trainingSet
                 * @param {Array} trainingLabels
                 */
                train(trainingSet, trainingLabels) {
                    trainingSet = Matrix$5.checkMatrix(trainingSet);

                    if (trainingSet.rows !== trainingLabels.length) {
                        throw new RangeError('the size of the training set and the training labels must be the same.');
                    }

                    var separateClass = separateClasses(trainingSet, trainingLabels);
                    this.priorProbability = new Matrix$5(separateClass.length, 1);

                    for (var i = 0; i < separateClass.length; ++i) {
                        this.priorProbability[i][0] = Math.log(separateClass[i].length / trainingSet.rows);
                    }

                    var features = trainingSet.columns;
                    this.conditionalProbability = new Matrix$5(separateClass.length, features);
                    for (i = 0; i < separateClass.length; ++i) {
                        var classValues = Matrix$5.checkMatrix(separateClass[i]);
                        var total = classValues.sum();
                        var divisor = total + features;
                        this.conditionalProbability.setRow(i, classValues.sum('column').add(1).div(divisor).apply(matrixLog));
                    }
                }

                /**
                 * Retrieves the predictions for the dataset with the current model.
                 * @param {Matrix|Array} dataset
                 * @return {Array} - predictions from the dataset.
                 */
                predict(dataset) {
                    dataset = Matrix$5.checkMatrix(dataset);
                    var predictions = new Array(dataset.rows);
                    for (var i = 0; i < dataset.rows; ++i) {
                        var currentElement = dataset.getRowVector(i);
                        predictions[i] = this.conditionalProbability.clone().mulRowVector(currentElement).sum('row')
                            .add(this.priorProbability).maxIndex()[0];
                    }

                    return predictions;
                }

                /**
                 * Function that saves the current model.
                 * @return {object} - model in JSON format.
                 */
                toJSON() {
                    return {
                        name: 'MultinomialNB',
                        priorProbability: this.priorProbability,
                        conditionalProbability: this.conditionalProbability
                    };
                }

                /**
                 * Creates a new MultinomialNB from the given model
                 * @param {object} model
                 * @return {MultinomialNB}
                 */
                static load(model) {
                    if (model.name !== 'MultinomialNB') {
                        throw new RangeError(`${model.name} is not a Multinomial Naive Bayes`);
                    }

                    return new MultinomialNB(model);
                }
            }

            function matrixLog(i, j) {
                this[i][j] = Math.log(this[i][j]);
            }



            var src$6 = /*#__PURE__*/Object.freeze({
                        GaussianNB: GaussianNB,
                        MultinomialNB: MultinomialNB
            });

            /*
             * Original code from:
             *
             * k-d Tree JavaScript - V 1.01
             *
             * https://github.com/ubilabs/kd-tree-javascript
             *
             * @author Mircea Pricop <pricop@ubilabs.net>, 2012
             * @author Martin Kleppe <kleppe@ubilabs.net>, 2012
             * @author Ubilabs http://ubilabs.net, 2012
             * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
             */

            function Node(obj, dimension, parent) {
                this.obj = obj;
                this.left = null;
                this.right = null;
                this.parent = parent;
                this.dimension = dimension;
            }

            class KDTree {
                constructor(points, metric) {
                    // If points is not an array, assume we're loading a pre-built tree
                    if (!Array.isArray(points)) {
                        this.dimensions = points.dimensions;
                        this.root = points;
                        restoreParent(this.root);
                    } else {
                        this.dimensions = new Array(points[0].length);
                        for (var i = 0; i < this.dimensions.length; i++) {
                            this.dimensions[i] = i;
                        }
                        this.root = buildTree(points, 0, null, this.dimensions);
                    }
                    this.metric = metric;
                }

                // Convert to a JSON serializable structure; this just requires removing
                // the `parent` property
                toJSON() {
                    const result = toJSONImpl(this.root, true);
                    result.dimensions = this.dimensions;
                    return result;
                }

                nearest(point, maxNodes, maxDistance) {
                    const metric = this.metric;
                    const dimensions = this.dimensions;
                    var i;

                    const bestNodes = new BinaryHeap(
                        function (e) {
                            return -e[1];
                        }
                    );

                    function nearestSearch(node) {
                        const dimension = dimensions[node.dimension];
                        const ownDistance = metric(point, node.obj);
                        const linearPoint = {};
                        var bestChild,
                            linearDistance,
                            otherChild,
                            i;

                        function saveNode(node, distance) {
                            bestNodes.push([node, distance]);
                            if (bestNodes.size() > maxNodes) {
                                bestNodes.pop();
                            }
                        }

                        for (i = 0; i < dimensions.length; i += 1) {
                            if (i === node.dimension) {
                                linearPoint[dimensions[i]] = point[dimensions[i]];
                            } else {
                                linearPoint[dimensions[i]] = node.obj[dimensions[i]];
                            }
                        }

                        linearDistance = metric(linearPoint, node.obj);

                        if (node.right === null && node.left === null) {
                            if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {
                                saveNode(node, ownDistance);
                            }
                            return;
                        }

                        if (node.right === null) {
                            bestChild = node.left;
                        } else if (node.left === null) {
                            bestChild = node.right;
                        } else {
                            if (point[dimension] < node.obj[dimension]) {
                                bestChild = node.left;
                            } else {
                                bestChild = node.right;
                            }
                        }

                        nearestSearch(bestChild);

                        if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {
                            saveNode(node, ownDistance);
                        }

                        if (bestNodes.size() < maxNodes || Math.abs(linearDistance) < bestNodes.peek()[1]) {
                            if (bestChild === node.left) {
                                otherChild = node.right;
                            } else {
                                otherChild = node.left;
                            }
                            if (otherChild !== null) {
                                nearestSearch(otherChild);
                            }
                        }
                    }

                    if (maxDistance) {
                        for (i = 0; i < maxNodes; i += 1) {
                            bestNodes.push([null, maxDistance]);
                        }
                    }

                    if (this.root) {
                        nearestSearch(this.root);
                    }

                    const result = [];
                    for (i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1) {
                        if (bestNodes.content[i][0]) {
                            result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);
                        }
                    }
                    return result;
                }
            }

            function toJSONImpl(src) {
                const dest = new Node(src.obj, src.dimension, null);
                if (src.left) dest.left = toJSONImpl(src.left);
                if (src.right) dest.right = toJSONImpl(src.right);
                return dest;
            }

            function buildTree(points, depth, parent, dimensions) {
                const dim = depth % dimensions.length;

                if (points.length === 0) {
                    return null;
                }
                if (points.length === 1) {
                    return new Node(points[0], dim, parent);
                }

                points.sort((a, b) => a[dimensions[dim]] - b[dimensions[dim]]);

                const median = Math.floor(points.length / 2);
                const node = new Node(points[median], dim, parent);
                node.left = buildTree(points.slice(0, median), depth + 1, node, dimensions);
                node.right = buildTree(points.slice(median + 1), depth + 1, node, dimensions);

                return node;
            }

            function restoreParent(root) {
                if (root.left) {
                    root.left.parent = root;
                    restoreParent(root.left);
                }

                if (root.right) {
                    root.right.parent = root;
                    restoreParent(root.right);
                }
            }

            // Binary heap implementation from:
            // http://eloquentjavascript.net/appendix2.html
            class BinaryHeap {
                constructor(scoreFunction) {
                    this.content = [];
                    this.scoreFunction = scoreFunction;
                }

                push(element) {
                    // Add the new element to the end of the array.
                    this.content.push(element);
                    // Allow it to bubble up.
                    this.bubbleUp(this.content.length - 1);
                }

                pop() {
                    // Store the first element so we can return it later.
                    var result = this.content[0];
                    // Get the element at the end of the array.
                    var end = this.content.pop();
                    // If there are any elements left, put the end element at the
                    // start, and let it sink down.
                    if (this.content.length > 0) {
                        this.content[0] = end;
                        this.sinkDown(0);
                    }
                    return result;
                }

                peek() {
                    return this.content[0];
                }

                size() {
                    return this.content.length;
                }

                bubbleUp(n) {
                    // Fetch the element that has to be moved.
                    var element = this.content[n];
                    // When at 0, an element can not go up any further.
                    while (n > 0) {
                        // Compute the parent element's index, and fetch it.
                        const parentN = Math.floor((n + 1) / 2) - 1;
                        const parent = this.content[parentN];
                        // Swap the elements if the parent is greater.
                        if (this.scoreFunction(element) < this.scoreFunction(parent)) {
                            this.content[parentN] = element;
                            this.content[n] = parent;
                            // Update 'n' to continue at the new position.
                            n = parentN;
                        } else { // Found a parent that is less, no need to move it further.
                            break;
                        }
                    }
                }

                sinkDown(n) {
                    // Look up the target element and its score.
                    var length = this.content.length;
                    var element = this.content[n];
                    var elemScore = this.scoreFunction(element);

                    while (true) {
                        // Compute the indices of the child elements.
                        var child2N = (n + 1) * 2;
                        var child1N = child2N - 1;
                        // This is used to store the new position of the element,
                        // if any.
                        var swap = null;
                        // If the first child exists (is inside the array)...
                        if (child1N < length) {
                            // Look it up and compute its score.
                            var child1 = this.content[child1N];
                            var child1Score = this.scoreFunction(child1);
                            // If the score is less than our element's, we need to swap.
                            if (child1Score < elemScore) {
                                swap = child1N;
                            }
                        }
                        // Do the same checks for the other child.
                        if (child2N < length) {
                            var child2 = this.content[child2N];
                            var child2Score = this.scoreFunction(child2);
                            if (child2Score < (swap === null ? elemScore : child1Score)) {
                                swap = child2N;
                            }
                        }

                        // If the element needs to be moved, swap it, and continue.
                        if (swap !== null) {
                            this.content[n] = this.content[swap];
                            this.content[swap] = element;
                            n = swap;
                        } else {
                            // Otherwise, we are done.
                            break;
                        }
                    }
                }
            }

            class KNN {

                /**
                 * @param {Array} dataset
                 * @param {Array} labels
                 * @param {object} options
                 * @param {number} [options.k=numberOfClasses + 1] - Number of neighbors to classify.
                 * @param {function} [options.distance=euclideanDistance] - Distance function that takes two parameters.
                 */
                constructor(dataset, labels, options = {}) {
                    if (dataset === true) {
                        const model = labels;
                        this.kdTree = new KDTree(model.kdTree, options);
                        this.k = model.k;
                        this.classes = new Set(model.classes);
                        this.isEuclidean = model.isEuclidean;
                        return;
                    }

                    const classes = new Set(labels);

                    const {
                        distance = euclidean_1,
                        k = classes.size + 1
                    } = options;

                    const points = new Array(dataset.length);
                    for (var i = 0; i < points.length; ++i) {
                        points[i] = dataset[i].slice();
                    }

                    for (i = 0; i < labels.length; ++i) {
                        points[i].push(labels[i]);
                    }

                    this.kdTree = new KDTree(points, distance);
                    this.k = k;
                    this.classes = classes;
                    this.isEuclidean = distance === euclidean_1;
                }

                /**
                 * Create a new KNN instance with the given model.
                 * @param {object} model
                 * @param {function} distance=euclideanDistance - distance function must be provided if the model wasn't trained with euclidean distance.
                 * @return {KNN}
                 */
                static load(model, distance = euclidean_1) {
                    if (model.name !== 'KNN') {
                        throw new Error('invalid model: ' + model.name);
                    }
                    if (!model.isEuclidean && distance === euclidean_1) {
                        throw new Error('a custom distance function was used to create the model. Please provide it again');
                    }
                    if (model.isEuclidean && distance !== euclidean_1) {
                        throw new Error('the model was created with the default distance function. Do not load it with another one');
                    }
                    return new KNN(true, model, distance);
                }

                /**
                 * Return a JSON containing the kd-tree model.
                 * @return {object} JSON KNN model.
                 */
                toJSON() {
                    return {
                        name: 'KNN',
                        kdTree: this.kdTree,
                        k: this.k,
                        classes: Array.from(this.classes),
                        isEuclidean: this.isEuclidean
                    };
                }

                /**
                 * Predicts the output given the matrix to predict.
                 * @param {Array} dataset
                 * @return {Array} predictions
                 */
                predict(dataset) {
                    if (Array.isArray(dataset)) {
                        if (typeof dataset[0] === 'number') {
                            return getSinglePrediction(this, dataset);
                        } else if (Array.isArray(dataset[0]) && typeof dataset[0][0] === 'number') {
                            const predictions = new Array(dataset.length);
                            for (var i = 0; i < dataset.length; i++) {
                                predictions[i] = getSinglePrediction(this, dataset[i]);
                            }
                            return predictions;
                        }
                    }
                    throw new TypeError('dataset to predict must be an array or a matrix');
                }
            }

            function getSinglePrediction(knn, currentCase) {
                var nearestPoints = knn.kdTree.nearest(currentCase, knn.k);
                var pointsPerClass = {};
                var predictedClass = -1;
                var maxPoints = -1;
                var lastElement = nearestPoints[0][0].length - 1;

                for (var element of knn.classes) {
                    pointsPerClass[element] = 0;
                }

                for (var i = 0; i < nearestPoints.length; ++i) {
                    var currentClass = nearestPoints[i][0][lastElement];
                    var currentPoints = ++pointsPerClass[currentClass];
                    if (currentPoints > maxPoints) {
                        predictedClass = currentClass;
                        maxPoints = currentPoints;
                    }
                }

                return predictedClass;
            }

            var src$7 = /*#__PURE__*/Object.freeze({
                        default: KNN
            });

            /**
             * @private
             * Function that given vector, returns his norm
             * @param {Vector} X
             * @return {number} Norm of the vector
             */
            function norm(X) {
                return Math.sqrt(X.clone().apply(pow2array).sum());
            }

            /**
             * @private
             * Function that pow 2 each element of a Matrix or a Vector,
             * used in the apply method of the Matrix object
             * @param {number} i - index i.
             * @param {number} j - index j.
             * @return {Matrix} The Matrix object modified at the index i, j.
             * */
            function pow2array(i, j) {
                this[i][j] = this[i][j] * this[i][j];
                return this;
            }

            /**
             * @private
             * Function that initialize an array of matrices.
             * @param {Array} array
             * @param {boolean} isMatrix
             * @return {Array} array with the matrices initialized.
             */
            function initializeMatrices(array, isMatrix) {
                if (isMatrix) {
                    for (var i = 0; i < array.length; ++i) {
                        for (var j = 0; j < array[i].length; ++j) {
                            var elem = array[i][j];
                            array[i][j] = elem !== null ? new Matrix$1(array[i][j]) : undefined;
                        }
                    }
                } else {
                    for (i = 0; i < array.length; ++i) {
                        array[i] = new Matrix$1(array[i]);
                    }
                }

                return array;
            }

            /**
             * @class PLS
             */
            class PLS {

                /**
                 * Constructor for Partial Least Squares (PLS)
                 * @param {object} options
                 * @param {number} [options.latentVectors] - Number of latent vector to get (if the algorithm doesn't find a good model below the tolerance)
                 * @param {number} [options.tolerance=1e-5]
                 * @param {boolean} [options.scale=true] - rescale dataset using mean.
                 * @param {object} model - for load purposes.
                 */
                constructor(options, model) {
                    if (options === true) {
                        this.meanX = model.meanX;
                        this.stdDevX = model.stdDevX;
                        this.meanY = model.meanY;
                        this.stdDevY = model.stdDevY;
                        this.PBQ = Matrix$1.checkMatrix(model.PBQ);
                        this.R2X = model.R2X;
                        this.scale = model.scale;
                        this.scaleMethod = model.scaleMethod;
                        this.tolerance = model.tolerance;
                    } else {
                        var {
                            tolerance = 1e-5,
                            scale = true,
                        } = options;
                        this.tolerance = tolerance;
                        this.scale = scale;
                        this.latentVectors = options.latentVectors;
                    }
                }

                /**
                 * Fits the model with the given data and predictions, in this function is calculated the
                 * following outputs:
                 *
                 * T - Score matrix of X
                 * P - Loading matrix of X
                 * U - Score matrix of Y
                 * Q - Loading matrix of Y
                 * B - Matrix of regression coefficient
                 * W - Weight matrix of X
                 *
                 * @param {Matrix|Array} trainingSet
                 * @param {Matrix|Array} trainingValues
                 */
                train(trainingSet, trainingValues) {
                    trainingSet = Matrix$1.checkMatrix(trainingSet);
                    trainingValues = Matrix$1.checkMatrix(trainingValues);

                    if (trainingSet.length !== trainingValues.length) {
                        throw new RangeError('The number of X rows must be equal to the number of Y rows');
                    }

                    this.meanX = matrix.mean(trainingSet);
                    this.stdDevX = matrix.standardDeviation(trainingSet, this.meanX, true);
                    this.meanY = matrix.mean(trainingValues);
                    this.stdDevY = matrix.standardDeviation(trainingValues, this.meanY, true);

                    if (this.scale) { // here should be the ml-preprocess project
                        trainingSet = trainingSet.clone().subRowVector(this.meanX).divRowVector(this.stdDevX);
                        trainingValues = trainingValues.clone().subRowVector(this.meanY).divRowVector(this.stdDevY);
                    }

                    if (this.latentVectors === undefined) {
                        this.latentVectors = Math.min(trainingSet.length - 1, trainingSet[0].length);
                    }

                    var rx = trainingSet.rows;
                    var cx = trainingSet.columns;
                    var ry = trainingValues.rows;
                    var cy = trainingValues.columns;

                    var ssqXcal = trainingSet.clone().mul(trainingSet).sum(); // for the r²
                    var sumOfSquaresY = trainingValues.clone().mul(trainingValues).sum();

                    var tolerance = this.tolerance;
                    var n = this.latentVectors;
                    var T = Matrix$1.zeros(rx, n);
                    var P = Matrix$1.zeros(cx, n);
                    var U = Matrix$1.zeros(ry, n);
                    var Q = Matrix$1.zeros(cy, n);
                    var B = Matrix$1.zeros(n, n);
                    var W = P.clone();
                    var k = 0;

                    while (norm(trainingValues) > tolerance && k < n) {
                        var transposeX = trainingSet.transpose();
                        var transposeY = trainingValues.transpose();

                        var tIndex = maxSumColIndex(trainingSet.clone().mulM(trainingSet));
                        var uIndex = maxSumColIndex(trainingValues.clone().mulM(trainingValues));

                        var t1 = trainingSet.getColumnVector(tIndex);
                        var u = trainingValues.getColumnVector(uIndex);
                        var t = Matrix$1.zeros(rx, 1);

                        while (norm(t1.clone().sub(t)) > tolerance) {
                            var w = transposeX.mmul(u);
                            w.div(norm(w));
                            t = t1;
                            t1 = trainingSet.mmul(w);
                            var q = transposeY.mmul(t1);
                            q.div(norm(q));
                            u = trainingValues.mmul(q);
                        }

                        t = t1;
                        var num = transposeX.mmul(t);
                        var den = (t.transpose().mmul(t))[0][0];
                        var p = num.div(den);
                        var pnorm = norm(p);
                        p.div(pnorm);
                        t.mul(pnorm);
                        w.mul(pnorm);

                        num = u.transpose().mmul(t);
                        den = (t.transpose().mmul(t))[0][0];
                        var b = (num.div(den))[0][0];
                        trainingSet.sub(t.mmul(p.transpose()));
                        trainingValues.sub(t.clone().mul(b).mmul(q.transpose()));

                        T.setColumn(k, t);
                        P.setColumn(k, p);
                        U.setColumn(k, u);
                        Q.setColumn(k, q);
                        W.setColumn(k, w);

                        B[k][k] = b;
                        k++;
                    }

                    k--;
                    T = T.subMatrix(0, T.rows - 1, 0, k);
                    P = P.subMatrix(0, P.rows - 1, 0, k);
                    U = U.subMatrix(0, U.rows - 1, 0, k);
                    Q = Q.subMatrix(0, Q.rows - 1, 0, k);
                    W = W.subMatrix(0, W.rows - 1, 0, k);
                    B = B.subMatrix(0, k, 0, k);

                    // TODO: review of R2Y
                    //this.R2Y = t.transpose().mmul(t).mul(q[k][0]*q[k][0]).divS(ssqYcal)[0][0];
                    //
                    this.ssqYcal = sumOfSquaresY;
                    this.E = trainingSet;
                    this.F = trainingValues;
                    this.T = T;
                    this.P = P;
                    this.U = U;
                    this.Q = Q;
                    this.W = W;
                    this.B = B;
                    this.PBQ = P.mmul(B).mmul(Q.transpose());
                    this.R2X = t.transpose().mmul(t).mmul(p.transpose().mmul(p)).div(ssqXcal)[0][0];
                }

                /**
                 * Predicts the behavior of the given dataset.
                 * @param {Matrix|Array} dataset - data to be predicted.
                 * @return {Matrix} - predictions of each element of the dataset.
                 */
                predict(dataset) {
                    var X = Matrix$1.checkMatrix(dataset);
                    if (this.scale) {
                        X = X.subRowVector(this.meanX).divRowVector(this.stdDevX);
                    }
                    var Y = X.mmul(this.PBQ);
                    Y = Y.mulRowVector(this.stdDevY).addRowVector(this.meanY);
                    return Y;
                }

                /**
                 * Returns the explained variance on training of the PLS model
                 * @return {number}
                 */
                getExplainedVariance() {
                    return this.R2X;
                }

                /**
                 * Export the current model to JSON.
                 * @return {object} - Current model.
                 */
                toJSON() {
                    return {
                        name: 'PLS',
                        R2X: this.R2X,
                        meanX: this.meanX,
                        stdDevX: this.stdDevX,
                        meanY: this.meanY,
                        stdDevY: this.stdDevY,
                        PBQ: this.PBQ,
                        tolerance: this.tolerance,
                        scale: this.scale,
                    };
                }

                /**
                 * Load a PLS model from a JSON Object
                 * @param {object} model
                 * @return {PLS} - PLS object from the given model
                 */
                static load(model) {
                    if (model.name !== 'PLS') {
                        throw new RangeError('Invalid model: ' + model.name);
                    }
                    return new PLS(true, model);
                }
            }

            /**
             * @private
             * Function that returns the index where the sum of each
             * column vector is maximum.
             * @param {Matrix} data
             * @return {number} index of the maximum
             */
            function maxSumColIndex(data) {
                return data.sum('column').maxIndex()[0];
            }

            /**
             * @class KOPLS
             */
            class KOPLS {

                /**
                 * Constructor for Kernel-based Orthogonal Projections to Latent Structures (K-OPLS)
                 * @param {object} options
                 * @param {number} [options.predictiveComponents] - Number of predictive components to use.
                 * @param {number} [options.orthogonalComponents] - Number of Y-Orthogonal components.
                 * @param {Kernel} [options.kernel] - Kernel object to apply, see [ml-kernel](https://github.com/mljs/kernel).
                 * @param {object} model - for load purposes.
                 */
                constructor(options, model) {
                    if (options === true) {
                        this.trainingSet = new Matrix$1(model.trainingSet);
                        this.YLoadingMat = new Matrix$1(model.YLoadingMat);
                        this.SigmaPow = new Matrix$1(model.SigmaPow);
                        this.YScoreMat = new Matrix$1(model.YScoreMat);
                        this.predScoreMat = initializeMatrices(model.predScoreMat, false);
                        this.YOrthLoadingVec = initializeMatrices(model.YOrthLoadingVec, false);
                        this.YOrthEigen = model.YOrthEigen;
                        this.YOrthScoreMat = initializeMatrices(model.YOrthScoreMat, false);
                        this.toNorm = initializeMatrices(model.toNorm, false);
                        this.TURegressionCoeff = initializeMatrices(model.TURegressionCoeff, false);
                        this.kernelX = initializeMatrices(model.kernelX, true);
                        this.kernel = model.kernel;
                        this.orthogonalComp = model.orthogonalComp;
                        this.predictiveComp = model.predictiveComp;
                    } else {
                        if (options.predictiveComponents === undefined) {
                            throw new RangeError('no predictive components found!');
                        }
                        if (options.orthogonalComponents === undefined) {
                            throw new RangeError('no orthogonal components found!');
                        }
                        if (options.kernel === undefined) {
                            throw new RangeError('no kernel found!');
                        }

                        this.orthogonalComp = options.orthogonalComponents;
                        this.predictiveComp = options.predictiveComponents;
                        this.kernel = options.kernel;
                    }
                }

                /**
                 * Train the K-OPLS model with the given training set and labels.
                 * @param {Matrix|Array} trainingSet
                 * @param {Matrix|Array} trainingValues
                 */
                train(trainingSet, trainingValues) {
                    trainingSet = Matrix$1.checkMatrix(trainingSet);
                    trainingValues = Matrix$1.checkMatrix(trainingValues);

                    // to save and compute kernel with the prediction dataset.
                    this.trainingSet = trainingSet.clone();

                    var kernelX = this.kernel.compute(trainingSet);

                    var Identity = Matrix$1.eye(kernelX.rows, kernelX.rows, 1);
                    var temp = kernelX;
                    kernelX = new Matrix$1(this.orthogonalComp + 1, this.orthogonalComp + 1);
                    kernelX[0][0] = temp;

                    var result = new SingularValueDecomposition$$1(trainingValues.transpose().mmul(kernelX[0][0]).mmul(trainingValues), {
                        computeLeftSingularVectors: true,
                        computeRightSingularVectors: false
                    });
                    var YLoadingMat = result.leftSingularVectors;
                    var Sigma = result.diagonalMatrix;

                    YLoadingMat = YLoadingMat.subMatrix(0, YLoadingMat.rows - 1, 0, this.predictiveComp - 1);
                    Sigma = Sigma.subMatrix(0, this.predictiveComp - 1, 0, this.predictiveComp - 1);

                    var YScoreMat = trainingValues.mmul(YLoadingMat);

                    var predScoreMat = new Array(this.orthogonalComp + 1);
                    var TURegressionCoeff = new Array(this.orthogonalComp + 1);
                    var YOrthScoreMat = new Array(this.orthogonalComp);
                    var YOrthLoadingVec = new Array(this.orthogonalComp);
                    var YOrthEigen = new Array(this.orthogonalComp);
                    var YOrthScoreNorm = new Array(this.orthogonalComp);

                    var SigmaPow = Matrix$1.pow(Sigma, -0.5);
                    // to avoid errors, check infinity
                    SigmaPow.apply(function (i, j) {
                        if (this[i][j] === Infinity) {
                            this[i][j] = 0.0;
                        }
                    });

                    for (var i = 0; i < this.orthogonalComp; ++i) {
                        predScoreMat[i] = kernelX[0][i].transpose().mmul(YScoreMat).mmul(SigmaPow);

                        var TpiPrime = predScoreMat[i].transpose();
                        TURegressionCoeff[i] = inverse$$1(TpiPrime.mmul(predScoreMat[i])).mmul(TpiPrime).mmul(YScoreMat);

                        result = new SingularValueDecomposition$$1(TpiPrime.mmul(Matrix$1.sub(kernelX[i][i], predScoreMat[i].mmul(TpiPrime))).mmul(predScoreMat[i]), {
                            computeLeftSingularVectors: true,
                            computeRightSingularVectors: false
                        });
                        var CoTemp = result.leftSingularVectors;
                        var SoTemp = result.diagonalMatrix;

                        YOrthLoadingVec[i] = CoTemp.subMatrix(0, CoTemp.rows - 1, 0, 0);
                        YOrthEigen[i] = SoTemp[0][0];

                        YOrthScoreMat[i] = Matrix$1.sub(kernelX[i][i], predScoreMat[i].mmul(TpiPrime)).mmul(predScoreMat[i]).mmul(YOrthLoadingVec[i]).mul(Math.pow(YOrthEigen[i], -0.5));

                        var toiPrime = YOrthScoreMat[i].transpose();
                        YOrthScoreNorm[i] = Matrix$1.sqrt(toiPrime.mmul(YOrthScoreMat[i]));

                        YOrthScoreMat[i] = YOrthScoreMat[i].divRowVector(YOrthScoreNorm[i]);

                        var ITo = Matrix$1.sub(Identity, YOrthScoreMat[i].mmul(YOrthScoreMat[i].transpose()));

                        kernelX[0][i + 1] = kernelX[0][i].mmul(ITo);
                        kernelX[i + 1][i + 1] = ITo.mmul(kernelX[i][i]).mmul(ITo);
                    }

                    var lastScoreMat = predScoreMat[this.orthogonalComp] = kernelX[0][this.orthogonalComp].transpose().mmul(YScoreMat).mmul(SigmaPow);

                    var lastTpPrime = lastScoreMat.transpose();
                    TURegressionCoeff[this.orthogonalComp] = inverse$$1(lastTpPrime.mmul(lastScoreMat)).mmul(lastTpPrime).mmul(YScoreMat);

                    this.YLoadingMat = YLoadingMat;
                    this.SigmaPow = SigmaPow;
                    this.YScoreMat = YScoreMat;
                    this.predScoreMat = predScoreMat;
                    this.YOrthLoadingVec = YOrthLoadingVec;
                    this.YOrthEigen = YOrthEigen;
                    this.YOrthScoreMat = YOrthScoreMat;
                    this.toNorm = YOrthScoreNorm;
                    this.TURegressionCoeff = TURegressionCoeff;
                    this.kernelX = kernelX;
                }

                /**
                 * Predicts the output given the matrix to predict.
                 * @param {Matrix|Array} toPredict
                 * @return {{y: Matrix, predScoreMat: Array<Matrix>, predYOrthVectors: Array<Matrix>}} predictions
                 */
                predict(toPredict) {

                    var KTestTrain = this.kernel.compute(toPredict, this.trainingSet);

                    var temp = KTestTrain;
                    KTestTrain = new Matrix$1(this.orthogonalComp + 1, this.orthogonalComp + 1);
                    KTestTrain[0][0] = temp;

                    var YOrthScoreVector = new Array(this.orthogonalComp);
                    var predScoreMat = new Array(this.orthogonalComp);

                    var i;
                    for (i = 0; i < this.orthogonalComp; ++i) {
                        predScoreMat[i] = KTestTrain[i][0].mmul(this.YScoreMat).mmul(this.SigmaPow);

                        YOrthScoreVector[i] = Matrix$1.sub(KTestTrain[i][i], predScoreMat[i].mmul(this.predScoreMat[i].transpose())).mmul(this.predScoreMat[i]).mmul(this.YOrthLoadingVec[i]).mul(Math.pow(this.YOrthEigen[i], -0.5));

                        YOrthScoreVector[i] = YOrthScoreVector[i].divRowVector(this.toNorm[i]);

                        var scoreMatPrime = this.YOrthScoreMat[i].transpose();
                        KTestTrain[i + 1][0] = Matrix$1.sub(KTestTrain[i][0], YOrthScoreVector[i].mmul(scoreMatPrime).mmul(this.kernelX[0][i].transpose()));

                        var p1 = Matrix$1.sub(KTestTrain[i][0], KTestTrain[i][i].mmul(this.YOrthScoreMat[i]).mmul(scoreMatPrime));
                        var p2 = YOrthScoreVector[i].mmul(scoreMatPrime).mmul(this.kernelX[i][i]);
                        var p3 = p2.mmul(this.YOrthScoreMat[i]).mmul(scoreMatPrime);

                        KTestTrain[i + 1][i + 1] = p1.sub(p2).add(p3);
                    }

                    predScoreMat[i] = KTestTrain[i][0].mmul(this.YScoreMat).mmul(this.SigmaPow);
                    var prediction = predScoreMat[i].mmul(this.TURegressionCoeff[i]).mmul(this.YLoadingMat.transpose());

                    return {
                        prediction: prediction,
                        predScoreMat: predScoreMat,
                        predYOrthVectors: YOrthScoreVector
                    };
                }

                /**
                 * Export the current model to JSON.
                 * @return {object} - Current model.
                 */
                toJSON() {
                    return {
                        name: 'K-OPLS',
                        YLoadingMat: this.YLoadingMat,
                        SigmaPow: this.SigmaPow,
                        YScoreMat: this.YScoreMat,
                        predScoreMat: this.predScoreMat,
                        YOrthLoadingVec: this.YOrthLoadingVec,
                        YOrthEigen: this.YOrthEigen,
                        YOrthScoreMat: this.YOrthScoreMat,
                        toNorm: this.toNorm,
                        TURegressionCoeff: this.TURegressionCoeff,
                        kernelX: this.kernelX,
                        trainingSet: this.trainingSet,
                        orthogonalComp: this.orthogonalComp,
                        predictiveComp: this.predictiveComp
                    };
                }

                /**
                 * Load a K-OPLS with the given model.
                 * @param {object} model
                 * @param {Kernel} kernel - kernel used on the model, see [ml-kernel](https://github.com/mljs/kernel).
                 * @return {KOPLS}
                 */
                static load(model, kernel) {
                    if (model.name !== 'K-OPLS') {
                        throw new RangeError('Invalid model: ' + model.name);
                    }

                    if (!kernel) {
                        throw new RangeError('You must provide a kernel for the model!');
                    }

                    model.kernel = kernel;
                    return new KOPLS(true, model);
                }
            }



            var src$8 = /*#__PURE__*/Object.freeze({
                        PLS: PLS,
                        KOPLS: KOPLS
            });

            /**
             *  Constructs a confusion matrix
             * @class ConfusionMatrix
             * @example
             * const CM = new ConfusionMatrix([[13, 2], [10, 5]], ['cat', 'dog'])
             * @param {Array<Array<number>>} matrix - The confusion matrix, a 2D Array. Rows represent the actual label and columns
             *     the predicted label.
             * @param {Array<any>} labels - Labels of the confusion matrix, a 1D Array
             */
            class ConfusionMatrix {
                constructor(matrix, labels) {
                    if (matrix.length !== matrix[0].length) {
                        throw new Error('Confusion matrix must be square');
                    }
                    if (labels.length !== matrix.length) {
                        throw new Error('Confusion matrix and labels should have the same length');
                    }
                    this.labels = labels;
                    this.matrix = matrix;
                }


                /**
                 * Construct confusion matrix from the predicted and actual labels (classes). Be sure to provide the arguments in
                 * the correct order!
                 * @param {Array<any>} actual  - The predicted labels of the classification
                 * @param {Array<any>} predicted     - The actual labels of the classification. Has to be of same length as
                 *     predicted.
                 * @param {object} [options] - Additional options
                 * @param {Array<any>} [options.labels] - The list of labels that should be used. If not provided the distinct set
                 *     of labels present in predicted and actual is used. Labels are compared using the strict equality operator
                 *     '==='
                 * @return {ConfusionMatrix} - Confusion matrix
                 */
                static fromLabels(actual, predicted, options = {}) {
                    if (predicted.length !== actual.length) {
                        throw new Error('predicted and actual must have the same length');
                    }
                    let distinctLabels;
                    if (options.labels) {
                        distinctLabels = new Set(options.labels);
                    } else {
                        distinctLabels = new Set([...actual, ...predicted]);
                    }
                    distinctLabels = Array.from(distinctLabels);
                    if (options.sort) {
                        distinctLabels.sort(options.sort);
                    }

                    // Create confusion matrix and fill with 0's
                    const matrix = Array.from({length: distinctLabels.length});
                    for (let i = 0; i < matrix.length; i++) {
                        matrix[i] = new Array(matrix.length);
                        matrix[i].fill(0);
                    }

                    for (let i = 0; i < predicted.length; i++) {
                        const actualIdx = distinctLabels.indexOf(actual[i]);
                        const predictedIdx = distinctLabels.indexOf(predicted[i]);
                        if (actualIdx >= 0 && predictedIdx >= 0) {
                            matrix[actualIdx][predictedIdx]++;
                        }
                    }

                    return new ConfusionMatrix(matrix, distinctLabels);
                }

                /**
                 * Get the confusion matrix
                 * @return {Array<Array<number> >}
                 */
                getMatrix() {
                    return this.matrix;
                }

                getLabels() {
                    return this.labels;
                }

                /**
                 * Get the total number of samples
                 * @return {number}
                 */
                getTotalCount() {
                    let predicted = 0;
                    for (var i = 0; i < this.matrix.length; i++) {
                        for (var j = 0; j < this.matrix.length; j++) {
                            predicted += this.matrix[i][j];
                        }
                    }
                    return predicted;
                }

                /**
                 * Get the total number of true predictions
                 * @return {number}
                 */
                getTrueCount() {
                    var count = 0;
                    for (var i = 0; i < this.matrix.length; i++) {
                        count += this.matrix[i][i];
                    }
                    return count;
                }

                /**
                 * Get the total number of false predictions.
                 * @return {number}
                 */
                getFalseCount() {
                    return this.getTotalCount() - this.getTrueCount();
                }

                /**
                 * Get the number of true positive predictions.
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getTruePositiveCount(label) {
                    const index = this.getIndex(label);
                    return this.matrix[index][index];
                }

                /**
                 * Get the number of true negative predictions
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getTrueNegativeCount(label) {
                    const index = this.getIndex(label);
                    var count = 0;
                    for (var i = 0; i < this.matrix.length; i++) {
                        for (var j = 0; j < this.matrix.length; j++) {
                            if (i !== index && j !== index) {
                                count += this.matrix[i][j];
                            }
                        }
                    }
                    return count;
                }

                /**
                 * Get the number of false positive predictions.
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getFalsePositiveCount(label) {
                    const index = this.getIndex(label);
                    var count = 0;
                    for (var i = 0; i < this.matrix.length; i++) {
                        if (i !== index) {
                            count += this.matrix[i][index];
                        }
                    }
                    return count;
                }

                /**
                 * Get the number of false negative predictions.
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getFalseNegativeCount(label) {
                    const index = this.getIndex(label);
                    var count = 0;
                    for (var i = 0; i < this.matrix.length; i++) {
                        if (i !== index) {
                            count += this.matrix[index][i];
                        }
                    }
                    return count;
                }

                /**
                 * Get the number of real positive samples.
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getPositiveCount(label) {
                    return this.getTruePositiveCount(label) + this.getFalseNegativeCount(label);
                }

                /**
                 * Get the number of real negative samples.
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getNegativeCount(label) {
                    return this.getTrueNegativeCount(label) + this.getFalsePositiveCount(label);
                }

                /**
                 * Get the index in the confusion matrix that corresponds to the given label
                 * @param {any} label - The label to search for
                 * @throws if the label is not found
                 * @return {number}
                 */
                getIndex(label) {
                    const index = this.labels.indexOf(label);
                    if (index === -1) throw new Error('The label does not exist');
                    return index;
                }

                /**
                 * Get the true positive rate a.k.a. sensitivity. Computes the ratio between the number of true positive predictions and the total number of positive samples.
                 * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number} - The true positive rate [0-1]
                 */
                getTruePositiveRate(label) {
                    return this.getTruePositiveCount(label) / this.getPositiveCount(label);
                }

                /**
                 * Get the true negative rate a.k.a. specificity. Computes the ration between the number of true negative predictions and the total number of negative samples.
                 * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getTrueNegativeRate(label) {
                    return this.getTrueNegativeCount(label) / this.getNegativeCount(label);
                }

                /**
                 * Get the positive predictive value a.k.a. precision. Computes TP / (TP + FP)
                 * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getPositivePredictiveValue(label) {
                    const TP = this.getTruePositiveCount(label);
                    return TP / (TP + this.getFalsePositiveCount(label));
                }

                /**
                 * Negative predictive value
                 * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getNegativePredictiveValue(label) {
                    const TN = this.getTrueNegativeCount(label);
                    return TN / (TN + this.getFalseNegativeCount(label));
                }

                /**
                 * False negative rate a.k.a. miss rate.
                 * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getFalseNegativeRate(label) {
                    return 1 - this.getTruePositiveRate(label);
                }

                /**
                 * False positive rate a.k.a. fall-out rate.
                 * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getFalsePositiveRate(label) {
                    return 1 - this.getTrueNegativeRate(label);
                }

                /**
                 * False discovery rate (FDR)
                 * {@link https://en.wikipedia.org/wiki/False_discovery_rate}
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getFalseDiscoveryRate(label) {
                    const FP = this.getFalsePositiveCount(label);
                    return FP / (FP + this.getTruePositiveCount(label));
                }

                /**
                 * False omission rate (FOR)
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getFalseOmissionRate(label) {
                    const FN = this.getFalseNegativeCount(label);
                    return FN / (FN + this.getTruePositiveCount(label));
                }

                /**
                 * F1 score
                 * {@link https://en.wikipedia.org/wiki/F1_score}
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getF1Score(label) {
                    const TP = this.getTruePositiveCount(label);
                    return 2 * TP / (2 * TP + this.getFalsePositiveCount(label) + this.getFalseNegativeCount(label));
                }

                /**
                 * Matthews correlation coefficient (MCC)
                 * {@link https://en.wikipedia.org/wiki/Matthews_correlation_coefficient}
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getMatthewsCorrelationCoefficient(label) {
                    const TP = this.getTruePositiveCount(label);
                    const TN = this.getTrueNegativeCount(label);
                    const FP = this.getFalsePositiveCount(label);
                    const FN = this.getFalseNegativeCount(label);
                    return (TP * TN - FP * FN) / Math.sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN));
                }

                /**
                 * Informedness
                 * {@link https://en.wikipedia.org/wiki/Youden%27s_J_statistic}
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getInformedness(label) {
                    return this.getTruePositiveRate(label) + this.getTrueNegativeRate(label) - 1;
                }

                /**
                 * Markedness
                 * @param {any} label - The label that should be considered "positive"
                 * @return {number}
                 */
                getMarkedness(label) {
                    return this.getPositivePredictiveValue(label) + this.getNegativePredictiveValue(label) - 1;
                }

                /**
                 * Get the confusion table.
                 * @param {any} label - The label that should be considered "positive"
                 * @return {Array<Array<number> >} - The 2x2 confusion table. [[TP, FN], [FP, TN]]
                 */
                getConfusionTable(label) {
                    return [
                        [
                            this.getTruePositiveCount(label),
                            this.getFalseNegativeCount(label)
                        ],
                        [
                            this.getFalsePositiveCount(label),
                            this.getTrueNegativeCount(label)
                        ]
                    ];
                }

                /**
                 * Get total accuracy.
                 * @return {number} - The ratio between the number of true predictions and total number of classifications ([0-1])
                 */
                getAccuracy() {
                    let correct = 0;
                    let incorrect = 0;
                    for (var i = 0; i < this.matrix.length; i++) {
                        for (var j = 0; j < this.matrix.length; j++) {
                            if (i === j) correct += this.matrix[i][j];
                            else incorrect += this.matrix[i][j];
                        }
                    }
                    return correct / (correct + incorrect);
                }


                /**
                 * Returns the element in the confusion matrix that corresponds to the given actual and predicted labels.
                 * @param {any} actual - The true label
                 * @param {any} predicted - The predicted label
                 * @return {number} - The element in the confusion matrix
                 */
                getCount(actual, predicted) {
                    const actualIndex = this.getIndex(actual);
                    const predictedIndex = this.getIndex(predicted);
                    return this.matrix[actualIndex][predictedIndex];
                }

                /**
                 * Compute the general prediction accuracy
                 * @deprecated Use getAccuracy
                 * @return {number} - The prediction accuracy ([0-1]
                 */
                get accuracy() {
                    return this.getAccuracy();
                }

                /**
                 * Compute the number of predicted observations
                 * @deprecated Use getTotalCount
                 * @return {number}
                 */
                get total() {
                    return this.getTotalCount();
                }
            }

            var src$9 = ConfusionMatrix;

            const defaultOptions$j = {
                mode: 'index'
            };

            var src$a = function *(M, N, options) {
                options = Object.assign({}, defaultOptions$j, options);
                var a = new Array(N);
                var c = new Array(M);
                var b = new Array(N);
                var p = new Array(N + 2);
                var x, y, z;

                // init a and b
                for (var i = 0; i < N; i++) {
                    a[i] = i;
                    if (i < N - M) b[i] = 0;
                    else b[i] = 1;
                }

                // init c
                for (i = 0; i < M; i++) {
                    c[i] = N - M + i;
                }

                // init p
                for (i = 0; i < p.length; i++) {
                    if (i === 0) p[i] = N + 1;
                    else if (i <= N - M) p[i] = 0;
                    else if (i <= N) p[i] = i - N + M;
                    else p[i] = -2;
                }

                function twiddle() {
                    var i, j, k;
                    j = 1;
                    while (p[j] <= 0)
                        j++;
                    if (p[j - 1] === 0) {
                        for (i = j - 1; i !== 1; i--)
                            p[i] = -1;
                        p[j] = 0;
                        x = z = 0;
                        p[1] = 1;
                        y = j - 1;
                    } else {
                        if (j > 1)
                            p[j - 1] = 0;
                        do
                            j++;
                        while (p[j] > 0);
                        k = j - 1;
                        i = j;
                        while (p[i] === 0)
                            p[i++] = -1;
                        if (p[i] === -1) {
                            p[i] = p[k];
                            z = p[k] - 1;
                            x = i - 1;
                            y = k - 1;
                            p[k] = -1;
                        } else {
                            if (i === p[0]) {
                                return 0;
                            } else {
                                p[j] = p[i];
                                z = p[i] - 1;
                                p[i] = 0;
                                x = j - 1;
                                y = i - 1;
                            }
                        }
                    }
                    return 1;
                }

                if (options.mode === 'index') {
                    yield c.slice();
                    while (twiddle()) {
                        c[z] = a[x];
                        yield c.slice();
                    }
                } else if (options.mode === 'mask') {
                    yield b.slice();
                    while (twiddle()) {
                        b[x] = 1;
                        b[y] = 0;
                        yield b.slice();
                    }
                } else {
                    throw new Error('Invalid mode');
                }
            };

            const CV = {};


            /**
             * Performs a leave-one-out cross-validation (LOO-CV) of the given samples. In LOO-CV, 1 observation is used as the
             * validation set while the rest is used as the training set. This is repeated once for each observation. LOO-CV is a
             * special case of LPO-CV. @see leavePout
             * @param {function} Classifier - The classifier's constructor to use for the cross validation. Expect ml-classifier
             *     api.
             * @param {Array} features - The features for all samples of the data-set
             * @param {Array} labels - The classification class of all samples of the data-set
             * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.
             * @return {ConfusionMatrix} - The cross-validation confusion matrix
             */
            CV.leaveOneOut = function (Classifier, features, labels, classifierOptions) {
                if (typeof labels === 'function') {
                    var callback = labels;
                    labels = features;
                    features = Classifier;
                    return CV.leavePOut(features, labels, 1, callback);
                }
                return CV.leavePOut(Classifier, features, labels, classifierOptions, 1);
            };


            /**
             * Performs a leave-p-out cross-validation (LPO-CV) of the given samples. In LPO-CV, p observations are used as the
             * validation set while the rest is used as the training set. This is repeated as many times as there are possible
             * ways to combine p observations from the set (unordered without replacement). Be aware that for relatively small
             * data-set size this can require a very large number of training and testing to do!
             * @param {function} Classifier - The classifier's constructor to use for the cross validation. Expect ml-classifier
             *     api.
             * @param {Array} features - The features for all samples of the data-set
             * @param {Array} labels - The classification class of all samples of the data-set
             * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.
             * @param {number} p - The size of the validation sub-samples' set
             * @return {ConfusionMatrix} - The cross-validation confusion matrix
             */
            CV.leavePOut = function (Classifier, features, labels, classifierOptions, p) {
                if (typeof classifierOptions === 'function') {
                    var callback = classifierOptions;
                    p = labels;
                    labels = features;
                    features = Classifier;
                }
                check(features, labels);
                const distinct = getDistinct(labels);
                const confusionMatrix = initMatrix(distinct.length, distinct.length);

                var N = features.length;
                var gen = src$a(p, N);
                var allIdx = new Array(N);
                for (let i = 0; i < N; i++) {
                    allIdx[i] = i;
                }
                for (const testIdx of gen) {
                    var trainIdx = allIdx.slice();

                    for (let i = testIdx.length - 1; i >= 0; i--) {
                        trainIdx.splice(testIdx[i], 1);
                    }

                    if (callback) {
                        validateWithCallback(features, labels, testIdx, trainIdx, confusionMatrix, distinct, callback);
                    } else {
                        validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct);
                    }

                }

                return new src$9(confusionMatrix, distinct);
            };

            /**
             * Performs k-fold cross-validation (KF-CV). KF-CV separates the data-set into k random equally sized partitions, and
             * uses each as a validation set, with all other partitions used in the training set. Observations left over from if k
             * does not divide the number of observations are left out of the cross-validation process.
             * @param {function} Classifier - The classifier's to use for the cross validation. Expect ml-classifier api.
             * @param {Array} features - The features for all samples of the data-set
             * @param {Array} labels - The classification class of all samples of the data-set
             * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.
             * @param {number} k - The number of partitions to create
             * @return {ConfusionMatrix} - The cross-validation confusion matrix
             */
            CV.kFold = function (Classifier, features, labels, classifierOptions, k) {
                if (typeof classifierOptions === 'function') {
                    var callback = classifierOptions;
                    k = labels;
                    labels = features;
                    features = Classifier;
                }
                check(features, labels);
                const distinct = getDistinct(labels);
                const confusionMatrix = initMatrix(distinct.length, distinct.length);
                var N = features.length;
                var allIdx = new Array(N);
                for (var i = 0; i < N; i++) {
                    allIdx[i] = i;
                }

                var l = Math.floor(N / k);
                // create random k-folds
                var current = [];
                var folds = [];
                while (allIdx.length) {
                    var randi = Math.floor(Math.random() * allIdx.length);
                    current.push(allIdx[randi]);
                    allIdx.splice(randi, 1);
                    if (current.length === l) {
                        folds.push(current);
                        current = [];
                    }
                }
                if (current.length) folds.push(current);
                folds = folds.slice(0, k);


                for (i = 0; i < folds.length; i++) {
                    var testIdx = folds[i];
                    var trainIdx = [];
                    for (var j = 0; j < folds.length; j++) {
                        if (j !== i) trainIdx = trainIdx.concat(folds[j]);
                    }

                    if (callback) {
                        validateWithCallback(features, labels, testIdx, trainIdx, confusionMatrix, distinct, callback);
                    } else {
                        validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct);
                    }
                }

                return new src$9(confusionMatrix, distinct);
            };

            function check(features, labels) {
                if (features.length !== labels.length) {
                    throw new Error('features and labels should have the same length');
                }
            }

            function initMatrix(rows, columns) {
                return new Array(rows).fill(0).map(() => new Array(columns).fill(0));
            }

            function getDistinct(arr) {
                var s = new Set();
                for (let i = 0; i < arr.length; i++) {
                    s.add(arr[i]);
                }
                return Array.from(s);
            }

            function validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct) {
                const {testFeatures, trainFeatures, testLabels, trainLabels} = getTrainTest(features, labels, testIdx, trainIdx);

                var classifier;
                if (Classifier.prototype.train) {
                    classifier = new Classifier(classifierOptions);
                    classifier.train(trainFeatures, trainLabels);
                } else {
                    classifier = new Classifier(trainFeatures, trainLabels, classifierOptions);
                }

                var predictedLabels = classifier.predict(testFeatures);
                updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct);
            }

            function validateWithCallback(features, labels, testIdx, trainIdx, confusionMatrix, distinct, callback) {
                const {testFeatures, trainFeatures, testLabels, trainLabels} = getTrainTest(features, labels, testIdx, trainIdx);
                const predictedLabels = callback(trainFeatures, trainLabels, testFeatures);
                updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct);
            }

            function updateConfusionMatrix(confusionMatrix, testLabels, predictedLabels, distinct) {

                for (var i = 0; i < predictedLabels.length; i++) {
                    const actualIdx = distinct.indexOf(testLabels[i]);
                    const predictedIdx = distinct.indexOf(predictedLabels[i]);
                    if (actualIdx < 0 || predictedIdx < 0) {
                        // eslint-disable-next-line no-console
                        console.warn(`ignore unknown predicted label ${predictedLabels[i]}`);
                    }
                    confusionMatrix[actualIdx][predictedIdx]++;
                }
            }


            function getTrainTest(features, labels, testIdx, trainIdx) {
                return {
                    testFeatures: testIdx.map(function (index) {
                        return features[index];
                    }),
                    trainFeatures: trainIdx.map(function (index) {
                        return features[index];
                    }),
                    testLabels: testIdx.map(function (index) {
                        return labels[index];
                    }),
                    trainLabels: trainIdx.map(function (index) {
                        return labels[index];
                    })
                };
            }

            var src$b = CV;

            var Matrix$6 = require$$0$2.Matrix;

            /**
             * @private
             * Retrieves the sum at each row of the given matrix.
             * @param {Matrix} matrix
             * @return {Matrix}
             */
            function sumRow(matrix) {
                var sum = Matrix$6.zeros(matrix.rows, 1);
                for (var i = 0; i < matrix.rows; ++i) {
                    for (var j = 0; j < matrix.columns; ++j) {
                        sum[i][0] += matrix[i][j];
                    }
                }
                return sum;
            }

            /**
             * @private
             * Retrieves the sum at each column of the given matrix.
             * @param {Matrix} matrix
             * @return {Matrix}
             */
            function sumCol(matrix) {
                var sum = Matrix$6.zeros(1, matrix.columns);
                for (var i = 0; i < matrix.rows; ++i) {
                    for (var j = 0; j < matrix.columns; ++j) {
                        sum[0][j] += matrix[i][j];
                    }
                }
                return sum;
            }

            /**
             * @private
             * Method that given an array of labels(predictions), returns two dictionaries, one to transform from labels to
             * numbers and other in the reverse way
             * @param {Array} array
             * @return {object}
             */
            function dictOutputs(array) {
                var inputs = {};
                var outputs = {};
                var index = 0;
                for (var i = 0; i < array.length; i += 1) {
                    if (inputs[array[i]] === undefined) {
                        inputs[array[i]] = index;
                        outputs[index] = array[i];
                        index++;
                    }
                }

                return {
                    inputs: inputs,
                    outputs: outputs
                };
            }

            var utils$1 = {
                dictOutputs: dictOutputs,
                sumCol: sumCol,
                sumRow: sumRow
            };

            function logistic(val) {
                return 1 / (1 + Math.exp(-val));
            }

            function expELU(val, param) {
                return val < 0 ? param * (Math.exp(val) - 1) : val;
            }

            function softExponential(val, param) {
                if (param < 0) {
                    return -Math.log(1 - param * (val + param)) / param;
                }
                if (param > 0) {
                    return ((Math.exp(param * val) - 1) / param) + param;
                }
                return val;
            }

            function softExponentialPrime(val, param) {
                if (param < 0) {
                    return 1 / (1 - param * (param + val));
                } else {
                    return Math.exp(param * val);
                }
            }

            const ACTIVATION_FUNCTIONS = {
                tanh: {
                    activation: Math.tanh,
                    derivate: val => 1 - (val * val)
                },
                identity: {
                    activation: val => val,
                    derivate: () => 1
                },
                logistic: {
                    activation: logistic,
                    derivate: val => logistic(val) * (1 - logistic(val))
                },
                arctan: {
                    activation: Math.atan,
                    derivate: val => 1 / (val * val + 1)
                },
                softsign: {
                    activation: val => val / (1 + Math.abs(val)),
                    derivate: val => 1 / ((1 + Math.abs(val)) * (1 + Math.abs(val)))
                },
                relu: {
                    activation: val => val < 0 ? 0 : val,
                    derivate: val => val < 0 ? 0 : 1
                },
                softplus: {
                    activation: val => Math.log(1 + Math.exp(val)),
                    derivate: val => 1 / (1 + Math.exp(-val))
                },
                bent: {
                    activation: val => ((Math.sqrt(val * val + 1) - 1) / 2) + val,
                    derivate: val => (val / (2 * Math.sqrt(val * val + 1))) + 1
                },
                sinusoid: {
                    activation: Math.sin,
                    derivate: Math.cos
                },
                sinc: {
                    activation: val => val === 0 ? 1 : Math.sin(val) / val,
                    derivate: val => val === 0 ? 0 : (Math.cos(val) / val) - (Math.sin(val) / (val * val))
                },
                gaussian: {
                    activation: val => Math.exp(-(val * val)),
                    derivate: val => -2 * val * Math.exp(-(val * val))
                },
                'parametric-relu': {
                    activation: (val, param) => val < 0 ? param * val : val,
                    derivate: (val, param) => val < 0 ? param : 1
                },
                'exponential-elu': {
                    activation: expELU,
                    derivate: (val, param) => val < 0 ? expELU(val, param) + param : 1
                },
                'soft-exponential': {
                    activation: softExponential,
                    derivate: softExponentialPrime
                }
            };

            var activationFunctions = ACTIVATION_FUNCTIONS;

            var Matrix$7 = require$$0$2.Matrix;




            class Layer {
                /**
                 * @private
                 * Create a new layer with the given options
                 * @param {object} options
                 * @param {number} [options.inputSize] - Number of conections that enter the neurons.
                 * @param {number} [options.outputSize] - Number of conections that leave the neurons.
                 * @param {number} [options.regularization] - Regularization parameter.
                 * @param {number} [options.epsilon] - Learning rate parameter.
                 * @param {string} [options.activation] - Activation function parameter from the FeedForwardNeuralNetwork class.
                 * @param {number} [options.activationParam] - Activation parameter if needed.
                 */
                constructor(options) {
                    this.inputSize = options.inputSize;
                    this.outputSize = options.outputSize;
                    this.regularization = options.regularization;
                    this.epsilon = options.epsilon;
                    this.activation = options.activation;
                    this.activationParam = options.activationParam;

                    var selectedFunction = activationFunctions[options.activation];
                    var params = selectedFunction.activation.length;

                    var actFunction = params > 1 ? val => selectedFunction.activation(val, options.activationParam) : selectedFunction.activation;
                    var derFunction = params > 1 ? val => selectedFunction.derivate(val, options.activationParam) : selectedFunction.derivate;

                    this.activationFunction = function (i, j) {
                        this[i][j] = actFunction(this[i][j]);
                    };
                    this.derivate = function (i, j) {
                        this[i][j] = derFunction(this[i][j]);
                    };

                    if (options.model) {
                        // load model
                        this.W = Matrix$7.checkMatrix(options.W);
                        this.b = Matrix$7.checkMatrix(options.b);

                    } else {
                        // default constructor

                        this.W = Matrix$7.rand(this.inputSize, this.outputSize);
                        this.b = Matrix$7.zeros(1, this.outputSize);

                        this.W.apply(function (i, j) {
                            this[i][j] /= Math.sqrt(options.inputSize);
                        });
                    }
                }

                /**
                 * @private
                 * propagate the given input through the current layer.
                 * @param {Matrix} X - input.
                 * @return {Matrix} output at the current layer.
                 */
                forward(X) {
                    var z = X.mmul(this.W).addRowVector(this.b);
                    z.apply(this.activationFunction);
                    this.a = z.clone();
                    return z;
                }

                /**
                 * @private
                 * apply backpropagation algorithm at the current layer
                 * @param {Matrix} delta - delta values estimated at the following layer.
                 * @param {Matrix} a - 'a' values from the following layer.
                 * @return {Matrix} the new delta values for the next layer.
                 */
                backpropagation(delta, a) {
                    this.dW = a.transposeView().mmul(delta);
                    this.db = utils$1.sumCol(delta);

                    var aCopy = a.clone();
                    return delta.mmul(this.W.transposeView()).mul(aCopy.apply(this.derivate));
                }

                /**
                 * @private
                 * Function that updates the weights at the current layer with the derivatives.
                 */
                update() {
                    this.dW.add(this.W.clone().mul(this.regularization));
                    this.W.add(this.dW.mul(-this.epsilon));
                    this.b.add(this.db.mul(-this.epsilon));
                }

                /**
                 * @private
                 * Export the current layer to JSON.
                 * @return {object} model
                 */
                toJSON() {
                    return {
                        model: 'Layer',
                        inputSize: this.inputSize,
                        outputSize: this.outputSize,
                        regularization: this.regularization,
                        epsilon: this.epsilon,
                        activation: this.activation,
                        W: this.W,
                        b: this.b
                    };
                }

                /**
                 * @private
                 * Creates a new Layer with the given model.
                 * @param {object} model
                 * @return {Layer}
                 */
                static load(model) {
                    if (model.model !== 'Layer') {
                        throw new RangeError('the current model is not a Layer model');
                    }
                    return new Layer(model);
                }

            }

            var Layer_1 = Layer;

            class OutputLayer extends Layer_1 {
                constructor(options) {
                    super(options);

                    this.activationFunction = function (i, j) {
                        this[i][j] = Math.exp(this[i][j]);
                    };
                }

                static load(model) {
                    if (model.model !== 'Layer') {
                        throw new RangeError('the current model is not a Layer model');
                    }

                    return new OutputLayer(model);
                }
            }

            var OutputLayer_1 = OutputLayer;

            const Matrix$8 = require$$0$2.Matrix;






            class FeedForwardNeuralNetworks {

                /**
                 * Create a new Feedforword neural network model.
                 * @class FeedForwardNeuralNetworks
                 * @param {object} [options]
                 * @param {Array} [options.hiddenLayers=[10]] - Array that contains the sizes of the hidden layers.
                 * @param {number} [options.iterations=50] - Number of iterations at the training step.
                 * @param {number} [options.learningRate=0.01] - Learning rate of the neural net (also known as epsilon).
                 * @param {number} [options.regularization=0.01] - Regularization parameter af the neural net.
                 * @param {string} [options.activation='tanh'] - activation function to be used. (options: 'tanh'(default),
                 * 'identity', 'logistic', 'arctan', 'softsign', 'relu', 'softplus', 'bent', 'sinusoid', 'sinc', 'gaussian').
                 * (single-parametric options: 'parametric-relu', 'exponential-relu', 'soft-exponential').
                 * @param {number} [options.activationParam=1] - if the selected activation function needs a parameter.
                 */
                constructor(options) {
                    options = options || {};
                    if (options.model) {
                        // load network
                        this.hiddenLayers = options.hiddenLayers;
                        this.iterations = options.iterations;
                        this.learningRate = options.learningRate;
                        this.regularization = options.regularization;
                        this.dicts = options.dicts;
                        this.activation = options.activation;
                        this.activationParam = options.activationParam;
                        this.model = new Array(options.layers.length);

                        for (var i = 0; i < this.model.length - 1; ++i) {
                            this.model[i] = Layer_1.load(options.layers[i]);
                        }
                        this.model[this.model.length - 1] = OutputLayer_1.load(options.layers[this.model.length - 1]);
                    } else {
                        // default constructor
                        this.hiddenLayers = options.hiddenLayers || [10];
                        this.iterations = options.iterations || 50;

                        this.learningRate = options.learningRate || 0.01;
                        this.regularization = options.regularization || 0.01;

                        this.activation = options.activation || 'tanh';
                        this.activationParam = options.activationParam || 1;
                        if (!(this.activation in Object.keys(activationFunctions))) {
                            this.activation = 'tanh';
                        }
                    }
                }

                /**
                 * @private
                 * Function that build and initialize the neural net.
                 * @param {number} inputSize - total of features to fit.
                 * @param {number} outputSize - total of labels of the prediction set.
                 */
                buildNetwork(inputSize, outputSize) {
                    var size = 2 + (this.hiddenLayers.length - 1);
                    this.model = new Array(size);

                    // input layer
                    this.model[0] = new Layer_1({
                        inputSize: inputSize,
                        outputSize: this.hiddenLayers[0],
                        activation: this.activation,
                        activationParam: this.activationParam,
                        regularization: this.regularization,
                        epsilon: this.learningRate
                    });

                    // hidden layers
                    for (var i = 1; i < this.hiddenLayers.length; ++i) {
                        this.model[i] = new Layer_1({
                            inputSize: this.hiddenLayers[i - 1],
                            outputSize: this.hiddenLayers[i],
                            activation: this.activation,
                            activationParam: this.activationParam,
                            regularization: this.regularization,
                            epsilon: this.learningRate
                        });
                    }

                    // output layer
                    this.model[size - 1] = new OutputLayer_1({
                        inputSize: this.hiddenLayers[this.hiddenLayers.length - 1],
                        outputSize: outputSize,
                        activation: this.activation,
                        activationParam: this.activationParam,
                        regularization: this.regularization,
                        epsilon: this.learningRate
                    });
                }

                /**
                 * Train the neural net with the given features and labels.
                 * @param {Matrix|Array} features
                 * @param {Matrix|Array} labels
                 */
                train(features, labels) {
                    features = Matrix$8.checkMatrix(features);
                    this.dicts = utils$1.dictOutputs(labels);

                    var inputSize = features.columns;
                    var outputSize = Object.keys(this.dicts.inputs).length;

                    this.buildNetwork(inputSize, outputSize);

                    for (var i = 0; i < this.iterations; ++i) {
                        var probabilities = this.propagate(features);
                        this.backpropagation(features, labels, probabilities);
                    }
                }

                /**
                 * @private
                 * Propagate the input(training set) and retrives the probabilities of each class.
                 * @param {Matrix} X
                 * @return {Matrix} probabilities of each class.
                 */
                propagate(X) {
                    var input = X;
                    for (var i = 0; i < this.model.length; ++i) {
                        //console.log(i);
                        input = this.model[i].forward(input);
                    }

                    // get probabilities
                    return input.divColumnVector(utils$1.sumRow(input));
                }

                /**
                 * @private
                 * Function that applies the backpropagation algorithm on each layer of the network
                 * in order to fit the features and labels.
                 * @param {Matrix} features
                 * @param {Array} labels
                 * @param {Matrix} probabilities - probabilities of each class of the feature set.
                 */
                backpropagation(features, labels, probabilities) {
                    for (var i = 0; i < probabilities.length; ++i) {
                        probabilities[i][this.dicts.inputs[labels[i]]] -= 1;
                    }

                    // remember, the last delta doesn't matter
                    var delta = probabilities;
                    for (i = this.model.length - 1; i >= 0; --i) {
                        var a = i > 0 ? this.model[i - 1].a : features;
                        delta = this.model[i].backpropagation(delta, a);
                    }

                    for (i = 0; i < this.model.length; ++i) {
                        this.model[i].update();
                    }
                }

                /**
                 * Predict the output given the feature set.
                 * @param {Array|Matrix} features
                 * @return {Array}
                 */
                predict(features) {
                    features = Matrix$8.checkMatrix(features);
                    var outputs = new Array(features.rows);
                    var probabilities = this.propagate(features);
                    for (var i = 0; i < features.rows; ++i) {
                        outputs[i] = this.dicts.outputs[probabilities.maxRowIndex(i)[1]];
                    }

                    return outputs;
                }

                /**
                 * Export the current model to JSON.
                 * @return {object} model
                 */
                toJSON() {
                    var model = {
                        model: 'FNN',
                        hiddenLayers: this.hiddenLayers,
                        iterations: this.iterations,
                        learningRate: this.learningRate,
                        regularization: this.regularization,
                        activation: this.activation,
                        activationParam: this.activationParam,
                        dicts: this.dicts,
                        layers: new Array(this.model.length)
                    };

                    for (var i = 0; i < this.model.length; ++i) {
                        model.layers[i] = this.model[i].toJSON();
                    }

                    return model;
                }

                /**
                 * Load a Feedforward Neural Network with the current model.
                 * @param {object} model
                 * @return {FeedForwardNeuralNetworks}
                 */
                static load(model) {
                    if (model.model !== 'FNN') {
                        throw new RangeError('the current model is not a feed forward network');
                    }

                    return new FeedForwardNeuralNetworks(model);
                }
            }

            var FeedForwardNeuralNetwork = FeedForwardNeuralNetworks;

            function NodeSquare(x, y, weights, som) {
                this.x = x;
                this.y = y;
                this.weights = weights;
                this.som = som;
                this.neighbors = {};
            }

            NodeSquare.prototype.adjustWeights = function adjustWeights(target, learningRate, influence) {
                for (var i = 0, ii = this.weights.length; i < ii; i++) {
                    this.weights[i] += learningRate * influence * (target[i] - this.weights[i]);
                }
            };

            NodeSquare.prototype.getDistance = function getDistance(otherNode) {
                return Math.max(Math.abs(this.x - otherNode.x), Math.abs(this.y - otherNode.y));
            };

            NodeSquare.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {
                var distX = Math.abs(this.x - otherNode.x),
                    distY = Math.abs(this.y - otherNode.y);
                return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY));
            };

            NodeSquare.prototype.getNeighbors = function getNeighbors(xy) {
                if (!this.neighbors[xy]) {
                    this.neighbors[xy] = new Array(2);

                    // left or bottom neighbor
                    var v;
                    if (this[xy] > 0) {
                        v = this[xy] - 1;
                    } else if (this.som.torus) {
                        v = this.som.gridDim[xy] - 1;
                    }
                    if (typeof v !== 'undefined') {
                        var x, y;
                        if (xy === 'x') {
                            x = v;
                            y = this.y;
                        } else {
                            x = this.x;
                            y = v;
                        }
                        this.neighbors[xy][0] = this.som.nodes[x][y];
                    }

                    // top or right neighbor
                    var w;
                    if (this[xy] < (this.som.gridDim[xy] - 1)) {
                        w = this[xy] + 1;
                    } else if (this.som.torus) {
                        w = 0;
                    }
                    if (typeof w !== 'undefined') {
                        if (xy === 'x') {
                            x = w;
                            y = this.y;
                        } else {
                            x = this.x;
                            y = w;
                        }
                        this.neighbors[xy][1] = this.som.nodes[x][y];
                    }
                }
                return this.neighbors[xy];
            };

            NodeSquare.prototype.getPos = function getPos(xy, element) {
                var neighbors = this.getNeighbors(xy),
                    distance = this.som.distance,
                    bestNeighbor,
                    direction;
                if(neighbors[0]) {
                    if (neighbors[1]) {
                        var dist1 = distance(element, neighbors[0].weights),
                            dist2 = distance(element, neighbors[1].weights);
                        if(dist1 < dist2) {
                            bestNeighbor = neighbors[0];
                            direction = -1;
                        } else {
                            bestNeighbor = neighbors[1];
                            direction = 1;
                        }
                    } else {
                        bestNeighbor = neighbors[0];
                        direction = -1;
                    }
                } else {
                    bestNeighbor = neighbors[1];
                    direction = 1;
                }
                var simA = 1 - distance(element, this.weights),
                    simB = 1 - distance(element, bestNeighbor.weights);
                var factor = ((simA - simB) / (2 - simA - simB));
                return 0.5 + 0.5 * factor * direction;
            };

            NodeSquare.prototype.getPosition = function getPosition(element) {
                return [
                    this.getPos('x', element),
                    this.getPos('y', element)
                ];
            };

            var nodeSquare = NodeSquare;

            function NodeHexagonal(x, y, weights, som) {

                nodeSquare.call(this, x, y, weights, som);

                this.hX = x - Math.floor(y / 2);
                this.z = 0 - this.hX - y;

            }

            NodeHexagonal.prototype = new nodeSquare;
            NodeHexagonal.prototype.constructor = NodeHexagonal;

            NodeHexagonal.prototype.getDistance = function getDistanceHexagonal(otherNode) {
                return Math.max(Math.abs(this.hX - otherNode.hX), Math.abs(this.y - otherNode.y), Math.abs(this.z - otherNode.z));
            };

            NodeHexagonal.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {
                var distX = Math.abs(this.hX - otherNode.hX),
                    distY = Math.abs(this.y - otherNode.y),
                    distZ = Math.abs(this.z - otherNode.z);
                return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY), Math.min(distZ, this.som.gridDim.z - distZ));
            };

            NodeHexagonal.prototype.getPosition = function getPosition() {
                throw new Error('Unimplemented : cannot get position of the points for hexagonal grid');
            };

            var nodeHexagonal = NodeHexagonal;

            var defaultOptions$k = {
                fields: 3,
                randomizer: Math.random,
                distance: squareEuclidean,
                iterations: 10,
                learningRate: 0.1,
                gridType: 'rect',
                torus: true,
                method: 'random'
            };

            function SOM(x, y, options, reload) {

                this.x = x;
                this.y = y;

                options = options || {};
                this.options = {};
                for (var i in defaultOptions$k) {
                    if (options.hasOwnProperty(i)) {
                        this.options[i] = options[i];
                    } else {
                        this.options[i] = defaultOptions$k[i];
                    }
                }

                if (typeof this.options.fields === 'number') {
                    this.numWeights = this.options.fields;
                } else if (Array.isArray(this.options.fields)) {
                    this.numWeights = this.options.fields.length;
                    var converters = getConverters(this.options.fields);
                    this.extractor = converters.extractor;
                    this.creator = converters.creator;
                } else {
                    throw new Error('Invalid fields definition');
                }

                if (this.options.gridType === 'rect') {
                    this.nodeType = nodeSquare;
                    this.gridDim = {
                        x: x,
                        y: y
                    };
                } else {
                    this.nodeType = nodeHexagonal;
                    var hx = this.x - Math.floor(this.y / 2);
                    this.gridDim = {
                        x: hx,
                        y: this.y,
                        z: -(0 - hx - this.y)
                    };
                }

                this.torus = this.options.torus;
                this.distanceMethod = this.torus ? 'getDistanceTorus' : 'getDistance';

                this.distance = this.options.distance;

                this.maxDistance = getMaxDistance(this.distance, this.numWeights);

                if (reload === true) { // For model loading
                    this.done = true;
                    return;
                }
                if (!(x > 0 && y > 0)) {
                    throw new Error('x and y must be positive');
                }

                this.times = {
                    findBMU: 0,
                    adjust: 0
                };

                this.randomizer = this.options.randomizer;

                this.iterationCount = 0;
                this.iterations = this.options.iterations;

                this.startLearningRate = this.learningRate = this.options.learningRate;

                this.mapRadius = Math.floor(Math.max(x, y) / 2);

                this.algorithmMethod = this.options.method;

                this._initNodes();

                this.done = false;
            }

            SOM.load = function loadModel(model, distance) {
                if (model.name === 'SOM') {
                    var x = model.data.length,
                        y = model.data[0].length;
                    if (distance) {
                        model.options.distance = distance;
                    } else if (model.options.distance) {
                        model.options.distance = eval('(' + model.options.distance + ')');
                    }
                    var som = new SOM(x, y, model.options, true);
                    som.nodes = new Array(x);
                    for (var i = 0; i < x; i++) {
                        som.nodes[i] = new Array(y);
                        for (var j = 0; j < y; j++) {
                            som.nodes[i][j] = new som.nodeType(i, j, model.data[i][j], som);
                        }
                    }
                    return som;
                } else {
                    throw new Error('expecting a SOM model');
                }
            };

            SOM.prototype.export = function exportModel(includeDistance) {
                if (!this.done) {
                    throw new Error('model is not ready yet');
                }
                var model = {
                    name: 'SOM'
                };
                model.options = {
                    fields: this.options.fields,
                    gridType: this.options.gridType,
                    torus: this.options.torus
                };
                model.data = new Array(this.x);
                for (var i = 0; i < this.x; i++) {
                    model.data[i] = new Array(this.y);
                    for (var j = 0; j < this.y; j++) {
                        model.data[i][j] = this.nodes[i][j].weights;
                    }
                }
                if (includeDistance) {
                    model.options.distance = this.distance.toString();
                }
                return model;
            };

            SOM.prototype._initNodes = function initNodes() {
                var now = Date.now(),
                    i, j, k;
                this.nodes = new Array(this.x);
                for (i = 0; i < this.x; i++) {
                    this.nodes[i] = new Array(this.y);
                    for (j = 0; j < this.y; j++) {
                        var weights = new Array(this.numWeights);
                        for (k = 0; k < this.numWeights; k++) {
                            weights[k] = this.randomizer();
                        }
                        this.nodes[i][j] = new this.nodeType(i, j, weights, this);
                    }
                }
                this.times.initNodes = Date.now() - now;
            };

            SOM.prototype.setTraining = function setTraining(trainingSet) {
                if (this.trainingSet) {
                    throw new Error('training set has already been set');
                }
                var now = Date.now();
                var convertedSet = trainingSet;
                var i, l = trainingSet.length;
                if (this.extractor) {
                    convertedSet = new Array(l);
                    for (i = 0; i < l; i++) {
                        convertedSet[i] = this.extractor(trainingSet[i]);
                    }
                }
                this.numIterations = this.iterations * l;

                if (this.algorithmMethod === 'random') {
                    this.timeConstant = this.numIterations / Math.log(this.mapRadius);
                } else {
                    this.timeConstant = l / Math.log(this.mapRadius);
                }
                this.trainingSet = convertedSet;
                this.times.setTraining = Date.now() - now;
            };

            SOM.prototype.trainOne = function trainOne() {
                if (this.done) {

                    return false;

                } else if (this.numIterations-- > 0) {

                    var neighbourhoodRadius,
                        trainingValue,
                        trainingSetFactor;

                    if (this.algorithmMethod === 'random') { // Pick a random value of the training set at each step
                        neighbourhoodRadius = this.mapRadius * Math.exp(-this.iterationCount / this.timeConstant);
                        trainingValue = getRandomValue(this.trainingSet, this.randomizer);
                        this._adjust(trainingValue, neighbourhoodRadius);
                        this.learningRate = this.startLearningRate * Math.exp(-this.iterationCount / this.numIterations);
                    } else { // Get next input vector
                        trainingSetFactor = -Math.floor(this.iterationCount / this.trainingSet.length);
                        neighbourhoodRadius = this.mapRadius * Math.exp(trainingSetFactor / this.timeConstant);
                        trainingValue = this.trainingSet[this.iterationCount % this.trainingSet.length];
                        this._adjust(trainingValue, neighbourhoodRadius);
                        if (((this.iterationCount + 1) % this.trainingSet.length) === 0) {
                            this.learningRate = this.startLearningRate * Math.exp(trainingSetFactor / Math.floor(this.numIterations / this.trainingSet.length));
                        }
                    }

                    this.iterationCount++;

                    return true;

                } else {

                    this.done = true;
                    return false;

                }
            };

            SOM.prototype._adjust = function adjust(trainingValue, neighbourhoodRadius) {
                var now = Date.now(),
                    x, y, dist, influence;

                var bmu = this._findBestMatchingUnit(trainingValue);

                var now2 = Date.now();
                this.times.findBMU += now2 - now;

                var radiusLimit = Math.floor(neighbourhoodRadius);
                var xMin = bmu.x - radiusLimit,
                    xMax = bmu.x + radiusLimit,
                    yMin = bmu.y - radiusLimit,
                    yMax = bmu.y + radiusLimit;

                for (x = xMin; x <= xMax; x++) {
                    var theX = x;
                    if (x < 0) {
                        theX += this.x;
                    } else if (x >= this.x) {
                        theX -= this.x;
                    }
                    for (y = yMin; y <= yMax; y++) {
                        var theY = y;
                        if (y < 0) {
                            theY += this.y;
                        } else if (y >= this.y) {
                            theY -= this.y;
                        }

                        dist = bmu[this.distanceMethod](this.nodes[theX][theY]);

                        if (dist < neighbourhoodRadius) {
                            influence = Math.exp(-dist / (2 * neighbourhoodRadius));
                            this.nodes[theX][theY].adjustWeights(trainingValue, this.learningRate, influence);
                        }

                    }
                }

                this.times.adjust += (Date.now() - now2);

            };

            SOM.prototype.train = function train(trainingSet) {
                if (!this.done) {
                    this.setTraining(trainingSet);
                    while (this.trainOne()) {
                    }
                }
            };

            SOM.prototype.getConvertedNodes = function getConvertedNodes() {
                var result = new Array(this.x);
                for (var i = 0; i < this.x; i++) {
                    result[i] = new Array(this.y);
                    for (var j = 0; j < this.y; j++) {
                        var node = this.nodes[i][j];
                        result[i][j] = this.creator ? this.creator(node.weights) : node.weights;
                    }
                }
                return result;
            };

            SOM.prototype._findBestMatchingUnit = function findBestMatchingUnit(candidate) {

                var bmu,
                    lowest = Infinity,
                    dist;

                for (var i = 0; i < this.x; i++) {
                    for (var j = 0; j < this.y; j++) {
                        dist = this.distance(this.nodes[i][j].weights, candidate);
                        if (dist < lowest) {
                            lowest = dist;
                            bmu = this.nodes[i][j];
                        }
                    }
                }

                return bmu;

            };

            SOM.prototype.predict = function predict(data, computePosition) {
                if (typeof data === 'boolean') {
                    computePosition = data;
                    data = null;
                }
                if (!data) {
                    data = this.trainingSet;
                }
                if (Array.isArray(data) && (Array.isArray(data[0]) || (typeof data[0] === 'object'))) { // predict a dataset
                    var self = this;
                    return data.map(function (element) {
                        return self._predict(element, computePosition);
                    });
                } else { // predict a single element
                    return this._predict(data, computePosition);
                }
            };

            SOM.prototype._predict = function _predict(element, computePosition) {
                if (!Array.isArray(element)) {
                    element = this.extractor(element);
                }
                var bmu = this._findBestMatchingUnit(element);
                var result = [bmu.x, bmu.y];
                if (computePosition) {
                    result[2] = bmu.getPosition(element);
                }
                return result;
            };

            // As seen in http://www.scholarpedia.org/article/Kohonen_network
            SOM.prototype.getQuantizationError = function getQuantizationError() {
                var fit = this.getFit(),
                    l = fit.length,
                    sum = 0;
                for (var i = 0; i < l; i++) {
                    sum += fit[i];
                }
                return sum / l;
            };

            SOM.prototype.getFit = function getFit(dataset) {
                if (!dataset) {
                    dataset = this.trainingSet;
                }
                var l = dataset.length,
                    bmu,
                    result = new Array(l);
                for (var i = 0; i < l; i++) {
                    bmu = this._findBestMatchingUnit(dataset[i]);
                    result[i] = Math.sqrt(this.distance(dataset[i], bmu.weights));
                }
                return result;
            };

            function getConverters(fields) {
                var l = fields.length,
                    normalizers = new Array(l),
                    denormalizers = new Array(l);
                for (var i = 0; i < l; i++) {
                    normalizers[i] = getNormalizer(fields[i].range);
                    denormalizers[i] = getDenormalizer(fields[i].range);
                }
                return {
                    extractor: function extractor(value) {
                        var result = new Array(l);
                        for (var i = 0; i < l; i++) {
                            result[i] = normalizers[i](value[fields[i].name]);
                        }
                        return result;
                    },
                    creator: function creator(value) {
                        var result = {};
                        for (var i = 0; i < l; i++) {
                            result[fields[i].name] = denormalizers[i](value[i]);
                        }
                        return result;
                    }
                };
            }

            function getNormalizer(minMax) {
                return function normalizer(value) {
                    return (value - minMax[0]) / (minMax[1] - minMax[0]);
                };
            }

            function getDenormalizer(minMax) {
                return function denormalizer(value) {
                    return (minMax[0] + value * (minMax[1] - minMax[0]));
                };
            }

            function squareEuclidean(a, b) {
                var d = 0;
                for (var i = 0, ii = a.length; i < ii; i++) {
                    d += (a[i] - b[i]) * (a[i] - b[i]);
                }
                return d;
            }

            function getRandomValue(arr, randomizer) {
                return arr[Math.floor(randomizer() * arr.length)];
            }

            function getMaxDistance(distance, numWeights) {
                var zero = new Array(numWeights),
                    one = new Array(numWeights);
                for (var i = 0; i < numWeights; i++) {
                    zero[i] = 0;
                    one[i] = 1;
                }
                return distance(zero, one);
            }

            var src$c = SOM;

            function maybeToPrecision(value, digits) {
                if (value < 0) {
                    value = 0 - value;
                    if (typeof digits === 'number') {
                        return '- ' + value.toPrecision(digits);
                    } else {
                        return '- ' + value.toString();
                    }
                } else {
                    if (typeof digits === 'number') {
                        return value.toPrecision(digits);
                    } else {
                        return value.toString();
                    }
                }
            }

            function checkArraySize(x, y) {
                if (!Array.isArray(x) || !Array.isArray(y)) {
                    throw new TypeError('x and y must be arrays');
                }
                if (x.length !== y.length) {
                    throw new RangeError('x and y arrays must have the same length');
                }
            }

            class BaseRegression {
                constructor() {
                    if (new.target === BaseRegression) {
                        throw new Error('BaseRegression must be subclassed');
                    }
                }

                predict(x) {
                    if (typeof x === 'number') {
                        return this._predict(x);
                    } else if (Array.isArray(x)) {
                        const y = new Array(x.length);
                        for (let i = 0; i < x.length; i++) {
                            y[i] = this._predict(x[i]);
                        }
                        return y;
                    } else {
                        throw new TypeError('x must be a number or array');
                    }
                }

                _predict() {
                    throw new Error('_predict must be implemented');
                }

                train() {
                    //Do nothing for this package
                }

                toString() {
                    return '';
                }

                toLaTeX() {
                    return '';
                }

                /**
                 * Return the correlation coefficient of determination (r) and chi-square.
                 * @param {Array<number>} x
                 * @param {Array<number>} y
                 * @return {object}
                 */
                score(x, y) {
                    if (!Array.isArray(x) || !Array.isArray(y) || x.length !== y.length) {
                        throw new Error('x and y must be arrays of the same length');
                    }

                    const n = x.length;
                    const y2 = new Array(n);
                    for (let i = 0; i < n; i++) {
                        y2[i] = this._predict(x[i]);
                    }

                    let xSum = 0;
                    let ySum = 0;
                    let chi2 = 0;
                    let rmsd = 0;
                    let xSquared = 0;
                    let ySquared = 0;
                    let xY = 0;
                    for (let i = 0; i < n; i++) {
                        xSum += y2[i];
                        ySum += y[i];
                        xSquared += y2[i] * y2[i];
                        ySquared += y[i] * y[i];
                        xY += y2[i] * y[i];
                        if (y[i] !== 0) {
                            chi2 += (y[i] - y2[i]) * (y[i] - y2[i]) / y[i];
                        }
                        rmsd = (y[i] - y2[i]) * (y[i] - y2[i]);
                    }

                    const r = (n * xY - xSum * ySum) / Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));

                    return {
                        r: r,
                        r2: r * r,
                        chi2: chi2,
                        rmsd: rmsd * rmsd / n
                    };
                }
            }

            class SimpleLinearRegression extends BaseRegression {
                constructor(x, y) {
                    super();
                    if (x === true) {
                        this.slope = y.slope;
                        this.intercept = y.intercept;
                        this.coefficients = [y.intercept, y.slope];
                    } else {
                        checkArraySize(x, y);
                        regress(this, x, y);
                    }
                }

                toJSON() {
                    return {
                        name: 'simpleLinearRegression',
                        slope: this.slope,
                        intercept: this.intercept
                    };
                }

                _predict(x) {
                    return this.slope * x + this.intercept;
                }

                computeX(y) {
                    return (y - this.intercept) / this.slope;
                }

                toString(precision) {
                    let result = 'f(x) = ';
                    if (this.slope !== 0) {
                        const xFactor = maybeToPrecision(this.slope, precision);
                        result += (xFactor === '1' ? '' : xFactor + ' * ') + 'x';
                        if (this.intercept) {
                            const absIntercept = Math.abs(this.intercept);
                            const operator = absIntercept === this.intercept ? '+' : '-';
                            result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;
                        }
                    } else {
                        result += maybeToPrecision(this.intercept, precision);
                    }
                    return result;
                }

                toLaTeX(precision) {
                    return this.toString(precision);
                }

                static load(json) {
                    if (json.name !== 'simpleLinearRegression') {
                        throw new TypeError('not a SLR model');
                    }
                    return new SimpleLinearRegression(true, json);
                }
            }

            function regress(slr, x, y) {
                const n = x.length;
                let xSum = 0;
                let ySum = 0;

                let xSquared = 0;
                let xY = 0;

                for (let i = 0; i < n; i++) {
                    xSum += x[i];
                    ySum += y[i];
                    xSquared += x[i] * x[i];
                    xY += x[i] * y[i];
                }

                const numerator = (n * xY - xSum * ySum);
                slr.slope = numerator / (n * xSquared - xSum * xSum);
                slr.intercept = (1 / n) * ySum - slr.slope * (1 / n) * xSum;
                slr.coefficients = [slr.intercept, slr.slope];
            }

            class PolynomialRegression extends BaseRegression {
                constructor(x, y, degree) {
                    super();
                    if (x === true) {
                        this.degree = y.degree;
                        this.powers = y.powers;
                        this.coefficients = y.coefficients;
                    } else {
                        checkArraySize(x, y);
                        regress$1(this, x, y, degree);
                    }
                }

                _predict(x) {
                    let y = 0;
                    for (let k = 0; k < this.powers.length; k++) {
                        y += this.coefficients[k] * Math.pow(x, this.powers[k]);
                    }
                    return y;
                }

                toJSON() {
                    return {
                        name: 'polynomialRegression',
                        degree: this.degree,
                        powers: this.powers,
                        coefficients: this.coefficients
                    };
                }

                toString(precision) {
                    return this._toFormula(precision, false);
                }

                toLaTeX(precision) {
                    return this._toFormula(precision, true);
                }

                _toFormula(precision, isLaTeX) {
                    let sup = '^';
                    let closeSup = '';
                    let times = ' * ';
                    if (isLaTeX) {
                        sup = '^{';
                        closeSup = '}';
                        times = '';
                    }

                    let fn = '';
                    let str = '';
                    for (let k = 0; k < this.coefficients.length; k++) {
                        str = '';
                        if (this.coefficients[k] !== 0) {
                            if (this.powers[k] === 0) {
                                str = maybeToPrecision(this.coefficients[k], precision);
                            } else {
                                if (this.powers[k] === 1) {
                                    str = maybeToPrecision(this.coefficients[k], precision) + times + 'x';
                                } else {
                                    str = maybeToPrecision(this.coefficients[k], precision) + times + 'x' + sup + this.powers[k] + closeSup;
                                }
                            }

                            if (this.coefficients[k] > 0 && k !== (this.coefficients.length - 1)) {
                                str = ' + ' + str;
                            } else if (k !== (this.coefficients.length - 1)) {
                                str = ' ' + str;
                            }
                        }
                        fn = str + fn;
                    }
                    if (fn.charAt(0) === '+') {
                        fn = fn.slice(1);
                    }

                    return 'f(x) = ' + fn;
                }

                static load(json) {
                    if (json.name !== 'polynomialRegression') {
                        throw new TypeError('not a polynomial regression model');
                    }
                    return new PolynomialRegression(true, json);
                }
            }

            function regress$1(pr, x, y, degree) {
                const n = x.length;
                let powers;
                if (Array.isArray(degree)) {
                    powers = degree;
                    degree = powers.length;
                } else {
                    degree++;
                    powers = new Array(degree);
                    for (let k = 0; k < degree; k++) {
                        powers[k] = k;
                    }
                }
                const F = new Matrix$1(n, degree);
                const Y = new Matrix$1([y]);
                for (let k = 0; k < degree; k++) {
                    for (let i = 0; i < n; i++) {
                        if (powers[k] === 0) {
                            F[i][k] = 1;
                        } else {
                            F[i][k] = Math.pow(x[i], powers[k]);
                        }
                    }
                }

                const FT = F.transposeView();
                const A = FT.mmul(F);
                const B = FT.mmul(Y.transposeView());

                pr.degree = degree - 1;
                pr.powers = powers;
                pr.coefficients = solve$$1(A, B).to1DArray();
            }

            class ExponentialRegression extends BaseRegression {
                constructor(x, y) {
                    super();
                    if (x === true) {
                        this.A = y.A;
                        this.B = y.B;
                    } else {
                        checkArraySize(x, y);
                        regress$2(this, x, y);
                    }
                }

                _predict(input) {
                    return this.B * Math.exp(input * this.A);
                }

                toJSON() {
                    return {
                        name: 'exponentialRegression',
                        A: this.A,
                        B: this.B
                    };
                }

                toString(precision) {
                    return 'f(x) = ' + maybeToPrecision(this.B, precision) + ' * e^(' + maybeToPrecision(this.A, precision) + ' * x)';
                }

                toLaTeX(precision) {
                    if (this.A >= 0) {
                        return 'f(x) = ' + maybeToPrecision(this.B, precision) + 'e^{' + maybeToPrecision(this.A, precision) + 'x}';
                    } else {
                        return 'f(x) = \\frac{' + maybeToPrecision(this.B, precision) + '}{e^{' + maybeToPrecision(-this.A, precision) + 'x}}';
                    }

                }

                static load(json) {
                    if (json.name !== 'exponentialRegression') {
                        throw new TypeError('not a exponential regression model');
                    }
                    return new ExponentialRegression(true, json);
                }
            }

            function regress$2(er, x, y) {
                const n = x.length;
                const yl = new Array(n);
                for (let i = 0; i < n; i++) {
                    yl[i] = Math.log(y[i]);
                }

                const linear = new SimpleLinearRegression(x, yl);
                er.A = linear.slope;
                er.B = Math.exp(linear.intercept);
            }

            class PowerRegression extends BaseRegression {
                constructor(x, y) {
                    super();
                    if (x === true) { // reloading model
                        this.A = y.A;
                        this.B = y.B;
                    } else {
                        checkArraySize(x, y);
                        regress$3(this, x, y);
                    }
                }

                _predict(newInputs) {
                    return this.A * Math.pow(newInputs, this.B);
                }

                toJSON() {
                    return {
                        name: 'powerRegression',
                        A: this.A,
                        B: this.B
                    };
                }

                toString(precision) {
                    return 'f(x) = ' + maybeToPrecision(this.A, precision) + ' * x^' + maybeToPrecision(this.B, precision);
                }

                toLaTeX(precision) {
                    if (this.B >= 0) {
                        return 'f(x) = ' + maybeToPrecision(this.A, precision) + 'x^{' + maybeToPrecision(this.B, precision) + '}';
                    } else {
                        return 'f(x) = \\frac{' + maybeToPrecision(this.A, precision) + '}{x^{' + maybeToPrecision(-this.B, precision) + '}}';
                    }
                }

                static load(json) {
                    if (json.name !== 'powerRegression') {
                        throw new TypeError('not a power regression model');
                    }
                    return new PowerRegression(true, json);
                }
            }

            function regress$3(pr, x, y) {
                const n = x.length;
                const xl = new Array(n);
                const yl = new Array(n);
                for (let i = 0; i < n; i++) {
                    xl[i] = Math.log(x[i]);
                    yl[i] = Math.log(y[i]);
                }

                const linear = new SimpleLinearRegression(xl, yl);
                pr.A = Math.exp(linear.intercept);
                pr.B = linear.slope;
            }

            class MultivariateLinearRegression extends BaseRegression {
              constructor(x, y, options = {}) {
                const { intercept = true, statistics = true } = options;
                super();
                this.statistics = statistics;
                if (x === true) {
                  this.weights = y.weights;
                  this.inputs = y.inputs;
                  this.outputs = y.outputs;
                  this.intercept = y.intercept;
                } else {
                  x = new Matrix$1(x);
                  if (intercept) {
                    x.addColumn(new Array(x.length).fill(1));
                  }
                  const beta = new SingularValueDecomposition$$1(x, { autoTranspose: true }).solve(y);
                  this.weights = beta.to2DArray();
                  this.inputs = x[0].length;
                  this.outputs = y[0].length;
                  if (intercept) this.inputs--;
                  this.intercept = intercept;
                  if (statistics) {
                    /*
                     * Let's add some basic statistics about the beta's to be able to interpret them.
                     * source: http://dept.stat.lsa.umich.edu/~kshedden/Courses/Stat401/Notes/401-multreg.pdf
                     * validated against Excel Regression AddIn
                     * test: "datamining statistics test"
                     */
                    const fittedValues = x.mmul(beta);
                    const residuals = new Matrix$1(y).addM(fittedValues.neg());
                    const variance =
                      residuals
                        .to2DArray()
                        .map((ri) => Math.pow(ri[0], 2))
                        .reduce((a, b) => a + b) /
                      (y.length - x.columns);
                    this.stdError = Math.sqrt(variance);
                    this.stdErrorMatrix = x
                      .transposeView()
                      .mmul(x)
                      .pseudoInverse()
                      .mul(variance);
                    this.stdErrors = this.stdErrorMatrix.diagonal().map((d) => Math.sqrt(d));
                    this.tStats = this.weights.map(
                      (d, i) => (this.stdErrors[i] === 0 ? 0 : d[0] / this.stdErrors[i])
                    );
                  }
                }
              }

              predict(x) {
                if (Array.isArray(x)) {
                  if (typeof x[0] === 'number') {
                    return this._predict(x);
                  } else if (Array.isArray(x[0])) {
                    const y = new Array(x.length);
                    for (let i = 0; i < x.length; i++) {
                      y[i] = this._predict(x[i]);
                    }
                    return y;
                  }
                }
                throw new TypeError('x must be a matrix or array of numbers');
              }

              _predict(x) {
                const result = new Array(this.outputs);
                if (this.intercept) {
                  for (let i = 0; i < this.outputs; i++) {
                    result[i] = this.weights[this.inputs][i];
                  }
                } else {
                  result.fill(0);
                }
                for (let i = 0; i < this.inputs; i++) {
                  for (let j = 0; j < this.outputs; j++) {
                    result[j] += this.weights[i][j] * x[i];
                  }
                }
                return result;
              }

              score() {
                throw new Error('score method is not implemented yet');
              }

              toJSON() {
                return {
                  name: 'multivariateLinearRegression',
                  weights: this.weights,
                  inputs: this.inputs,
                  outputs: this.outputs,
                  intercept: this.intercept,
                  summary: (this.statistics)
                    ? {
                      regressionStatistics: {
                        standardError: this.stdError,
                        observations: this.outputs
                      },
                      variables: this.weights.map((d, i) => {
                        return {
                          label:
                            i === this.weights.length - 1
                              ? 'Intercept'
                              : `X Variable ${i + 1}`,
                          coefficients: d,
                          standardError: this.stdErrors[i],
                          tStat: this.tStats[i]
                        };
                      })
                    }
                    : undefined,
                };
              }

              static load(model) {
                if (model.name !== 'multivariateLinearRegression') {
                  throw new Error('not a MLR model');
                }
                return new MultivariateLinearRegression(true, model);
              }
            }

            /*
             * Function that calculate the potential fit in the form f(x) = A*x^M
             * with a given M and return de A coefficient.
             *
             * @param {Vector} X - Vector of the x positions of the points.
             * @param {Vector} Y - Vector of the x positions of the points.
             * @param {Number} M - The exponent of the potential fit.
             * @return {Number} A - The A coefficient of the potential fit.
             */
            class PotentialRegression extends BaseRegression {
                /**
                 * @constructor
                 * @param x: Independent variable
                 * @param y: Dependent variable
                 * @param M
                 */
                constructor(x, y, M) {
                    super();
                    if (x === true) { // reloading model
                        this.A = y.A;
                        this.M = y.M;
                    } else {
                        var n = x.length;
                        if (n !== y.length) {
                            throw new RangeError('input and output array have a different length');
                        }

                        var linear = new PolynomialRegression(x, y, [M]);
                        this.A = linear.coefficients[0];
                        this.M = M;
                    }
                }

                _predict(x) {
                    return this.A * Math.pow(x, this.M);
                }

                toJSON() {
                    return {
                        name: 'potentialRegression',
                        A: this.A,
                        M: this.M
                    };
                }

                toString(precision) {
                    return 'f(x) = ' + maybeToPrecision(this.A, precision) + ' * x^' + this.M;
                }

                toLaTeX(precision) {
                    if (this.M >= 0) {
                        return 'f(x) = ' + maybeToPrecision(this.A, precision) + 'x^{' + this.M + '}';
                    } else {
                        return 'f(x) = \\frac{' + maybeToPrecision(this.A, precision) + '}{x^{' + (-this.M) + '}}';
                    }
                }

                static load(json) {
                    if (json.name !== 'potentialRegression') {
                        throw new TypeError('not a potential regression model');
                    }
                    return new PotentialRegression(true, json);
                }
            }

            const defaultOptions$l = {
                lambda: 0.1,
                kernelType: 'gaussian',
                kernelOptions: {},
                computeCoefficient: false
            };

            // Implements the Kernel ridge regression algorithm.
            // http://www.ics.uci.edu/~welling/classnotes/papers_class/Kernel-Ridge.pdf
            class KernelRidgeRegression extends BaseRegression {
                constructor(inputs, outputs, options) {
                    super();
                    if (inputs === true) { // reloading model
                        this.alpha = outputs.alpha;
                        this.inputs = outputs.inputs;
                        this.kernelType = outputs.kernelType;
                        this.kernelOptions = outputs.kernelOptions;
                        this.kernel = new kernel(outputs.kernelType, outputs.kernelOptions);
                    } else {
                        options = Object.assign({}, defaultOptions$l, options);

                        const kernelFunction = new kernel(options.kernelType, options.kernelOptions);
                        const K = kernelFunction.compute(inputs);
                        const n = inputs.length;
                        K.add(Matrix$1.eye(n, n).mul(options.lambda));

                        this.alpha = solve$$1(K, outputs);
                        this.inputs = inputs;
                        this.kernelType = options.kernelType;
                        this.kernelOptions = options.kernelOptions;
                        this.kernel = kernelFunction;
                    }
                }

                _predict(newInputs) {
                    return this.kernel.compute([newInputs], this.inputs).mmul(this.alpha)[0];
                }

                toJSON() {
                    return {
                        name: 'kernelRidgeRegression',
                        alpha: this.alpha,
                        inputs: this.inputs,
                        kernelType: this.kernelType,
                        kernelOptions: this.kernelOptions
                    };
                }

                static load(json) {
                    if (json.name !== 'kernelRidgeRegression') {
                        throw new TypeError('not a KRR model');
                    }
                    return new KernelRidgeRegression(true, json);
                }
            }

            const defaultOptions$m = {
                order: 2
            };
            // Implements the Kernel ridge regression algorithm.
            // http://www.ics.uci.edu/~welling/classnotes/papers_class/Kernel-Ridge.pdf
            class PolynomialFitRegression2D extends BaseRegression {
                /**
                 * Constructor for the 2D polynomial fitting
                 *
                 * @param inputs
                 * @param outputs
                 * @param options
                 * @constructor
                 */
                constructor(inputs, outputs, options) {
                    super();
                    if (inputs === true) { // reloading model
                        this.coefficients = Matrix$1.columnVector(outputs.coefficients);
                        this.order = outputs.order;
                        if (outputs.r) {
                            this.r = outputs.r;
                            this.r2 = outputs.r2;
                        }
                        if (outputs.chi2) {
                            this.chi2 = outputs.chi2;
                        }
                    } else {
                        options = Object.assign({}, defaultOptions$m, options);
                        this.order = options.order;
                        this.coefficients = [];
                        this.X = inputs;
                        this.y = outputs;

                        this.train(this.X, this.y, options);
                    }
                }

                /**
                 * Function that fits the model given the data(X) and predictions(y).
                 * The third argument is an object with the following options:
                 * * order: order of the polynomial to fit.
                 *
                 * @param {Matrix} X - A matrix with n rows and 2 columns.
                 * @param {Matrix} y - A vector of the prediction values.
                 */
                train(X, y) {
                    if (!Matrix$1.isMatrix(X)) X = new Matrix$1(X);
                    if (!Matrix$1.isMatrix(y)) y = Matrix$1.columnVector(y);

                    if (y.rows !== X.rows) {
                        y = y.transpose();
                    }

                    if (X.columns !== 2) {
                        throw new RangeError('You give X with ' + X.columns + ' columns and it must be 2');
                    }
                    if (X.rows !== y.rows) {
                        throw new RangeError('X and y must have the same rows');
                    }

                    var examples = X.rows;
                    var coefficients = ((this.order + 2) * (this.order + 1)) / 2;
                    this.coefficients = new Array(coefficients);

                    var x1 = X.getColumnVector(0);
                    var x2 = X.getColumnVector(1);

                    var scaleX1 = 1.0 / x1.clone().apply(abs).max();
                    var scaleX2 = 1.0 / x2.clone().apply(abs).max();
                    var scaleY = 1.0 / y.clone().apply(abs).max();

                    x1.mulColumn(0, scaleX1);
                    x2.mulColumn(0, scaleX2);
                    y.mulColumn(0, scaleY);

                    var A = new Matrix$1(examples, coefficients);
                    var col = 0;

                    for (var i = 0; i <= this.order; ++i) {
                        var limit = this.order - i;
                        for (var j = 0; j <= limit; ++j) {
                            var result = powColVector(x1, i).mulColumnVector(powColVector(x2, j));
                            A.setColumn(col, result);
                            col++;
                        }
                    }

                    var svd = new SingularValueDecomposition$$1(A.transpose(), {
                        computeLeftSingularVectors: true,
                        computeRightSingularVectors: true,
                        autoTranspose: false
                    });

                    var qqs = Matrix$1.rowVector(svd.diagonal);
                    qqs = qqs.apply(function (i, j) {
                        if (this[i][j] >= 1e-15) this[i][j] = 1 / this[i][j];
                        else this[i][j] = 0;
                    });

                    var qqs1 = Matrix$1.zeros(examples, coefficients);
                    for (i = 0; i < coefficients; ++i) {
                        qqs1[i][i] = qqs[0][i];
                    }

                    qqs = qqs1;

                    var U = svd.rightSingularVectors;
                    var V = svd.leftSingularVectors;

                    this.coefficients = V.mmul(qqs.transpose()).mmul(U.transpose()).mmul(y);

                    col = 0;

                    for (i = 0; i <= coefficients; ++i) {
                        limit = this.order - i;
                        for (j = 0; j <= limit; ++j) {
                            this.coefficients[col][0] = (this.coefficients[col][0] * Math.pow(scaleX1, i) * Math.pow(scaleX2, j)) / scaleY;
                            col++;
                        }
                    }
                }

                _predict(newInputs) {
                    var x1 = newInputs[0];
                    var x2 = newInputs[1];

                    var y = 0;
                    var column = 0;

                    for (var i = 0; i <= this.order; i++) {
                        for (var j = 0; j <= this.order - i; j++) {
                            y += Math.pow(x1, i) * (Math.pow(x2, j)) * this.coefficients[column][0];
                            column++;
                        }
                    }

                    return y;
                }

                toJSON() {
                    return {
                        name: 'polyfit2D',
                        order: this.order,
                        coefficients: this.coefficients
                    };
                }

                static load(json) {
                    if (json.name !== 'polyfit2D') {
                        throw new TypeError('not a polyfit2D model');
                    }
                    return new PolynomialFitRegression2D(true, json);
                }
            }

            /**
             * Function that given a column vector return this: vector^power
             *
             * @param x - Column vector.
             * @param power - Pow number.
             * @return {Suite|Matrix}
             */
            function powColVector(x, power) {
                var result = x.clone();
                for (var i = 0; i < x.rows; ++i) {
                    result[i][0] = Math.pow(result[i][0], power);
                }
                return result;
            }

            /**
             * Function to use in the apply method to get the absolute value
             * of each element of the matrix
             *
             * @param i - current row.
             * @param j - current column.
             */
            function abs(i, j) {
                this[i][j] = Math.abs(this[i][j]);
            }

            const median$2 = array$1.median;

            class TheilSenRegression extends BaseRegression {

                /**
                 * Theil–Sen estimator
                 * https://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator
                 * @param {Array<number>|boolean} x
                 * @param {Array<number>|object} y
                 * @constructor
                 */
                constructor(x, y) {
                    super();
                    if (x === true) {
                        // loads the model
                        this.slope = y.slope;
                        this.intercept = y.intercept;
                        this.coefficients = y.coefficients;
                    } else {
                        // creates the model
                        checkArraySize(x, y);
                        theilSen(this, x, y);
                    }

                }

                toJSON() {
                    return {
                        name: 'TheilSenRegression',
                        slope: this.slope,
                        intercept: this.intercept
                    };
                }

                _predict(input) {
                    return this.slope * input + this.intercept;
                }

                computeX(input) {
                    return (input - this.intercept) / this.slope;
                }

                toString(precision) {
                    var result = 'f(x) = ';
                    if (this.slope) {
                        var xFactor = maybeToPrecision(this.slope, precision);
                        result += (Math.abs(xFactor - 1) < 1e-5 ? '' : xFactor + ' * ') + 'x';
                        if (this.intercept) {
                            var absIntercept = Math.abs(this.intercept);
                            var operator = absIntercept === this.intercept ? '+' : '-';
                            result += ' ' + operator + ' ' + maybeToPrecision(absIntercept, precision);
                        }
                    } else {
                        result += maybeToPrecision(this.intercept, precision);
                    }
                    return result;
                }

                toLaTeX(precision) {
                    return this.toString(precision);
                }

                static load(json) {
                    if (json.name !== 'TheilSenRegression') {
                        throw new TypeError('not a Theil-Sen model');
                    }
                    return new TheilSenRegression(true, json);
                }
            }

            function theilSen(regression, x, y) {
                let len = x.length;
                let slopes = new Array(len * len);
                let count = 0;
                for (let i = 0; i < len; ++i) {
                    for (let j = i + 1; j < len; ++j) {
                        if (x[i] !== x[j]) {
                            slopes[count++] = (y[j] - y[i]) / (x[j] - x[i]);
                        }
                    }
                }
                slopes.length = count;
                let medianSlope = median$2(slopes);

                let cuts = new Array(len);
                for (let i = 0; i < len; ++i) {
                    cuts[i] = y[i] - medianSlope * x[i];
                }

                regression.slope = medianSlope;
                regression.intercept = median$2(cuts);
                regression.coefficients = [regression.intercept, regression.slope];
            }

            class RobustPolynomialRegression extends BaseRegression {
                constructor(x, y, degree) {
                    super();
                    if (x === true) {
                        this.degree = y.degree;
                        this.powers = y.powers;
                        this.coefficients = y.coefficients;
                    } else {
                        checkArraySize(x, y);
                        robustPolynomial(this, x, y, degree);
                    }
                }

                toJSON() {
                    return {
                        name: 'robustPolynomialRegression',
                        degree: this.degree,
                        powers: this.powers,
                        coefficients: this.coefficients
                    };
                }

                _predict(x) {
                    return predict(x, this.powers, this.coefficients);
                }

                toString(precision) {
                    return this._toFormula(precision, false);
                }

                toLaTeX(precision) {
                    return this._toFormula(precision, true);
                }

                _toFormula(precision, isLaTeX) {
                    let sup = '^';
                    let closeSup = '';
                    let times = ' * ';
                    if (isLaTeX) {
                        sup = '^{';
                        closeSup = '}';
                        times = '';
                    }

                    let fn = '';
                    let str = '';
                    for (let k = 0; k < this.coefficients.length; k++) {
                        str = '';
                        if (this.coefficients[k] !== 0) {
                            if (this.powers[k] === 0) {
                                str = maybeToPrecision(this.coefficients[k], precision);
                            } else {
                                if (this.powers[k] === 1) {
                                    str = maybeToPrecision(this.coefficients[k], precision) + times + 'x';
                                } else {
                                    str = maybeToPrecision(this.coefficients[k], precision) + times + 'x' + sup + this.powers[k] + closeSup;
                                }
                            }

                            if (this.coefficients[k] > 0 && k !== (this.coefficients.length - 1)) {
                                str = ' + ' + str;
                            } else if (k !== (this.coefficients.length - 1)) {
                                str = ' ' + str;
                            }
                        }
                        fn = str + fn;
                    }
                    if (fn.charAt(0) === '+') {
                        fn = fn.slice(1);
                    }

                    return 'f(x) = ' + fn;
                }

                static load(json) {
                    if (json.name !== 'robustPolynomialRegression') {
                        throw new TypeError('not a RobustPolynomialRegression model');
                    }
                    return new RobustPolynomialRegression(true, json);
                }
            }

            function robustPolynomial(regression, x, y, degree) {
                let powers = new Array(degree);
                for (let k = 0; k < degree; k++) {
                    powers[k] = k;
                }

                const tuples = getRandomTuples(x, y, degree);
                var min;

                for (var i = 0; i < tuples.length; i++) {
                    var tuple = tuples[i];
                    var coefficients = calcCoefficients(tuple, powers);

                    var residuals = x.slice();
                    for (var j = 0; j < x.length; j++) {
                        residuals[j] = y[j] - predict(x[j], powers, coefficients);
                        residuals[j] = {
                            residual: residuals[j] * residuals[j],
                            coefficients
                        };
                    }

                    var median = residualsMedian(residuals);
                    if (!min || median.residual < min.residual) {
                        min = median;
                    }
                }

                regression.degree = degree;
                regression.powers = powers;
                regression.coefficients = min.coefficients;
            }

            /**
             * @ignore
             * @param {Array<number>} x
             * @param {Array<number>} y
             * @param {number} degree
             * @return {Array<{x:number,y:number}>}
             */
            function getRandomTuples(x, y, degree) {
                var len = Math.floor(x.length / degree);
                var tuples = new Array(len);

                for (var i = 0; i < x.length; i++) {
                    var pos = Math.floor(Math.random() * len);

                    var counter = 0;
                    while (counter < x.length) {
                        if (!tuples[pos]) {
                            tuples[pos] = [{
                                x: x[i],
                                y: y[i]
                            }];
                            break;
                        } else if (tuples[pos].length < degree) {
                            tuples[pos].push({
                                x: x[i],
                                y: y[i]
                            });
                            break;
                        } else {
                            counter++;
                            pos = (pos + 1) % len;
                        }
                    }

                    if (counter === x.length) {
                        return tuples;
                    }
                }
                return tuples;
            }

            /**
             * @ignore
             * @param {{x:number,y:number}} tuple
             * @param {Array<number>} powers
             * @return {Array<number>}
             */
            function calcCoefficients(tuple, powers) {
                var X = tuple.slice();
                var Y = tuple.slice();
                for (var i = 0; i < X.length; i++) {
                    Y[i] = [tuple[i].y];
                    X[i] = new Array(powers.length);
                    for (var j = 0; j < powers.length; j++) {
                        X[i][j] = Math.pow(tuple[i].x, powers[j]);
                    }
                }

                return solve$$1(X, Y).to1DArray();
            }

            function predict(x, powers, coefficients) {
                let y = 0;
                for (let k = 0; k < powers.length; k++) {
                    y += coefficients[k] * Math.pow(x, powers[k]);
                }
                return y;
            }

            function residualsMedian(residuals) {
                residuals.sort((a, b) => a.residual - b.residual);

                var l = residuals.length;
                var half = Math.floor(l / 2);
                if (l % 2 === 0) {
                    return residuals[half - 1];
                } else {
                    return residuals[half];
                }
            }

            const NLR = {
                PotentialRegression
            };

            var src$d = /*#__PURE__*/Object.freeze({
                        NLR: NLR,
                        NonLinearRegression: NLR,
                        SimpleLinearRegression: SimpleLinearRegression,
                        SLR: SimpleLinearRegression,
                        PolynomialRegression: PolynomialRegression,
                        ExponentialRegression: ExponentialRegression,
                        PowerRegression: PowerRegression,
                        MultivariateLinearRegression: MultivariateLinearRegression,
                        KernelRidgeRegression: KernelRidgeRegression,
                        KRR: KernelRidgeRegression,
                        PolinomialFitting2D: PolynomialFitRegression2D,
                        TheilSenRegression: TheilSenRegression,
                        RobustPolynomialRegression: RobustPolynomialRegression
            });

            /**
             * Calculate current error
             * @ignore
             * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]
             * @param {Array<number>} parameters - Array of current parameter values
             * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter
             * @return {number}
             */
            function errorCalculation(
              data,
              parameters,
              parameterizedFunction
            ) {
              var error = 0;
              const func = parameterizedFunction(parameters);

              for (var i = 0; i < data.x.length; i++) {
                error += Math.abs(data.y[i] - func(data.x[i]));
              }

              return error;
            }

            /**
             * Difference of the matrix function over the parameters
             * @ignore
             * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]
             * @param {Array<number>} evaluatedData - Array of previous evaluated function values
             * @param {Array<number>} params - Array of previous parameter values
             * @param {number} gradientDifference - Adjustment for decrease the damping parameter
             * @param {function} paramFunction - The parameters and returns a function with the independent variable as a parameter
             * @return {Matrix}
             */
            function gradientFunction(
              data,
              evaluatedData,
              params,
              gradientDifference,
              paramFunction
            ) {
              const n = params.length;
              const m = data.x.length;

              var ans = new Array(n);

              for (var param = 0; param < n; param++) {
                ans[param] = new Array(m);
                var auxParams = params.concat();
                auxParams[param] += gradientDifference;
                var funcParam = paramFunction(auxParams);

                for (var point = 0; point < m; point++) {
                  ans[param][point] = evaluatedData[point] - funcParam(data.x[point]);
                }
              }
              return new require$$0$2.Matrix(ans);
            }

            /**
             * Matrix function over the samples
             * @ignore
             * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]
             * @param {Array<number>} evaluatedData - Array of previous evaluated function values
             * @return {Matrix}
             */
            function matrixFunction(data, evaluatedData) {
              const m = data.x.length;

              var ans = new Array(m);

              for (var point = 0; point < m; point++) {
                ans[point] = data.y[point] - evaluatedData[point];
              }

              return new require$$0$2.Matrix([ans]);
            }

            /**
             * Iteration for Levenberg-Marquardt
             * @ignore
             * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]
             * @param {Array<number>} params - Array of previous parameter values
             * @param {number} damping - Levenberg-Marquardt parameter
             * @param {number} gradientDifference - Adjustment for decrease the damping parameter
             * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter
             * @return {Array<number>}
             */
            function step$1(
              data,
              params,
              damping,
              gradientDifference,
              parameterizedFunction
            ) {
              var identity = require$$0$2.Matrix.eye(params.length).mul(
                damping * gradientDifference * gradientDifference
              );

              var l = data.x.length;
              var evaluatedData = new Array(l);
              const func = parameterizedFunction(params);
              for (var i = 0; i < l; i++) {
                evaluatedData[i] = func(data.x[i]);
              }
              var gradientFunc = gradientFunction(
                data,
                evaluatedData,
                params,
                gradientDifference,
                parameterizedFunction
              );
              var matrixFunc = matrixFunction(data, evaluatedData).transposeView();
              var inverseMatrix = require$$0$2.inverse(
                identity.add(gradientFunc.mmul(gradientFunc.transposeView()))
              );
              params = new require$$0$2.Matrix([params]);
              params = params.sub(
                inverseMatrix
                  .mmul(gradientFunc)
                  .mmul(matrixFunc)
                  .mul(gradientDifference)
                  .transposeView()
              );

              return params.to1DArray();
            }

            /**
             * Curve fitting algorithm
             * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]
             * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter
             * @param {object} [options] - Options object
             * @param {number} [options.damping] - Levenberg-Marquardt parameter
             * @param {number} [options.gradientDifference = 10e-2] - Adjustment for decrease the damping parameter
             * @param {Array<number>} [options.initialValues] - Array of initial parameter values
             * @param {number} [options.maxIterations = 100] - Maximum of allowed iterations
             * @param {number} [options.errorTolerance = 10e-3] - Minimum uncertainty allowed for each point
             * @return {{parameterValues: Array<number>, parameterError: number, iterations: number}}
             */
            function levenbergMarquardt(
              data,
              parameterizedFunction,
              options = {}
            ) {
              let {
                maxIterations = 100,
                gradientDifference = 10e-2,
                damping = 0,
                errorTolerance = 10e-3,
                initialValues
              } = options;

              if (damping <= 0) {
                throw new Error('The damping option must be a positive number');
              } else if (!data.x || !data.y) {
                throw new Error('The data parameter must have x and y elements');
              } else if (
                !Array.isArray(data.x) ||
                data.x.length < 2 ||
                !Array.isArray(data.y) ||
                data.y.length < 2
              ) {
                throw new Error(
                  'The data parameter elements must be an array with more than 2 points'
                );
              } else {
                let dataLen = data.x.length;
                if (dataLen !== data.y.length) {
                  throw new Error('The data parameter elements must have the same size');
                }
              }

              var parameters =
                initialValues || new Array(parameterizedFunction.length).fill(1);

              if (!Array.isArray(parameters)) {
                throw new Error('initialValues must be an array');
              }

              var error = errorCalculation(data, parameters, parameterizedFunction);

              var converged = error <= errorTolerance;

              for (
                var iteration = 0;
                iteration < maxIterations && !converged;
                iteration++
              ) {
                parameters = step$1(
                  data,
                  parameters,
                  damping,
                  gradientDifference,
                  parameterizedFunction
                );
                error = errorCalculation(data, parameters, parameterizedFunction);
                converged = error <= errorTolerance;
              }

              return {
                parameterValues: parameters,
                parameterError: error,
                iterations: iteration
              };
            }

            var lib = levenbergMarquardt;

            var newArray_1 = newArray;

            function newArray (n, value) {
              n = n || 0;
              var array = new Array(n);
              for (var i = 0; i < n; i++) {
                array[i] = value;
              }
              return array
            }

            var binarySearch = function(haystack, needle, comparator, low, high) {
              var mid, cmp;

              if(low === undefined)
                low = 0;

              else {
                low = low|0;
                if(low < 0 || low >= haystack.length)
                  throw new RangeError("invalid lower bound");
              }

              if(high === undefined)
                high = haystack.length - 1;

              else {
                high = high|0;
                if(high < low || high >= haystack.length)
                  throw new RangeError("invalid upper bound");
              }

              while(low <= high) {
                /* Note that "(low + high) >>> 1" may overflow, and results in a typecast
                 * to double (which gives the wrong results). */
                mid = low + (high - low >> 1);
                cmp = +comparator(haystack[mid], needle, mid, haystack);

                /* Too low. */
                if(cmp < 0.0)
                  low  = mid + 1;

                /* Too high. */
                else if(cmp > 0.0)
                  high = mid - 1;

                /* Key found. */
                else
                  return mid;
              }

              /* Key not found. */
              return ~low;
            };

            var numberIsNan = Number.isNaN || function (x) {
            	return x !== x;
            };

            function assertNum(x) {
            	if (typeof x !== 'number' || numberIsNan(x)) {
            		throw new TypeError('Expected a number');
            	}
            }

            var asc = function (a, b) {
            	assertNum(a);
            	assertNum(b);
            	return a - b;
            };

            var desc = function (a, b) {
            	assertNum(a);
            	assertNum(b);
            	return b - a;
            };

            var numSort = {
            	asc: asc,
            	desc: desc
            };

            const sortAsc = numSort.asc;

            const largestPrime = 0x7fffffff;

            const primeNumbers = [
                //chunk #0
                largestPrime, // 2^31-1

                //chunk #1
                5, 11, 23, 47, 97, 197, 397, 797, 1597, 3203, 6421, 12853, 25717, 51437, 102877, 205759,
                411527, 823117, 1646237, 3292489, 6584983, 13169977, 26339969, 52679969, 105359939,
                210719881, 421439783, 842879579, 1685759167,

                //chunk #2
                433, 877, 1759, 3527, 7057, 14143, 28289, 56591, 113189, 226379, 452759, 905551, 1811107,
                3622219, 7244441, 14488931, 28977863, 57955739, 115911563, 231823147, 463646329, 927292699,
                1854585413,

                //chunk #3
                953, 1907, 3821, 7643, 15287, 30577, 61169, 122347, 244703, 489407, 978821, 1957651, 3915341,
                7830701, 15661423, 31322867, 62645741, 125291483, 250582987, 501165979, 1002331963,
                2004663929,

                //chunk #4
                1039, 2081, 4177, 8363, 16729, 33461, 66923, 133853, 267713, 535481, 1070981, 2141977, 4283963,
                8567929, 17135863, 34271747, 68543509, 137087021, 274174111, 548348231, 1096696463,

                //chunk #5
                31, 67, 137, 277, 557, 1117, 2237, 4481, 8963, 17929, 35863, 71741, 143483, 286973, 573953,
                1147921, 2295859, 4591721, 9183457, 18366923, 36733847, 73467739, 146935499, 293871013,
                587742049, 1175484103,

                //chunk #6
                599, 1201, 2411, 4831, 9677, 19373, 38747, 77509, 155027, 310081, 620171, 1240361, 2480729,
                4961459, 9922933, 19845871, 39691759, 79383533, 158767069, 317534141, 635068283, 1270136683,

                //chunk #7
                311, 631, 1277, 2557, 5119, 10243, 20507, 41017, 82037, 164089, 328213, 656429, 1312867,
                2625761, 5251529, 10503061, 21006137, 42012281, 84024581, 168049163, 336098327, 672196673,
                1344393353,

                //chunk #8
                3, 7, 17, 37, 79, 163, 331, 673, 1361, 2729, 5471, 10949, 21911, 43853, 87719, 175447, 350899,
                701819, 1403641, 2807303, 5614657, 11229331, 22458671, 44917381, 89834777, 179669557,
                359339171, 718678369, 1437356741,

                //chunk #9
                43, 89, 179, 359, 719, 1439, 2879, 5779, 11579, 23159, 46327, 92657, 185323, 370661, 741337,
                1482707, 2965421, 5930887, 11861791, 23723597, 47447201, 94894427, 189788857, 379577741,
                759155483, 1518310967,

                //chunk #10
                379, 761, 1523, 3049, 6101, 12203, 24407, 48817, 97649, 195311, 390647, 781301, 1562611,
                3125257, 6250537, 12501169, 25002389, 50004791, 100009607, 200019221, 400038451, 800076929,
                1600153859,

                //chunk #11
                13, 29, 59, 127, 257, 521, 1049, 2099, 4201, 8419, 16843, 33703, 67409, 134837, 269683,
                539389, 1078787, 2157587, 4315183, 8630387, 17260781, 34521589, 69043189, 138086407,
                276172823, 552345671, 1104691373,

                //chunk #12
                19, 41, 83, 167, 337, 677,
                1361, 2729, 5471, 10949, 21911, 43853, 87719, 175447, 350899,
                701819, 1403641, 2807303, 5614657, 11229331, 22458671, 44917381, 89834777, 179669557,
                359339171, 718678369, 1437356741,

                //chunk #13
                53, 107, 223, 449, 907, 1823, 3659, 7321, 14653, 29311, 58631, 117269,
                234539, 469099, 938207, 1876417, 3752839, 7505681, 15011389, 30022781,
                60045577, 120091177, 240182359, 480364727, 960729461, 1921458943
            ];

            primeNumbers.sort(sortAsc);

            function nextPrime(value) {
                let index = binarySearch(primeNumbers, value, sortAsc);
                if (index < 0) {
                    index = ~index;
                }
                return primeNumbers[index];
            }

            var nextPrime_1 = nextPrime;
            var largestPrime_1 = largestPrime;

            var primeFinder = {
            	nextPrime: nextPrime_1,
            	largestPrime: largestPrime_1
            };

            const nextPrime$1 = primeFinder.nextPrime;
            const largestPrime$1 = primeFinder.largestPrime;

            const FREE = 0;
            const FULL = 1;
            const REMOVED = 2;

            const defaultInitialCapacity = 150;
            const defaultMinLoadFactor = 1 / 6;
            const defaultMaxLoadFactor = 2 / 3;

            class HashTable {
                constructor(options = {}) {
                    if (options instanceof HashTable) {
                        this.table = options.table.slice();
                        this.values = options.values.slice();
                        this.state = options.state.slice();
                        this.minLoadFactor = options.minLoadFactor;
                        this.maxLoadFactor = options.maxLoadFactor;
                        this.distinct = options.distinct;
                        this.freeEntries = options.freeEntries;
                        this.lowWaterMark = options.lowWaterMark;
                        this.highWaterMark = options.maxLoadFactor;
                        return;
                    }

                    const initialCapacity = options.initialCapacity === undefined ? defaultInitialCapacity : options.initialCapacity;
                    if (initialCapacity < 0) {
                        throw new RangeError(`initial capacity must not be less than zero: ${initialCapacity}`);
                    }

                    const minLoadFactor = options.minLoadFactor === undefined ? defaultMinLoadFactor : options.minLoadFactor;
                    const maxLoadFactor = options.maxLoadFactor === undefined ? defaultMaxLoadFactor : options.maxLoadFactor;
                    if (minLoadFactor < 0 || minLoadFactor >= 1) {
                        throw new RangeError(`invalid minLoadFactor: ${minLoadFactor}`);
                    }
                    if (maxLoadFactor <= 0 || maxLoadFactor >= 1) {
                        throw new RangeError(`invalid maxLoadFactor: ${maxLoadFactor}`);
                    }
                    if (minLoadFactor >= maxLoadFactor) {
                        throw new RangeError(`minLoadFactor (${minLoadFactor}) must be smaller than maxLoadFactor (${maxLoadFactor})`);
                    }

                    let capacity = initialCapacity;
                    // User wants to put at least capacity elements. We need to choose the size based on the maxLoadFactor to
                    // avoid the need to rehash before this capacity is reached.
                    // actualCapacity * maxLoadFactor >= capacity
                    capacity = (capacity / maxLoadFactor) | 0;
                    capacity = nextPrime$1(capacity);
                    if (capacity === 0) capacity = 1;

                    this.table = newArray_1(capacity, 0);
                    this.values = newArray_1(capacity, 0);
                    this.state = newArray_1(capacity, 0);

                    this.minLoadFactor = minLoadFactor;
                    if (capacity === largestPrime$1) {
                        this.maxLoadFactor = 1;
                    } else {
                        this.maxLoadFactor = maxLoadFactor;
                    }

                    this.distinct = 0;
                    this.freeEntries = capacity;

                    this.lowWaterMark = 0;
                    this.highWaterMark = chooseHighWaterMark(capacity, this.maxLoadFactor);
                }

                clone() {
                    return new HashTable(this);
                }

                get size() {
                    return this.distinct;
                }

                get(key) {
                    const i = this.indexOfKey(key);
                    if (i < 0) return 0;
                    return this.values[i];
                }

                set(key, value) {
                    let i = this.indexOfInsertion(key);
                    if (i < 0) {
                        i = -i - 1;
                        this.values[i] = value;
                        return false;
                    }

                    if (this.distinct > this.highWaterMark) {
                        const newCapacity = chooseGrowCapacity(this.distinct + 1, this.minLoadFactor, this.maxLoadFactor);
                        this.rehash(newCapacity);
                        return this.set(key, value);
                    }

                    this.table[i] = key;
                    this.values[i] = value;
                    if (this.state[i] === FREE) this.freeEntries--;
                    this.state[i] = FULL;
                    this.distinct++;

                    if (this.freeEntries < 1) {
                        const newCapacity = chooseGrowCapacity(this.distinct + 1, this.minLoadFactor, this.maxLoadFactor);
                        this.rehash(newCapacity);
                    }

                    return true;
                }
                
                remove(key, noRehash) {
                    const i = this.indexOfKey(key);
                    if (i < 0) return false;

                    this.state[i] = REMOVED;
                    this.distinct--;

                    if (!noRehash) this.maybeShrinkCapacity();

                    return true;
                }

                delete(key, noRehash) {
                    const i = this.indexOfKey(key);
                    if (i < 0) return false;

                    this.state[i] = FREE;
                    this.distinct--;

                    if (!noRehash) this.maybeShrinkCapacity();

                    return true;
                }

                maybeShrinkCapacity() {
                    if (this.distinct < this.lowWaterMark) {
                        const newCapacity = chooseShrinkCapacity(this.distinct, this.minLoadFactor, this.maxLoadFactor);
                        this.rehash(newCapacity);
                    }
                }

                containsKey(key) {
                    return this.indexOfKey(key) >= 0;
                }

                indexOfKey(key) {
                    const table = this.table;
                    const state = this.state;
                    const length = this.table.length;

                    const hash = key & 0x7fffffff;
                    let i = hash % length;
                    let decrement = hash % (length - 2);
                    if (decrement === 0) decrement = 1;

                    while (state[i] !== FREE && (state[i] === REMOVED || table[i] !== key)) {
                        i -= decrement;
                        if (i < 0) i += length;
                    }

                    if (state[i] === FREE) return -1;
                    return i;
                }

                containsValue(value) {
                    return this.indexOfValue(value) >= 0;
                }

                indexOfValue(value) {
                    const values = this.values;
                    const state = this.state;

                    for (var i = 0; i < state.length; i++) {
                        if (state[i] === FULL && values[i] === value) {
                            return i;
                        }
                    }

                    return -1;
                }

                indexOfInsertion(key) {
                    const table = this.table;
                    const state = this.state;
                    const length = table.length;


                    const hash = key & 0x7fffffff;
                    let i = hash % length;
                    let decrement = hash % (length - 2);
                    if (decrement === 0) decrement = 1;

                    while (state[i] === FULL && table[i] !== key) {
                        i -= decrement;
                        if (i < 0) i += length;
                    }

                    if (state[i] === REMOVED) {
                        const j = i;
                        while (state[i] !== FREE && (state[i] === REMOVED || table[i] !== key)) {
                            i -= decrement;
                            if (i < 0) i += length;
                        }
                        if (state[i] === FREE) i = j;
                    }

                    if (state[i] === FULL) {
                        return -i - 1;
                    }

                    return i;
                }

                ensureCapacity(minCapacity) {
                    if (this.table.length < minCapacity) {
                        const newCapacity = nextPrime$1(minCapacity);
                        this.rehash(newCapacity);
                    }
                }

                rehash(newCapacity) {
                    const oldCapacity = this.table.length;

                    if (newCapacity <= this.distinct) throw new Error('Unexpected');

                    const oldTable = this.table;
                    const oldValues = this.values;
                    const oldState = this.state;

                    const newTable = newArray_1(newCapacity, 0);
                    const newValues = newArray_1(newCapacity, 0);
                    const newState = newArray_1(newCapacity, 0);

                    this.lowWaterMark = chooseLowWaterMark(newCapacity, this.minLoadFactor);
                    this.highWaterMark = chooseHighWaterMark(newCapacity, this.maxLoadFactor);

                    this.table = newTable;
                    this.values = newValues;
                    this.state = newState;
                    this.freeEntries = newCapacity - this.distinct;

                    for (var i = 0; i < oldCapacity; i++) {
                        if (oldState[i] === FULL) {
                            var element = oldTable[i];
                            var index = this.indexOfInsertion(element);
                            newTable[index] = element;
                            newValues[index] = oldValues[i];
                            newState[index] = FULL;
                        }
                    }
                }

                forEachKey(callback) {
                    for (var i = 0; i < this.state.length; i++) {
                        if (this.state[i] === FULL) {
                            if (!callback(this.table[i])) return false;
                        }
                    }
                    return true;
                }

                forEachValue(callback) {
                    for (var i = 0; i < this.state.length; i++) {
                        if (this.state[i] === FULL) {
                            if (!callback(this.values[i])) return false;
                        }
                    }
                    return true;
                }

                forEachPair(callback) {
                    for (var i = 0; i < this.state.length; i++) {
                        if (this.state[i] === FULL) {
                            if (!callback(this.table[i], this.values[i])) return false;
                        }
                    }
                    return true;
                }
            }

            var HashTable_1 = HashTable;

            function chooseLowWaterMark(capacity, minLoad) {
                return (capacity * minLoad) | 0;
            }

            function chooseHighWaterMark(capacity, maxLoad) {
                return Math.min(capacity - 2, (capacity * maxLoad) | 0);
            }

            function chooseGrowCapacity(size, minLoad, maxLoad) {
                return nextPrime$1(Math.max(size + 1, (4 * size / (3 * minLoad + maxLoad)) | 0));
            }

            function chooseShrinkCapacity(size, minLoad, maxLoad) {
                return nextPrime$1(Math.max(size + 1, (4 * size / (minLoad + 3 * maxLoad)) | 0));
            }

            class SparseMatrix {
                constructor(rows, columns, options = {}) {
                    if (rows instanceof SparseMatrix) { // clone
                        const other = rows;
                        this._init(other.rows, other.columns, other.elements.clone(), other.threshold);
                        return;
                    }

                    if (Array.isArray(rows)) {
                        const matrix = rows;
                        rows = matrix.length;
                        options = columns || {};
                        columns = matrix[0].length;
                        this._init(rows, columns, new HashTable_1(options), options.threshold);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                var value = matrix[i][j];
                                if (this.threshold && Math.abs(value) < this.threshold) value = 0;
                                if (value !== 0) {
                                    this.elements.set(i * columns + j, matrix[i][j]);
                                }
                            }
                        }
                    } else {
                        this._init(rows, columns, new HashTable_1(options), options.threshold);
                    }
                }

                _init(rows, columns, elements, threshold) {
                    this.rows = rows;
                    this.columns = columns;
                    this.elements = elements;
                    this.threshold = threshold || 0;
                }

                static eye(rows = 1, columns = rows) {
                    const min = Math.min(rows, columns);
                    const matrix = new SparseMatrix(rows, columns, {initialCapacity: min});
                    for (var i = 0; i < min; i++) {
                        matrix.set(i, i, 1);
                    }
                    return matrix;
                }

                clone() {
                    return new SparseMatrix(this);
                }

                to2DArray() {
                    const copy = new Array(this.rows);
                    for (var i = 0; i < this.rows; i++) {
                        copy[i] = new Array(this.columns);
                        for (var j = 0; j < this.columns; j++) {
                            copy[i][j] = this.get(i, j);
                        }
                    }
                    return copy;
                }

                isSquare() {
                    return this.rows === this.columns;
                }

                isSymmetric() {
                    if (!this.isSquare()) return false;

                    var symmetric = true;
                    this.forEachNonZero((i, j, v) => {
                        if (this.get(j, i) !== v) {
                            symmetric = false;
                            return false;
                        }
                        return v;
                    });
                    return symmetric;
                }

                /**
                 * Search for the wither band in the main diagonals
                 * @return {number}
                 */
                bandWidth() {
                    let min = this.columns;
                    let max = -1;
                    this.forEachNonZero((i, j, v) => {
                        let diff = i - j;
                        min = Math.min(min, diff);
                        max = Math.max(max, diff);
                        return v;
                    });
                    return max - min;
                }

                /**
                 * Test if a matrix is consider banded using a threshold
                 * @param {number} width
                 * @return {boolean}
                 */
                isBanded(width) {
                    let bandWidth = this.bandWidth();
                    return bandWidth <= width;
                }

                get cardinality() {
                    return this.elements.size;
                }

                get size() {
                    return this.rows * this.columns;
                }

                get(row, column) {
                    return this.elements.get(row * this.columns + column);
                }

                set(row, column, value) {
                    if (this.threshold && Math.abs(value) < this.threshold) value = 0;
                    if (value === 0) {
                        this.elements.remove(row * this.columns + column);
                    } else {
                        this.elements.set(row * this.columns + column, value);
                    }
                    return this;
                }

                mmul(other) {
                    if (this.columns !== other.rows) {
                        // eslint-disable-next-line no-console
                        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');
                    }

                    const m = this.rows;
                    const p = other.columns;

                    const result = new SparseMatrix(m, p);
                    this.forEachNonZero((i, j, v1) => {
                        other.forEachNonZero((k, l, v2) => {
                            if (j === k) {
                                result.set(i, l, result.get(i, l) + v1 * v2);
                            }
                            return v2;
                        });
                        return v1;
                    });
                    return result;
                }

                kroneckerProduct(other) {
                    const m = this.rows;
                    const n = this.columns;
                    const p = other.rows;
                    const q = other.columns;

                    const result = new SparseMatrix(m * p, n * q, {
                        initialCapacity: this.cardinality * other.cardinality
                    });
                    this.forEachNonZero((i, j, v1) => {
                        other.forEachNonZero((k, l, v2) => {
                            result.set(p * i + k, q * j + l, v1 * v2);
                            return v2;
                        });
                        return v1;
                    });
                    return result;
                }

                forEachNonZero(callback) {
                    this.elements.forEachPair((key, value) => {
                        const i = (key / this.columns) | 0;
                        const j = key % this.columns;
                        let r = callback(i, j, value);
                        if (r === false) return false; // stop iteration
                        if (this.threshold && Math.abs(r) < this.threshold) r = 0;
                        if (r !== value) {
                            if (r === 0) {
                                this.elements.remove(key, true);
                            } else {
                                this.elements.set(key, r);
                            }
                        }
                        return true;
                    });
                    this.elements.maybeShrinkCapacity();
                    return this;
                }

                getNonZeros() {
                    const cardinality = this.cardinality;
                    const rows = new Array(cardinality);
                    const columns = new Array(cardinality);
                    const values = new Array(cardinality);
                    var idx = 0;
                    this.forEachNonZero((i, j, value) => {
                        rows[idx] = i;
                        columns[idx] = j;
                        values[idx] = value;
                        idx++;
                        return value;
                    });
                    return {rows, columns, values};
                }

                setThreshold(newThreshold) {
                    if (newThreshold !== 0 && newThreshold !== this.threshold) {
                        this.threshold = newThreshold;
                        this.forEachNonZero((i, j, v) => v);
                    }
                    return this;
                }

                /**
                 * @return {SparseMatrix} - New transposed sparse matrix
                 */
                transpose() {
                    let trans = new SparseMatrix(this.columns, this.rows, {initialCapacity: this.cardinality});
                    this.forEachNonZero((i, j, value) => {
                        trans.set(j, i, value);
                        return value;
                    });
                    return trans;
                }
            }

            SparseMatrix.prototype.klass = 'Matrix';

            SparseMatrix.identity = SparseMatrix.eye;
            SparseMatrix.prototype.tensorProduct = SparseMatrix.prototype.kroneckerProduct;

            /*
             Add dynamically instance and static methods for mathematical operations
             */

            var inplaceOperator = `
(function %name%(value) {
    if (typeof value === 'number') return this.%name%S(value);
    return this.%name%M(value);
})
`;

            var inplaceOperatorScalar = `
(function %name%S(value) {
    this.forEachNonZero((i, j, v) => v %op% value);
    return this;
})
`;

            var inplaceOperatorMatrix = `
(function %name%M(matrix) {
    matrix.forEachNonZero((i, j, v) => {
        this.set(i, j, this.get(i, j) %op% v);
        return v;
    });
    return this;
})
`;

            var staticOperator = `
(function %name%(matrix, value) {
    var newMatrix = new SparseMatrix(matrix);
    return newMatrix.%name%(value);
})
`;

            var inplaceMethod = `
(function %name%() {
    this.forEachNonZero((i, j, v) => %method%(v));
    return this;
})
`;

            var staticMethod = `
(function %name%(matrix) {
    var newMatrix = new SparseMatrix(matrix);
    return newMatrix.%name%();
})
`;

            const operators = [
                // Arithmetic operators
                ['+', 'add'],
                ['-', 'sub', 'subtract'],
                ['*', 'mul', 'multiply'],
                ['/', 'div', 'divide'],
                ['%', 'mod', 'modulus'],
                // Bitwise operators
                ['&', 'and'],
                ['|', 'or'],
                ['^', 'xor'],
                ['<<', 'leftShift'],
                ['>>', 'signPropagatingRightShift'],
                ['>>>', 'rightShift', 'zeroFillRightShift']
            ];

            for (const operator of operators) {
                for (let i = 1; i < operator.length; i++) {
                    SparseMatrix.prototype[operator[i]] = eval(fillTemplateFunction(inplaceOperator, {name: operator[i], op: operator[0]}));
                    SparseMatrix.prototype[operator[i] + 'S'] = eval(fillTemplateFunction(inplaceOperatorScalar, {name: operator[i] + 'S', op: operator[0]}));
                    SparseMatrix.prototype[operator[i] + 'M'] = eval(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[i] + 'M', op: operator[0]}));

                    SparseMatrix[operator[i]] = eval(fillTemplateFunction(staticOperator, {name: operator[i]}));
                }
            }

            var methods = [
                ['~', 'not']
            ];

            [
                'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',
                'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',
                'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'
            ].forEach(function (mathMethod) {
                methods.push(['Math.' + mathMethod, mathMethod]);
            });

            for (const method of methods) {
                for (let i = 1; i < method.length; i++) {
                    SparseMatrix.prototype[method[i]] = eval(fillTemplateFunction(inplaceMethod, {name: method[i], method: method[0]}));
                    SparseMatrix[method[i]] = eval(fillTemplateFunction(staticMethod, {name: method[i]}));
                }
            }

            function fillTemplateFunction(template, values) {
                for (const i in values) {
                    template = template.replace(new RegExp('%' + i + '%', 'g'), values[i]);
                }
                return template;
            }

            var src$e = /*#__PURE__*/Object.freeze({
                        SparseMatrix: SparseMatrix
            });

            var additiveSymmetric = function additiveSymmetric(a, b) {
                var i = 0,
                    ii = a.length,
                    d = 0;
                for (; i < ii; i++) {
                    d += ((a[i] - b[i]) * (a[i] - b[i]) * (a[i] + b[i])) / (a[i] * b[i]);
                }
                return 2 * d;
            };

            var avg = function avg(a, b) {
                var ii = a.length,
                    max = 0,
                    ans = 0,
                    aux = 0;
                for (var i = 0; i < ii ; i++) {
                    aux = Math.abs(a[i] - b[i]);
                    ans += aux;
                    if (max < aux) {
                        max = aux;
                    }
                }
                return (max + ans) / 2;
            };

            var bhattacharyya = function bhattacharyya(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += Math.sqrt(a[i] * b[i]);
                }
                return - Math.log(ans);
            };

            var canberra = function canberra(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += Math.abs(a[i] - b[i]) / (a[i] + b[i]);
                }
                return ans;
            };

            var chebyshev = function chebyshev(a, b) {
                var ii = a.length,
                    max = 0,
                    aux = 0;
                for (var i = 0; i < ii ; i++) {
                    aux = Math.abs(a[i] - b[i]);
                    if (max < aux) {
                        max = aux;
                    }
                }
                return max;
            };

            var clark = function clark(a, b) {
                var i = 0,
                    ii = a.length,
                    d = 0;
                for (; i < ii; i++) {
                    d += Math.sqrt(((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i])));
                }
                return 2 * d;
            };

            var czekanowski = function czekanowskiSimilarity(a, b) {
                var up = 0;
                var down = 0;
                for (var i = 0; i < a.length; i++) {
                    up += Math.min(a[i], b[i]);
                    down += a[i] + b[i];
                }
                return 2 * up / down;
            };

            var czekanowski$1 = function czekanowskiDistance(a, b) {
                return 1 - czekanowski(a, b);
            };

            var dice = function dice(a, b) {
                var ii = a.length,
                    p = 0,
                    q1 = 0,
                    q2 = 0;
                for (var i = 0; i < ii ; i++) {
                    p += a[i] * a[i];
                    q1 += b[i] * b[i];
                    q2 += (a[i] - b[i]) * (a[i] - b[i]);
                }
                return q2 / (p + q1);
            };

            var divergence = function divergence(a, b) {
                var i = 0,
                    ii = a.length,
                    d = 0;
                for (; i < ii; i++) {
                    d += ((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i]));
                }
                return 2 * d;
            };

            var fidelity = function fidelity(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += Math.sqrt(a[i] * b[i]);
                }
                return ans;
            };

            var gower = function gower(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += Math.abs(a[i] - b[i]);
                }
                return ans / ii;
            };

            var harmonicMean = function harmonicMean(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += (a[i] * b[i]) / (a[i] + b[i]);
                }
                return 2 * ans;
            };

            var hellinger = function hellinger(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += Math.sqrt(a[i] * b[i]);
                }
                return 2 * Math.sqrt(1 - ans);
            };

            var innerProduct = function innerProduct(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += a[i] * b[i];
                }
                return ans;
            };

            var intersection = function intersection(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += Math.min(a[i], b[i]);
                }
                return 1 - ans;
            };

            var jaccard = function jaccard(a, b) {
                var ii = a.length,
                    p1 = 0,
                    p2 = 0,
                    q1 = 0,
                    q2 = 0;
                for (var i = 0; i < ii ; i++) {
                    p1 += a[i] * b[i];
                    p2 += a[i] * a[i];
                    q1 += b[i] * b[i];
                    q2 += (a[i] - b[i]) * (a[i] - b[i]);
                }
                return q2 / (p2 + q1 - p1);
            };

            var jeffreys = function jeffreys(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += (a[i] - b[i]) * Math.log(a[i] / b[i]);
                }
                return ans;
            };

            var jensenDifference = function jensenDifference(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += ((a[i] * Math.log(a[i]) + b[i] * Math.log(b[i])) / 2) - ((a[i] + b[i]) / 2) * Math.log((a[i] + b[i]) / 2);
                }
                return ans;
            };

            var jensenShannon = function jensenShannon(a, b) {
                var ii = a.length,
                    p = 0,
                    q = 0;
                for (var i = 0; i < ii ; i++) {
                    p += a[i] * Math.log(2 * a[i] / (a[i] + b[i]));
                    q += b[i] * Math.log(2 * b[i] / (a[i] + b[i]));
                }
                return (p + q) / 2;
            };

            var kdivergence = function kdivergence(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += a[i] * Math.log(2 * a[i] / (a[i] + b[i]));
                }
                return ans;
            };

            var kulczynski = function kulczynski(a, b) {
                var ii = a.length,
                    up = 0,
                    down = 0;
                for (var i = 0; i < ii ; i++) {
                    up += Math.abs(a[i] - b[i]);
                    down += Math.min(a[i],b[i]);
                }
                return up / down;
            };

            var kullbackLeibler = function kullbackLeibler(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += a[i] * Math.log(a[i] / b[i]);
                }
                return ans;
            };

            var kumarHassebrook = function kumarHassebrook(a, b) {
                var ii = a.length,
                    p = 0,
                    p2 = 0,
                    q2 = 0;
                for (var i = 0; i < ii ; i++) {
                    p += a[i] * b[i];
                    p2 += a[i] * a[i];
                    q2 += b[i] * b[i];
                }
                return p / (p2 + q2 - p);
            };

            var kumarJohnson = function kumarJohnson(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += Math.pow(a[i] * a[i] - b[i] * b[i],2) / (2 * Math.pow(a[i] * b[i],1.5));
                }
                return ans;
            };

            var lorentzian = function lorentzian(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += Math.log(Math.abs(a[i] - b[i]) + 1);
                }
                return ans;
            };

            var manhattan = function manhattan(a, b) {
                var i = 0,
                    ii = a.length,
                    d = 0;
                for (; i < ii; i++) {
                    d += Math.abs(a[i] - b[i]);
                }
                return d;
            };

            var matusita = function matusita(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += Math.sqrt(a[i] * b[i]);
                }
                return Math.sqrt(2 - 2 * ans);
            };

            var minkowski = function minkowski(a, b, p) {
                var i = 0,
                    ii = a.length,
                    d = 0;
                for (; i < ii; i++) {
                    d += Math.pow(Math.abs(a[i] - b[i]),p);
                }
                return Math.pow(d,(1/p));
            };

            var motyka = function motyka(a, b) {
                var ii = a.length,
                    up = 0,
                    down = 0;
                for (var i = 0; i < ii ; i++) {
                    up += Math.min(a[i], b[i]);
                    down += a[i] + b[i];
                }
                return 1 - (up / down);
            };

            var neyman = function neyman(a, b) {
                var i = 0,
                    ii = a.length,
                    d = 0;
                for (; i < ii; i++) {
                    d += ((a[i] - b[i]) * (a[i] - b[i])) / a[i];
                }
                return d;
            };

            var pearson = function pearson(a, b) {
                var i = 0,
                    ii = a.length,
                    d = 0;
                for (; i < ii; i++) {
                    d += ((a[i] - b[i]) * (a[i] - b[i])) / b[i];
                }
                return d;
            };

            var probabilisticSymmetric = function probabilisticSymmetric(a, b) {
                var i = 0,
                    ii = a.length,
                    d = 0;
                for (; i < ii; i++) {
                    d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);
                }
                return 2 * d;
            };

            var ruzicka = function ruzicka(a, b) {
                var ii = a.length,
                    up = 0,
                    down = 0;
                for (var i = 0; i < ii ; i++) {
                    up += Math.min(a[i],b[i]);
                    down += Math.max(a[i],b[i]);
                }
                return up / down;
            };

            var soergel = function soergel(a, b) {
                var ii = a.length,
                    up = 0,
                    down = 0;
                for (var i = 0; i < ii ; i++) {
                    up += Math.abs(a[i] - b[i]);
                    down += Math.max(a[i],b[i]);
                }
                return up / down;
            };

            var sorensen = function sorensen(a, b) {
                var ii = a.length,
                    up = 0,
                    down = 0;
                for (var i = 0; i < ii ; i++) {
                    up += Math.abs(a[i] - b[i]);
                    down += a[i] + b[i];
                }
                return up / down;
            };

            var squared = function squared(a, b) {
                var i = 0,
                    ii = a.length,
                    d = 0;
                for (; i < ii; i++) {
                    d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);
                }
                return d;
            };

            var squaredChord = function squaredChord(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += (Math.sqrt(a[i]) - Math.sqrt(b[i])) * (Math.sqrt(a[i]) - Math.sqrt(b[i]));
                }
                return ans;
            };

            var taneja = function taneja(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += (a[i] + b[i]) / 2 * Math.log((a[i] + b[i]) / (2 * Math.sqrt(a[i] * b[i])));
                }
                return ans;
            };

            var tanimoto = function tanimoto(a, b, bitvector) {
                if (bitvector) {
                    var inter = 0,
                        union = 0;
                    for (var j = 0; j < a.length; j++) {
                        inter += a[j] && b[j];
                        union += a[j] || b[j];
                    }
                    if (union === 0)
                        return 1;
                    return inter / union;
                }
                else {
                    var ii = a.length,
                        p = 0,
                        q = 0,
                        m = 0;
                    for (var i = 0; i < ii ; i++) {
                        p += a[i];
                        q += b[i];
                        m += Math.min(a[i],b[i]);
                    }
                    return 1 - (p + q - 2 * m) / (p + q - m);
                }
            };

            var tanimoto$1 = function tanimoto$$1(a, b, bitvector) {
                if (bitvector)
                    return 1 - tanimoto(a, b, bitvector);
                else {
                    var ii = a.length,
                        p = 0,
                        q = 0,
                        m = 0;
                    for (var i = 0; i < ii ; i++) {
                        p += a[i];
                        q += b[i];
                        m += Math.min(a[i],b[i]);
                    }
                    return (p + q - 2 * m) / (p + q - m);
                }
            };

            var topsoe = function topsoe(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += a[i] * Math.log(2 * a[i] / (a[i] + b[i])) + b[i] * Math.log(2 * b[i] / (a[i] + b[i]));
                }
                return ans;
            };

            /**
             * Function that creates the tree
             * @param {Array <number>} X - chemical shifts of the signal
             * @param {Array <number>} Y - intensity of the signal
             * @param {number} from - the low limit of x
             * @param {number} to - the top limit of x
             * @param {number} minWindow - smallest range to accept in x
             * @param {number} threshold - smallest range to accept in y
             * @returns {{sum: number, center: number, left: {json}, right: {json}}}
             * left and right have the same structure than the parent, or have a
             * undefined value if are leafs
             */
            function createTree (X, Y, from, to, minWindow, threshold) {
                minWindow = minWindow || 0.16;
                threshold = threshold || 0.01;
                if ((to - from) < minWindow)
                    return undefined;
                var sum = 0;
                for (var i = 0; X[i] < to; i++) {
                    if (X[i] > from)
                        sum += Y[i];
                }
                if (sum < threshold) {
                    return undefined;
                }
                var center = 0;
                for (var j = 0; X[j] < to; j++) {
                    if (X[i] > from)
                        center += X[j] * Y[j];
                }
                center = center / sum;
                if (((center - from) < 10e-6) || ((to - center) < 10e-6)) return undefined;
                if ((center - from) < (minWindow /4)) {
                    return createTree(X, Y, center, to, minWindow, threshold);
                }
                else {
                    if ((to - center) < (minWindow / 4)) {
                        return createTree(X, Y, from, center, minWindow, threshold);
                    }
                    else {
                        return {
                            'sum': sum,
                            'center': center,
                            'left': createTree(X, Y, from, center, minWindow, threshold),
                            'right': createTree(X, Y, center, to, minWindow, threshold)
                        };
                    }
                }
            }

            /**
             * Similarity between two nodes
             * @param {{sum: number, center: number, left: {json}, right: {json}}} a - tree A node
             * @param {{sum: number, center: number, left: {json}, right: {json}}} b - tree B node
             * @param {number} alpha - weights the relative importance of intensity vs. shift match
             * @param {number} beta - weights the relative importance of node matching and children matching
             * @param {number} gamma - controls the attenuation of the effect of chemical shift differences
             * @returns {number} similarity measure between tree nodes
             */
            function S(a, b, alpha, beta, gamma) {
                if (a === undefined || b === undefined) {
                    return 0;
                }
                else {
                    var C = (alpha*Math.min(a.sum, b.sum)/Math.max(a.sum, b.sum)+ (1-alpha)*Math.exp(-gamma*Math.abs(a.center - b.center)));
                }
                return beta*C + (1-beta)*(S(a.left, b.left, alpha, beta, gamma)+S(a.right, b.right, alpha, beta, gamma));
            }

            /**
             * @type {number} alpha - weights the relative importance of intensity vs. shift match
             * @type {number} beta - weights the relative importance of node matching and children matching
             * @type {number} gamma - controls the attenuation of the effect of chemical shift differences
             * @type {number} minWindow - smallest range to accept in x
             * @type {number} threshold - smallest range to accept in y
             */
            var defaultOptions$n = {
                minWindow: 0.16,
                threshold : 0.01,
                alpha: 0.1,
                beta: 0.33,
                gamma: 0.001
            };

            /**
             * Builds a tree based in the spectra and compares this trees
             * @param {{x: Array<number>, y: Array<number>}} A - first spectra to be compared
             * @param {{x: Array<number>, y: Array<number>}} B - second spectra to be compared
             * @param {number} from - the low limit of x
             * @param {number} to - the top limit of x
             * @param {{minWindow: number, threshold: number, alpha: number, beta: number, gamma: number}} options
             * @returns {number} similarity measure between the spectra
             */
            function tree(A, B, from, to, options) {
                options = options || {};
                for (var o in defaultOptions$n)
                    if (!options.hasOwnProperty(o)) {
                        options[o] = defaultOptions$n[o];
                    }
                var Atree, Btree;
                if (A.sum)
                    Atree = A;
                else
                    Atree = createTree(A.x, A.y, from, to, options.minWindow, options.threshold);
                if (B.sum)
                    Btree = B;
                else
                    Btree = createTree(B.x, B.y, from, to, options.minWindow, options.threshold);
                return S(Atree, Btree, options.alpha, options.beta, options.gamma);
            }

            var src$f = {
                calc: tree,
                createTree: createTree
            };

            var waveHedges = function waveHedges(a, b) {
                var ii = a.length,
                    ans = 0;
                for (var i = 0; i < ii ; i++) {
                    ans += 1 - (Math.min(a[i], b[i]) / Math.max(a[i], b[i]));
                }
                return ans;
            };

            var additiveSymmetric$1 = additiveSymmetric;
            var avg$1 = avg;
            var bhattacharyya$1 = bhattacharyya;
            var canberra$1 = canberra;
            var chebyshev$1 = chebyshev;
            var clark$1 = clark;
            var czekanowski$2 = czekanowski$1;
            var dice$1 = dice;
            var divergence$1 = divergence;
            var euclidean$1 = euclidean_1;
            var fidelity$1 = fidelity;
            var gower$1 = gower;
            var harmonicMean$1 = harmonicMean;
            var hellinger$1 = hellinger;
            var innerProduct$1 = innerProduct;
            var intersection$1 = intersection;
            var jaccard$1 = jaccard;
            var jeffreys$1 = jeffreys;
            var jensenDifference$1 = jensenDifference;
            var jensenShannon$1 = jensenShannon;
            var kdivergence$1 = kdivergence;
            var kulczynski$1 = kulczynski;
            var kullbackLeibler$1 = kullbackLeibler;
            var kumarHassebrook$1 = kumarHassebrook;
            var kumarJohnson$1 = kumarJohnson;
            var lorentzian$1 = lorentzian;
            var manhattan$1 = manhattan;
            var matusita$1 = matusita;
            var minkowski$1 = minkowski;
            var motyka$1 = motyka;
            var neyman$1 = neyman;
            var pearson$1 = pearson;
            var probabilisticSymmetric$1 = probabilisticSymmetric;
            var ruzicka$1 = ruzicka;
            var soergel$1 = soergel;
            var sorensen$1 = sorensen;
            var squared$1 = squared;
            var squaredChord$1 = squaredChord;
            var squaredEuclidean$5 = euclidean_1.squared;
            var taneja$1 = taneja;
            var tanimoto$2 = tanimoto$1;
            var topsoe$1 = topsoe;
            var tree$1 = src$f;
            var waveHedges$1 = waveHedges;

            var distances = {
            	additiveSymmetric: additiveSymmetric$1,
            	avg: avg$1,
            	bhattacharyya: bhattacharyya$1,
            	canberra: canberra$1,
            	chebyshev: chebyshev$1,
            	clark: clark$1,
            	czekanowski: czekanowski$2,
            	dice: dice$1,
            	divergence: divergence$1,
            	euclidean: euclidean$1,
            	fidelity: fidelity$1,
            	gower: gower$1,
            	harmonicMean: harmonicMean$1,
            	hellinger: hellinger$1,
            	innerProduct: innerProduct$1,
            	intersection: intersection$1,
            	jaccard: jaccard$1,
            	jeffreys: jeffreys$1,
            	jensenDifference: jensenDifference$1,
            	jensenShannon: jensenShannon$1,
            	kdivergence: kdivergence$1,
            	kulczynski: kulczynski$1,
            	kullbackLeibler: kullbackLeibler$1,
            	kumarHassebrook: kumarHassebrook$1,
            	kumarJohnson: kumarJohnson$1,
            	lorentzian: lorentzian$1,
            	manhattan: manhattan$1,
            	matusita: matusita$1,
            	minkowski: minkowski$1,
            	motyka: motyka$1,
            	neyman: neyman$1,
            	pearson: pearson$1,
            	probabilisticSymmetric: probabilisticSymmetric$1,
            	ruzicka: ruzicka$1,
            	soergel: soergel$1,
            	sorensen: sorensen$1,
            	squared: squared$1,
            	squaredChord: squaredChord$1,
            	squaredEuclidean: squaredEuclidean$5,
            	taneja: taneja$1,
            	tanimoto: tanimoto$2,
            	topsoe: topsoe$1,
            	tree: tree$1,
            	waveHedges: waveHedges$1
            };

            var cosine = function cosine(a, b) {
                var ii = a.length,
                    p = 0,
                    p2 = 0,
                    q2 = 0;
                for (var i = 0; i < ii ; i++) {
                    p += a[i] * b[i];
                    p2 += a[i] * a[i];
                    q2 += b[i] * b[i];
                }
                return p / (Math.sqrt(p2) * Math.sqrt(q2));
            };

            var dice$2 = function dice$$1(a, b) {
                return 1 - dice(a,b);
            };

            var intersection$2 = function intersection$$1(a, b) {
                return 1 - intersection(a,b);
            };

            var jaccard$2 = function jaccard$$1(a, b) {
                return 1 - jaccard(a, b);
            };

            var kulczynski$2 = function kulczynski$$1(a, b) {
                return 1 / kulczynski(a, b);
            };

            var motyka$2 = function motyka$$1(a, b) {
                return 1 - motyka(a,b);
            };

            var stat$1=mlStat.array;


            var pearson$2 = function pearson(a, b) {
                var avgA=stat$1.mean(a);
                var avgB=stat$1.mean(b);

                var newA=new Array(a.length);
                var newB=new Array(b.length);
                for (var i=0; i<newA.length; i++) {
                    newA[i]=a[i]-avgA;
                    newB[i]=b[i]-avgB;
                }

                return cosine(newA, newB);
            };

            var squaredChord$2 = function squaredChord$$1(a, b) {
                return 1 - squaredChord(a, b);
            };

            var cosine$1 = cosine;
            var czekanowski$3 = czekanowski;
            var dice$3 = dice$2;
            var intersection$3 = intersection$2;
            var jaccard$3 = jaccard$2;
            var kulczynski$3 = kulczynski$2;
            var motyka$3 = motyka$2;
            var pearson$3 = pearson$2;
            var squaredChord$3 = squaredChord$2;
            var tanimoto$3 = tanimoto;

            var similarities = {
            	cosine: cosine$1,
            	czekanowski: czekanowski$3,
            	dice: dice$3,
            	intersection: intersection$3,
            	jaccard: jaccard$3,
            	kulczynski: kulczynski$3,
            	motyka: motyka$3,
            	pearson: pearson$3,
            	squaredChord: squaredChord$3,
            	tanimoto: tanimoto$3
            };

            var distance = distances;
            var similarity = similarities;

            var src$g = {
            	distance: distance,
            	similarity: similarity
            };

            var xsaddEs5 = createCommonjsModule(function (module, exports) {

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

            var LOOP = 8;
            var FLOAT_MUL = 1 / 16777216;

            function multiply_uint32(n, m) {
                n >>>= 0;
                m >>>= 0;
                var nlo = n & 0xffff;
                var nhi = n - nlo;
                return (nhi * m >>> 0) + nlo * m >>> 0;
            }

            var XSadd = (function () {
                function XSadd() {
                    var seed = arguments.length <= 0 || arguments[0] === undefined ? Date.now() : arguments[0];

                    _classCallCheck(this, XSadd);

                    this.state = new Uint32Array(4);
                    this.init(seed);
                }

                _createClass(XSadd, [{
                    key: "init",
                    value: function init(seed) {
                        this.state[0] = seed;
                        this.state[1] = 0;
                        this.state[2] = 0;
                        this.state[3] = 0;
                        for (var i = 1; i < LOOP; i++) {
                            this.state[i & 3] ^= i + multiply_uint32(1812433253, this.state[i - 1 & 3] ^ this.state[i - 1 & 3] >>> 30 >>> 0) >>> 0;
                        }
                        period_certification(this);
                        for (var i = 0; i < LOOP; i++) {
                            next_state(this);
                        }
                    }

                    /**
                     * Returns a 32-bit integer r (0 <= r < 2^32)
                     */
                }, {
                    key: "getUint32",
                    value: function getUint32() {
                        next_state(this);
                        return this.state[3] + this.state[2] >>> 0;
                    }

                    /**
                     * Returns a floating point number r (0.0 <= r < 1.0)
                     */
                }, {
                    key: "getFloat",
                    value: function getFloat() {
                        return (this.getUint32() >>> 8) * FLOAT_MUL;
                    }
                }, {
                    key: "random",
                    get: function get() {
                        if (!this._random) {
                            this._random = this.getFloat.bind(this);
                        }
                        return this._random;
                    }
                }]);

                return XSadd;
            })();

            exports["default"] = XSadd;

            function period_certification(xsadd) {
                if (xsadd.state[0] === 0 && xsadd.state[1] === 0 && xsadd.state[2] === 0 && xsadd.state[3] === 0) {
                    xsadd.state[0] = 88; // X
                    xsadd.state[1] = 83; // S
                    xsadd.state[2] = 65; // A
                    xsadd.state[3] = 68; // D
                }
            }

            var sh1 = 15;
            var sh2 = 18;
            var sh3 = 11;
            function next_state(xsadd) {
                var t = xsadd.state[0];
                t ^= t << sh1;
                t ^= t >>> sh2;
                t ^= xsadd.state[3] << sh3;
                xsadd.state[0] = xsadd.state[1];
                xsadd.state[1] = xsadd.state[2];
                xsadd.state[2] = xsadd.state[3];
                xsadd.state[3] = t;
            }
            module.exports = exports["default"];
            });

            unwrapExports(xsaddEs5);

            // Accuracy
            var acc = pred => {
                const l = pred.cutoffs.length;
                const result = new Array(l);
                for (var i = 0; i < l; i++) {
                    result[i] = (pred.tn[i] + pred.tp[i]) / (l - 1);
                }
                return result;
            };

            // Error rate
            var err = pred => {
                const l = pred.cutoffs.length;
                const result = new Array(l);
                for (var i = 0; i < l; i++) {
                    result[i] = (pred.fn[i] + pred.fp[i] / (l - 1));
                }
                return result;
            };

            // False positive rate
            var fpr = pred => {
                const l = pred.cutoffs.length;
                const result = new Array(l);
                for (var i = 0; i < l; i++) {
                    result[i] = pred.fp[i] / pred.nNeg;
                }
                return result;
            };

            // True positive rate
            var tpr = pred => {
                const l = pred.cutoffs.length;
                const result = new Array(l);
                for (var i = 0; i < l; i++) {
                    result[i] = pred.tp[i] / pred.nPos;
                }
                return result;
            };

            // False negative rate
            var fnr = pred => {
                const l = pred.cutoffs.length;
                const result = new Array(l);
                for (var i = 0; i < l; i++) {
                    result[i] = pred.fn[i] / pred.nPos;
                }
                return result;
            };

            // True negative rate
            var tnr = pred => {
                const l = pred.cutoffs.length;
                const result = new Array(l);
                for (var i = 0; i < l; i++) {
                    result[i] = pred.tn[i] / pred.nNeg;
                }
                return result;
            };

            // Positive predictive value
            var ppv = pred => {
                const l = pred.cutoffs.length;
                const result = new Array(l);
                for (var i = 0; i < l; i++) {
                    result[i] = (pred.fp[i] + pred.tp[i] !== 0) ? (pred.tp[i] / (pred.fp[i] + pred.tp[i])) : 0;
                }
                return result;
            };

            // Negative predictive value
            var npv = pred => {
                const l = pred.cutoffs.length;
                const result = new Array(l);
                for (var i = 0; i < l; i++) {
                    result[i] = (pred.fn[i] + pred.tn[i] !== 0) ? (pred.tn[i] / (pred.fn[i] + pred.tn[i])) : 0;
                }
                return result;
            };

            // Prediction conditioned fallout
            var pcfall = pred => {
                const l = pred.cutoffs.length;
                const result = new Array(l);
                for (var i = 0; i < l; i++) {
                    result[i] = (pred.fp[i] + pred.tp[i] !== 0) ? 1 - (pred.tp[i] / (pred.fp[i] + pred.tp[i])) : 1;
                }
                return result;
            };

            // Prediction conditioned miss
            var pcmiss = pred => {
                const l = pred.cutoffs.length;
                const result = new Array(l);
                for (var i = 0; i < l; i++) {
                    result[i] = (pred.fn[i] + pred.tn[i] !== 0) ? 1 - (pred.tn[i] / (pred.fn[i] + pred.tn[i])) : 1;
                }
                return result;
            };

            // Lift value
            var lift = pred => {
                const l = pred.cutoffs.length;
                const result = new Array(l);
                for (var i = 0; i < l; i++) {
                    result[i] = (pred.nPosPred[i] !== 0) ? ((pred.tp[i] / pred.nPos) / (pred.nPosPred[i] / pred.nSamples)) : 0;
                }
                return result;
            };

            // Rate of positive predictions
            var rpp = pred => {
                const l = pred.cutoffs.length;
                const result = new Array(l);
                for (var i = 0; i < l; i++) {
                    result[i] = pred.nPosPred[i] / pred.nSamples;
                }
                return result;
            };

            // Rate of negative predictions
            var rnp = pred => {
                const l = pred.cutoffs.length;
                const result = new Array(l);
                for (var i = 0; i < l; i++) {
                    result[i] = pred.nNegPred[i] / pred.nSamples;
                }
                return result;
            };

            // Threshold
            var threshold = pred => {
                const clone = pred.cutoffs.slice();
                clone[0] = clone[1]; // Remove the infinite value
                return clone;
            };

            var measures = {
            	acc: acc,
            	err: err,
            	fpr: fpr,
            	tpr: tpr,
            	fnr: fnr,
            	tnr: tnr,
            	ppv: ppv,
            	npv: npv,
            	pcfall: pcfall,
            	pcmiss: pcmiss,
            	lift: lift,
            	rpp: rpp,
            	rnp: rnp,
            	threshold: threshold
            };

            class Performance {
                /**
                 *
                 * @param prediction - The prediction matrix
                 * @param target - The target matrix (values: truthy for same class, falsy for different class)
                 * @param options
                 *
                 * @option    all    True if the entire matrix must be used. False to ignore the diagonal and lower part (default is false, for similarity/distance matrices)
                 * @option    max    True if the max value corresponds to a perfect match (like in similarity matrices), false if it is the min value (default is false, like in distance matrices. All values will be multiplied by -1)
                 */
                constructor(prediction, target, options) {
                    options = options || {};
                    if (prediction.length !== target.length || prediction[0].length !== target[0].length) {
                        throw new Error('dimensions of prediction and target do not match');
                    }
                    const rows = prediction.length;
                    const columns = prediction[0].length;
                    const isDistance = !options.max;

                    const predP = [];

                    if (options.all) {
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                predP.push({
                                    pred: prediction[i][j],
                                    targ: target[i][j]
                                });
                            }
                        }
                    } else {
                        if (rows < 3 || rows !== columns) {
                            throw new Error('When "all" option is false, the prediction matrix must be square and have at least 3 columns');
                        }
                        for (var i = 0; i < rows - 1; i++) {
                            for (var j = i + 1; j < columns; j++) {
                                predP.push({
                                    pred: prediction[i][j],
                                    targ: target[i][j]
                                });
                            }
                        }
                    }

                    if (isDistance) {
                        predP.sort((a, b) => a.pred - b.pred);
                    } else {
                        predP.sort((a, b) => b.pred - a.pred);
                    }
                    
                    const cutoffs = this.cutoffs = [isDistance ? Number.MIN_VALUE : Number.MAX_VALUE];
                    const fp = this.fp = [0];
                    const tp = this.tp = [0];

                    var nPos = 0;
                    var nNeg = 0;

                    var currentPred = predP[0].pred;
                    var nTp = 0;
                    var nFp = 0;
                    for (var i = 0; i < predP.length; i++) {
                        if (predP[i].pred !== currentPred) {
                            cutoffs.push(currentPred);
                            fp.push(nFp);
                            tp.push(nTp);
                            currentPred = predP[i].pred;
                        }
                        if (predP[i].targ) {
                            nPos++;
                            nTp++;
                        } else {
                            nNeg++;
                            nFp++;
                        }
                    }
                    cutoffs.push(currentPred);
                    fp.push(nFp);
                    tp.push(nTp);

                    const l = cutoffs.length;
                    const fn = this.fn = new Array(l);
                    const tn = this.tn = new Array(l);
                    const nPosPred = this.nPosPred = new Array(l);
                    const nNegPred = this.nNegPred = new Array(l);

                    for (var i = 0; i < l; i++) {
                        fn[i] = nPos - tp[i];
                        tn[i] = nNeg - fp[i];

                        nPosPred[i] = tp[i] + fp[i];
                        nNegPred[i] = tn[i] + fn[i];
                    }

                    this.nPos = nPos;
                    this.nNeg = nNeg;
                    this.nSamples = nPos + nNeg;
                }

                /**
                 * Computes a measure from the prediction object.
                 *
                 * Many measures are available and can be combined :
                 * To create a ROC curve, you need fpr and tpr
                 * To create a DET curve, you need fnr and fpr
                 * To create a Lift chart, you need rpp and lift
                 *
                 * Possible measures are : threshold (Threshold), acc (Accuracy), err (Error rate),
                 * fpr (False positive rate), tpr (True positive rate), fnr (False negative rate), tnr (True negative rate), ppv (Positive predictive value),
                 * npv (Negative predictive value), pcfall (Prediction-conditioned fallout), pcmiss (Prediction-conditioned miss), lift (Lift value), rpp (Rate of positive predictions), rnp (Rate of negative predictions)
                 *
                 * @param measure - The short name of the measure
                 *
                 * @return [number]
                 */
                getMeasure(measure) {
                    if (typeof measure !== 'string') {
                        throw new Error('No measure specified');
                    }
                    if (!measures[measure]) {
                        throw new Error(`The specified measure (${measure}) does not exist`);
                    }
                    return measures[measure](this);
                }

                /**
                 * Returns the area under the ROC curve
                 */
                getAURC() {
                    const l = this.cutoffs.length;
                    const x = new Array(l);
                    const y = new Array(l);
                    for (var i = 0; i < l; i++) {
                        x[i] = this.fp[i] / this.nNeg;
                        y[i] = this.tp[i] / this.nPos;
                    }
                    var auc = 0;
                    for (i = 1; i < l; i++) {
                        auc += 0.5 * (x[i] - x[i - 1]) * (y[i] + y[i - 1]);
                    }
                    return auc;
                }

                /**
                 * Returns the area under the DET curve
                 */
                getAUDC() {
                    const l = this.cutoffs.length;
                    const x = new Array(l);
                    const y = new Array(l);
                    for (var i = 0; i < l; i++) {
                        x[i] = this.fn[i] / this.nPos;
                        y[i] = this.fp[i] / this.nNeg;
                    }
                    var auc = 0;
                    for (i = 1; i < l; i++) {
                        auc += 0.5 * (x[i] + x[i - 1]) * (y[i] - y[i - 1]);
                    }
                    return auc;
                }

                getDistribution(options) {
                    options = options || {};
                    var cutLength = this.cutoffs.length;
                    var cutLow = options.xMin || Math.floor(this.cutoffs[cutLength - 1] * 100) / 100;
                    var cutHigh = options.xMax || Math.ceil(this.cutoffs[1] * 100) / 100;
                    var interval = options.interval || Math.floor(((cutHigh - cutLow) / 20 * 10000000) - 1) / 10000000; // Trick to avoid the precision problem of float numbers

                    var xLabels = [];
                    var interValues = [];
                    var intraValues = [];
                    var interCumPercent = [];
                    var intraCumPercent = [];

                    var nTP = this.tp[cutLength - 1], currentTP = 0;
                    var nFP = this.fp[cutLength - 1], currentFP = 0;

                    for (var i = cutLow, j = (cutLength - 1); i <= cutHigh; i += interval) {
                        while (this.cutoffs[j] < i)
                            j--;

                        xLabels.push(i);

                        var thisTP = nTP - currentTP - this.tp[j];
                        var thisFP = nFP - currentFP - this.fp[j];

                        currentTP += thisTP;
                        currentFP += thisFP;

                        interValues.push(thisFP);
                        intraValues.push(thisTP);

                        interCumPercent.push(100 - (nFP - this.fp[j]) / nFP * 100);
                        intraCumPercent.push(100 - (nTP - this.tp[j]) / nTP * 100);
                    }

                    return {
                        xLabels: xLabels,
                        interValues: interValues,
                        intraValues: intraValues,
                        interCumPercent: interCumPercent,
                        intraCumPercent: intraCumPercent
                    };
                }
            }

            Performance.names = {
                acc: 'Accuracy',
                err: 'Error rate',
                fpr: 'False positive rate',
                tpr: 'True positive rate',
                fnr: 'False negative rate',
                tnr: 'True negative rate',
                ppv: 'Positive predictive value',
                npv: 'Negative predictive value',
                pcfall: 'Prediction-conditioned fallout',
                pcmiss: 'Prediction-conditioned miss',
                lift: 'Lift value',
                rpp: 'Rate of positive predictions',
                rnp: 'Rate of negative predictions',
                threshold: 'Threshold'
            };

            var src$h = Performance;

            var hasOwn = Object.prototype.hasOwnProperty;
            var toStr = Object.prototype.toString;

            var isArray$4 = function isArray(arr) {
            	if (typeof Array.isArray === 'function') {
            		return Array.isArray(arr);
            	}

            	return toStr.call(arr) === '[object Array]';
            };

            var isPlainObject = function isPlainObject(obj) {
            	if (!obj || toStr.call(obj) !== '[object Object]') {
            		return false;
            	}

            	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
            	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
            	// Not own constructor property must be Object
            	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
            		return false;
            	}

            	// Own properties are enumerated firstly, so to speed up,
            	// if last one is own, then all properties are own.
            	var key;
            	for (key in obj) { /**/ }

            	return typeof key === 'undefined' || hasOwn.call(obj, key);
            };

            var extend = function extend() {
            	var options, name, src, copy, copyIsArray, clone;
            	var target = arguments[0];
            	var i = 1;
            	var length = arguments.length;
            	var deep = false;

            	// Handle a deep copy situation
            	if (typeof target === 'boolean') {
            		deep = target;
            		target = arguments[1] || {};
            		// skip the boolean and the target
            		i = 2;
            	}
            	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
            		target = {};
            	}

            	for (; i < length; ++i) {
            		options = arguments[i];
            		// Only deal with non-null/undefined values
            		if (options != null) {
            			// Extend the base object
            			for (name in options) {
            				src = target[name];
            				copy = options[name];

            				// Prevent never-ending loop
            				if (target !== copy) {
            					// Recurse if we're merging plain objects or arrays
            					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray$4(copy)))) {
            						if (copyIsArray) {
            							copyIsArray = false;
            							clone = src && isArray$4(src) ? src : [];
            						} else {
            							clone = src && isPlainObject(src) ? src : {};
            						}

            						// Never move original objects, clone them
            						target[name] = extend(deep, clone, copy);

            					// Don't bring in undefined values
            					} else if (typeof copy !== 'undefined') {
            						target[name] = copy;
            					}
            				}
            			}
            		}
            	}

            	// Return the modified object
            	return target;
            };

            var defaultOptions$o = {
                size: 1,
                value: 0
            };

            /**
             * Case when the entry is an array
             * @param data
             * @param options
             * @returns {Array}
             */
            function arrayCase(data, options) {
                var len = data.length;
                if (typeof options.size === 'number')
                    options.size = [options.size, options.size];

                var cond = len + options.size[0] + options.size[1];

                var output;
                if (options.output) {
                    if (options.output.length !== cond)
                        throw new RangeError('Wrong output size');
                    output = options.output;
                }
                else
                    output = new Array(cond);

                var i;

                // circular option
                if (options.value === 'circular') {
                    for (i = 0; i < cond; i++) {
                        if (i < options.size[0])
                            output[i] = data[((len - (options.size[0] % len)) + i) % len];
                        else if (i < (options.size[0] + len))
                            output[i] = data[i - options.size[0]];
                        else
                            output[i] = data[(i - options.size[0]) % len];
                    }
                }

                // replicate option
                else if (options.value === 'replicate') {
                    for (i = 0; i < cond; i++) {
                        if (i < options.size[0])
                            output[i] = data[0];
                        else if (i < (options.size[0] + len))
                            output[i] = data[i - options.size[0]];
                        else
                            output[i] = data[len - 1];
                    }
                }

                // symmetric option
                else if (options.value === 'symmetric') {
                    if ((options.size[0] > len) || (options.size[1] > len))
                        throw new RangeError('expanded value should not be bigger than the data length');
                    for (i = 0; i < cond; i++) {
                        if (i < options.size[0])
                            output[i] = data[options.size[0] - 1 - i];
                        else if (i < (options.size[0] + len))
                            output[i] = data[i - options.size[0]];
                        else
                            output[i] = data[2*len + options.size[0] - i - 1];
                    }
                }

                // default option
                else {
                    for (i = 0; i < cond; i++) {
                        if (i < options.size[0])
                            output[i] = options.value;
                        else if (i < (options.size[0] + len))
                            output[i] = data[i - options.size[0]];
                        else
                            output[i] = options.value;
                    }
                }

                return output;
            }

            /**
             * Case when the entry is a matrix
             * @param data
             * @param options
             * @returns {Array}
             */
            function matrixCase(data, options) {
                var row = data.length;
                var col = data[0].length;
                if (options.size[0] === undefined)
                    options.size = [options.size, options.size, options.size, options.size];
                throw new Error('matrix not supported yet, sorry');
            }

            /**
             * Pads and array
             * @param {Array <number>} data
             * @param {object} options
             */
            function padArray (data, options) {
                options = extend({}, defaultOptions$o, options);

                if (Array.isArray(data)) {
                    if (Array.isArray(data[0]))
                        return matrixCase(data, options);
                    else
                        return arrayCase(data, options);
                }
                else
                    throw new TypeError('data should be an array');
            }

            var src$i = padArray;

            var Matrix$9 = require$$0$2.Matrix;
            var inverse$4 = require$$0$2.inverse;



            var defaultOptions$p = {
                windowSize: 5,
                derivative: 1,
                polynomial: 2,
                pad: 'none',
                padValue: 'replicate'
            };

            /**
             * Savitzky-Golay filter
             * @param {Array <number>} data
             * @param {number} h
             * @param {Object} options
             * @returns {Array}
             */
            function SavitzkyGolay (data, h, options) {
                options = extend({}, defaultOptions$p, options);
                if ((options.windowSize % 2 === 0) || (options.windowSize < 5) || !(Number.isInteger(options.windowSize)))
                    throw new RangeError('Invalid window size (should be odd and at least 5 integer number)');
                if ((options.derivative < 0) || !(Number.isInteger(options.derivative)))
                    throw new RangeError('Derivative should be a positive integer');
                if ((options.polynomial < 1) || !(Number.isInteger(options.polynomial)))
                    throw new RangeError('Polynomial should be a positive integer');

                var C, norm;
                var step = Math.floor(options.windowSize / 2);

                if (options.pad === 'pre') {
                    data = src$i(data, {size: step, value: options.padValue});
                }

                var ans =  new Array(data.length - 2*step);

                if ((options.windowSize === 5) && (options.polynomial === 2) && ((options.derivative === 1) || (options.derivative === 2))) {
                    if (options.derivative === 1) {
                        C = [-2,-1,0,1,2];
                        norm = 10;
                    }
                    else {
                        C = [2, -1, -2, -1, 2];
                        norm = 7;
                    }
                }
                else {
                    var J = Matrix$9.ones(options.windowSize, options.polynomial + 1);
                    var inic = -(options.windowSize - 1) / 2;
                    for (var i = 0; i < J.length; i++) {
                        for (var j = 0; j < J[i].length; j++) {
                            if ((inic + 1 !== 0) || (j !== 0))
                                J[i][j] = Math.pow((inic + i), j);
                        }
                    }
                    var Jtranspose = J.transposeView();
                    var Jinv = inverse$4(Jtranspose.mmul(J));
                    C = Jinv.mmul(Jtranspose);
                    C = C[options.derivative];
                    norm = 1;
                }
                var det = norm * Math.pow(h, options.derivative);
                for (var k = step; k < (data.length - step); k++) {
                    var d = 0;
                    for (var l = 0; l < C.length; l++)
                        d += C[l] * data[l + k - step] / det;
                    ans[k - step] = d;
                }

                if (options.pad === 'post') {
                    ans = src$i(ans, {size: step, value: options.padValue});
                }

                return ans;
            }

            var src$j = SavitzkyGolay;

            //Code translate from Pascal source in http://pubs.acs.org/doi/pdf/10.1021/ac00205a007



            var defaultOptions$q = {
                windowSize: 9,
                derivative: 0,
                polynomial: 3,
            };


            function SavitzkyGolay$1(data, h, options) {
                options = extend({}, defaultOptions$q, options);

                if ((options.windowSize % 2 === 0) || (options.windowSize < 5) || !(Number.isInteger(options.windowSize)))
                        throw new RangeError('Invalid window size (should be odd and at least 5 integer number)')


                if (options.windowSize>data.length)
                    throw new RangeError('Window size is higher than the data length '+options.windowSize+">"+data.length);
                if ((options.derivative < 0) || !(Number.isInteger(options.derivative)))
                    throw new RangeError('Derivative should be a positive integer');
                if ((options.polynomial < 1) || !(Number.isInteger(options.polynomial)))
                    throw new RangeError('Polynomial should be a positive integer');
                if (options.polynomial >= 6)
                    console.warn('You should not use polynomial grade higher than 5 if you are' +
                        ' not sure that your data arises from such a model. Possible polynomial oscillation problems');

                var windowSize = options.windowSize;

                var half = Math.floor(windowSize/2);
                var np = data.length;
                var ans = new Array(np);
                var weights = fullWeights(windowSize,options.polynomial,options.derivative);
                var hs = 0;
                var constantH = true;
                if( Object.prototype.toString.call( h ) === '[object Array]' ) {
                    constantH = false;
                }
                else{
                    hs = Math.pow(h, options.derivative);
                }
                //console.log("Constant h: "+constantH);
                //For the borders
                for(var i=0;i<half;i++){
                    var wg1=weights[half-i-1];
                    var wg2=weights[half+i+1];
                    var d1 = 0,d2=0;
                    for (var l = 0; l < windowSize; l++){
                        d1 += wg1[l] * data[l];
                        d2 += wg2[l] * data[np-windowSize+l-1];
                    }
                    if(constantH){
                        ans[half-i-1] = d1/hs;
                        ans[np-half+i] = d2/hs;
                    }
                    else{
                        hs = getHs(h,half-i-1,half, options.derivative);
                        ans[half-i-1] = d1/hs;
                        hs = getHs(h,np-half+i,half, options.derivative);
                        ans[np-half+i] = d2/hs;
                    }
                }
                //For the internal points
                var wg = weights[half];
                for(var i=windowSize;i<np+1;i++){
                    var d = 0;
                    for (var l = 0; l < windowSize; l++)
                        d += wg[l] * data[l+i-windowSize];
                    if(!constantH)
                        hs = getHs(h,i-half-1,half, options.derivative);
                    ans[i-half-1] = d/hs;
                }
                return ans;
            }

            function getHs(h,center,half,derivative){
                var hs = 0;
                var count = 0;
                for(var i=center-half;i<center+half;i++){
                    if(i>=0 && i < h.length-1){
                        hs+= (h[i+1]-h[i]);
                        count++;
                    }
                }
                return Math.pow(hs/count,derivative);
            }

            function GramPoly(i,m,k,s){
                var Grampoly = 0;
                if(k>0){
                    Grampoly = (4*k-2)/(k*(2*m-k+1))*(i*GramPoly(i,m,k-1,s) +
                        s*GramPoly(i,m,k-1,s-1)) - ((k-1)*(2*m+k))/(k*(2*m-k+1))*GramPoly(i,m,k-2,s);
                }
                else{
                    if(k==0&&s==0){
                        Grampoly=1;
                    }
                    else{
                        Grampoly=0;
                    }
                }
                //console.log(Grampoly);
                return Grampoly;
            }

            function GenFact(a,b){
                var gf=1;
                if(a>=b){
                    for(var j=a-b+1;j<=a;j++){
                        gf*=j;
                    }
                }
                return gf;
            }

            function Weight(i,t,m,n,s){
                var sum=0;
                for(var k=0;k<=n;k++){
                    //console.log(k);
                    sum+=(2*k+1)*(GenFact(2*m,k)/GenFact(2*m+k+1,k+1))*GramPoly(i,m,k,0)*GramPoly(t,m,k,s);
                }
                return sum;
            }

            /**
             *
             * @param m  Number of points
             * @param n  Polynomial grade
             * @param s  Derivative
             */
            function fullWeights(m,n,s){
                var weights = new Array(m);
                var np = Math.floor(m/2);
                for(var t=-np;t<=np;t++){
                    weights[t+np] = new Array(m);
                    for(var j=-np;j<=np;j++){
                        weights[t+np][j+np]=Weight(j,t,np,n,s);
                    }
                }
                return weights;
            }

            /*function entropy(data,h,options){
                var trend = SavitzkyGolay(data,h,trendOptions);
                var copy = new Array(data.length);
                var sum = 0;
                var max = 0;
                for(var i=0;i<data.length;i++){
                    copy[i] = data[i]-trend[i];
                }

                sum/=data.length;
                console.log(sum+" "+max);
                console.log(stat.array.standardDeviation(copy));
                console.log(Math.abs(stat.array.mean(copy))/stat.array.standardDeviation(copy));
                return sum;

            }



            function guessWindowSize(data, h){
                console.log("entropy "+entropy(data,h,trendOptions));
                return 5;
            }
            */
            var src$k = SavitzkyGolay$1;

            // auxiliary file to create the 256 look at table elements

            var ans = new Array(256);
            for (var i$1 = 0; i$1 < 256; i$1++) {
                var num = i$1;
                var c = 0;
                while (num) {
                    num = num & (num - 1);
                    c++;
                }
                ans[i$1] = c;
            }

            var creator = ans;

            /**
             * Count the number of true values in an array
             * @param {Array} arr
             * @return {number}
             */
            function count(arr) {
                var c = 0;
                for (var i = 0; i < arr.length; i++) {
                    c += creator[arr[i] & 0xff] + creator[(arr[i] >> 8) & 0xff] + creator[(arr[i] >> 16) & 0xff] + creator[(arr[i] >> 24) & 0xff];
                }
                return c;
            }

            /**
             * Logical AND operation
             * @param {Array} arr1
             * @param {Array} arr2
             * @return {Array}
             */
            function and(arr1, arr2) {
                var ans = new Array(arr1.length);
                for (var i = 0; i < arr1.length; i++)
                    ans[i] = arr1[i] & arr2[i];
                return ans;
            }

            /**
             * Logical OR operation
             * @param {Array} arr1
             * @param {Array} arr2
             * @return {Array}
             */
            function or(arr1, arr2) {
                var ans = new Array(arr1.length);
                for (var i = 0; i < arr1.length; i++)
                    ans[i] = arr1[i] | arr2[i];
                return ans;
            }

            /**
             * Logical XOR operation
             * @param {Array} arr1
             * @param {Array} arr2
             * @return {Array}
             */
            function xor(arr1, arr2) {
                var ans = new Array(arr1.length);
                for (var i = 0; i < arr1.length; i++)
                    ans[i] = arr1[i] ^ arr2[i];
                return ans;
            }

            /**
             * Logical NOT operation
             * @param {Array} arr
             * @return {Array}
             */
            function not(arr) {
                var ans = new Array(arr.length);
                for (var i = 0; i < ans.length; i++)
                    ans[i] = ~arr[i];
                return ans;
            }

            /**
             * Gets the n value of array arr
             * @param {Array} arr
             * @param {number} n
             * @return {boolean}
             */
            function getBit(arr, n) {
                var index = n >> 5; // Same as Math.floor(n/32)
                var mask = 1 << (31 - n % 32);
                return Boolean(arr[index] & mask);
            }

            /**
             * Sets the n value of array arr to the value val
             * @param {Array} arr
             * @param {number} n
             * @param {boolean} val
             * @return {Array}
             */
            function setBit(arr, n, val) {
                var index = n >> 5; // Same as Math.floor(n/32)
                var mask = 1 << (31 - n % 32);
                if (val)
                    arr[index] = mask | arr[index];
                else
                    arr[index] = ~mask & arr[index];
                return arr;
            }

            /**
             * Translates an array of numbers to a string of bits
             * @param {Array} arr
             * @returns {string}
             */
            function toBinaryString(arr) {
                var str = '';
                for (var i = 0; i < arr.length; i++) {
                    var obj = (arr[i] >>> 0).toString(2);
                    str += '00000000000000000000000000000000'.substr(obj.length) + obj;
                }
                return str;
            }

            /**
             * Creates an array of numbers based on a string of bits
             * @param {string} str
             * @returns {Array}
             */
            function parseBinaryString(str) {
                var len = str.length / 32;
                var ans = new Array(len);
                for (var i = 0; i < len; i++) {
                    ans[i] = parseInt(str.substr(i*32, 32), 2) | 0;
                }
                return ans;
            }

            /**
             * Translates an array of numbers to a hex string
             * @param {Array} arr
             * @returns {string}
             */
            function toHexString(arr) {
                var str = '';
                for (var i = 0; i < arr.length; i++) {
                    var obj = (arr[i] >>> 0).toString(16);
                    str += '00000000'.substr(obj.length) + obj;
                }
                return str;
            }

            /**
             * Creates an array of numbers based on a hex string
             * @param {string} str
             * @returns {Array}
             */
            function parseHexString(str) {
                var len = str.length / 8;
                var ans = new Array(len);
                for (var i = 0; i < len; i++) {
                    ans[i] = parseInt(str.substr(i*8, 8), 16) | 0;
                }
                return ans;
            }

            /**
             * Creates a human readable string of the array
             * @param {Array} arr
             * @returns {string}
             */
            function toDebug(arr) {
                var binary = toBinaryString(arr);
                var str = '';
                for (var i = 0; i < arr.length; i++) {
                    str += '0000'.substr((i * 32).toString(16).length) + (i * 32).toString(16) + ':';
                    for (var j = 0; j < 32; j += 4) {
                        str += ' ' + binary.substr(i * 32 + j, 4);
                    }
                    if (i < arr.length - 1) str += '\n';
                }
                return str
            }

            var src$l = {
                count: count,
                and: and,
                or: or,
                xor: xor,
                not: not,
                getBit: getBit,
                setBit: setBit,
                toBinaryString: toBinaryString,
                parseBinaryString: parseBinaryString,
                toHexString: toHexString,
                parseHexString: parseHexString,
                toDebug: toDebug
            };

            const Stat = mlStat.array;
            /**
             * Function that returns an array of points given 1D array as follows:
             *
             * [x1, y1, .. , x2, y2, ..]
             *
             * And receive the number of dimensions of each point.
             * @param array
             * @param dimensions
             * @returns {Array} - Array of points.
             */
            function coordArrayToPoints(array, dimensions) {
                if (array.length % dimensions !== 0) {
                    throw new RangeError('Dimensions number must be accordance with the size of the array.');
                }

                var length = array.length / dimensions;
                var pointsArr = new Array(length);

                var k = 0;
                for (var i = 0; i < array.length; i += dimensions) {
                    var point = new Array(dimensions);
                    for (var j = 0; j < dimensions; ++j) {
                        point[j] = array[i + j];
                    }

                    pointsArr[k] = point;
                    k++;
                }

                return pointsArr;
            }


            /**
             * Function that given an array as follows:
             * [x1, y1, .. , x2, y2, ..]
             *
             * Returns an array as follows:
             * [[x1, x2, ..], [y1, y2, ..], [ .. ]]
             *
             * And receives the number of dimensions of each coordinate.
             * @param array
             * @param dimensions
             * @returns {Array} - Matrix of coordinates
             */
            function coordArrayToCoordMatrix(array, dimensions) {
                if (array.length % dimensions !== 0) {
                    throw new RangeError('Dimensions number must be accordance with the size of the array.');
                }

                var coordinatesArray = new Array(dimensions);
                var points = array.length / dimensions;
                for (var i = 0; i < coordinatesArray.length; i++) {
                    coordinatesArray[i] = new Array(points);
                }

                for (i = 0; i < array.length; i += dimensions) {
                    for (var j = 0; j < dimensions; ++j) {
                        var currentPoint = Math.floor(i / dimensions);
                        coordinatesArray[j][currentPoint] = array[i + j];
                    }
                }

                return coordinatesArray;
            }

            /**
             * Function that receives a coordinate matrix as follows:
             * [[x1, x2, ..], [y1, y2, ..], [ .. ]]
             *
             * Returns an array of coordinates as follows:
             * [x1, y1, .. , x2, y2, ..]
             *
             * @param coordMatrix
             * @returns {Array}
             */
            function coordMatrixToCoordArray(coordMatrix) {
                var coodinatesArray = new Array(coordMatrix.length * coordMatrix[0].length);
                var k = 0;
                for (var i = 0; i < coordMatrix[0].length; ++i) {
                    for (var j = 0; j < coordMatrix.length; ++j) {
                        coodinatesArray[k] = coordMatrix[j][i];
                        ++k;
                    }
                }

                return coodinatesArray;
            }

            /**
             * Tranpose a matrix, this method is for coordMatrixToPoints and
             * pointsToCoordMatrix, that because only transposing the matrix
             * you can change your representation.
             *
             * @param matrix
             * @returns {Array}
             */
            function transpose(matrix) {
                var resultMatrix = new Array(matrix[0].length);
                for (var i = 0; i < resultMatrix.length; ++i) {
                    resultMatrix[i] = new Array(matrix.length);
                }

                for (i = 0; i < matrix.length; ++i) {
                    for (var j = 0; j < matrix[0].length; ++j) {
                        resultMatrix[j][i] = matrix[i][j];
                    }
                }

                return resultMatrix;
            }

            /**
             * Function that transform an array of points into a coordinates array
             * as follows:
             * [x1, y1, .. , x2, y2, ..]
             *
             * @param points
             * @returns {Array}
             */
            function pointsToCoordArray(points) {
                var coodinatesArray = new Array(points.length * points[0].length);
                var k = 0;
                for (var i = 0; i < points.length; ++i) {
                    for (var j = 0; j < points[0].length; ++j) {
                        coodinatesArray[k] = points[i][j];
                        ++k;
                    }
                }

                return coodinatesArray;
            }

            /**
             * Apply the dot product between the smaller vector and a subsets of the
             * largest one.
             *
             * @param firstVector
             * @param secondVector
             * @returns {Array} each dot product of size of the difference between the
             *                  larger and the smallest one.
             */
            function applyDotProduct(firstVector, secondVector) {
                var largestVector, smallestVector;
                if (firstVector.length <= secondVector.length) {
                    smallestVector = firstVector;
                    largestVector = secondVector;
                } else {
                    smallestVector = secondVector;
                    largestVector = firstVector;
                }

                var difference = largestVector.length - smallestVector.length + 1;
                var dotProductApplied = new Array(difference);

                for (var i = 0; i < difference; ++i) {
                    var sum = 0;
                    for (var j = 0; j < smallestVector.length; ++j) {
                        sum += smallestVector[j] * largestVector[i + j];
                    }
                    dotProductApplied[i] = sum;
                }

                return dotProductApplied;
            }
            /**
             * To scale the input array between the specified min and max values. The operation is performed inplace
             * if the options.inplace is specified. If only one of the min or max parameters is specified, then the scaling
             * will multiply the input array by min/min(input) or max/max(input)
             * @param input
             * @param options
             * @returns {*}
             */
            function scale(input, options = {}) {
                const {
                    min,
                    max
                } = options;

                var y = options.inPlace ? input : (new Array(input.length));
                var minMax = Stat.minMax(input);

                if (typeof max === 'number') {
                    if (typeof min === 'number') {
                        let factor = (max - min) / (minMax.max - minMax.min);
                        for (let i = 0; i < y.length; i++) {
                            y[i] = (input[i] - minMax.min) * factor + min;
                        }
                    } else if (minMax.max !== 0) {
                        let factor = max / minMax.max;
                        for (let i = 0; i < y.length; i++) {
                            y[i] = input[i] * factor;
                        }
                    } else {
                        options.min = minMax.min;
                        y = scale(input, options);
                    }
                } else if (typeof min === 'number') {
                    if (minMax.min !== 0) {
                        let factor = min / minMax.min;
                        for (let i = 0; i < y.length; i++) {
                            y[i] = input[i] * factor;
                        }

                    } else {
                        options.max = minMax.max;
                        y = scale(input, options);
                    }
                }
                return y;
            }

            var ArrayUtils = {
                coordArrayToPoints: coordArrayToPoints,
                coordArrayToCoordMatrix: coordArrayToCoordMatrix,
                coordMatrixToCoordArray: coordMatrixToCoordArray,
                coordMatrixToPoints: transpose,
                pointsToCoordArray: pointsToCoordArray,
                pointsToCoordMatrix: transpose,
                applyDotProduct: applyDotProduct,
                scale: scale
            };

            /**
             *
             * Function that returns a Number array of equally spaced numberOfPoints
             * containing a representation of intensities of the spectra arguments x
             * and y.
             *
             * The options parameter contains an object in the following form:
             * from: starting point
             * to: last point
             * numberOfPoints: number of points between from and to
             * variant: "slot" or "smooth" - smooth is the default option
             *
             * The slot variant consist that each point in the new array is calculated
             * averaging the existing points between the slot that belongs to the current
             * value. The smooth variant is the same but takes the integral of the range
             * of the slot and divide by the step size between two points in the new array.
             *
             * @param x - sorted increasing x values
             * @param y
             * @param options
             * @returns {Array} new array with the equally spaced data.
             *
             */
            function getEquallySpacedData(x, y, options = {}) {
                var xLength = x.length;
                if (x.length > 1 && x[0] > x[1]) {
                    x = x.slice().reverse();
                    y = y.slice().reverse();
                }

                var {
                    from = x[0],
                    to = x[xLength - 1],
                    variant = 'smooth',
                    numberOfPoints = 100
                } = options;

                if (xLength !== y.length) {
                    throw new RangeError("the x and y vector doesn't have the same size.");
                }

                if (typeof from !== 'number' || isNaN(from)) {
                    throw new RangeError("'from' option must be a number");
                }

                if (typeof to !== 'number' || isNaN(to)) {
                    throw new RangeError("'to' option must be a number");
                }

                var reverse = from > to;
                if (reverse) {
                    [from, to] = [to, from];
                }

                if (typeof numberOfPoints !== 'number' || isNaN(numberOfPoints)) {
                    throw new RangeError("'numberOfPoints' option must be a number");
                }
                if (numberOfPoints < 1) {
                    throw new RangeError('the number of points must be at least 1');
                }

                var output = variant === 'slot' ? getEquallySpacedSlot(x, y, from, to, numberOfPoints) : getEquallySpacedSmooth(x, y, from, to, numberOfPoints);

                return reverse ? output.reverse() : output;
            }

            /**
             * function that retrieves the getEquallySpacedData with the variant "smooth"
             *
             * @param x
             * @param y
             * @param from - Initial point
             * @param to - Final point
             * @param numberOfPoints
             * @returns {Array} - Array of y's equally spaced with the variant "smooth"
             */
            function getEquallySpacedSmooth(x, y, from, to, numberOfPoints) {
                var xLength = x.length;

                var step = (to - from) / (numberOfPoints - 1);
                var halfStep = step / 2;

                var output = new Array(numberOfPoints);

                var initialOriginalStep = x[1] - x[0];
                var lastOriginalStep = x[xLength - 1] - x[xLength - 2];

                // Init main variables
                var min = from - halfStep;
                var max = from + halfStep;

                var previousX = Number.MIN_VALUE;
                var previousY = 0;
                var nextX = x[0] - initialOriginalStep;
                var nextY = 0;

                var currentValue = 0;
                var slope = 0;
                var intercept = 0;
                var sumAtMin = 0;
                var sumAtMax = 0;

                var i = 0; // index of input
                var j = 0; // index of output

                function getSlope(x0, y0, x1, y1) {
                    return (y1 - y0) / (x1 - x0);
                }

                main: while (true) {

                    if (previousX <= min && min <= nextX) {
                        add = integral(0, min - previousX, slope, previousY);
                        sumAtMin = currentValue + add;
                    }

                    while (nextX - max >= 0) {
                        // no overlap with original point, just consume current value
                        var add = integral(0, max - previousX, slope, previousY);
                        sumAtMax = currentValue + add;

                        output[j++] = (sumAtMax - sumAtMin) / step;

                        if (j === numberOfPoints) {
                            break main;
                        }

                        min = max;
                        max += step;
                        sumAtMin = sumAtMax;
                    }

                    currentValue += integral(previousX, nextX, slope, intercept);

                    previousX = nextX;
                    previousY = nextY;

                    if (i < xLength) {
                        nextX = x[i];
                        nextY = y[i];
                        i++;
                    } else if (i === xLength) {
                        nextX += lastOriginalStep;
                        nextY = 0;
                    }

                    slope = getSlope(previousX, previousY, nextX, nextY);
                    intercept = -slope * previousX + previousY;
                }

                return output;
            }

            /**
             * function that retrieves the getEquallySpacedData with the variant "slot"
             *
             * @param x
             * @param y
             * @param from - Initial point
             * @param to - Final point
             * @param numberOfPoints
             * @returns {Array} - Array of y's equally spaced with the variant "slot"
             */
            function getEquallySpacedSlot(x, y, from, to, numberOfPoints) {
                var xLength = x.length;

                var step = (to - from) / (numberOfPoints - 1);
                var halfStep = step / 2;
                var lastStep = x[x.length - 1] - x[x.length - 2];

                var start = from - halfStep;
                var output = new Array(numberOfPoints);

                // Init main variables
                var min = start;
                var max = start + step;

                var previousX = -Number.MAX_VALUE;
                var previousY = 0;
                var nextX = x[0];
                var nextY = y[0];
                var frontOutsideSpectra = 0;
                var backOutsideSpectra = true;

                var currentValue = 0;

                // for slot algorithm
                var currentPoints = 0;

                var i = 1; // index of input
                var j = 0; // index of output

                main: while (true) {
                    if (previousX >= nextX) throw (new Error('x must be an increasing serie'));
                    while (previousX - max > 0) {
                        // no overlap with original point, just consume current value
                        if (backOutsideSpectra) {
                            currentPoints++;
                            backOutsideSpectra = false;
                        }

                        output[j] = currentPoints <= 0 ? 0 : currentValue / currentPoints;
                        j++;

                        if (j === numberOfPoints) {
                            break main;
                        }

                        min = max;
                        max += step;
                        currentValue = 0;
                        currentPoints = 0;
                    }

                    if (previousX > min) {
                        currentValue += previousY;
                        currentPoints++;
                    }

                    if (previousX === -Number.MAX_VALUE || frontOutsideSpectra > 1) {
                        currentPoints--;
                    }

                    previousX = nextX;
                    previousY = nextY;

                    if (i < xLength) {
                        nextX = x[i];
                        nextY = y[i];
                        i++;
                    } else {
                        nextX += lastStep;
                        nextY = 0;
                        frontOutsideSpectra++;
                    }
                }

                return output;
            }
            /**
             * Function that calculates the integral of the line between two
             * x-coordinates, given the slope and intercept of the line.
             * @param x0
             * @param x1
             * @param slope
             * @param intercept
             * @returns {number} integral value.
             */
            function integral(x0, x1, slope, intercept) {
                return (0.5 * slope * x1 * x1 + intercept * x1) - (0.5 * slope * x0 * x0 + intercept * x0);
            }

            var getEquallySpacedData_1 = getEquallySpacedData;
            var integral_1 = integral;

            var getEquallySpaced = {
            	getEquallySpacedData: getEquallySpacedData_1,
            	integral: integral_1
            };

            var SNV_1 = SNV;
            var Stat$1 = mlStat.array;

            /**
             * Function that applies the standard normal variate (SNV) to an array of values.
             *
             * @param data - Array of values.
             * @returns {Array} - applied the SNV.
             */
            function SNV(data) {
                var mean = Stat$1.mean(data);
                var std = Stat$1.standardDeviation(data);
                var result = data.slice();
                for (var i = 0; i < data.length; i++) {
                    result[i] = (result[i] - mean) / std;
                }
                return result;
            }

            var snv = {
            	SNV: SNV_1
            };

            var src$m = createCommonjsModule(function (module, exports) {

            module.exports = exports = ArrayUtils;

            exports.getEquallySpacedData = getEquallySpaced.getEquallySpacedData;
            exports.SNV = snv.SNV;
            });
            var src_1$2 = src$m.getEquallySpacedData;
            var src_2$2 = src$m.SNV;

            var require$$5 = ( src$7 && KNN ) || src$7;

            var src$n = createCommonjsModule(function (module, exports) {




            const ML = exports;

            // Try to keep this list in the same structure as the README.

            // Unsupervised learning
            ML.PCA = pca;
            ML.HClust = src$4;
            ML.KMeans = kmeans_1;

            // Supervised learning
            ML.SVM = svm;
            ML.NaiveBayes = src$6;
            ML.KNN = require$$5;
            ML.PLS = src$8;
            ML.CrossValidation = src$b;
            ML.ConfusionMatrix = src$9;
            ML.DecisionTreeClassifier = src.DecisionTreeClassifier;
            ML.RandomForestClassifier = src$1.RandomForestClassifier;

            // Artificial neural networks
            ML.FNN = FeedForwardNeuralNetwork;
            ML.SOM = src$c;

            // Regression

            ML.SimpleLinearRegression = src$d.SimpleLinearRegression;
            ML.PolynomialRegression = src$d.PolynomialRegression;
            ML.MultivariateLinearRegression = src$d.MultivariateLinearRegression;
            ML.PowerRegression = src$d.PowerRegression;
            ML.ExponentialRegression = src$d.ExponentialRegression;
            ML.TheilSenRegression = src$d.TheilSenRegression;
            ML.RobustPolynomialRegression = src$d.RobustPolynomialRegression;
            ML.DesisionTreeRegression = src.DesisionTreeRegression;
            ML.RandomForestRegression = src$1.RandomForestRegression;

            // Optimization
            ML.levenbergMarquardt = lib;

            // Math

            ML.Matrix = require$$0$2.Matrix;
            ML.SVD = require$$0$2.SVD;
            ML.EVD = require$$0$2.EVD;
            ML.CholeskyDecomposition = require$$0$2.CholeskyDecomposition;
            ML.LuDecomposition = require$$0$2.LuDecomposition;
            ML.QrDecomposition = require$$0$2.QrDecomposition;

            ML.SparseMatrix = src$e;
            ML.Kernel = kernel;
            ML.Distance = src$g.distance;
            ML.Similarity = src$g.similarity;
            ML.distanceMatrix = src$3;
            ML.XSadd = xsaddEs5;

            // Statistics
            ML.Performance = src$h;

            // Data preprocessing
            ML.savitzkyGolay = src$j;
            ML.savitzkyGolayGeneralized = src$k;

            // Utility
            ML.BitArray = src$l;
            ML.HashTable = HashTable_1;
            ML.padArray = src$i;
            ML.binarySearch = binarySearch;
            ML.numSort = numSort;

            // Undocumented/deprecated packages
            ML.ArrayUtils = src$m;
            ML.Regression = src$d;
            ML.MatrixUtil = require$$0$2;
            ML.ArrayStat = mlStat.array;
            ML.MatrixStat = mlStat.matrix;
            });

            /**
             * lodash (Custom Build) <https://lodash.com/>
             * Build: `lodash modularize exports="npm" -o ./`
             * Copyright jQuery Foundation and other contributors <https://jquery.org/>
             * Released under MIT license <https://lodash.com/license>
             * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
             * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
             */

            /** Used as references for various `Number` constants. */
            var INFINITY$2 = 1 / 0,
                MAX_SAFE_INTEGER$1 = 9007199254740991,
                MAX_INTEGER = 1.7976931348623157e+308,
                NAN = 0 / 0;

            /** `Object#toString` result references. */
            var funcTag$1 = '[object Function]',
                genTag$1 = '[object GeneratorFunction]',
                symbolTag$1 = '[object Symbol]';

            /** Used to match leading and trailing whitespace. */
            var reTrim = /^\s+|\s+$/g;

            /** Used to detect bad signed hexadecimal string values. */
            var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

            /** Used to detect binary string values. */
            var reIsBinary = /^0b[01]+$/i;

            /** Used to detect octal string values. */
            var reIsOctal = /^0o[0-7]+$/i;

            /** Used to detect unsigned integer values. */
            var reIsUint$1 = /^(?:0|[1-9]\d*)$/;

            /** Built-in method references without a dependency on `root`. */
            var freeParseInt = parseInt;

            /** Used for built-in method references. */
            var objectProto$6 = Object.prototype;

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var objectToString$2 = objectProto$6.toString;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeCeil = Math.ceil,
                nativeMax = Math.max;

            /**
             * The base implementation of `_.range` and `_.rangeRight` which doesn't
             * coerce arguments.
             *
             * @private
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @param {number} step The value to increment or decrement by.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the range of numbers.
             */
            function baseRange(start, end, step, fromRight) {
              var index = -1,
                  length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                  result = Array(length);

              while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
              }
              return result;
            }

            /**
             * Creates a `_.range` or `_.rangeRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new range function.
             */
            function createRange(fromRight) {
              return function(start, end, step) {
                if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                  end = step = undefined;
                }
                // Ensure the sign of `-0` is preserved.
                start = toFinite(start);
                if (end === undefined) {
                  end = start;
                  start = 0;
                } else {
                  end = toFinite(end);
                }
                step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                return baseRange(start, end, step, fromRight);
              };
            }

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex$1(value, length) {
              length = length == null ? MAX_SAFE_INTEGER$1 : length;
              return !!length &&
                (typeof value == 'number' || reIsUint$1.test(value)) &&
                (value > -1 && value % 1 == 0 && value < length);
            }

            /**
             * Checks if the given arguments are from an iteratee call.
             *
             * @private
             * @param {*} value The potential iteratee value argument.
             * @param {*} index The potential iteratee index or key argument.
             * @param {*} object The potential iteratee object argument.
             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
             *  else `false`.
             */
            function isIterateeCall(value, index, object) {
              if (!isObject$2(object)) {
                return false;
              }
              var type = typeof index;
              if (type == 'number'
                    ? (isArrayLike(object) && isIndex$1(index, object.length))
                    : (type == 'string' && index in object)
                  ) {
                return eq$1(object[index], value);
              }
              return false;
            }

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq$1(value, other) {
              return value === other || (value !== value && other !== other);
            }

            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike(value) {
              return value != null && isLength(value.length) && !isFunction$3(value);
            }

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction$3(value) {
              // The use of `Object#toString` avoids issues with the `typeof` operator
              // in Safari 8-9 which returns 'object' for typed array and other constructors.
              var tag = isObject$2(value) ? objectToString$2.call(value) : '';
              return tag == funcTag$1 || tag == genTag$1;
            }

            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength(value) {
              return typeof value == 'number' &&
                value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
            }

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject$2(value) {
              var type = typeof value;
              return !!value && (type == 'object' || type == 'function');
            }

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike$1(value) {
              return !!value && typeof value == 'object';
            }

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol$2(value) {
              return typeof value == 'symbol' ||
                (isObjectLike$1(value) && objectToString$2.call(value) == symbolTag$1);
            }

            /**
             * Converts `value` to a finite number.
             *
             * @static
             * @memberOf _
             * @since 4.12.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted number.
             * @example
             *
             * _.toFinite(3.2);
             * // => 3.2
             *
             * _.toFinite(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toFinite(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toFinite('3.2');
             * // => 3.2
             */
            function toFinite(value) {
              if (!value) {
                return value === 0 ? value : 0;
              }
              value = toNumber(value);
              if (value === INFINITY$2 || value === -INFINITY$2) {
                var sign = (value < 0 ? -1 : 1);
                return sign * MAX_INTEGER;
              }
              return value === value ? value : 0;
            }

            /**
             * Converts `value` to a number.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             * @example
             *
             * _.toNumber(3.2);
             * // => 3.2
             *
             * _.toNumber(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toNumber(Infinity);
             * // => Infinity
             *
             * _.toNumber('3.2');
             * // => 3.2
             */
            function toNumber(value) {
              if (typeof value == 'number') {
                return value;
              }
              if (isSymbol$2(value)) {
                return NAN;
              }
              if (isObject$2(value)) {
                var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                value = isObject$2(other) ? (other + '') : other;
              }
              if (typeof value != 'string') {
                return value === 0 ? value : +value;
              }
              value = value.replace(reTrim, '');
              var isBinary = reIsBinary.test(value);
              return (isBinary || reIsOctal.test(value))
                ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                : (reIsBadHex.test(value) ? NAN : +value);
            }

            /**
             * Creates an array of numbers (positive and/or negative) progressing from
             * `start` up to, but not including, `end`. A step of `-1` is used if a negative
             * `start` is specified without an `end` or `step`. If `end` is not specified,
             * it's set to `start` with `start` then set to `0`.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.rangeRight
             * @example
             *
             * _.range(4);
             * // => [0, 1, 2, 3]
             *
             * _.range(-4);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 5);
             * // => [1, 2, 3, 4]
             *
             * _.range(0, 20, 5);
             * // => [0, 5, 10, 15]
             *
             * _.range(0, -4, -1);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.range(0);
             * // => []
             */
            var range = createRange();

            var lodash_range = range;

            /**
             * lodash (Custom Build) <https://lodash.com/>
             * Build: `lodash modularize exports="npm" -o ./`
             * Copyright jQuery Foundation and other contributors <https://jquery.org/>
             * Released under MIT license <https://lodash.com/license>
             * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
             * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
             */

            /** Used as references for various `Number` constants. */
            var INFINITY$3 = 1 / 0,
                MAX_SAFE_INTEGER$2 = 9007199254740991,
                MAX_INTEGER$1 = 1.7976931348623157e+308,
                NAN$1 = 0 / 0;

            /** `Object#toString` result references. */
            var funcTag$2 = '[object Function]',
                genTag$2 = '[object GeneratorFunction]',
                symbolTag$2 = '[object Symbol]';

            /** Used to match leading and trailing whitespace. */
            var reTrim$1 = /^\s+|\s+$/g;

            /** Used to detect bad signed hexadecimal string values. */
            var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;

            /** Used to detect binary string values. */
            var reIsBinary$1 = /^0b[01]+$/i;

            /** Used to detect octal string values. */
            var reIsOctal$1 = /^0o[0-7]+$/i;

            /** Used to detect unsigned integer values. */
            var reIsUint$2 = /^(?:0|[1-9]\d*)$/;

            /** Built-in method references without a dependency on `root`. */
            var freeParseInt$1 = parseInt;

            /** Used for built-in method references. */
            var objectProto$7 = Object.prototype;

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var objectToString$3 = objectProto$7.toString;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeCeil$1 = Math.ceil,
                nativeMax$1 = Math.max;

            /**
             * The base implementation of `_.range` and `_.rangeRight` which doesn't
             * coerce arguments.
             *
             * @private
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @param {number} step The value to increment or decrement by.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the range of numbers.
             */
            function baseRange$1(start, end, step, fromRight) {
              var index = -1,
                  length = nativeMax$1(nativeCeil$1((end - start) / (step || 1)), 0),
                  result = Array(length);

              while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
              }
              return result;
            }

            /**
             * Creates a `_.range` or `_.rangeRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new range function.
             */
            function createRange$1(fromRight) {
              return function(start, end, step) {
                if (step && typeof step != 'number' && isIterateeCall$1(start, end, step)) {
                  end = step = undefined;
                }
                // Ensure the sign of `-0` is preserved.
                start = toFinite$1(start);
                if (end === undefined) {
                  end = start;
                  start = 0;
                } else {
                  end = toFinite$1(end);
                }
                step = step === undefined ? (start < end ? 1 : -1) : toFinite$1(step);
                return baseRange$1(start, end, step, fromRight);
              };
            }

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex$2(value, length) {
              length = length == null ? MAX_SAFE_INTEGER$2 : length;
              return !!length &&
                (typeof value == 'number' || reIsUint$2.test(value)) &&
                (value > -1 && value % 1 == 0 && value < length);
            }

            /**
             * Checks if the given arguments are from an iteratee call.
             *
             * @private
             * @param {*} value The potential iteratee value argument.
             * @param {*} index The potential iteratee index or key argument.
             * @param {*} object The potential iteratee object argument.
             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
             *  else `false`.
             */
            function isIterateeCall$1(value, index, object) {
              if (!isObject$3(object)) {
                return false;
              }
              var type = typeof index;
              if (type == 'number'
                    ? (isArrayLike$1(object) && isIndex$2(index, object.length))
                    : (type == 'string' && index in object)
                  ) {
                return eq$2(object[index], value);
              }
              return false;
            }

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq$2(value, other) {
              return value === other || (value !== value && other !== other);
            }

            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike$1(value) {
              return value != null && isLength$1(value.length) && !isFunction$4(value);
            }

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction$4(value) {
              // The use of `Object#toString` avoids issues with the `typeof` operator
              // in Safari 8-9 which returns 'object' for typed array and other constructors.
              var tag = isObject$3(value) ? objectToString$3.call(value) : '';
              return tag == funcTag$2 || tag == genTag$2;
            }

            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength$1(value) {
              return typeof value == 'number' &&
                value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$2;
            }

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject$3(value) {
              var type = typeof value;
              return !!value && (type == 'object' || type == 'function');
            }

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike$2(value) {
              return !!value && typeof value == 'object';
            }

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol$3(value) {
              return typeof value == 'symbol' ||
                (isObjectLike$2(value) && objectToString$3.call(value) == symbolTag$2);
            }

            /**
             * Converts `value` to a finite number.
             *
             * @static
             * @memberOf _
             * @since 4.12.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted number.
             * @example
             *
             * _.toFinite(3.2);
             * // => 3.2
             *
             * _.toFinite(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toFinite(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toFinite('3.2');
             * // => 3.2
             */
            function toFinite$1(value) {
              if (!value) {
                return value === 0 ? value : 0;
              }
              value = toNumber$1(value);
              if (value === INFINITY$3 || value === -INFINITY$3) {
                var sign = (value < 0 ? -1 : 1);
                return sign * MAX_INTEGER$1;
              }
              return value === value ? value : 0;
            }

            /**
             * Converts `value` to a number.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             * @example
             *
             * _.toNumber(3.2);
             * // => 3.2
             *
             * _.toNumber(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toNumber(Infinity);
             * // => Infinity
             *
             * _.toNumber('3.2');
             * // => 3.2
             */
            function toNumber$1(value) {
              if (typeof value == 'number') {
                return value;
              }
              if (isSymbol$3(value)) {
                return NAN$1;
              }
              if (isObject$3(value)) {
                var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                value = isObject$3(other) ? (other + '') : other;
              }
              if (typeof value != 'string') {
                return value === 0 ? value : +value;
              }
              value = value.replace(reTrim$1, '');
              var isBinary = reIsBinary$1.test(value);
              return (isBinary || reIsOctal$1.test(value))
                ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8)
                : (reIsBadHex$1.test(value) ? NAN$1 : +value);
            }

            /**
             * This method is like `_.range` except that it populates values in
             * descending order.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.range
             * @example
             *
             * _.rangeRight(4);
             * // => [3, 2, 1, 0]
             *
             * _.rangeRight(-4);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 5);
             * // => [4, 3, 2, 1]
             *
             * _.rangeRight(0, 20, 5);
             * // => [15, 10, 5, 0]
             *
             * _.rangeRight(0, -4, -1);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.rangeRight(0);
             * // => []
             */
            var rangeRight = createRange$1(true);

            var lodash_rangeright = rangeRight;

            const avg$2 = src$n.ArrayStat.mean;
            const mean$3 = avg$2;
            const sum = src$n.ArrayStat.sum;
            const scale$1 = (a, d) => a.map(x => (x - avg$2(a)) / d);
            const max$1 = a => a.concat([]).sort((x, y) => x < y)[0];
            const min$1 = a => a.concat([]).sort((x, y) => x > y)[0];
            const sd = src$n.ArrayStat.standardDeviation; //(a, av) => Math.sqrt(avg(a.map(x => (x - av) * x)));


            /**
             * Returns an array of the squared different of two arrays
             * @memberOf util
             * @param {Number[]} left 
             * @param {Number[]} right 
             * @returns {Number[]} Squared difference of left minus right array
             */
            function squaredDifference(left, right) {
              return left.reduce((result, val, index, arr) => { 
                result.push(Math.pow((right[index]-val), 2));
                return result;
              }, []);
            }

            /**
             * The standard error of the estimate is a measure of the accuracy of predictions made with a regression line. Compares the estimate to the actual value
             * @memberOf util
             * @see {@link http://onlinestatbook.com/2/regression/accuracy.html}
             * @example
              const actuals = [ 2, 4, 5, 4, 5, ];
              const estimates = [ 2.8, 3.4, 4, 4.6, 5.2, ];
              const SE = ms.util.standardError(actuals, estimates);
              SE.toFixed(2) // => 0.89
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} Standard Error of the Estimate
             */
            function standardError(actuals=[], estimates=[]) {
              if (actuals.length !== estimates.length) throw new RangeError('arrays must have the same length');
              const squaredDiff = squaredDifference(actuals, estimates);
              return Math.sqrt((sum(squaredDiff)) / (actuals.length - 2));
            }

            /**
             * Calculates the z score of each value in the sample, relative to the sample mean and standard deviation.
             * @memberOf util
             * @see {@link https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.mstats.zscore.html}
             * @param {Number[]} observations - An array like object containing the sample data.
             * @returns {Number[]} The z-scores, standardized by mean and standard deviation of input array 
             */
            function standardScore(observations = []) {
              const mean = avg$2(observations);
              const stdDev = sd(observations);
              return observations.map(x => ((x - mean) / stdDev));
            }

            /**
             * In statistics, the coefficient of determination, denoted R2 or r2 and pronounced "R squared", is the proportion of the variance in the dependent variable that is predictable from the independent variable(s). Compares distance of estimated values to the mean.
             * {\bar {y}}={\frac {1}{n}}\sum _{i=1}^{n}y_{i}
             * @example
            const actuals = [ 2, 4, 5, 4, 5, ];
            const estimates = [ 2.8, 3.4, 4, 4.6, 5.2, ];
            const r2 = ms.util.coefficientOfDetermination(actuals, estimates); 
            r2.toFixed(1) // => 0.6
             * @memberOf util
             * @see {@link https://en.wikipedia.org/wiki/Coefficient_of_determination} {@link http://statisticsbyjim.com/regression/standard-error-regression-vs-r-squared/}
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} r^2
             */
            function coefficientOfDetermination(actuals = [], estimates = []) {
              if (actuals.length !== estimates.length) throw new RangeError('arrays must have the same length');
              const actualsMean = mean$3(actuals);

              const totalVariation = sum(actuals.reduce((result, val, index) => {
                result.push(Math.pow((actuals[index]-actualsMean), 2));
                return result;
              }, []));
              const unexplainedVariation = sum(actuals.reduce((result, val, index) => {
                result.push(Math.pow((actuals[ index ] - estimates[ index ]), 2));
                return result;
              }, []));
              const rSquared = ((totalVariation - unexplainedVariation) / totalVariation);

              return rSquared;
              /*
              @see  {@link https://math.tutorvista.com/statistics/coefficient-of-determination.html}
              Some Properties of Coefficient of Determination are as follow:
              It helps to provide the proportion of the variance of one variable which is predictable from the other variable.
              It is a way of measurement which allows determining how clear it can be in making predictions from a certain data provided.
              It can be taken as a ratio of the explained variation to the total variation.
              It denotes the strength of the linear association between the variables.
              The square of the coefficient of determination will always b e between 0 and1, which is 0 ≤
              ≤
              r2 ≤
              ≤
              1. Here r2 will always be a positive value.
              As r2 gets close to 1, the Y data values get close to the regression line.
              As r2 gets close to 0, the Y data values get further from the regression line.
              It helps to provide the proportion of the variance of one variable which is predictable from the other variable.
              It is a way of measurement which allows determining how clear it can be in making predictions from a certain data provided.
              It can be taken as a ratio of the explained variation to the total variation.
              It denotes the strength of the linear association between the variables.
              */  
            }

            /**
             * You can use the adjusted coefficient of determination to determine how well a multiple regression equation “fits” the sample data. The adjusted coefficient of determination is closely related to the coefficient of determination (also known as R2) that you use to test the results of a simple regression equation.
             * @example
            const adjr2 = ms.util.adjustedCoefficentOfDetermination({
              rSquared: 0.944346527,
              sampleSize: 8,
              independentVariables: 2,
            }); 
            r2.toFixed(3) // => 0.922
             * @memberOf util
             * @see {@link http://www.dummies.com/education/math/business-statistics/how-to-calculate-the-adjusted-coefficient-of-determination/}
             * @param {Object} [options={}] 
             * @param {Number[]} [options.actuals] - numerical samples 
             * @param {Number[]} [options.estimates] - estimate values 
             * @param {Number} [options.rSquared] - coefficent of determination 
             * @param {Number} [options.sampleSize] - the sample size 
             * @param {Number} options.independentVariables - the number of independent variables in the regression equation
             * @returns {Number} adjusted r^2 for multiple linear regression
             */
            function adjustedCoefficentOfDetermination(options = {}) {
              const { actuals, estimates, rSquared, independentVariables, sampleSize, } = options;
              const r2 = rSquared || coefficientOfDetermination(actuals, estimates);
              const n = sampleSize || actuals.length;
              const k = independentVariables;

              return (1 - (1 - r2) * ((n - 1) / (n - (k + 1))));
            }

            /**
             * The coefficent of Correlation is given by R decides how well the given data fits a line or a curve.
             * @example
            const actuals = [ 39, 42, 67, 76, ];
            const estimates = [ 44, 40, 60, 84, ];
            const R = ms.util.coefficientOfCorrelation(actuals, estimates); 
            R.toFixed(4) // => 0.9408
             * @memberOf util
             * @see {@link https://calculator.tutorvista.com/r-squared-calculator.html}
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} R
             */
            function coefficientOfCorrelation(actuals = [], estimates = []) {
              if (actuals.length !== estimates.length) throw new RangeError('arrays must have the same length');
              const sumX = sum(actuals);
              const sumY = sum(estimates);
              const sumProdXY = actuals.reduce((result, val, index) => { 
                result = result + (actuals[ index ] * estimates[ index ]);
                return result;
              }, 0);
              const sumXSquared = actuals.reduce((result, val) => { 
                result = result + (val * val);
                return result;
              }, 0);
              const sumYSquared = estimates.reduce((result, val) => { 
                result = result + (val * val);
                return result;
              }, 0);
              const N = actuals.length;
              const R = (
                (N * sumProdXY - sumX * sumY) /
                Math.sqrt(
                  (N * sumXSquared - Math.pow(sumX, 2)) * (N * sumYSquared - Math.pow(sumY, 2))
                )
              );
              return R;
            }

            /**
             * The coefficent of determination is given by r^2 decides how well the given data fits a line or a curve.
             * 
             * @param {Number[]} [actuals=[]] 
             * @param {Number[]}  [estimates=[]]  
             * @returns {Number} r^2
             */
            function rSquared(actuals = [], estimates=[]) {
              return Math.pow(coefficientOfCorrelation(actuals, estimates), 2);
            }

            /**
             * returns an array of vectors as an array of arrays
             * @example
            const vectors = [ [1,2,3], [1,2,3], [3,3,4], [3,3,3] ];
            const arrays = pivotVector(vectors); // => [ [1,2,3,3], [2,2,3,3], [3,3,4,3] ];
             * @memberOf util
             * @param {Array[]} vectors 
             * @returns {Array[]}
             */
            function pivotVector(vectors=[]) {
              return vectors.reduce((result, val, index/*, arr*/) => {
                val.forEach((vecVal, i) => {
                  (index === 0)
                    ? (result.push([vecVal, ]))
                    : (result[ i ].push(vecVal));
                });
                return result;
              }, []);
            } 

            /**
             * returns a matrix of values by combining arrays into a matrix
             * @memberOf util
             * @example 
              const arrays = [
                [ 1, 1, 3, 3 ],
                [ 2, 2, 3, 3 ],
                [ 3, 3, 4, 3 ],
              ];
              pivotArrays(arrays); //=>
              // [
              //   [1, 2, 3,],
              //   [1, 2, 3,],
              //   [3, 3, 4,],
              //   [3, 3, 3,],
              // ];
              * @param {Array} [vectors=[]] - array of arguments for columnArray to merge columns into a matrix
              * @returns {Array} a matrix of column values 
              */
            function pivotArrays(arrays = []) {
              return (arrays.length)
                ? arrays[ 0 ].map((vectorItem, index) => {
                  const returnArray = [];
                  arrays.forEach((v, i) => {
                    returnArray.push(arrays[ i ][ index ]);
                  });
                  return returnArray;
                })
                : arrays;
            }

            /**
              * Standardize features by removing the mean and scaling to unit variance

              Centering and scaling happen independently on each feature by computing the relevant statistics on the samples in the training set. Mean and standard deviation are then stored to be used on later data using the transform method.

              Standardization of a dataset is a common requirement for many machine learning estimators: they might behave badly if the individual feature do not more or less look like standard normally distributed data (e.g. Gaussian with 0 mean and unit variance)
              * @memberOf util
              * @param {number[]} z - array of integers or floats
              * @returns {number[]}
              */
            const StandardScaler = (z) => scale$1(z, sd(z));


            /** This function returns two functions that can standard scale new inputs and reverse scale new outputs
             * @param {Number[]} values - array of numbers
             * @returns {Object} - {scale[ Function ], descale[ Function ]}
            */
            function StandardScalerTransforms(vector = [], nan_value = -1, return_nan=false) {
              const average = avg$2(vector);
              const standard_dev = sd(vector);
              const maximum = max$1(vector);
              const minimum = min$1(vector);
              const scale = (z) => {
                const scaledValue = (z - average) / standard_dev;
                if (isNaN(scaledValue) && return_nan) return scaledValue;
                else if (isNaN(scaledValue) && return_nan === false) return (isNaN(standard_dev)) ? z : standard_dev;
                else return scaledValue;
              }; // equivalent to MinMaxScaler(z)
              const descale = (scaledZ) => {
                const descaledValue = (scaledZ * standard_dev) + average;
                if (isNaN(descaledValue) && return_nan) return descaledValue;
                else if (isNaN(descaledValue) && return_nan === false) return (isNaN(standard_dev)) ? scaledZ : standard_dev;
                else return descaledValue;
              };
              const values = vector.map(scale)
                .map(val => {
                  if (isNaN(val)) return nan_value;
                  else return val;
                });
              return {
                components: {
                  average,
                  standard_dev,
                  maximum,
                  minimum,
                },
                scale,
                descale,
                values,
              };
            }

            /**
             * Transforms features by scaling each feature to a given range.
              This estimator scales and translates each feature individually such that it is in the given range on the training set, i.e. between zero and one.
              * @memberOf util
              * @param {number[]} z - array of integers or floats
              * @returns {number[]}
              */
            const MinMaxScaler= (z) => scale$1(z, (max$1(z) - min$1(z)));

            /** This function returns two functions that can mix max scale new inputs and reverse scale new outputs
             * @param {Number[]} values - array of numbers
             * @returns {Object} - {scale[ Function ], descale[ Function ]}
            */
            function MinMaxScalerTransforms(vector = [], nan_value = -1, return_nan=false) {
              const average = avg$2(vector);
              const standard_dev = sd(vector);
              const maximum = max$1(vector);
              const minimum = min$1(vector);
              const scale = (z) => {
                const scaledValue = (z - average) / (maximum - minimum);
                if (isNaN(scaledValue) && return_nan) return scaledValue;
                else if (isNaN(scaledValue) && return_nan === false) return (isNaN(standard_dev)) ? z : standard_dev;
                else return scaledValue;
              }; // equivalent to MinMaxScaler(z)
              const descale = (scaledZ) => {
                const descaledValue = (scaledZ * (maximum - minimum)) + average;
                if (isNaN(descaledValue) && return_nan) return descaledValue;
                else if (isNaN(descaledValue) && return_nan === false) return (isNaN(standard_dev)) ? scaledZ : standard_dev;
                else return descaledValue;
              };
              const values = vector.map(scale)
                .map(val => {
                  if (isNaN(val)) return nan_value;
                  else return val;
                });
              return {
                components: {
                  average,
                  standard_dev,
                  maximum,
                  minimum,
                },
                scale,
                descale,
                values,
              };
            }

            /**
              * Converts z-score into the probability
              * @memberOf util
              * @see {@link https://stackoverflow.com/questions/36575743/how-do-i-convert-probability-into-z-score}
              * @param {number} z - Number of standard deviations from the mean.
              * @returns {number} p  - p-value
              */
            function approximateZPercentile(z, alpha=true) {
              // If z is greater than 6.5 standard deviations from the mean
              // the number of significant digits will be outside of a reasonable 
              // range.
              if (z < -6.5)
                return 0.0;

              if (z > 6.5)
                return 1.0;

              let factK    = 1;
              let sum      = 0;
              let term     = 1;
              let k        = 0;
              let loopStop = Math.exp(-23);
               
              while (Math.abs(term) > loopStop) {
                term = 0.3989422804 * Math.pow(-1, k) * Math.pow(z, k) / (2 * k + 1) /
                        Math.pow(2, k) * Math.pow(z, k + 1) / factK;
                sum += term;
                k++;
                factK *= k;
              }

              sum += 0.5;

              return (alpha) ? 1 - sum : sum;
            }

            /**
             * returns a safe column name / url slug from a string
             * @param {String} name 
             * @returns {String}
             */
            function getSafePropertyName(name) {
              return name.replace(/[^\w\s]/gi, '_');
            }

            /**
             * The errors (residuals) from acutals and estimates
             * @memberOf util
             * @example
              const actuals = [ 45, 38, 43, 39 ];
              const estimates = [ 41, 43, 41, 42 ];
              const errors = ms.util.forecastErrors(actuals, estimates); // => [ 4, -5, 2, -3 ]
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number[]} errors (residuals)
             */
            function forecastErrors(actuals, estimates) {
              if (actuals.length !== estimates.length) throw new Error(`Actuals length (${actuals.length}) must equal Estimates length (${estimates.length})`);
              return actuals.map((act, i) => act - estimates[ i ]);
            }

            /**
             * The bias of forecast accuracy
             * @memberOf util
             * @see {@link https://scm.ncsu.edu/scm-articles/article/measuring-forecast-accuracy-approaches-to-forecasting-a-tutorial}
             * @example
              const actuals = [ 45, 38, 43, 39 ];
              const estimates = [ 41, 43, 41, 42 ];
              const MFE = ms.util.meanForecastError(actuals, estimates); // =>  -0.5
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} MFE (bias)
             */
            function meanForecastError(actuals, estimates) { 
              const errors = forecastErrors(actuals, estimates);
              return avg$2(errors);
            }

            /**
             * Mean Absolute Deviation (MAD) indicates the absolute size of the errors
             * @memberOf util
             * @see {@link https://scm.ncsu.edu/scm-articles/article/measuring-forecast-accuracy-approaches-to-forecasting-a-tutorial}
             * @example
              const actuals = [ 45, 38, 43, 39 ];
              const estimates = [ 41, 43, 41, 42 ];
              const MAD = ms.util.meanAbsoluteDeviation(actuals, estimates); // =>  3.5
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} MAD
             */
            function meanAbsoluteDeviation(actuals, estimates) { 
              const errors = forecastErrors(actuals, estimates).map(e=>Math.abs(e));
              return avg$2(errors);
            }

            /**
             * Tracking Signal - Used to pinpoint forecasting models that need adjustment
             * @memberOf util
             * @see {@link https://scm.ncsu.edu/scm-articles/article/measuring-forecast-accuracy-approaches-to-forecasting-a-tutorial}
             * @example
              const actuals = [ 45, 38, 43, 39 ];
              const estimates = [ 41, 43, 41, 42 ];
              const trackingSignal = ms.util.trackingSignal(actuals, estimates); 
              trackingSignal.toFixed(2) // =>  -0.57
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} trackingSignal
             */
            function trackingSignal(actuals, estimates) {
              const runningSumOfForecastErrors = sum(forecastErrors(actuals, estimates));
              const MAD = meanAbsoluteDeviation(actuals, estimates);
              return runningSumOfForecastErrors / MAD;
            }

            /**
             * The standard error of the estimate is a measure of the accuracy of predictions made with a regression line. Compares the estimate to the actual value
             * @memberOf util
             * @see {@link http://onlinestatbook.com/2/regression/accuracy.html}
             * @example
              const actuals = [ 45, 38, 43, 39 ];
              const estimates = [ 41, 43, 41, 42 ];   
              const MSE = ms.util.meanSquaredError(actuals, estimates); // => 13.5
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} MSE
             */
            function meanSquaredError(actuals, estimates) {
              const squaredErrors = forecastErrors(actuals, estimates).map(e=>e*e);
              return avg$2(squaredErrors);
            }

            /**
             * MAD over Mean Ratio - The MAD/Mean ratio is an alternative to the MAPE that is better suited to intermittent and low-volume data. As stated previously, percentage errors cannot be calculated when the actual equals zero and can take on extreme values when dealing with low-volume data. These issues become magnified when you start to average MAPEs over multiple time series. The MAD/Mean ratio tries to overcome this problem by dividing the MAD by the Mean—essentially rescaling the error to make it comparable across time series of varying scales
             * @memberOf util
             * @see {@link https://www.forecastpro.com/Trends/forecasting101August2011.html}
             * @example
              const actuals = [ 45, 38, 43, 39 ];
              const estimates = [ 41, 43, 41, 42 ];
              const MMR = ms.util.MADMeanRatio(actuals, estimates);
              MAPE.toFixed(2) // => 0.08
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} MMR
             */
            function MADMeanRatio(actuals, estimates) {
              const MAD = meanAbsoluteDeviation(actuals, estimates);
              const mean = avg$2(actuals);
              return MAD / mean;
            }

            /**
             * MAPE (Mean Absolute Percent Error) measures the size of the error in percentage terms
             * @memberOf util
             * @see {@link https://www.forecastpro.com/Trends/forecasting101August2011.html}
             * @example
              const actuals = [ 45, 38, 43, 39 ];
              const estimates = [ 41, 43, 41, 42 ];
              const MAPE = ms.util.meanAbsolutePercentageError(actuals, estimates);
              MAPE.toFixed(2) // => 0.86
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} MAPE
             */
            function meanAbsolutePercentageError(actuals, estimates) {
              const errors = forecastErrors(actuals, estimates).map(e=>Math.abs(e));
              const absErrorPercent = errors.map((e, i) => e / actuals[ i ]);
              return avg$2(absErrorPercent);
            }

            /**
             * @namespace
             */
            const util$3 = {
              range: lodash_range,
              rangeRight: lodash_rangeright,
              scale: scale$1,
              avg: avg$2,
              mean: avg$2,
              sum,
              max: max$1,
              min: min$1,
              sd,
              StandardScaler,
              StandardScalerTransforms,
              MinMaxScaler,
              MinMaxScalerTransforms,
              LogScaler: (z) => z.map(Math.log),
              ExpScaler: (z) => z.map(Math.exp),
              squaredDifference,
              standardError,
              coefficientOfDetermination,
              coefficientOfCorrelation,
              r: coefficientOfCorrelation,
              rSquared,
              adjustedCoefficentOfDetermination,
              rBarSquared: adjustedCoefficentOfDetermination,
              adjustedRSquared: adjustedCoefficentOfDetermination,
              pivotVector,
              pivotArrays,
              standardScore,
              zScore: standardScore,
              approximateZPercentile,
              // approximatePercentileZ,
              getSafePropertyName,
              forecastErrors,
              meanForecastError,
              MFE: meanForecastError,
              meanAbsoluteDeviation,
              MAD: meanAbsoluteDeviation,
              trackingSignal,
              TS: trackingSignal,
              meanSquaredError,
              MSE: meanSquaredError,
              MADMeanRatio,
              MMR: MADMeanRatio,
              meanAbsolutePercentageError,
              MAPE: meanAbsolutePercentageError,
            };

            var fpnode = createCommonjsModule(function (module, exports) {
            Object.defineProperty(exports, "__esModule", { value: true });
            var FPNode = /** @class */ (function () {
                /**
                 * FPNode composes an FPTree and represents a given item a item-prefix subtree.
                 * It keeps track of its parent if it has any, and lists his children FPNodes.
                 *
                 * @param  {T}         item   The item it represents.
                 * @param  {FPNode<T>} parent His parent, if it has any.
                 */
                function FPNode(item, parent) {
                    if (item === void 0) { item = null; }
                    if (parent === void 0) { parent = null; }
                    this.item = item;
                    this.parent = parent;
                    /**
                     * Support of the FPNode. (a.k.a. "count" as defined by Han).
                     */
                    this.support = 1;
                    /**
                     * nextSameItemNode (a.k.a. "Node-link" as defined by Han):
                     * Links to the next node in the FP-tree carrying the same
                     * item, or null if there is none.
                     */
                    this.nextSameItemNode = null;
                    /**
                     * PUBLIC READONLY. Children of the FPNode in an array. Empty array if there is none.
                     */
                    this._children = [];
                }
                Object.defineProperty(FPNode.prototype, "children", {
                    get: function () {
                        return this._children;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Adds a given item to its current children FPNodes.
                 * If no child yet represents the given item, it creates a new node.
                 *
                 * @param  {T}         item       The item to add as a children.
                 * @param  {FPNode<T>} onNewChild Callback function to call if a child is actually created for the first time. It helps keeping track of Node-Links
                 * @return {[type]}               The FPNode representing the given item.
                 */
                FPNode.prototype.upsertChild = function (item, onNewChild, support) {
                    if (support === void 0) { support = 1; }
                    var child = this.getChild(item);
                    // If no child exists, creating a new node.
                    if (!child) {
                        child = new FPNode(item, this);
                        child.support = support;
                        this._children.push(child);
                        // Calls callback function if any.
                        if (onNewChild)
                            onNewChild(child);
                    }
                    // Else, increment the support of the child.
                    else
                        child.support += support;
                    return child;
                };
                /**
                 * Returns the child FPNode representing a given item, if any. Returns undefined if it does not exist.
                 *
                 * @param  {T}         item The item.
                 * @return {FPNode<T>}      The FPNode you expect, or undefined.
                 */
                FPNode.prototype.getChild = function (item) {
                    return this._children.find(function (child) { return child.item == item; });
                };
                return FPNode;
            }());
            exports.FPNode = FPNode;
            });

            unwrapExports(fpnode);
            var fpnode_1 = fpnode.FPNode;

            var fptree = createCommonjsModule(function (module, exports) {
            Object.defineProperty(exports, "__esModule", { value: true });

            var FPTree = /** @class */ (function () {
                /**
                 * FPTree is a frequent-pattern tree implementation. It consists in a compact
                 * data structure that stores quantitative information about frequent patterns in
                 * a set of transactions.
                 *
                 * @param  {ItemsCount} supports     The support count of each unique items to be inserted the FPTree.
                 * @param  {number}     support      The minimum support of each frequent itemset we want to mine.
                 */
                function FPTree(supports, _support) {
                    this.supports = supports;
                    this._support = _support;
                    /**
                     * Whether or not the tree has been built
                     */
                    this._isInit = false;
                    /**
                     * Root node of the FPTree
                     */
                    this.root = new fpnode.FPNode();
                    /**
                     * All first nodes (of different items) inserted in the FPTree (Heads of node-links).
                     */
                    this._firstInserted = {};
                    /**
                     * All last nodes (of different items) inserted in the FPTree (Foots of node-links).
                     */
                    this._lastInserted = {};
                }
                Object.defineProperty(FPTree.prototype, "headers", {
                    get: function () {
                        return this._headers;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Builds the tree from a set of transactions.
                 *
                 * @param  {T[][]}      transactions The unsorted transactions.
                 * @return {FPTree<T>}               Method chaining.
                 */
                FPTree.prototype.fromTransactions = function (transactions) {
                    var _this = this;
                    if (this._isInit)
                        throw new Error('Error building the FPTree');
                    // Sorting the items of each transaction by their support, descendingly.
                    // Items not meeting the minimum support are pruned.
                    transactions.forEach(function (transaction) {
                        var items = transaction
                            // Pruning.
                            .filter(function (item) { return _this.supports[JSON.stringify(item)] >= _this._support; })
                            // Sorting.
                            .sort(function (a, b) {
                            var res = _this.supports[JSON.stringify(b)] - _this.supports[JSON.stringify(a)];
                            if (res == 0)
                                return JSON.stringify(b).localeCompare(JSON.stringify(a));
                            return res;
                        });
                        // Pushing formatted transaction to the tree.
                        _this._addItems(items);
                    });
                    // Generating headers.
                    this._headers = this._getHeaderList();
                    this._isInit = true;
                    return this;
                };
                /**
                 * Builds the tree from a set of prefix paths.
                 *
                 * @param  {IPrefixPath<T>[]} prefixPaths The prefix paths.
                 * @return {FPTree<T>}                    Method chaining.
                 */
                FPTree.prototype.fromPrefixPaths = function (prefixPaths) {
                    var _this = this;
                    if (this._isInit)
                        throw new Error('Error building the FPTree');
                    // Sorting the items of each transaction by their support, descendingly.
                    // Items not meeting the minimum support are pruned.
                    prefixPaths.forEach(function (prefixPath) {
                        var items = prefixPath.path
                            // Pruning.
                            .filter(function (item) { return _this.supports[JSON.stringify(item)] >= _this._support; })
                            // Sorting.
                            .sort(function (a, b) {
                            var res = _this.supports[JSON.stringify(b)] - _this.supports[JSON.stringify(a)];
                            if (res == 0)
                                return JSON.stringify(b).localeCompare(JSON.stringify(a));
                            return res;
                        });
                        // Pushing each prefix path to the tree.
                        _this._addItems(items, prefixPath.support);
                    });
                    // Generating headers.
                    this._headers = this._getHeaderList();
                    this._isInit = true;
                    return this;
                };
                /**
                 * Returns a new conditional FPTree from a given item.
                 * If item is not included in the current tree, or if the resulting tree is empty, returns null.
                 *
                 * @param  {T}         item The conditional item.
                 * @return {FPTree<T>}      The result you expect.
                 */
                FPTree.prototype.getConditionalFPTree = function (item) {
                    var start = this._firstInserted[JSON.stringify(item)];
                    // Trivial pre-condition.
                    if (!start)
                        return null;
                    var s = this.supports[JSON.stringify(item)];
                    // In order to make the conditional FPTree of the given item, we need both the prefix
                    // paths of the item, as well as the support of each item which composes this sub-tree.
                    var conditionalTreeSupports = {};
                    // Getting all prefixPaths of the given item. On pushing a new item to a prefix path, a callback
                    // function is called, allowing us to update the item support.
                    var prefixPaths = this._getPrefixPaths(start, s, function (i, count) {
                        conditionalTreeSupports[JSON.stringify(i)] = (conditionalTreeSupports[JSON.stringify(i)] || 0) + count;
                    });
                    // FP-Tree is built from the conditional tree supports and the processed prefix paths.
                    var ret = new FPTree(conditionalTreeSupports, this._support).fromPrefixPaths(prefixPaths);
                    // If tree is not empty, return the tree.
                    if (ret.root.children.length)
                        return ret;
                    // Else return null.
                    return null;
                };
                /**
                 * Returns all the prefix paths of a given item in the tree.
                 * Returns an empty array if item cannot be found in the current tree.
                 *
                 * @param  {T}              item The item you want the prefix paths.
                 * @return {IPrefixPath<T>}      The result you expect.
                 */
                FPTree.prototype.getPrefixPaths = function (item) {
                    if (!this._isInit)
                        throw new Error('Error building the FPTree');
                    var start = this._firstInserted[JSON.stringify(item)];
                    if (!start)
                        return [];
                    return this._getPrefixPaths(start, start.support);
                };
                /**
                 * Return the prefix path of a given node.
                 * Callback functions allows to keep track of items added to the prefix path.
                 *
                 * @param  {FPNode<T>} node             The node you want the prefix path.
                 * @param  {Function}  onPushingNewItem Callback function to keep track of items added to the prefix path.
                 * @return {[type]}                     The result you expect.
                 */
                FPTree.prototype.getPrefixPath = function (node, onPushingNewItem) {
                    if (!this._isInit)
                        throw new Error('Error building the FPTree');
                    var path = this._getPrefixPath(node, node.support, onPushingNewItem);
                    if (path.length === 0)
                        return;
                    return {
                        support: node.support,
                        path: path
                    };
                };
                /**
                 * Returns whether or not this FPTree is single pathed.
                 *
                 * @return {boolean} The result you expect.
                 */
                FPTree.prototype.isSinglePath = function () {
                    if (!this._isInit)
                        throw new Error('Error building the FPTree');
                    if (!this.getSinglePath())
                        return false;
                    return true;
                };
                /**
                 * Returns the single path of the tree, if it is one. Else, it returns null.
                 *
                 * @return {FPNode<T>[]} The result you expect.
                 */
                FPTree.prototype.getSinglePath = function () {
                    if (!this._isInit)
                        throw new Error('Error building the FPTree');
                    return this._getSinglePath(this.root);
                };
                /**
                 * Inserts a sorted transaction to the FPTree.
                 *
                 * @param {T[]} items The set of sorted items you want to add (Either a transaction of a prefix part).
                 * @param {number} prefixSupport Optional: The base support to associate with the set of items.
                 */
                FPTree.prototype._addItems = function (items, prefixSupport) {
                    var _this = this;
                    if (prefixSupport === void 0) { prefixSupport = 1; }
                    // For each transaction, we start up from the root element.
                    var current = this.root;
                    // Keep in mind items are sorted by their support descendingly.
                    items.forEach(function (item) {
                        // If current item is a child of current node, updating its support and returning the child.
                        // Else creating a new item element and returing this new element.
                        current = current.upsertChild(item, function (child) {
                            var itemKey = JSON.stringify(item);
                            // Keeping track of first and last inserted elements of this type on Node creation.
                            _this._updateLastInserted(itemKey, child);
                            _this._updateFirstInserted(itemKey, child);
                        }, prefixSupport);
                    });
                };
                /**
                 * RECURSIVE CALL - Returns the prefix path of each node of the same type until there is no node-link anymore.
                 *
                 * @param  {FPNode<T>} node             The node of which you want the prefix path.
                 * @param  {number}    count            The support of the stating node (which is node).
                 * @param  {Function}  onPushingNewItem Callback function to keep track of items added to the prefix path.
                 * @return {IPrefixPath<T>[]}           The result you expect.
                 */
                FPTree.prototype._getPrefixPaths = function (node, count, onPushingNewItem, prefixPaths) {
                    if (prefixPaths === void 0) { prefixPaths = []; }
                    var prefixPath = this.getPrefixPath(node, onPushingNewItem);
                    if (prefixPath)
                        prefixPaths.push(prefixPath);
                    if (!node.nextSameItemNode)
                        return prefixPaths;
                    return this._getPrefixPaths(node.nextSameItemNode, count, onPushingNewItem, prefixPaths);
                };
                /**
                 * RECURSIVE CALL - Returns the prefix path (as a set of items) of the tree from a given node.
                 *
                 * @param  {FPNode<T>}   node               The node to start the prefix.
                 * @param  {number}      count              The support of the stating node (which is node).
                 * @param  {Function}    onPushingNewItem   Callback function to keep track of items added to the prefix path.
                 * @return {T[]}                            The result you expect.
                 */
                FPTree.prototype._getPrefixPath = function (node, count, onPushingNewItem) {
                    if (node.parent && node.parent.parent) {
                        if (onPushingNewItem)
                            onPushingNewItem(node.parent.item, count);
                        return [node.parent.item].concat(this._getPrefixPath(node.parent, count, onPushingNewItem));
                    }
                    return [];
                };
                /**
                 * RECURSIVE CALL - Returns the single path of the tree, if it is one. Else, it returns null.
                 *
                 * @param  {FPNode<T>}   node          The node to test for single path.
                 * @param  {FPNode<T>[]} currentPath   The current saved path.
                 * @return {FPNode<T>[]}               The path to return.
                 */
                FPTree.prototype._getSinglePath = function (node, currentPath) {
                    if (currentPath === void 0) { currentPath = []; }
                    // If current node is a tree leaf, that's a win.
                    if (node.children.length == 0)
                        return currentPath;
                    // If it has more than child, tree has more than one single path.
                    if (node.children.length > 1)
                        return null;
                    // Else test next child for single path.
                    currentPath.push(node.children[0]);
                    return this._getSinglePath(node.children[0], currentPath);
                };
                /**
                 * Keep track of the each last inserted item of different types.
                 *
                 * @param {string}    key   The key as stringified item.
                 * @param {FPNode<T>} child The child FPNode it represtents.
                 */
                FPTree.prototype._updateLastInserted = function (key, child) {
                    var last = this._lastInserted[key];
                    if (last)
                        last.nextSameItemNode = child;
                    this._lastInserted[key] = child;
                };
                /**
                 * Keep track of the first item of different type we inserted in the FPTree.
                 *
                 * @param {string}    key   The key as stringified item.
                 * @param {FPNode<T>} child The child FPNode it represtents.
                 */
                FPTree.prototype._updateFirstInserted = function (key, child) {
                    var first = this._firstInserted[key];
                    if (!first)
                        this._firstInserted[key] = child;
                };
                /**
                 * Returns the tree's headers as a list, sorted ASCENDINGLY by their support.
                 *
                 * @param  {ItemsCount} supports The support count of each items.
                 * @return {T[]}                 [description]
                 */
                FPTree.prototype._getHeaderList = function () {
                    var _this = this;
                    return Object.keys(this._firstInserted)
                        .sort(function (a, b) { return _this.supports[a] - _this.supports[b]; })
                        .map(function (key) { return JSON.parse(key); });
                };
                return FPTree;
            }());
            exports.FPTree = FPTree;
            });

            unwrapExports(fptree);
            var fptree_1 = fptree.FPTree;

            var events$1 = ( events && EventEmitter ) || events;

            var fpgrowth = createCommonjsModule(function (module, exports) {
            var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
                return function (d, b) {
                    extendStatics(d, b);
                    function __() { this.constructor = d; }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", { value: true });


            var FPGrowth = /** @class */ (function (_super) {
                __extends(FPGrowth, _super);
                /**
                 * FPGrowth is an algorithm for frequent item set mining and association rule
                 * earning over transactional databases.
                 * It was proposed by Han et al. (2000). FPGrowth is a very fast and memory efficient algorithm. It uses a special internal structure called an FP-Tree.
                 *
                 * @param  {number} _support 0 < _support < 1. Minimum support of itemsets to mine.
                 */
                function FPGrowth(_support /*, private _confidence: number*/) {
                    var _this = _super.call(this) || this;
                    _this._support = _support;
                    /**
                     * Output of the algorithm: The mined frequent itemsets.
                     */
                    _this._itemsets = [];
                    return _this;
                }
                /**
                 * Executes the FPGrowth Algorithm.
                 * You can keep track of frequent itemsets as they are mined by listening to the 'data' event on the FPGrowth object.
                 * All mined itemsets, as well as basic execution stats, are returned at the end of the execution through a callback function or a Promise.
                 *
                 * @param  {T[][]}              transactions The transactions from which you want to mine itemsets.
                 * @param  {IAprioriResults<T>} cb           Callback function returning the results.
                 * @return {Promise<IAprioriResults<T>>}     Promise returning the results.
                 */
                FPGrowth.prototype.exec = function (transactions, cb) {
                    var _this = this;
                    this._transactions = transactions;
                    // Relative support.
                    this._support = Math.ceil(this._support * transactions.length);
                    // First scan to determine the occurence of each unique item.
                    var supports = this._getDistinctItemsCount(this._transactions);
                    return new Promise(function (resolve, reject) {
                        // Building the FP-Tree...
                        var tree = new fptree.FPTree(supports, _this._support).fromTransactions(_this._transactions);
                        // Running the algorithm on the main tree.
                        // All the frequent itemsets are returned at the end of the execution.
                        var result = _this._fpGrowth(tree, _this._transactions.length);
                        if (cb)
                            cb(result);
                        resolve(result);
                    });
                };
                /**
                 * RECURSIVE CALL - Returns mined itemset from each conditional sub-FPTree of the given FPtree.
                 *
                 * @param  {FPTree<T>}  tree          The FPTree you want to mine.
                 * @param  {number}     prefixSupport The support of the FPTree's current prefix.
                 * @param  {T[]}        prefix        The current prefix associated with the FPTree.
                 * @return {Itemset<T>}               The mined itemsets.
                 */
                FPGrowth.prototype._fpGrowth = function (tree, prefixSupport, prefix) {
                    // Test whether or not the FP-Tree is single path.
                    // If it is, we can short-cut the mining process pretty efficiently.
                    // TODO: let singlePath: FPNode<T>[] = tree.getSinglePath();
                    // TODO: if(singlePath) return this._handleSinglePath(singlePath, prefix);
                    var _this = this;
                    if (prefix === void 0) { prefix = []; }
                    // For each header, ordered ascendingly by their support, determining the prefix paths.
                    // These prefix paths represent new transactions to mine in a new FPTree.
                    // If no prefix path can be mined, the algorithm stops.
                    return tree.headers.reduce(function (itemsets, item) {
                        var support = Math.min(tree.supports[JSON.stringify(item)], prefixSupport);
                        // Array copy.
                        var currentPrefix = prefix.slice(0);
                        currentPrefix.push(item);
                        // Prefix is a mined itemset.
                        itemsets.push(_this._getFrequentItemset(currentPrefix, support));
                        // Method below generates the prefix paths of the current item, as well as the support of
                        // each item composing the prefix paths, and returns a new conditional FPTree if one can be created.
                        var childTree = tree.getConditionalFPTree(item);
                        // If a conditional tree can be mined... mine it recursively.
                        if (childTree)
                            return itemsets.concat(_this._fpGrowth(childTree, support, currentPrefix));
                        return itemsets;
                    }, []);
                };
                /**
                 * Handles the mining of frequent itemsets over a single path tree.
                 *
                 * @param  {FPNode<T>[]} singlePath The given single path.
                 * @param  {T[]}         prefix     The prefix associated with the path.
                 * @return {Itemset<T>}             The mined itemsets.
                 */
                FPGrowth.prototype._handleSinglePath = function (singlePath, prefix) {
                    // TODO
                    return [];
                };
                /**
                 * Returns and emit through an event a formatted mined frequent itemset.
                 *
                 * @param  {T[]}        itemset The items of the frequent itemset.
                 * @param  {number}     support The support of the itemset.
                 * @return {Itemset<T>}         The formatted itemset.
                 */
                FPGrowth.prototype._getFrequentItemset = function (itemset, support) {
                    var ret = {
                        items: itemset,
                        support: support
                    };
                    this.emit('data', ret);
                    return ret;
                };
                /**
                 * Returns the occurence of single items in a given set of transactions.
                 *
                 * @param  {T[][]}      transactions The set of transaction.
                 * @return {ItemsCount}              Count of items (stringified items as keys).
                 */
                FPGrowth.prototype._getDistinctItemsCount = function (transactions) {
                    return transactions.reduce(function (count, arr) {
                        return arr.reduce(function (count, item) {
                            count[JSON.stringify(item)] = (count[JSON.stringify(item)] || 0) + 1;
                            return count;
                        }, count);
                    }, {});
                };
                return FPGrowth;
            }(events$1.EventEmitter));
            exports.FPGrowth = FPGrowth;
            });

            var fpg = unwrapExports(fpgrowth);
            var fpgrowth_1 = fpgrowth.FPGrowth;

            const { FPGrowth, } = fpg;
            // import { default as ObjectValues, } from 'object.values';
            // if (!Object.values) {
            //   ObjectValues.shim();
            // }

            /**
             * Formats an array of transactions into a sparse matrix like format for Apriori/Eclat
             * @memberOf calc
             * @see {@link https://github.com/alexisfacques/Node-FPGrowth}
             * @param {Array} data - CSV data of transactions 
             * @param {Object} options 
             * @param {Boolean} [options.exludeEmptyTranscations=true] - exclude empty rows of transactions 
             * @returns {Object} {values - unique list of all values, valuesMap - map of values and labels, transactions - formatted sparse array}
             */
            function getTransactions(data, options) {
              const config = Object.assign({}, {
                exludeEmptyTranscations: true,
              }, options);
              const values = new Set();
              const valuesMap = new Map();
              const transactions = data
                .map(csvRow => {
                  [
                    ...Object.values(csvRow),
                  ].forEach(csvVal => {
                    values.add(csvVal);
                  });
                  values.forEach(val => {
                    if (!valuesMap.get(val)) {
                      const index = (valuesMap.size < 0)
                        ? 0
                        : parseInt(valuesMap.size / 2, 10);
                      valuesMap.set(val, index.toString());
                      valuesMap.set(index.toString(), val);
                    }
                  });
                  return Object.values(csvRow)
                    .map(csvCell =>
                      valuesMap.get(csvCell))
                    .filter(val => val !== undefined);
                });
              return {
                values,
                valuesMap,
                transactions: (config.exludeEmptyTranscations)
                  ? transactions.filter(csvRow => csvRow.length)
                  : transactions,
              };
            }

            /**
             * returns association rule learning results
             * @memberOf calc
             * @see {@link https://github.com/alexisfacques/Node-FPGrowth}
             * @param {Array} transactions - sparse matrix of transactions 
             * @param {Object} options 
             * @param {Number} [options.support=0.4] - support level
             * @param {Number} [options.minLength=2] - minimum assocation array size
             * @param {Boolean} [options.summary=true] - return summarized results
             * @param {Map} [options.valuesMap=new Map()] - map of values and labels (used for summary results)
             * @returns {Object} Returns the result from Node-FPGrowth or a summary of support and strong associations
             */
            function assocationRuleLearning(transactions =[], options) {
              return new Promise((resolve, reject) => {
                try {
                  const config = Object.assign({}, {
                    support: 0.4,
                    minLength: 2,
                    summary: true,
                    valuesMap: new Map(),
                  }, options);
                  const fpgrowth$$1 = new FPGrowth(config.support);
                  fpgrowth$$1.exec(transactions)
                    .then(results => {
                      const itemsets = (results.itemsets) ? results.itemsets : results;
                      // console.log('itemsets', itemsets)
                      if (config.summary) {
                        resolve(itemsets
                          .map(itemset => ({
                            items_labels: itemset.items.map(item => config.valuesMap.get(item)),
                            items: itemset.items,
                            support: itemset.support,
                            support_percent: itemset.support / transactions.length,
                          }))
                          .filter(itemset => itemset.items.length > 1)
                          .sort((a, b) => b.support - a.support));
                      } else {
                        resolve(results);
                      }
                    })
                    .catch(reject);
                } catch (e) {
                  reject(e);
                }
              });
            }

            /**
             * @namespace
             */
            const calc = {
              getTransactions,
              assocationRuleLearning,
            };

            /* ================================================================
             * probability-distributions by Matt Asher (me[at]mattasher.com)
             * Originally created for StatisticsBlog.com
             *
             * first created at : Sat Oct 10 2015
             *
             * ================================================================
             * Copyright 2015 Matt Asher
             *
             * Licensed under the MIT License
             * You may not use this file except in compliance with the License.
             *
             * ================================================================ */



            // Shortcuts
            var exp = Math.exp;
            var ln = Math.log;
            var PI = Math.PI;
            var pow = Math.pow;

            var probabilityDistributions = {

                /**
                 * This is the core function for generating entropy
                 *
                 * @param len number of bytes of entropy to create
                 * @returns {number} A pseduo random number between 0 and 1
                 *
                 */
                prng: function(len) {
                    if(len === undefined) len=16;

                    var entropy = fs.randomBytes(len);
                    var result = 0;

                    for(var i=0; i<len; i++) {
                        result = result + Number(entropy[i])/Math.pow(256,(i+1));
                    }
                    return result
                },




                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer.
                 * @param alpha First shape parameter
                 * @param beta Second shape parameter
                 * @param loc Location or Non-centrality parameter
                 */
                rbeta: function(n, alpha, beta, loc) {
                    // Uses relationship with gamma to calculate

                    // Validations
                    n = this._v(n, "n");
                    alpha = this._v(alpha, "nn", 1);
                    beta = this._v(beta, "nn", 1);
                    loc =  this._v(loc, "r", 0);

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        var g1 = this.rgamma(1, alpha, 1)[0];
                        var g2 = this.rgamma(1, beta, 1)[0];


                        toReturn[i] = loc + g1/(g1+g2);
                    }
                    return toReturn

                },


                /**
                 *
                 * @param n Number of variates to return.
                 * @param size Number of Bernoulli trials to be summed up. Defaults to 1
                 * @param p Probability of a "success". Defaults to 0.5
                 * @returns {Array} Random variates array
                 */
                rbinom: function(n, size, p) {
                    n = this._v(n, "n");
                    size = this._v(size, "nni", 1);
                    p = this._v(p, "p", 0.5);

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        var result = 0;
                        for(var j=0; j<size; j++) {
                            if(this.prng() < p) {
                                result++;
                            }
                        }
                        toReturn[i] = result;
                    }
                    return toReturn
                },


                /**
                 *
                 * @param n The number of variates to create
                 * @param loc Location parameter
                 * @param scale Scale parameter
                 * @returns {Array} Random variates array
                 */
                rcauchy: function(n, loc, scale) {
                    n = this._v(n, "n");
                    loc = this._v(loc, "r", 0);
                    scale = this._v(scale, "nn", 1);

                    var toReturn = [];
                    for(var i=0; i<n; i++) {
                        var x = scale * Math.tan(PI * (this.prng()-0.5))+loc;

                        toReturn[i] = x;
                    }

                    return toReturn
                },

                /**
                 *
                 * @param n The number of variates to create
                 * @param df Degrees of freedom for the distribution
                 * @param ncp Non-centrality parameter
                 * @returns {Array} Random variates array
                 */
                rchisq: function(n, df, ncp) {
                    n = this._v(n, "n");
                    df = this._v(df, "nn");
                    ncp = this._v(ncp, "r", 0);

                    var toReturn = [];
                    for(var i=0; i<n; i++) {
                        // Start at ncp
                        var x = ncp;
                        for(var j=0; j<df; j++) {
                            x = x + Math.pow(this.rnorm(1)[0],2);
                        }
                        toReturn[i] = x;
                    }
                    return toReturn
                },

                /**
                 *
                 * @param x Where to sample the density
                 * @param rate The rate parameter. Must be a positive number
                 * @returns {Number} The density given the parameter values
                 */
                dexp: function(x, rate) {
                    x = this._v(x, "r");
                    rate = this._v(rate, "pos", 1);
                    if(x < 0) return 0

                    return rate * exp(-rate * x)
                },

                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer.
                 * @param rate The rate parameter. Must be a positive number
                 */
                rexp: function(n, rate) {
                    n = this._v(n, "n");
                    rate = this._v(rate, "pos", 1);

                    var toReturn = [];

                    for(var i=0; i<n; i++) {

                        toReturn[i] =  -ln(this.prng())/rate;
                    }

                    return toReturn
                },

                /**
                 *
                 * @param n The number of variates to create
                 * @param df1 Degrees of freedom for the first parameter
                 * @param df2 Degrees of freedom for the first parameter
                 * @returns {Array} Random variates array
                 */
                rf: function(n, df1, df2) {
                    n = this._v(n, "n");
                    df1 = this._v(df1, "nn");
                    df2 = this._v(df2, "nn");

                    var toReturn = [];
                    for(var i=0; i<n; i++) {
                        var num = this.rchisq(1, df1)[0]/df1;
                        var denom = this.rchisq(1, df2)[0]/df2;

                        toReturn[i] = num/denom;
                    }

                    return toReturn

                },


                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer
                 * @param alpha
                 * @param rate
                 * @returns {Array} Random variates array
                 */
                rgamma: function(n, alpha, rate) {
                    // Adapted from https://github.com/mvarshney/simjs-source/ & scipy
                    n = this._v(n, "n");
                    alpha = this._v(alpha, "nn");
                    rate = this._v(rate, "pos", 1);

                    var LOG4 = ln(4.0);
                    var SG_MAGICCONST = 1.0 + ln(4.5);
                    var beta = 1/rate;

                    var toReturn = [];
                    for(var i = 0; i<n; i++) {

                        /* Based on Python 2.6 source code of random.py.
                         */

                        if (alpha > 1.0) {
                            var ainv = Math.sqrt(2.0 * alpha - 1.0);
                            var bbb = alpha - LOG4;
                            var ccc = alpha + ainv;

                            while (true) {
                                var u1 = this.prng();
                                if ((u1 < 1e-7) || (u > 0.9999999)) {
                                    continue;
                                }
                                var u2 = 1.0 - this.prng();
                                var v = ln(u1 / (1.0 - u1)) / ainv;
                                var x = alpha * exp(v);
                                var z = u1 * u1 * u2;
                                var r = bbb + ccc * v - x;
                                if ((r + SG_MAGICCONST - 4.5 * z >= 0.0) || (r >= ln(z))) {
                                    var result = x * beta;
                                    break;
                                }
                            }
                        } else if (alpha == 1.0) {
                            var u = this.prng();
                            while (u <= 1e-7) {
                                u = this.prng();
                            }
                            var result = - ln(u) * beta;
                        } else {
                            while (true) {
                                var u = this.prng();
                                var b = (Math.E + alpha) / Math.E;
                                var p = b * u;
                                if (p <= 1.0) {
                                    var x = Math.pow(p, 1.0 / alpha);
                                } else {
                                    var x = - ln((b - p) / alpha);
                                }
                                var u1 = this.prng();
                                if (p > 1.0) {
                                    if (u1 <= Math.pow(x, (alpha - 1.0))) {
                                        break;
                                    }
                                } else if (u1 <= exp(-x)) {
                                    break;
                                }
                            }
                            var result =  x * beta;
                        }

                        toReturn[i] = result;
                    }

                    return toReturn;

                },


                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer
                 * @param min Minimum value
                 * @param max Maximum value
                 * @param inclusive By default the minimum and maximum are inclusive. To make exclusive, set to false
                 * @returns {Array}
                 */
                rint: function(n, min, max, inclusive) {
                    n = this._v(n, "n");
                    min = this._v(min, "int");
                    max = this._v(max, "int");
                    if(inclusive === false) {
                        min++;
                        if(min === max) throw new Error("Minimum value cannot be greater than maximum value. For non-inclusive, minimum and maximum must be separated by at least 2.");
                    } else {
                        max++;
                    }

                    if(min > max) throw new Error("Minimum value cannot be greater than maximum value. For non-inclusive, minimum and maximum must be separated by at least 2.");

                    var toReturn = [];

                    var raw = this.runif(n, min, max);

                    for(var i=0; i<n; i++) {
                        toReturn[i] = Math.floor(raw[i]);
                    }

                    return toReturn
                },

                // Syntax as in R library VGAM
                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer
                 * @param loc Mean
                 * @param scale Scale parameter
                 * @returns {Array} Random variates array
                 */
                rlaplace: function(n, loc, scale) {
                    n = this._v(n, "n");
                    loc = this._v(loc, "r", 0);
                    scale = this._v(scale, "nn", 1);

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        var core = this.sample([-1,1])[0] * ln(this.prng());

                        var x = loc - scale * core;

                        toReturn[i] = x;
                    }

                    return toReturn
                },


                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer.
                 * @param meanlog The mean log.
                 * @param sdlog Log SD. Must be greater than 0.
                 * @returns {Array} Random variates array
                 */
                rlnorm: function(n, meanlog, sdlog) {
                    n = this._v(n, "n");
                    meanlog = this._v(meanlog, "r", 0);
                    sdlog = this._v(sdlog, "nn", 1);

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        var x = this.rnorm(1, meanlog, sdlog)[0];

                        toReturn[i] = exp(x);
                    }

                    return toReturn
                },

                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer.
                 * @param size Number of hits required
                 * @param p Hit probability
                 * @param mu Optional way to specify hit probability
                 * @returns {Array} Random variates array
                 */
                rnbinom: function(n, size, p, mu) {
                    n = this._v(n, "n");
                    if(size === undefined) size=1;
                    if(Math.round(size) != size) throw new Error("Size must be a whole number");
                    if(size < 1) throw new Error("Size must be one or greater");
                    if(p !== undefined && mu !== undefined) throw new Error("You must specify probability or mean, not both");
                    if(mu !== undefined) p = size/(size+mu);
                    p = this._v(p, "p");


                    var toReturn = [];

                    for(var i=0; i<n; i++) {

                        // Core distribution
                        var result = 0;
                        var leftToFind = size;
                        while(leftToFind > 0) {
                            result++;
                            if(this.prng() < p) leftToFind--;
                        }

                        toReturn[i] = result - 1;
                    }

                    return toReturn

                },

                /**
                 *
                 * @param x Where to sample the density
                 * @param mean Mean of the distribution
                 * @param sd Standard deviation for the distribution
                 * @returns {Number} The density given the parameter values
                 */
                dnorm: function(x, mean, sd) {
                    x = this._v(x, "r");
                    mean = this._v(mean, "r", 0);
                    sd = this._v(sd, "nn", 1);

                    // Check for degeneracy
                    if(sd === 0) {
                        if(x === mean) return Infinity;
                        return 0
                    }

                    var a = sd*(Math.sqrt(2*PI));
                    var b = -(x-mean)*(x-mean);
                    var c = 2*sd*sd;

                    return (1/a)*exp(b/c)
                },


                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer.
                 * @param mean Mean of the distribution
                 * @param sd Standard Deviation of the distribution
                 * @returns {Array} Random variates array
                 */
                rnorm: function(n, mean, sd) {
                    // Adapted from http://blog.yjl.im/2010/09/simulating-normal-random-variable-using.html

                    n = this._v(n, "n");
                    mean = this._v(mean, "r", 0);
                    sd = this._v(sd, "nn", 1);

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        var V1, V2, S, X;

                        do {
                            var U1 = this.prng();
                            var U2 = this.prng();
                            V1 = (2 * U1) - 1;
                            V2 = (2 * U2) - 1;
                            S = (V1 * V1) + (V2 * V2);
                        } while (S > 1);

                        X = Math.sqrt(-2 * ln(S) / S) * V1;
                        X = mean + sd * X;
                        toReturn.push(X);
                    }

                    return toReturn
                },


                /**
                 *
                 * @param x Where to sample the density
                 * @param lambda Mean/variance
                 * @returns {Number} The density given the parameter values
                 */
                dpois: function(x, lambda) {
                    x = this._v(x, "nni");
                    lambda = this._v(lambda, "nn");

                    // Check for degeneracy
                    if(lambda === 0) {
                        if(x === 0) return 1;
                        return 0
                    }

                    var a = pow(lambda, x);
                    var b = exp(-lambda);
                    var c = this._factorial(x);

                    return a*b/c
                },


                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer.
                 * @param lambda Mean/Variance of the distribution
                 * @returns {Array} Random variates array
                 */
                rpois: function(n, lambda) {
                    n = this._v(n, "n");
                    lambda = this._v(lambda, "pos");

                    var toReturn = [];

                    for(var i=0; i<n; i++) {

                        // Adapted from http://wiki.q-researchsoftware.com/wiki/How_to_Generate_Random_Numbers:_Poisson_Distribution
                        if (lambda < 30) {

                            var L = exp(-lambda);
                            var p = 1;
                            var k = 0;
                            do {
                                k++;
                                p *= this.prng();
                            } while (p > L);
                            toReturn.push(k - 1);

                        } else {

                            // Roll our own
                            // Fix total number of samples
                            var samples = 10000;
                            var p = lambda/samples;
                            var k = 0;
                            for(var j=0; j<samples; j++) {
                                if(this.prng() < p) {
                                    k++;
                                }
                            }
                            toReturn[i] = k;
                        }
                    }

                    return toReturn
                },

                /**
                 * Density function for uniform distribution
                 *
                 * @param x Location to get density for
                 * @param min {number} Minimum value
                 * @param max {number} Maximum value
                 * @returns {number} Density of the function given the location and parameters
                 */
                dunif: function(x, min, max) {
                    x = this._v(x, "r");
                    min = this._v(min, "r", 0);
                    max = this._v(max, "r", 1);
                    if(min > max) throw new Error("Minimum value cannot be greater than maximum value");

                    if(x < min || x > max) return 0;
                    if(min === max) return Infinity;


                    return 1/(max-min);
                },


                /**
                 *
                 * @param n  Number of variates to return
                 * @param min Lower bound
                 * @param max Upper bound
                 * @returns {Array} Random variates array
                 */
                runif: function(n, min, max) {
                    n = this._v(n, "n");
                    min = this._v(min, "r", 0);
                    max = this._v(max, "r", 1);
                    if(min > max) throw new Error("Minimum value cannot be greater than maximum value");

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        var raw = this.prng();
                        var scaled = min + raw*(max-min);
                        toReturn.push(scaled);
                    }
                    return toReturn
                },

                /**
                 * Generate a random word of specified length using library of characters. Uses English alphabet if no library is specified
                 * @param len Number of letters in this word
                 * @param {string} alphabet to use
                 * @returns {string} String of randomly selected characters from the alphabet
                 */
                rword: function(len, alphabet) {
                    len = this._v(len, "n");
                    alphabet = this._v(alphabet, "str", "abcdefghijklmnopqrstuvwxyz");

                    var lib = alphabet.split("");
                    var arr = this.sample(lib, len, true);

                    return arr.join("");
                },


                /**
                 *
                 * @param collection Array of items to sample from
                 * @param n Number of items to sample. If missing, n will be set to the length of the collection and it will shuffle
                 * @param replace Sample with replacement? False by default
                 * @param ratios Ratios to weight items. Can be any non-negative number. By default all items are given equal weight
                 * @returns {Array} Array of sampled items
                 */
                sample: function(collection, n, replace, ratios) {

                    // Validations
                    collection = this._v(collection, "a");
                    n = this._v(n, "n", collection.length); // If n is undefined, sample the full array
                    if(replace === undefined) replace = false;
                    if(!replace && collection.length < n)
                        throw new Error("You cannot select " + n + " items from an array of length " + collection.length + " without replacement");

                    if(ratios === undefined) {
                        ratios = [];
                        for(var m=0; m<collection.length; m++) { ratios[m] = 1; }
                    }

                    var cumulativeProbs = this._getCumulativeProbs(ratios, collection.length);

                    // Main loop
                    var toReturn = [];

                    for(var i=0; i<n; i++) {

                        var chosen = this._sampleOneIndex(cumulativeProbs);

                        if(replace) {
                            toReturn[i] = collection[chosen];
                        } else {

                            // Remove from collection and ratios
                            toReturn[i] = collection.splice(chosen, 1)[0];
                            ratios.splice(chosen, 1);

                            // Make sure we aren't at the end
                            if(ratios.length) {
                                cumulativeProbs = this._getCumulativeProbs(ratios, collection.length);
                            }
                        }
                    }

                    return toReturn;

                },


                /**
                 *
                 * @param data Array of data to display
                 * @param domID String ID of the DOM element to use for display. This must ALREADY exist on your page
                 * @param options Object see below for details
                 *
                 * IMPORTANT: This is not a "pure" function, it takes a DOM element ID as an argument and modifies (completely overwrites)
                 * that element.
                 *
                 * IMPORTANT 2: options.conditions are eval'd so don't send untrusted code sent to this function!
                 *
                 */
                visualize: function(data, domID, options) {
                    var defaultOptions = {
                        lag: 1000, // Timing multiplier in milliseconds
                        blank: "", // What to show when no number is shown
                        inf: "&infin;", // Symbol to indicate infinity
                        loop: true, // When done, start again at beginning at end of array
                        conditions: "", // This is eval'd and checked against true. Example, "x > 3 && x < 10". Use "x" as the variable.
                        arrivalTimes: false,
                        arrivalSymbol: '<span class="pd-arrival">&#8226;</span>',
                        arrivalFlashTime: 0.25,
                        significantDigits: 0 // 0 will show as many as JS provides, or choose a number to limit
                    };

                    if(typeof options === "undefined") options = {};

                    // Merge defaultOptions with user options favoring user options
                    for (var property in defaultOptions) {
                        if (defaultOptions.hasOwnProperty(property)) {
                            if(typeof options[property] === "undefined") {
                                options[property] = defaultOptions[property];
                            }
                        }
                    }

                    // Elem is a DOM element to output to
                    var elem = document.getElementById(domID);
                    if(!elem) throw new Error("Unable to find DOM element " + domID);

                    var len = data.length, i = 0;

                    var format = function(x) {
                        var x = data[i];

                        // Are we showing only certain things
                        if(options.conditions) {

                            // Check for only allowed characters, this is NOT complete security
                            if(!/^[x\&\|=0-9\<\>\s\-\.]+$/.test(options.conditions)) throw new Error("Bad input sent to options.conditions");

                            if (eval(options.conditions) !== true) {
                                x = options.blank;
                                return x
                            }
                        }

                        if(options.significantDigits) {
                            x = x.toPrecision(options.significantDigits);
                        }

                        if(x === Infinity) {
                            x = options.inf;
                        }
                        return x;
                    };


                    if(options.arrivalTimes) {
                        var blankOut = function() {
                            setTimeout(function() {
                                elem.innerHTML = options.blank;
                            }, options.arrivalFlashTime*options.lag);
                        };

                        var cycle = function() {

                            elem.innerHTML = options.arrivalSymbol;
                            blankOut();
                            if(++i === len) i = 0;

                            if(options.loop || i !== 0) {
                                setTimeout(cycle, data[i]*options.lag);
                            } else {
                                // End on a blank
                                elem.innerHTML = options.blank;
                            }
                        };
                        cycle();

                    } else {
                        var update = function() {
                            // Main vis for non-arrival numbers

                            elem.innerHTML = format(data[i]);
                            if(++i === len) i = 0;

                            if(options.loop || i !== 0) {
                                setTimeout(update, options.lag);
                            } else {
                                // End on a blank
                                setTimeout(function() { elem.innerHTML = options.blank; }, options.lag);

                            }
                        };
                        update();
                    }
                },


                // HELPERS

                /**
                 *
                 * @param ratios Array of non-negative numbers to be turned into CDF
                 * @param len length of the collection
                 * @returns {Array}
                 * @private
                 */
                _getCumulativeProbs: function(ratios, len) {
                    if(len === undefined) throw new Error("An error occurred: len was not sent to _getCumulativeProbs");
                    if(ratios.length !== len) throw new Error("Probabilities for sample must be same length as the array to sample from");

                    var toReturn = [];

                    if(ratios !== undefined) {
                        ratios = this._v(ratios, "a");
                        if(ratios.length !== len) throw new Error("Probabilities array must be the same length as the array you are sampling from");

                        var sum = 0;
                        ratios.map(function(ratio) {
                            ratio = this._v(ratio, "nn"); // Note validating as ANY non-negative number
                            sum+= ratio;
                            toReturn.push(sum);
                        }.bind(this));

                        // Divide by total to normalize
                        for(var k=0; k<toReturn.length; k++) { toReturn[k] = toReturn[k]/sum; }
                        return toReturn
                    }
                },

                _sampleOneIndex: function(cumulativeProbs) {

                    var toTake = this.prng();

                    // Find out where this lands in weights
                    var cur = 0;
                    while(toTake > cumulativeProbs[cur]) cur++;

                    return cur;
                },

                _factorial: function(n) {
                    var toReturn=1;
                    for (var i = 2; i <= n; i++)
                        toReturn = toReturn * i;

                    return toReturn;
                },

                // Return default if undefined, otherwise validate
                // Return a COPY of the validated parameter
                _v: function(param, type, defaultParam) {
                    if(param == null && defaultParam != null)
                        return defaultParam;

                    switch(type) {

                        // Array of 1 item or more
                        case "a":
                            if(!Array.isArray(param) || !param.length) throw new Error("Expected an array of length 1 or greater");
                            return param.slice(0);

                        // Integer
                        case "int":
                            if(param !== Number(param)) throw new Error("A required parameter is missing or not a number");
                            if(param !== Math.round(param)) throw new Error("Parameter must be a whole number");
                            if(param === Infinity) throw new Error("Sent 'infinity' as a parameter");
                            return param;

                        // Natural number
                        case "n":
                            if(param === undefined) throw new Error("You must specify how many values you want");
                            if(param !== Number(param)) throw new Error("The number of values must be numeric");
                            if(param !== Math.round(param)) throw new Error("The number of values must be a whole number");
                            if(param < 1) throw new Error("The number of values must be a whole number of 1 or greater");
                            if(param === Infinity) throw new Error("The number of values cannot be infinite ;-)");
                            return param;

                        // Valid probability
                        case "p":
                            if(Number(param) !== param) throw new Error("Probability value is missing or not a number");
                            if(param > 1) throw new Error("Probability values cannot be greater than 1");
                            if(param < 0) throw new Error("Probability values cannot be less than 0");
                            return param;

                        // Positive numbers
                        case "pos":
                            if(Number(param) !== param) throw new Error("A required parameter is missing or not a number");
                            if(param <= 0) throw new Error("Parameter must be greater than 0");
                            if(param === Infinity) throw new Error("Sent 'infinity' as a parameter");
                            return param;

                        // Look for numbers (reals)
                        case "r":
                            if(Number(param) !== param) throw new Error("A required parameter is missing or not a number");
                            if(param === Infinity) throw new Error("Sent 'infinity' as a parameter");
                            return param;

                        // Non negative real number
                        case "nn":
                            if(param !== Number(param)) throw new Error("A required parameter is missing or not a number");
                            if(param < 0) throw new Error("Parameter cannot be less than 0");
                            if(param === Infinity) throw new Error("Sent 'infinity' as a parameter");
                            return param;

                        // Non negative whole number (integer)
                        case "nni":
                            if(param !== Number(param)) throw new Error("A required parameter is missing or not a number");
                            if(param !== Math.round(param)) throw new Error("Parameter must be a whole number");
                            if(param < 0) throw new Error("Parameter cannot be less than zero");
                            if(param === Infinity) throw new Error("Sent 'infinity' as a parameter");
                            return param;

                        // Non-empty string
                        case "str":
                            if(param !== String(param)) throw new Error("A required parameter is missing or not a string");
                            if(param.length === 0) throw new Error("Parameter must be at least one character long");
                            return param;


                    }
                },




                //    ________   _______  ______ _____  _____ __  __ ______ _   _ _______       _
                //   |  ____\ \ / /  __ \|  ____|  __ \|_   _|  \/  |  ____| \ | |__   __|/\   | |
                //   | |__   \ V /| |__) | |__  | |__) | | | | \  / | |__  |  \| |  | |  /  \  | |
                //   |  __|   > < |  ___/|  __| |  _  /  | | | |\/| |  __| | . ` |  | | / /\ \ | |
                //   | |____ / . \| |    | |____| | \ \ _| |_| |  | | |____| |\  |  | |/ ____ \| |____
                //   |______/_/ \_\_|    |______|_|  \_\_____|_|  |_|______|_| \_|  |_/_/    \_\______|

                /**
                 *
                 * @param n Number of variates to return
                 * @param loc Starting point. Must be a non-negative integer. 0 for degenerate distribution of 0.
                 * @param p Probability of moving towards finish
                 * @param cap Maximum steps before giving up
                 * @param trace Variable to track progress
                 * @returns {Array} Random variates array
                 *
                 * The FML distribution is a is based on the number of steps taken to return to the origin
                 * from a given position, with transition probabilities set at the beginning by picking a
                 * random variate from U(0,1).
                 */
                rfml: function (n, loc, p, cap, trace) {
                    n = this._v(n, "n");
                    loc = this._v(loc, "nni", 1);
                    if(p === undefined) p=this.prng;
                    cap = this._v(cap, "n", 10000);
                    if(trace === undefined) trace={};

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        var x = 0;
                        var s = loc;
                        var currP = p();
                        if(loc === 0) {

                            toReturn[i] = 0;
                        } else {

                            do {

                                var trial = this.prng();
                                if(trial < currP) {
                                    s++;
                                    trace[String(i) + "_" + String(x)] = { problems: s, p: currP, result: 1 };
                                } else {
                                    s--;
                                    trace[String(i) + "_" + String(x)] = { problems: s, p: currP, result: -1 };
                                }
                                x++;
                            } while(s > 0 && x < cap);

                            if(x === cap) x = -1; // Indicate we failed to do it in time.
                            toReturn[i] = x;
                        }
                    }
                    return toReturn
                },

                // http://www.statisticsblog.com/2013/05/uncovering-the-unreliable-friend-distribution-a-case-study-in-the-limits-of-mc-methods/
                /**
                 *
                 * The Unrelaible Friend distribution
                 * @param n
                 * @returns {Array} Random variates array
                 */
                ruf: function(n) {
                    n = this._v(n, "n");

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        toReturn[i] = this.rexp(1, this.prng())[0];
                    }

                    return toReturn
                }
            };
            var probabilityDistributions_1 = probabilityDistributions.prng;
            var probabilityDistributions_2 = probabilityDistributions.rbeta;
            var probabilityDistributions_3 = probabilityDistributions.rbinom;
            var probabilityDistributions_4 = probabilityDistributions.rcauchy;
            var probabilityDistributions_5 = probabilityDistributions.rchisq;
            var probabilityDistributions_6 = probabilityDistributions.dexp;
            var probabilityDistributions_7 = probabilityDistributions.rexp;
            var probabilityDistributions_8 = probabilityDistributions.rf;
            var probabilityDistributions_9 = probabilityDistributions.rgamma;
            var probabilityDistributions_10 = probabilityDistributions.rint;
            var probabilityDistributions_11 = probabilityDistributions.rlaplace;
            var probabilityDistributions_12 = probabilityDistributions.rlnorm;
            var probabilityDistributions_13 = probabilityDistributions.rnbinom;
            var probabilityDistributions_14 = probabilityDistributions.dnorm;
            var probabilityDistributions_15 = probabilityDistributions.rnorm;
            var probabilityDistributions_16 = probabilityDistributions.dpois;
            var probabilityDistributions_17 = probabilityDistributions.rpois;
            var probabilityDistributions_18 = probabilityDistributions.dunif;
            var probabilityDistributions_19 = probabilityDistributions.runif;
            var probabilityDistributions_20 = probabilityDistributions.rword;
            var probabilityDistributions_21 = probabilityDistributions.sample;
            var probabilityDistributions_22 = probabilityDistributions.visualize;
            var probabilityDistributions_23 = probabilityDistributions._getCumulativeProbs;
            var probabilityDistributions_24 = probabilityDistributions._sampleOneIndex;
            var probabilityDistributions_25 = probabilityDistributions._factorial;
            var probabilityDistributions_26 = probabilityDistributions._v;
            var probabilityDistributions_27 = probabilityDistributions.rfml;
            var probabilityDistributions_28 = probabilityDistributions.ruf;

            var probabilty = /*#__PURE__*/Object.freeze({
                        default: probabilityDistributions,
                        __moduleExports: probabilityDistributions,
                        prng: probabilityDistributions_1,
                        rbeta: probabilityDistributions_2,
                        rbinom: probabilityDistributions_3,
                        rcauchy: probabilityDistributions_4,
                        rchisq: probabilityDistributions_5,
                        dexp: probabilityDistributions_6,
                        rexp: probabilityDistributions_7,
                        rf: probabilityDistributions_8,
                        rgamma: probabilityDistributions_9,
                        rint: probabilityDistributions_10,
                        rlaplace: probabilityDistributions_11,
                        rlnorm: probabilityDistributions_12,
                        rnbinom: probabilityDistributions_13,
                        dnorm: probabilityDistributions_14,
                        rnorm: probabilityDistributions_15,
                        dpois: probabilityDistributions_16,
                        rpois: probabilityDistributions_17,
                        dunif: probabilityDistributions_18,
                        runif: probabilityDistributions_19,
                        rword: probabilityDistributions_20,
                        sample: probabilityDistributions_21,
                        visualize: probabilityDistributions_22,
                        _getCumulativeProbs: probabilityDistributions_23,
                        _sampleOneIndex: probabilityDistributions_24,
                        _factorial: probabilityDistributions_25,
                        _v: probabilityDistributions_26,
                        rfml: probabilityDistributions_27,
                        ruf: probabilityDistributions_28
            });

            /**
             * @namespace
             * @see {@link https://github.com/Mattasher/probability-distributions} 
             */
            const PD = Object.assign({}, probabilty);

            if (!Symbol.species) {
                Symbol.species = Symbol.for('@@species');
            }

            /**
             * @class LuDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs
             * @param {Matrix} matrix
             */
            class LuDecomposition$$1 {
                constructor(matrix) {
                    matrix = WrapperMatrix2D$4.checkMatrix(matrix);

                    var lu = matrix.clone();
                    var rows = lu.rows;
                    var columns = lu.columns;
                    var pivotVector = new Array(rows);
                    var pivotSign = 1;
                    var i, j, k, p, s, t, v;
                    var LUcolj, kmax;

                    for (i = 0; i < rows; i++) {
                        pivotVector[i] = i;
                    }

                    LUcolj = new Array(rows);

                    for (j = 0; j < columns; j++) {

                        for (i = 0; i < rows; i++) {
                            LUcolj[i] = lu.get(i, j);
                        }

                        for (i = 0; i < rows; i++) {
                            kmax = Math.min(i, j);
                            s = 0;
                            for (k = 0; k < kmax; k++) {
                                s += lu.get(i, k) * LUcolj[k];
                            }
                            LUcolj[i] -= s;
                            lu.set(i, j, LUcolj[i]);
                        }

                        p = j;
                        for (i = j + 1; i < rows; i++) {
                            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {
                                p = i;
                            }
                        }

                        if (p !== j) {
                            for (k = 0; k < columns; k++) {
                                t = lu.get(p, k);
                                lu.set(p, k, lu.get(j, k));
                                lu.set(j, k, t);
                            }

                            v = pivotVector[p];
                            pivotVector[p] = pivotVector[j];
                            pivotVector[j] = v;

                            pivotSign = -pivotSign;
                        }

                        if (j < rows && lu.get(j, j) !== 0) {
                            for (i = j + 1; i < rows; i++) {
                                lu.set(i, j, lu.get(i, j) / lu.get(j, j));
                            }
                        }
                    }

                    this.LU = lu;
                    this.pivotVector = pivotVector;
                    this.pivotSign = pivotSign;
                }

                /**
                 *
                 * @return {boolean}
                 */
                isSingular() {
                    var data = this.LU;
                    var col = data.columns;
                    for (var j = 0; j < col; j++) {
                        if (data[j][j] === 0) {
                            return true;
                        }
                    }
                    return false;
                }

                /**
                 *
                 * @param {Matrix} value
                 * @return {Matrix}
                 */
                solve(value) {
                    value = Matrix$a.checkMatrix(value);

                    var lu = this.LU;
                    var rows = lu.rows;

                    if (rows !== value.rows) {
                        throw new Error('Invalid matrix dimensions');
                    }
                    if (this.isSingular()) {
                        throw new Error('LU matrix is singular');
                    }

                    var count = value.columns;
                    var X = value.subMatrixRow(this.pivotVector, 0, count - 1);
                    var columns = lu.columns;
                    var i, j, k;

                    for (k = 0; k < columns; k++) {
                        for (i = k + 1; i < columns; i++) {
                            for (j = 0; j < count; j++) {
                                X[i][j] -= X[k][j] * lu[i][k];
                            }
                        }
                    }
                    for (k = columns - 1; k >= 0; k--) {
                        for (j = 0; j < count; j++) {
                            X[k][j] /= lu[k][k];
                        }
                        for (i = 0; i < k; i++) {
                            for (j = 0; j < count; j++) {
                                X[i][j] -= X[k][j] * lu[i][k];
                            }
                        }
                    }
                    return X;
                }

                /**
                 *
                 * @return {number}
                 */
                get determinant() {
                    var data = this.LU;
                    if (!data.isSquare()) {
                        throw new Error('Matrix must be square');
                    }
                    var determinant = this.pivotSign;
                    var col = data.columns;
                    for (var j = 0; j < col; j++) {
                        determinant *= data[j][j];
                    }
                    return determinant;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get lowerTriangularMatrix() {
                    var data = this.LU;
                    var rows = data.rows;
                    var columns = data.columns;
                    var X = new Matrix$a(rows, columns);
                    for (var i = 0; i < rows; i++) {
                        for (var j = 0; j < columns; j++) {
                            if (i > j) {
                                X[i][j] = data[i][j];
                            } else if (i === j) {
                                X[i][j] = 1;
                            } else {
                                X[i][j] = 0;
                            }
                        }
                    }
                    return X;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get upperTriangularMatrix() {
                    var data = this.LU;
                    var rows = data.rows;
                    var columns = data.columns;
                    var X = new Matrix$a(rows, columns);
                    for (var i = 0; i < rows; i++) {
                        for (var j = 0; j < columns; j++) {
                            if (i <= j) {
                                X[i][j] = data[i][j];
                            } else {
                                X[i][j] = 0;
                            }
                        }
                    }
                    return X;
                }

                /**
                 *
                 * @return {Array<number>}
                 */
                get pivotPermutationVector() {
                    return this.pivotVector.slice();
                }
            }

            function hypotenuse$4(a, b) {
                var r = 0;
                if (Math.abs(a) > Math.abs(b)) {
                    r = b / a;
                    return Math.abs(a) * Math.sqrt(1 + r * r);
                }
                if (b !== 0) {
                    r = a / b;
                    return Math.abs(b) * Math.sqrt(1 + r * r);
                }
                return 0;
            }

            function getFilled2DArray$4(rows, columns, value) {
                var array = new Array(rows);
                for (var i = 0; i < rows; i++) {
                    array[i] = new Array(columns);
                    for (var j = 0; j < columns; j++) {
                        array[i][j] = value;
                    }
                }
                return array;
            }

            /**
             * @class SingularValueDecomposition
             * @link https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs
             * @param {Matrix} value
             * @param {object} [options]
             * @param {boolean} [options.computeLeftSingularVectors=true]
             * @param {boolean} [options.computeRightSingularVectors=true]
             * @param {boolean} [options.autoTranspose=false]
             */
            class SingularValueDecomposition$$1 {
                constructor(value, options = {}) {
                    value = WrapperMatrix2D$4.checkMatrix(value);

                    var m = value.rows;
                    var n = value.columns;
                    var nu = Math.min(m, n);

                    const {
                        computeLeftSingularVectors = true,
                        computeRightSingularVectors = true,
                        autoTranspose = false
                    } = options;

                    var wantu = Boolean(computeLeftSingularVectors);
                    var wantv = Boolean(computeRightSingularVectors);

                    var swapped = false;
                    var a;
                    if (m < n) {
                        if (!autoTranspose) {
                            a = value.clone();
                            // eslint-disable-next-line no-console
                            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');
                        } else {
                            a = value.transpose();
                            m = a.rows;
                            n = a.columns;
                            swapped = true;
                            var aux = wantu;
                            wantu = wantv;
                            wantv = aux;
                        }
                    } else {
                        a = value.clone();
                    }

                    var s = new Array(Math.min(m + 1, n));
                    var U = getFilled2DArray$4(m, nu, 0);
                    var V = getFilled2DArray$4(n, n, 0);
                    var e = new Array(n);
                    var work = new Array(m);

                    var nct = Math.min(m - 1, n);
                    var nrt = Math.max(0, Math.min(n - 2, m));

                    var i, j, k, p, t, ks, f, cs, sn, max, kase,
                        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;

                    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {
                        if (k < nct) {
                            s[k] = 0;
                            for (i = k; i < m; i++) {
                                s[k] = hypotenuse$4(s[k], a[i][k]);
                            }
                            if (s[k] !== 0) {
                                if (a[k][k] < 0) {
                                    s[k] = -s[k];
                                }
                                for (i = k; i < m; i++) {
                                    a[i][k] /= s[k];
                                }
                                a[k][k] += 1;
                            }
                            s[k] = -s[k];
                        }

                        for (j = k + 1; j < n; j++) {
                            if ((k < nct) && (s[k] !== 0)) {
                                t = 0;
                                for (i = k; i < m; i++) {
                                    t += a[i][k] * a[i][j];
                                }
                                t = -t / a[k][k];
                                for (i = k; i < m; i++) {
                                    a[i][j] += t * a[i][k];
                                }
                            }
                            e[j] = a[k][j];
                        }

                        if (wantu && (k < nct)) {
                            for (i = k; i < m; i++) {
                                U[i][k] = a[i][k];
                            }
                        }

                        if (k < nrt) {
                            e[k] = 0;
                            for (i = k + 1; i < n; i++) {
                                e[k] = hypotenuse$4(e[k], e[i]);
                            }
                            if (e[k] !== 0) {
                                if (e[k + 1] < 0) {
                                    e[k] = 0 - e[k];
                                }
                                for (i = k + 1; i < n; i++) {
                                    e[i] /= e[k];
                                }
                                e[k + 1] += 1;
                            }
                            e[k] = -e[k];
                            if ((k + 1 < m) && (e[k] !== 0)) {
                                for (i = k + 1; i < m; i++) {
                                    work[i] = 0;
                                }
                                for (j = k + 1; j < n; j++) {
                                    for (i = k + 1; i < m; i++) {
                                        work[i] += e[j] * a[i][j];
                                    }
                                }
                                for (j = k + 1; j < n; j++) {
                                    t = -e[j] / e[k + 1];
                                    for (i = k + 1; i < m; i++) {
                                        a[i][j] += t * work[i];
                                    }
                                }
                            }
                            if (wantv) {
                                for (i = k + 1; i < n; i++) {
                                    V[i][k] = e[i];
                                }
                            }
                        }
                    }

                    p = Math.min(n, m + 1);
                    if (nct < n) {
                        s[nct] = a[nct][nct];
                    }
                    if (m < p) {
                        s[p - 1] = 0;
                    }
                    if (nrt + 1 < p) {
                        e[nrt] = a[nrt][p - 1];
                    }
                    e[p - 1] = 0;

                    if (wantu) {
                        for (j = nct; j < nu; j++) {
                            for (i = 0; i < m; i++) {
                                U[i][j] = 0;
                            }
                            U[j][j] = 1;
                        }
                        for (k = nct - 1; k >= 0; k--) {
                            if (s[k] !== 0) {
                                for (j = k + 1; j < nu; j++) {
                                    t = 0;
                                    for (i = k; i < m; i++) {
                                        t += U[i][k] * U[i][j];
                                    }
                                    t = -t / U[k][k];
                                    for (i = k; i < m; i++) {
                                        U[i][j] += t * U[i][k];
                                    }
                                }
                                for (i = k; i < m; i++) {
                                    U[i][k] = -U[i][k];
                                }
                                U[k][k] = 1 + U[k][k];
                                for (i = 0; i < k - 1; i++) {
                                    U[i][k] = 0;
                                }
                            } else {
                                for (i = 0; i < m; i++) {
                                    U[i][k] = 0;
                                }
                                U[k][k] = 1;
                            }
                        }
                    }

                    if (wantv) {
                        for (k = n - 1; k >= 0; k--) {
                            if ((k < nrt) && (e[k] !== 0)) {
                                for (j = k + 1; j < n; j++) {
                                    t = 0;
                                    for (i = k + 1; i < n; i++) {
                                        t += V[i][k] * V[i][j];
                                    }
                                    t = -t / V[k + 1][k];
                                    for (i = k + 1; i < n; i++) {
                                        V[i][j] += t * V[i][k];
                                    }
                                }
                            }
                            for (i = 0; i < n; i++) {
                                V[i][k] = 0;
                            }
                            V[k][k] = 1;
                        }
                    }

                    var pp = p - 1;
                    var eps = Number.EPSILON;
                    while (p > 0) {
                        for (k = p - 2; k >= -1; k--) {
                            if (k === -1) {
                                break;
                            }
                            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {
                                e[k] = 0;
                                break;
                            }
                        }
                        if (k === p - 2) {
                            kase = 4;
                        } else {
                            for (ks = p - 1; ks >= k; ks--) {
                                if (ks === k) {
                                    break;
                                }
                                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);
                                if (Math.abs(s[ks]) <= eps * t) {
                                    s[ks] = 0;
                                    break;
                                }
                            }
                            if (ks === k) {
                                kase = 3;
                            } else if (ks === p - 1) {
                                kase = 1;
                            } else {
                                kase = 2;
                                k = ks;
                            }
                        }

                        k++;

                        switch (kase) {
                            case 1: {
                                f = e[p - 2];
                                e[p - 2] = 0;
                                for (j = p - 2; j >= k; j--) {
                                    t = hypotenuse$4(s[j], f);
                                    cs = s[j] / t;
                                    sn = f / t;
                                    s[j] = t;
                                    if (j !== k) {
                                        f = -sn * e[j - 1];
                                        e[j - 1] = cs * e[j - 1];
                                    }
                                    if (wantv) {
                                        for (i = 0; i < n; i++) {
                                            t = cs * V[i][j] + sn * V[i][p - 1];
                                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];
                                            V[i][j] = t;
                                        }
                                    }
                                }
                                break;
                            }
                            case 2 : {
                                f = e[k - 1];
                                e[k - 1] = 0;
                                for (j = k; j < p; j++) {
                                    t = hypotenuse$4(s[j], f);
                                    cs = s[j] / t;
                                    sn = f / t;
                                    s[j] = t;
                                    f = -sn * e[j];
                                    e[j] = cs * e[j];
                                    if (wantu) {
                                        for (i = 0; i < m; i++) {
                                            t = cs * U[i][j] + sn * U[i][k - 1];
                                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];
                                            U[i][j] = t;
                                        }
                                    }
                                }
                                break;
                            }
                            case 3 : {
                                scale = Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2]), Math.abs(e[p - 2]), Math.abs(s[k]), Math.abs(e[k]));
                                sp = s[p - 1] / scale;
                                spm1 = s[p - 2] / scale;
                                epm1 = e[p - 2] / scale;
                                sk = s[k] / scale;
                                ek = e[k] / scale;
                                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;
                                c = (sp * epm1) * (sp * epm1);
                                shift = 0;
                                if ((b !== 0) || (c !== 0)) {
                                    shift = Math.sqrt(b * b + c);
                                    if (b < 0) {
                                        shift = -shift;
                                    }
                                    shift = c / (b + shift);
                                }
                                f = (sk + sp) * (sk - sp) + shift;
                                g = sk * ek;
                                for (j = k; j < p - 1; j++) {
                                    t = hypotenuse$4(f, g);
                                    cs = f / t;
                                    sn = g / t;
                                    if (j !== k) {
                                        e[j - 1] = t;
                                    }
                                    f = cs * s[j] + sn * e[j];
                                    e[j] = cs * e[j] - sn * s[j];
                                    g = sn * s[j + 1];
                                    s[j + 1] = cs * s[j + 1];
                                    if (wantv) {
                                        for (i = 0; i < n; i++) {
                                            t = cs * V[i][j] + sn * V[i][j + 1];
                                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];
                                            V[i][j] = t;
                                        }
                                    }
                                    t = hypotenuse$4(f, g);
                                    cs = f / t;
                                    sn = g / t;
                                    s[j] = t;
                                    f = cs * e[j] + sn * s[j + 1];
                                    s[j + 1] = -sn * e[j] + cs * s[j + 1];
                                    g = sn * e[j + 1];
                                    e[j + 1] = cs * e[j + 1];
                                    if (wantu && (j < m - 1)) {
                                        for (i = 0; i < m; i++) {
                                            t = cs * U[i][j] + sn * U[i][j + 1];
                                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];
                                            U[i][j] = t;
                                        }
                                    }
                                }
                                e[p - 2] = f;
                                break;
                            }
                            case 4: {
                                if (s[k] <= 0) {
                                    s[k] = (s[k] < 0 ? -s[k] : 0);
                                    if (wantv) {
                                        for (i = 0; i <= pp; i++) {
                                            V[i][k] = -V[i][k];
                                        }
                                    }
                                }
                                while (k < pp) {
                                    if (s[k] >= s[k + 1]) {
                                        break;
                                    }
                                    t = s[k];
                                    s[k] = s[k + 1];
                                    s[k + 1] = t;
                                    if (wantv && (k < n - 1)) {
                                        for (i = 0; i < n; i++) {
                                            t = V[i][k + 1];
                                            V[i][k + 1] = V[i][k];
                                            V[i][k] = t;
                                        }
                                    }
                                    if (wantu && (k < m - 1)) {
                                        for (i = 0; i < m; i++) {
                                            t = U[i][k + 1];
                                            U[i][k + 1] = U[i][k];
                                            U[i][k] = t;
                                        }
                                    }
                                    k++;
                                }
                                p--;
                                break;
                            }
                            // no default
                        }
                    }

                    if (swapped) {
                        var tmp = V;
                        V = U;
                        U = tmp;
                    }

                    this.m = m;
                    this.n = n;
                    this.s = s;
                    this.U = U;
                    this.V = V;
                }

                /**
                 * Solve a problem of least square (Ax=b) by using the SVD. Useful when A is singular. When A is not singular, it would be better to use qr.solve(value).
                 * Example : We search to approximate x, with A matrix shape m*n, x vector size n, b vector size m (m > n). We will use :
                 * var svd = SingularValueDecomposition(A);
                 * var x = svd.solve(b);
                 * @param {Matrix} value - Matrix 1D which is the vector b (in the equation Ax = b)
                 * @return {Matrix} - The vector x
                 */
                solve(value) {

                    var Y = value;
                    var e = this.threshold;
                    var scols = this.s.length;
                    var Ls = Matrix$a.zeros(scols, scols);
                    var i;

                    for (i = 0; i < scols; i++) {
                        if (Math.abs(this.s[i]) <= e) {
                            Ls[i][i] = 0;
                        } else {
                            Ls[i][i] = 1 / this.s[i];
                        }
                    }

                    var U = this.U;
                    var V = this.rightSingularVectors;

                    var VL = V.mmul(Ls);
                    var vrows = V.rows;
                    var urows = U.length;
                    var VLU = Matrix$a.zeros(vrows, urows);
                    var j, k, sum;

                    for (i = 0; i < vrows; i++) {
                        for (j = 0; j < urows; j++) {
                            sum = 0;
                            for (k = 0; k < scols; k++) {
                                sum += VL[i][k] * U[j][k];
                            }
                            VLU[i][j] = sum;
                        }
                    }

                    return VLU.mmul(Y);
                }

                /**
                 *
                 * @param {Array<number>} value
                 * @return {Matrix}
                 */
                solveForDiagonal(value) {
                    return this.solve(Matrix$a.diag(value));
                }

                /**
                 * Get the inverse of the matrix. We compute the inverse of a matrix using SVD when this matrix is singular or ill-conditioned. Example :
                 * var svd = SingularValueDecomposition(A);
                 * var inverseA = svd.inverse();
                 * @return {Matrix} - The approximation of the inverse of the matrix
                 */
                inverse() {
                    var V = this.V;
                    var e = this.threshold;
                    var vrows = V.length;
                    var vcols = V[0].length;
                    var X = new Matrix$a(vrows, this.s.length);
                    var i, j;

                    for (i = 0; i < vrows; i++) {
                        for (j = 0; j < vcols; j++) {
                            if (Math.abs(this.s[j]) > e) {
                                X[i][j] = V[i][j] / this.s[j];
                            } else {
                                X[i][j] = 0;
                            }
                        }
                    }

                    var U = this.U;

                    var urows = U.length;
                    var ucols = U[0].length;
                    var Y = new Matrix$a(vrows, urows);
                    var k, sum;

                    for (i = 0; i < vrows; i++) {
                        for (j = 0; j < urows; j++) {
                            sum = 0;
                            for (k = 0; k < ucols; k++) {
                                sum += X[i][k] * U[j][k];
                            }
                            Y[i][j] = sum;
                        }
                    }

                    return Y;
                }

                /**
                 *
                 * @return {number}
                 */
                get condition() {
                    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];
                }

                /**
                 *
                 * @return {number}
                 */
                get norm2() {
                    return this.s[0];
                }

                /**
                 *
                 * @return {number}
                 */
                get rank() {
                    var tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;
                    var r = 0;
                    var s = this.s;
                    for (var i = 0, ii = s.length; i < ii; i++) {
                        if (s[i] > tol) {
                            r++;
                        }
                    }
                    return r;
                }

                /**
                 *
                 * @return {Array<number>}
                 */
                get diagonal() {
                    return this.s;
                }

                /**
                 *
                 * @return {number}
                 */
                get threshold() {
                    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get leftSingularVectors() {
                    if (!Matrix$a.isMatrix(this.U)) {
                        this.U = new Matrix$a(this.U);
                    }
                    return this.U;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get rightSingularVectors() {
                    if (!Matrix$a.isMatrix(this.V)) {
                        this.V = new Matrix$a(this.V);
                    }
                    return this.V;
                }

                /**
                 *
                 * @return {Matrix}
                 */
                get diagonalMatrix() {
                    return Matrix$a.diag(this.s);
                }
            }

            /**
             * @private
             * Check that a row index is not out of bounds
             * @param {Matrix} matrix
             * @param {number} index
             * @param {boolean} [outer]
             */
            function checkRowIndex$4(matrix, index, outer) {
                var max = outer ? matrix.rows : matrix.rows - 1;
                if (index < 0 || index > max) {
                    throw new RangeError('Row index out of range');
                }
            }

            /**
             * @private
             * Check that a column index is not out of bounds
             * @param {Matrix} matrix
             * @param {number} index
             * @param {boolean} [outer]
             */
            function checkColumnIndex$4(matrix, index, outer) {
                var max = outer ? matrix.columns : matrix.columns - 1;
                if (index < 0 || index > max) {
                    throw new RangeError('Column index out of range');
                }
            }

            /**
             * @private
             * Check that the provided vector is an array with the right length
             * @param {Matrix} matrix
             * @param {Array|Matrix} vector
             * @return {Array}
             * @throws {RangeError}
             */
            function checkRowVector$4(matrix, vector) {
                if (vector.to1DArray) {
                    vector = vector.to1DArray();
                }
                if (vector.length !== matrix.columns) {
                    throw new RangeError('vector size must be the same as the number of columns');
                }
                return vector;
            }

            /**
             * @private
             * Check that the provided vector is an array with the right length
             * @param {Matrix} matrix
             * @param {Array|Matrix} vector
             * @return {Array}
             * @throws {RangeError}
             */
            function checkColumnVector$4(matrix, vector) {
                if (vector.to1DArray) {
                    vector = vector.to1DArray();
                }
                if (vector.length !== matrix.rows) {
                    throw new RangeError('vector size must be the same as the number of rows');
                }
                return vector;
            }

            function checkIndices$4(matrix, rowIndices, columnIndices) {
                return {
                    row: checkRowIndices$4(matrix, rowIndices),
                    column: checkColumnIndices$4(matrix, columnIndices)
                };
            }

            function checkRowIndices$4(matrix, rowIndices) {
                if (typeof rowIndices !== 'object') {
                    throw new TypeError('unexpected type for row indices');
                }

                var rowOut = rowIndices.some(r => {
                    return r < 0 || r >= matrix.rows;

                });

                if (rowOut) {
                    throw new RangeError('row indices are out of range');
                }

                if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);

                return rowIndices;
            }

            function checkColumnIndices$4(matrix, columnIndices) {
                if (typeof columnIndices !== 'object') {
                    throw new TypeError('unexpected type for column indices');
                }

                var columnOut = columnIndices.some(c => {
                    return c < 0 || c >= matrix.columns;
                });

                if (columnOut) {
                    throw new RangeError('column indices are out of range');
                }
                if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);

                return columnIndices;
            }

            function checkRange$4(matrix, startRow, endRow, startColumn, endColumn) {
                if (arguments.length !== 5) throw new TypeError('Invalid argument type');
                var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {
                    return typeof arg !== 'number';
                });
                if (notAllNumbers) throw new TypeError('Invalid argument type');
                if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {
                    throw new RangeError('Submatrix indices are out of range');
                }
            }

            function sumByRow$4(matrix) {
                var sum = Matrix$a.zeros(matrix.rows, 1);
                for (var i = 0; i < matrix.rows; ++i) {
                    for (var j = 0; j < matrix.columns; ++j) {
                        sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));
                    }
                }
                return sum;
            }

            function sumByColumn$4(matrix) {
                var sum = Matrix$a.zeros(1, matrix.columns);
                for (var i = 0; i < matrix.rows; ++i) {
                    for (var j = 0; j < matrix.columns; ++j) {
                        sum.set(0, j, sum.get(0, j) + matrix.get(i, j));
                    }
                }
                return sum;
            }

            function sumAll$4(matrix) {
                var v = 0;
                for (var i = 0; i < matrix.rows; i++) {
                    for (var j = 0; j < matrix.columns; j++) {
                        v += matrix.get(i, j);
                    }
                }
                return v;
            }

            class BaseView$4 extends AbstractMatrix$4() {
                constructor(matrix, rows, columns) {
                    super();
                    this.matrix = matrix;
                    this.rows = rows;
                    this.columns = columns;
                }

                static get [Symbol.species]() {
                    return Matrix$a;
                }
            }

            class MatrixTransposeView$4 extends BaseView$4 {
                constructor(matrix) {
                    super(matrix, matrix.columns, matrix.rows);
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(columnIndex, rowIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(columnIndex, rowIndex);
                }
            }

            class MatrixRowView$4 extends BaseView$4 {
                constructor(matrix, row) {
                    super(matrix, 1, matrix.columns);
                    this.row = row;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.row, columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.row, columnIndex);
                }
            }

            class MatrixSubView$4 extends BaseView$4 {
                constructor(matrix, startRow, endRow, startColumn, endColumn) {
                    checkRange$4(matrix, startRow, endRow, startColumn, endColumn);
                    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);
                    this.startRow = startRow;
                    this.startColumn = startColumn;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);
                }
            }

            class MatrixSelectionView$4 extends BaseView$4 {
                constructor(matrix, rowIndices, columnIndices) {
                    var indices = checkIndices$4(matrix, rowIndices, columnIndices);
                    super(matrix, indices.row.length, indices.column.length);
                    this.rowIndices = indices.row;
                    this.columnIndices = indices.column;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);
                }
            }

            class MatrixRowSelectionView$4 extends BaseView$4 {
                constructor(matrix, rowIndices) {
                    rowIndices = checkRowIndices$4(matrix, rowIndices);
                    super(matrix, rowIndices.length, matrix.columns);
                    this.rowIndices = rowIndices;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);
                }
            }

            class MatrixColumnSelectionView$4 extends BaseView$4 {
                constructor(matrix, columnIndices) {
                    columnIndices = checkColumnIndices$4(matrix, columnIndices);
                    super(matrix, matrix.rows, columnIndices.length);
                    this.columnIndices = columnIndices;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);
                }
            }

            class MatrixColumnView$4 extends BaseView$4 {
                constructor(matrix, column) {
                    super(matrix, matrix.rows, 1);
                    this.column = column;
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(rowIndex, this.column, value);
                    return this;
                }

                get(rowIndex) {
                    return this.matrix.get(rowIndex, this.column);
                }
            }

            class MatrixFlipRowView$4 extends BaseView$4 {
                constructor(matrix) {
                    super(matrix, matrix.rows, matrix.columns);
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);
                }
            }

            class MatrixFlipColumnView$4 extends BaseView$4 {
                constructor(matrix) {
                    super(matrix, matrix.rows, matrix.columns);
                }

                set(rowIndex, columnIndex, value) {
                    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);
                }
            }

            function AbstractMatrix$4(superCtor) {
                if (superCtor === undefined) superCtor = Object;

                /**
                 * Real matrix
                 * @class Matrix
                 * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,
                 * 2D array containing the data or Matrix instance to clone
                 * @param {number} [nColumns] - Number of columns of the new matrix
                 */
                class Matrix extends superCtor {
                    static get [Symbol.species]() {
                        return this;
                    }

                    /**
                     * Constructs a Matrix with the chosen dimensions from a 1D array
                     * @param {number} newRows - Number of rows
                     * @param {number} newColumns - Number of columns
                     * @param {Array} newData - A 1D array containing data for the matrix
                     * @return {Matrix} - The new matrix
                     */
                    static from1DArray(newRows, newColumns, newData) {
                        var length = newRows * newColumns;
                        if (length !== newData.length) {
                            throw new RangeError('Data length does not match given dimensions');
                        }
                        var newMatrix = new this(newRows, newColumns);
                        for (var row = 0; row < newRows; row++) {
                            for (var column = 0; column < newColumns; column++) {
                                newMatrix.set(row, column, newData[row * newColumns + column]);
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Creates a row vector, a matrix with only one row.
                     * @param {Array} newData - A 1D array containing data for the vector
                     * @return {Matrix} - The new matrix
                     */
                    static rowVector(newData) {
                        var vector = new this(1, newData.length);
                        for (var i = 0; i < newData.length; i++) {
                            vector.set(0, i, newData[i]);
                        }
                        return vector;
                    }

                    /**
                     * Creates a column vector, a matrix with only one column.
                     * @param {Array} newData - A 1D array containing data for the vector
                     * @return {Matrix} - The new matrix
                     */
                    static columnVector(newData) {
                        var vector = new this(newData.length, 1);
                        for (var i = 0; i < newData.length; i++) {
                            vector.set(i, 0, newData[i]);
                        }
                        return vector;
                    }

                    /**
                     * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                    static empty(rows, columns) {
                        return new this(rows, columns);
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be set to zero.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                    static zeros(rows, columns) {
                        return this.empty(rows, columns).fill(0);
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be set to one.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @return {Matrix} - The new matrix
                     */
                    static ones(rows, columns) {
                        return this.empty(rows, columns).fill(1);
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be randomly set.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @param {function} [rng=Math.random] - Random number generator
                     * @return {Matrix} The new matrix
                     */
                    static rand(rows, columns, rng) {
                        if (rng === undefined) rng = Math.random;
                        var matrix = this.empty(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                matrix.set(i, j, rng());
                            }
                        }
                        return matrix;
                    }

                    /**
                     * Creates a matrix with the given dimensions. Values will be random integers.
                     * @param {number} rows - Number of rows
                     * @param {number} columns - Number of columns
                     * @param {number} [maxValue=1000] - Maximum value
                     * @param {function} [rng=Math.random] - Random number generator
                     * @return {Matrix} The new matrix
                     */
                    static randInt(rows, columns, maxValue, rng) {
                        if (maxValue === undefined) maxValue = 1000;
                        if (rng === undefined) rng = Math.random;
                        var matrix = this.empty(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                var value = Math.floor(rng() * maxValue);
                                matrix.set(i, j, value);
                            }
                        }
                        return matrix;
                    }

                    /**
                     * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.
                     * @param {number} rows - Number of rows
                     * @param {number} [columns=rows] - Number of columns
                     * @param {number} [value=1] - Value to fill the diagonal with
                     * @return {Matrix} - The new identity matrix
                     */
                    static eye(rows, columns, value) {
                        if (columns === undefined) columns = rows;
                        if (value === undefined) value = 1;
                        var min = Math.min(rows, columns);
                        var matrix = this.zeros(rows, columns);
                        for (var i = 0; i < min; i++) {
                            matrix.set(i, i, value);
                        }
                        return matrix;
                    }

                    /**
                     * Creates a diagonal matrix based on the given array.
                     * @param {Array} data - Array containing the data for the diagonal
                     * @param {number} [rows] - Number of rows (Default: data.length)
                     * @param {number} [columns] - Number of columns (Default: rows)
                     * @return {Matrix} - The new diagonal matrix
                     */
                    static diag(data, rows, columns) {
                        var l = data.length;
                        if (rows === undefined) rows = l;
                        if (columns === undefined) columns = rows;
                        var min = Math.min(l, rows, columns);
                        var matrix = this.zeros(rows, columns);
                        for (var i = 0; i < min; i++) {
                            matrix.set(i, i, data[i]);
                        }
                        return matrix;
                    }

                    /**
                     * Returns a matrix whose elements are the minimum between matrix1 and matrix2
                     * @param {Matrix} matrix1
                     * @param {Matrix} matrix2
                     * @return {Matrix}
                     */
                    static min(matrix1, matrix2) {
                        matrix1 = this.checkMatrix(matrix1);
                        matrix2 = this.checkMatrix(matrix2);
                        var rows = matrix1.rows;
                        var columns = matrix1.columns;
                        var result = new this(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));
                            }
                        }
                        return result;
                    }

                    /**
                     * Returns a matrix whose elements are the maximum between matrix1 and matrix2
                     * @param {Matrix} matrix1
                     * @param {Matrix} matrix2
                     * @return {Matrix}
                     */
                    static max(matrix1, matrix2) {
                        matrix1 = this.checkMatrix(matrix1);
                        matrix2 = this.checkMatrix(matrix2);
                        var rows = matrix1.rows;
                        var columns = matrix1.columns;
                        var result = new this(rows, columns);
                        for (var i = 0; i < rows; i++) {
                            for (var j = 0; j < columns; j++) {
                                result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));
                            }
                        }
                        return result;
                    }

                    /**
                     * Check that the provided value is a Matrix and tries to instantiate one if not
                     * @param {*} value - The value to check
                     * @return {Matrix}
                     */
                    static checkMatrix(value) {
                        return Matrix.isMatrix(value) ? value : new this(value);
                    }

                    /**
                     * Returns true if the argument is a Matrix, false otherwise
                     * @param {*} value - The value to check
                     * @return {boolean}
                     */
                    static isMatrix(value) {
                        return (value != null) && (value.klass === 'Matrix');
                    }

                    /**
                     * @prop {number} size - The number of elements in the matrix.
                     */
                    get size() {
                        return this.rows * this.columns;
                    }

                    /**
                     * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.
                     * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)
                     * @return {Matrix} this
                     */
                    apply(callback) {
                        if (typeof callback !== 'function') {
                            throw new TypeError('callback must be a function');
                        }
                        var ii = this.rows;
                        var jj = this.columns;
                        for (var i = 0; i < ii; i++) {
                            for (var j = 0; j < jj; j++) {
                                callback.call(this, i, j);
                            }
                        }
                        return this;
                    }

                    /**
                     * Returns a new 1D array filled row by row with the matrix values
                     * @return {Array}
                     */
                    to1DArray() {
                        var array = new Array(this.size);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                array[i * this.columns + j] = this.get(i, j);
                            }
                        }
                        return array;
                    }

                    /**
                     * Returns a 2D array containing a copy of the data
                     * @return {Array}
                     */
                    to2DArray() {
                        var copy = new Array(this.rows);
                        for (var i = 0; i < this.rows; i++) {
                            copy[i] = new Array(this.columns);
                            for (var j = 0; j < this.columns; j++) {
                                copy[i][j] = this.get(i, j);
                            }
                        }
                        return copy;
                    }

                    /**
                     * @return {boolean} true if the matrix has one row
                     */
                    isRowVector() {
                        return this.rows === 1;
                    }

                    /**
                     * @return {boolean} true if the matrix has one column
                     */
                    isColumnVector() {
                        return this.columns === 1;
                    }

                    /**
                     * @return {boolean} true if the matrix has one row or one column
                     */
                    isVector() {
                        return (this.rows === 1) || (this.columns === 1);
                    }

                    /**
                     * @return {boolean} true if the matrix has the same number of rows and columns
                     */
                    isSquare() {
                        return this.rows === this.columns;
                    }

                    /**
                     * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal
                     */
                    isSymmetric() {
                        if (this.isSquare()) {
                            for (var i = 0; i < this.rows; i++) {
                                for (var j = 0; j <= i; j++) {
                                    if (this.get(i, j) !== this.get(j, i)) {
                                        return false;
                                    }
                                }
                            }
                            return true;
                        }
                        return false;
                    }

                    /**
                     * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1
                     * @abstract
                     * @param {number} rowIndex - Index of the row
                     * @param {number} columnIndex - Index of the column
                     * @param {number} value - The new value for the element
                     * @return {Matrix} this
                     */
                    set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars
                        throw new Error('set method is unimplemented');
                    }

                    /**
                     * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]
                     * @abstract
                     * @param {number} rowIndex - Index of the row
                     * @param {number} columnIndex - Index of the column
                     * @return {number}
                     */
                    get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars
                        throw new Error('get method is unimplemented');
                    }

                    /**
                     * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of
                     * rows of the matrix, and colRep times the number of columns of the matrix
                     * @param {number} rowRep - Number of times the rows should be repeated
                     * @param {number} colRep - Number of times the columns should be re
                     * @return {Matrix}
                     * @example
                     * var matrix = new Matrix([[1,2]]);
                     * matrix.repeat(2); // [[1,2],[1,2]]
                     */
                    repeat(rowRep, colRep) {
                        rowRep = rowRep || 1;
                        colRep = colRep || 1;
                        var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);
                        for (var i = 0; i < rowRep; i++) {
                            for (var j = 0; j < colRep; j++) {
                                matrix.setSubMatrix(this, this.rows * i, this.columns * j);
                            }
                        }
                        return matrix;
                    }

                    /**
                     * Fills the matrix with a given value. All elements will be set to this value.
                     * @param {number} value - New value
                     * @return {Matrix} this
                     */
                    fill(value) {
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, value);
                            }
                        }
                        return this;
                    }

                    /**
                     * Negates the matrix. All elements will be multiplied by (-1)
                     * @return {Matrix} this
                     */
                    neg() {
                        return this.mulS(-1);
                    }

                    /**
                     * Returns a new array from the given row index
                     * @param {number} index - Row index
                     * @return {Array}
                     */
                    getRow(index) {
                        checkRowIndex$4(this, index);
                        var row = new Array(this.columns);
                        for (var i = 0; i < this.columns; i++) {
                            row[i] = this.get(index, i);
                        }
                        return row;
                    }

                    /**
                     * Returns a new row vector from the given row index
                     * @param {number} index - Row index
                     * @return {Matrix}
                     */
                    getRowVector(index) {
                        return this.constructor.rowVector(this.getRow(index));
                    }

                    /**
                     * Sets a row at the given index
                     * @param {number} index - Row index
                     * @param {Array|Matrix} array - Array or vector
                     * @return {Matrix} this
                     */
                    setRow(index, array) {
                        checkRowIndex$4(this, index);
                        array = checkRowVector$4(this, array);
                        for (var i = 0; i < this.columns; i++) {
                            this.set(index, i, array[i]);
                        }
                        return this;
                    }

                    /**
                     * Swaps two rows
                     * @param {number} row1 - First row index
                     * @param {number} row2 - Second row index
                     * @return {Matrix} this
                     */
                    swapRows(row1, row2) {
                        checkRowIndex$4(this, row1);
                        checkRowIndex$4(this, row2);
                        for (var i = 0; i < this.columns; i++) {
                            var temp = this.get(row1, i);
                            this.set(row1, i, this.get(row2, i));
                            this.set(row2, i, temp);
                        }
                        return this;
                    }

                    /**
                     * Returns a new array from the given column index
                     * @param {number} index - Column index
                     * @return {Array}
                     */
                    getColumn(index) {
                        checkColumnIndex$4(this, index);
                        var column = new Array(this.rows);
                        for (var i = 0; i < this.rows; i++) {
                            column[i] = this.get(i, index);
                        }
                        return column;
                    }

                    /**
                     * Returns a new column vector from the given column index
                     * @param {number} index - Column index
                     * @return {Matrix}
                     */
                    getColumnVector(index) {
                        return this.constructor.columnVector(this.getColumn(index));
                    }

                    /**
                     * Sets a column at the given index
                     * @param {number} index - Column index
                     * @param {Array|Matrix} array - Array or vector
                     * @return {Matrix} this
                     */
                    setColumn(index, array) {
                        checkColumnIndex$4(this, index);
                        array = checkColumnVector$4(this, array);
                        for (var i = 0; i < this.rows; i++) {
                            this.set(i, index, array[i]);
                        }
                        return this;
                    }

                    /**
                     * Swaps two columns
                     * @param {number} column1 - First column index
                     * @param {number} column2 - Second column index
                     * @return {Matrix} this
                     */
                    swapColumns(column1, column2) {
                        checkColumnIndex$4(this, column1);
                        checkColumnIndex$4(this, column2);
                        for (var i = 0; i < this.rows; i++) {
                            var temp = this.get(i, column1);
                            this.set(i, column1, this.get(i, column2));
                            this.set(i, column2, temp);
                        }
                        return this;
                    }

                    /**
                     * Adds the values of a vector to each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    addRowVector(vector) {
                        vector = checkRowVector$4(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) + vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Subtracts the values of a vector from each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    subRowVector(vector) {
                        vector = checkRowVector$4(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) - vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a vector with each row
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    mulRowVector(vector) {
                        vector = checkRowVector$4(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) * vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Divides the values of each row by those of a vector
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    divRowVector(vector) {
                        vector = checkRowVector$4(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) / vector[j]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Adds the values of a vector to each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    addColumnVector(vector) {
                        vector = checkColumnVector$4(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) + vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Subtracts the values of a vector from each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    subColumnVector(vector) {
                        vector = checkColumnVector$4(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) - vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a vector with each column
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    mulColumnVector(vector) {
                        vector = checkColumnVector$4(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) * vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Divides the values of each column by those of a vector
                     * @param {Array|Matrix} vector - Array or vector
                     * @return {Matrix} this
                     */
                    divColumnVector(vector) {
                        vector = checkColumnVector$4(this, vector);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                this.set(i, j, this.get(i, j) / vector[i]);
                            }
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a row with a scalar
                     * @param {number} index - Row index
                     * @param {number} value
                     * @return {Matrix} this
                     */
                    mulRow(index, value) {
                        checkRowIndex$4(this, index);
                        for (var i = 0; i < this.columns; i++) {
                            this.set(index, i, this.get(index, i) * value);
                        }
                        return this;
                    }

                    /**
                     * Multiplies the values of a column with a scalar
                     * @param {number} index - Column index
                     * @param {number} value
                     * @return {Matrix} this
                     */
                    mulColumn(index, value) {
                        checkColumnIndex$4(this, index);
                        for (var i = 0; i < this.rows; i++) {
                            this.set(i, index, this.get(i, index) * value);
                        }
                        return this;
                    }

                    /**
                     * Returns the maximum value of the matrix
                     * @return {number}
                     */
                    max() {
                        var v = this.get(0, 0);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) > v) {
                                    v = this.get(i, j);
                                }
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value
                     * @return {Array}
                     */
                    maxIndex() {
                        var v = this.get(0, 0);
                        var idx = [0, 0];
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) > v) {
                                    v = this.get(i, j);
                                    idx[0] = i;
                                    idx[1] = j;
                                }
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the minimum value of the matrix
                     * @return {number}
                     */
                    min() {
                        var v = this.get(0, 0);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) < v) {
                                    v = this.get(i, j);
                                }
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the minimum value
                     * @return {Array}
                     */
                    minIndex() {
                        var v = this.get(0, 0);
                        var idx = [0, 0];
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                if (this.get(i, j) < v) {
                                    v = this.get(i, j);
                                    idx[0] = i;
                                    idx[1] = j;
                                }
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the maximum value of one row
                     * @param {number} row - Row index
                     * @return {number}
                     */
                    maxRow(row) {
                        checkRowIndex$4(this, row);
                        var v = this.get(row, 0);
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) > v) {
                                v = this.get(row, i);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value of one row
                     * @param {number} row - Row index
                     * @return {Array}
                     */
                    maxRowIndex(row) {
                        checkRowIndex$4(this, row);
                        var v = this.get(row, 0);
                        var idx = [row, 0];
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) > v) {
                                v = this.get(row, i);
                                idx[1] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the minimum value of one row
                     * @param {number} row - Row index
                     * @return {number}
                     */
                    minRow(row) {
                        checkRowIndex$4(this, row);
                        var v = this.get(row, 0);
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) < v) {
                                v = this.get(row, i);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value of one row
                     * @param {number} row - Row index
                     * @return {Array}
                     */
                    minRowIndex(row) {
                        checkRowIndex$4(this, row);
                        var v = this.get(row, 0);
                        var idx = [row, 0];
                        for (var i = 1; i < this.columns; i++) {
                            if (this.get(row, i) < v) {
                                v = this.get(row, i);
                                idx[1] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the maximum value of one column
                     * @param {number} column - Column index
                     * @return {number}
                     */
                    maxColumn(column) {
                        checkColumnIndex$4(this, column);
                        var v = this.get(0, column);
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) > v) {
                                v = this.get(i, column);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the maximum value of one column
                     * @param {number} column - Column index
                     * @return {Array}
                     */
                    maxColumnIndex(column) {
                        checkColumnIndex$4(this, column);
                        var v = this.get(0, column);
                        var idx = [0, column];
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) > v) {
                                v = this.get(i, column);
                                idx[0] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns the minimum value of one column
                     * @param {number} column - Column index
                     * @return {number}
                     */
                    minColumn(column) {
                        checkColumnIndex$4(this, column);
                        var v = this.get(0, column);
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) < v) {
                                v = this.get(i, column);
                            }
                        }
                        return v;
                    }

                    /**
                     * Returns the index of the minimum value of one column
                     * @param {number} column - Column index
                     * @return {Array}
                     */
                    minColumnIndex(column) {
                        checkColumnIndex$4(this, column);
                        var v = this.get(0, column);
                        var idx = [0, column];
                        for (var i = 1; i < this.rows; i++) {
                            if (this.get(i, column) < v) {
                                v = this.get(i, column);
                                idx[0] = i;
                            }
                        }
                        return idx;
                    }

                    /**
                     * Returns an array containing the diagonal values of the matrix
                     * @return {Array}
                     */
                    diag() {
                        var min = Math.min(this.rows, this.columns);
                        var diag = new Array(min);
                        for (var i = 0; i < min; i++) {
                            diag[i] = this.get(i, i);
                        }
                        return diag;
                    }

                    /**
                     * Returns the sum by the argument given, if no argument given,
                     * it returns the sum of all elements of the matrix.
                     * @param {string} by - sum by 'row' or 'column'.
                     * @return {Matrix|number}
                     */
                    sum(by) {
                        switch (by) {
                            case 'row':
                                return sumByRow$4(this);
                            case 'column':
                                return sumByColumn$4(this);
                            default:
                                return sumAll$4(this);
                        }
                    }

                    /**
                     * Returns the mean of all elements of the matrix
                     * @return {number}
                     */
                    mean() {
                        return this.sum() / this.size;
                    }

                    /**
                     * Returns the product of all elements of the matrix
                     * @return {number}
                     */
                    prod() {
                        var prod = 1;
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                prod *= this.get(i, j);
                            }
                        }
                        return prod;
                    }

                    /**
                     * Returns the norm of a matrix.
                     * @param {string} type - "frobenius" (default) or "max" return resp. the Frobenius norm and the max norm.
                     * @return {number}
                     */
                    norm(type = 'frobenius') {
                        var result = 0;
                        if (type === 'max') {
                            return this.max();
                        } else if (type === 'frobenius') {
                            for (var i = 0; i < this.rows; i++) {
                                for (var j = 0; j < this.columns; j++) {
                                    result = result + this.get(i, j) * this.get(i, j);
                                }
                            }
                            return Math.sqrt(result);
                        } else {
                            throw new RangeError(`unknown norm type: ${type}`);
                        }
                    }

                    /**
                     * Computes the cumulative sum of the matrix elements (in place, row by row)
                     * @return {Matrix} this
                     */
                    cumulativeSum() {
                        var sum = 0;
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                sum += this.get(i, j);
                                this.set(i, j, sum);
                            }
                        }
                        return this;
                    }

                    /**
                     * Computes the dot (scalar) product between the matrix and another
                     * @param {Matrix} vector2 vector
                     * @return {number}
                     */
                    dot(vector2) {
                        if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();
                        var vector1 = this.to1DArray();
                        if (vector1.length !== vector2.length) {
                            throw new RangeError('vectors do not have the same size');
                        }
                        var dot = 0;
                        for (var i = 0; i < vector1.length; i++) {
                            dot += vector1[i] * vector2[i];
                        }
                        return dot;
                    }

                    /**
                     * Returns the matrix product between this and other
                     * @param {Matrix} other
                     * @return {Matrix}
                     */
                    mmul(other) {
                        other = this.constructor.checkMatrix(other);
                        if (this.columns !== other.rows) {
                            // eslint-disable-next-line no-console
                            console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');
                        }

                        var m = this.rows;
                        var n = this.columns;
                        var p = other.columns;

                        var result = new this.constructor[Symbol.species](m, p);

                        var Bcolj = new Array(n);
                        for (var j = 0; j < p; j++) {
                            for (var k = 0; k < n; k++) {
                                Bcolj[k] = other.get(k, j);
                            }

                            for (var i = 0; i < m; i++) {
                                var s = 0;
                                for (k = 0; k < n; k++) {
                                    s += this.get(i, k) * Bcolj[k];
                                }

                                result.set(i, j, s);
                            }
                        }
                        return result;
                    }

                    strassen2x2(other) {
                        var result = new this.constructor[Symbol.species](2, 2);
                        const a11 = this.get(0, 0);
                        const b11 = other.get(0, 0);
                        const a12 = this.get(0, 1);
                        const b12 = other.get(0, 1);
                        const a21 = this.get(1, 0);
                        const b21 = other.get(1, 0);
                        const a22 = this.get(1, 1);
                        const b22 = other.get(1, 1);

                        // Compute intermediate values.
                        const m1 = (a11 + a22) * (b11 + b22);
                        const m2 = (a21 + a22) * b11;
                        const m3 = a11 * (b12 - b22);
                        const m4 = a22 * (b21 - b11);
                        const m5 = (a11 + a12) * b22;
                        const m6 = (a21 - a11) * (b11 + b12);
                        const m7 = (a12 - a22) * (b21 + b22);

                        // Combine intermediate values into the output.
                        const c00 = m1 + m4 - m5 + m7;
                        const c01 = m3 + m5;
                        const c10 = m2 + m4;
                        const c11 = m1 - m2 + m3 + m6;

                        result.set(0, 0, c00);
                        result.set(0, 1, c01);
                        result.set(1, 0, c10);
                        result.set(1, 1, c11);
                        return result;
                    }

                    strassen3x3(other) {
                        var result = new this.constructor[Symbol.species](3, 3);

                        const a00 = this.get(0, 0);
                        const a01 = this.get(0, 1);
                        const a02 = this.get(0, 2);
                        const a10 = this.get(1, 0);
                        const a11 = this.get(1, 1);
                        const a12 = this.get(1, 2);
                        const a20 = this.get(2, 0);
                        const a21 = this.get(2, 1);
                        const a22 = this.get(2, 2);

                        const b00 = other.get(0, 0);
                        const b01 = other.get(0, 1);
                        const b02 = other.get(0, 2);
                        const b10 = other.get(1, 0);
                        const b11 = other.get(1, 1);
                        const b12 = other.get(1, 2);
                        const b20 = other.get(2, 0);
                        const b21 = other.get(2, 1);
                        const b22 = other.get(2, 2);

                        const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;
                        const m2 = (a00 - a10) * (-b01 + b11);
                        const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);
                        const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);
                        const m5 = (a10 + a11) * (-b00 + b01);
                        const m6 = a00 * b00;
                        const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);
                        const m8 = (-a00 + a20) * (b02 - b12);
                        const m9 = (a20 + a21) * (-b00 + b02);
                        const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;
                        const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);
                        const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);
                        const m13 = (a02 - a22) * (b11 - b21);
                        const m14 = a02 * b20;
                        const m15 = (a21 + a22) * (-b20 + b21);
                        const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);
                        const m17 = (a02 - a12) * (b12 - b22);
                        const m18 = (a11 + a12) * (-b20 + b22);
                        const m19 = a01 * b10;
                        const m20 = a12 * b21;
                        const m21 = a10 * b02;
                        const m22 = a20 * b01;
                        const m23 = a22 * b22;

                        const c00 = m6 + m14 + m19;
                        const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;
                        const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;
                        const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;
                        const c11 = m2 + m4 + m5 + m6 + m20;
                        const c12 = m14 + m16 + m17 + m18 + m21;
                        const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;
                        const c21 = m12 + m13 + m14 + m15 + m22;
                        const c22 = m6 + m7 + m8 + m9 + m23;

                        result.set(0, 0, c00);
                        result.set(0, 1, c01);
                        result.set(0, 2, c02);
                        result.set(1, 0, c10);
                        result.set(1, 1, c11);
                        result.set(1, 2, c12);
                        result.set(2, 0, c20);
                        result.set(2, 1, c21);
                        result.set(2, 2, c22);
                        return result;
                    }

                    /**
                     * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.
                     * @param {Matrix} y
                     * @return {Matrix}
                     */
                    mmulStrassen(y) {
                        var x = this.clone();
                        var r1 = x.rows;
                        var c1 = x.columns;
                        var r2 = y.rows;
                        var c2 = y.columns;
                        if (c1 !== r2) {
                            // eslint-disable-next-line no-console
                            console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);
                        }

                        // Put a matrix into the top left of a matrix of zeros.
                        // `rows` and `cols` are the dimensions of the output matrix.
                        function embed(mat, rows, cols) {
                            var r = mat.rows;
                            var c = mat.columns;
                            if ((r === rows) && (c === cols)) {
                                return mat;
                            } else {
                                var resultat = Matrix.zeros(rows, cols);
                                resultat = resultat.setSubMatrix(mat, 0, 0);
                                return resultat;
                            }
                        }


                        // Make sure both matrices are the same size.
                        // This is exclusively for simplicity:
                        // this algorithm can be implemented with matrices of different sizes.

                        var r = Math.max(r1, r2);
                        var c = Math.max(c1, c2);
                        x = embed(x, r, c);
                        y = embed(y, r, c);

                        // Our recursive multiplication function.
                        function blockMult(a, b, rows, cols) {
                            // For small matrices, resort to naive multiplication.
                            if (rows <= 512 || cols <= 512) {
                                return a.mmul(b); // a is equivalent to this
                            }

                            // Apply dynamic padding.
                            if ((rows % 2 === 1) && (cols % 2 === 1)) {
                                a = embed(a, rows + 1, cols + 1);
                                b = embed(b, rows + 1, cols + 1);
                            } else if (rows % 2 === 1) {
                                a = embed(a, rows + 1, cols);
                                b = embed(b, rows + 1, cols);
                            } else if (cols % 2 === 1) {
                                a = embed(a, rows, cols + 1);
                                b = embed(b, rows, cols + 1);
                            }

                            var halfRows = parseInt(a.rows / 2);
                            var halfCols = parseInt(a.columns / 2);
                            // Subdivide input matrices.
                            var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);
                            var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);

                            var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);
                            var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);

                            var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);
                            var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);

                            var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);
                            var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);

                            // Compute intermediate values.
                            var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);
                            var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);
                            var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);
                            var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);
                            var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);
                            var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);
                            var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);

                            // Combine intermediate values into the output.
                            var c11 = Matrix.add(m1, m4);
                            c11.sub(m5);
                            c11.add(m7);
                            var c12 = Matrix.add(m3, m5);
                            var c21 = Matrix.add(m2, m4);
                            var c22 = Matrix.sub(m1, m2);
                            c22.add(m3);
                            c22.add(m6);

                            //Crop output to the desired size (undo dynamic padding).
                            var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);
                            resultat = resultat.setSubMatrix(c11, 0, 0);
                            resultat = resultat.setSubMatrix(c12, c11.rows, 0);
                            resultat = resultat.setSubMatrix(c21, 0, c11.columns);
                            resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);
                            return resultat.subMatrix(0, rows - 1, 0, cols - 1);
                        }
                        return blockMult(x, y, r, c);
                    }

                    /**
                     * Returns a row-by-row scaled matrix
                     * @param {number} [min=0] - Minimum scaled value
                     * @param {number} [max=1] - Maximum scaled value
                     * @return {Matrix} - The scaled matrix
                     */
                    scaleRows(min, max) {
                        min = min === undefined ? 0 : min;
                        max = max === undefined ? 1 : max;
                        if (min >= max) {
                            throw new RangeError('min should be strictly smaller than max');
                        }
                        var newMatrix = this.constructor.empty(this.rows, this.columns);
                        for (var i = 0; i < this.rows; i++) {
                            var scaled = rescale(this.getRow(i), {min, max});
                            newMatrix.setRow(i, scaled);
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns a new column-by-column scaled matrix
                     * @param {number} [min=0] - Minimum scaled value
                     * @param {number} [max=1] - Maximum scaled value
                     * @return {Matrix} - The new scaled matrix
                     * @example
                     * var matrix = new Matrix([[1,2],[-1,0]]);
                     * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]
                     */
                    scaleColumns(min, max) {
                        min = min === undefined ? 0 : min;
                        max = max === undefined ? 1 : max;
                        if (min >= max) {
                            throw new RangeError('min should be strictly smaller than max');
                        }
                        var newMatrix = this.constructor.empty(this.rows, this.columns);
                        for (var i = 0; i < this.columns; i++) {
                            var scaled = rescale(this.getColumn(i), {
                                min: min,
                                max: max
                            });
                            newMatrix.setColumn(i, scaled);
                        }
                        return newMatrix;
                    }


                    /**
                     * Returns the Kronecker product (also known as tensor product) between this and other
                     * See https://en.wikipedia.org/wiki/Kronecker_product
                     * @param {Matrix} other
                     * @return {Matrix}
                     */
                    kroneckerProduct(other) {
                        other = this.constructor.checkMatrix(other);

                        var m = this.rows;
                        var n = this.columns;
                        var p = other.rows;
                        var q = other.columns;

                        var result = new this.constructor[Symbol.species](m * p, n * q);
                        for (var i = 0; i < m; i++) {
                            for (var j = 0; j < n; j++) {
                                for (var k = 0; k < p; k++) {
                                    for (var l = 0; l < q; l++) {
                                        result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);
                                    }
                                }
                            }
                        }
                        return result;
                    }

                    /**
                     * Transposes the matrix and returns a new one containing the result
                     * @return {Matrix}
                     */
                    transpose() {
                        var result = new this.constructor[Symbol.species](this.columns, this.rows);
                        for (var i = 0; i < this.rows; i++) {
                            for (var j = 0; j < this.columns; j++) {
                                result.set(j, i, this.get(i, j));
                            }
                        }
                        return result;
                    }

                    /**
                     * Sorts the rows (in place)
                     * @param {function} compareFunction - usual Array.prototype.sort comparison function
                     * @return {Matrix} this
                     */
                    sortRows(compareFunction) {
                        if (compareFunction === undefined) compareFunction = compareNumbers;
                        for (var i = 0; i < this.rows; i++) {
                            this.setRow(i, this.getRow(i).sort(compareFunction));
                        }
                        return this;
                    }

                    /**
                     * Sorts the columns (in place)
                     * @param {function} compareFunction - usual Array.prototype.sort comparison function
                     * @return {Matrix} this
                     */
                    sortColumns(compareFunction) {
                        if (compareFunction === undefined) compareFunction = compareNumbers;
                        for (var i = 0; i < this.columns; i++) {
                            this.setColumn(i, this.getColumn(i).sort(compareFunction));
                        }
                        return this;
                    }

                    /**
                     * Returns a subset of the matrix
                     * @param {number} startRow - First row index
                     * @param {number} endRow - Last row index
                     * @param {number} startColumn - First column index
                     * @param {number} endColumn - Last column index
                     * @return {Matrix}
                     */
                    subMatrix(startRow, endRow, startColumn, endColumn) {
                        checkRange$4(this, startRow, endRow, startColumn, endColumn);
                        var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);
                        for (var i = startRow; i <= endRow; i++) {
                            for (var j = startColumn; j <= endColumn; j++) {
                                newMatrix[i - startRow][j - startColumn] = this.get(i, j);
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns a subset of the matrix based on an array of row indices
                     * @param {Array} indices - Array containing the row indices
                     * @param {number} [startColumn = 0] - First column index
                     * @param {number} [endColumn = this.columns-1] - Last column index
                     * @return {Matrix}
                     */
                    subMatrixRow(indices, startColumn, endColumn) {
                        if (startColumn === undefined) startColumn = 0;
                        if (endColumn === undefined) endColumn = this.columns - 1;
                        if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {
                            throw new RangeError('Argument out of range');
                        }

                        var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);
                        for (var i = 0; i < indices.length; i++) {
                            for (var j = startColumn; j <= endColumn; j++) {
                                if (indices[i] < 0 || indices[i] >= this.rows) {
                                    throw new RangeError('Row index out of range: ' + indices[i]);
                                }
                                newMatrix.set(i, j - startColumn, this.get(indices[i], j));
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns a subset of the matrix based on an array of column indices
                     * @param {Array} indices - Array containing the column indices
                     * @param {number} [startRow = 0] - First row index
                     * @param {number} [endRow = this.rows-1] - Last row index
                     * @return {Matrix}
                     */
                    subMatrixColumn(indices, startRow, endRow) {
                        if (startRow === undefined) startRow = 0;
                        if (endRow === undefined) endRow = this.rows - 1;
                        if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {
                            throw new RangeError('Argument out of range');
                        }

                        var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);
                        for (var i = 0; i < indices.length; i++) {
                            for (var j = startRow; j <= endRow; j++) {
                                if (indices[i] < 0 || indices[i] >= this.columns) {
                                    throw new RangeError('Column index out of range: ' + indices[i]);
                                }
                                newMatrix.set(j - startRow, i, this.get(j, indices[i]));
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Set a part of the matrix to the given sub-matrix
                     * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.
                     * @param {number} startRow - The index of the first row to set
                     * @param {number} startColumn - The index of the first column to set
                     * @return {Matrix}
                     */
                    setSubMatrix(matrix, startRow, startColumn) {
                        matrix = this.constructor.checkMatrix(matrix);
                        var endRow = startRow + matrix.rows - 1;
                        var endColumn = startColumn + matrix.columns - 1;
                        checkRange$4(this, startRow, endRow, startColumn, endColumn);
                        for (var i = 0; i < matrix.rows; i++) {
                            for (var j = 0; j < matrix.columns; j++) {
                                this[startRow + i][startColumn + j] = matrix.get(i, j);
                            }
                        }
                        return this;
                    }

                    /**
                     * Return a new matrix based on a selection of rows and columns
                     * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.
                     * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.
                     * @return {Matrix} The new matrix
                     */
                    selection(rowIndices, columnIndices) {
                        var indices = checkIndices$4(this, rowIndices, columnIndices);
                        var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);
                        for (var i = 0; i < indices.row.length; i++) {
                            var rowIndex = indices.row[i];
                            for (var j = 0; j < indices.column.length; j++) {
                                var columnIndex = indices.column[j];
                                newMatrix[i][j] = this.get(rowIndex, columnIndex);
                            }
                        }
                        return newMatrix;
                    }

                    /**
                     * Returns the trace of the matrix (sum of the diagonal elements)
                     * @return {number}
                     */
                    trace() {
                        var min = Math.min(this.rows, this.columns);
                        var trace = 0;
                        for (var i = 0; i < min; i++) {
                            trace += this.get(i, i);
                        }
                        return trace;
                    }

                    /*
                     Matrix views
                     */

                    /**
                     * Returns a view of the transposition of the matrix
                     * @return {MatrixTransposeView}
                     */
                    transposeView() {
                        return new MatrixTransposeView$4(this);
                    }

                    /**
                     * Returns a view of the row vector with the given index
                     * @param {number} row - row index of the vector
                     * @return {MatrixRowView}
                     */
                    rowView(row) {
                        checkRowIndex$4(this, row);
                        return new MatrixRowView$4(this, row);
                    }

                    /**
                     * Returns a view of the column vector with the given index
                     * @param {number} column - column index of the vector
                     * @return {MatrixColumnView}
                     */
                    columnView(column) {
                        checkColumnIndex$4(this, column);
                        return new MatrixColumnView$4(this, column);
                    }

                    /**
                     * Returns a view of the matrix flipped in the row axis
                     * @return {MatrixFlipRowView}
                     */
                    flipRowView() {
                        return new MatrixFlipRowView$4(this);
                    }

                    /**
                     * Returns a view of the matrix flipped in the column axis
                     * @return {MatrixFlipColumnView}
                     */
                    flipColumnView() {
                        return new MatrixFlipColumnView$4(this);
                    }

                    /**
                     * Returns a view of a submatrix giving the index boundaries
                     * @param {number} startRow - first row index of the submatrix
                     * @param {number} endRow - last row index of the submatrix
                     * @param {number} startColumn - first column index of the submatrix
                     * @param {number} endColumn - last column index of the submatrix
                     * @return {MatrixSubView}
                     */
                    subMatrixView(startRow, endRow, startColumn, endColumn) {
                        return new MatrixSubView$4(this, startRow, endRow, startColumn, endColumn);
                    }

                    /**
                     * Returns a view of the cross of the row indices and the column indices
                     * @example
                     * // resulting vector is [[2], [2]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])
                     * @param {Array<number>} rowIndices
                     * @param {Array<number>} columnIndices
                     * @return {MatrixSelectionView}
                     */
                    selectionView(rowIndices, columnIndices) {
                        return new MatrixSelectionView$4(this, rowIndices, columnIndices);
                    }

                    /**
                     * Returns a view of the row indices
                     * @example
                     * // resulting vector is [[1,2,3], [1,2,3]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).rowSelectionView([0, 0])
                     * @param {Array<number>} rowIndices
                     * @return {MatrixRowSelectionView}
                     */
                    rowSelectionView(rowIndices) {
                        return new MatrixRowSelectionView$4(this, rowIndices);
                    }

                    /**
                     * Returns a view of the column indices
                     * @example
                     * // resulting vector is [[2, 2], [5, 5]]
                     * var matrix = new Matrix([[1,2,3], [4,5,6]]).columnSelectionView([1, 1])
                     * @param {Array<number>} columnIndices
                     * @return {MatrixColumnSelectionView}
                     */
                    columnSelectionView(columnIndices) {
                        return new MatrixColumnSelectionView$4(this, columnIndices);
                    }


                    /**
                    * Calculates and returns the determinant of a matrix as a Number
                    * @example
                    *   new Matrix([[1,2,3], [4,5,6]]).det()
                    * @return {number}
                    */
                    det() {
                        if (this.isSquare()) {
                            var a, b, c, d;
                            if (this.columns === 2) {
                                // 2 x 2 matrix
                                a = this.get(0, 0);
                                b = this.get(0, 1);
                                c = this.get(1, 0);
                                d = this.get(1, 1);

                                return a * d - (b * c);
                            } else if (this.columns === 3) {
                                // 3 x 3 matrix
                                var subMatrix0, subMatrix1, subMatrix2;
                                subMatrix0 = this.selectionView([1, 2], [1, 2]);
                                subMatrix1 = this.selectionView([1, 2], [0, 2]);
                                subMatrix2 = this.selectionView([1, 2], [0, 1]);
                                a = this.get(0, 0);
                                b = this.get(0, 1);
                                c = this.get(0, 2);

                                return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();
                            } else {
                                // general purpose determinant using the LU decomposition
                                return new LuDecomposition$$1(this).determinant;
                            }

                        } else {
                            throw Error('Determinant can only be calculated for a square matrix.');
                        }
                    }

                    /**
                     * Returns inverse of a matrix if it exists or the pseudoinverse
                     * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)
                     * @return {Matrix} the (pseudo)inverted matrix.
                     */
                    pseudoInverse(threshold) {
                        if (threshold === undefined) threshold = Number.EPSILON;
                        var svdSolution = new SingularValueDecomposition$$1(this, {autoTranspose: true});

                        var U = svdSolution.leftSingularVectors;
                        var V = svdSolution.rightSingularVectors;
                        var s = svdSolution.diagonal;

                        for (var i = 0; i < s.length; i++) {
                            if (Math.abs(s[i]) > threshold) {
                                s[i] = 1.0 / s[i];
                            } else {
                                s[i] = 0.0;
                            }
                        }

                        // convert list to diagonal
                        s = this.constructor[Symbol.species].diag(s);
                        return V.mmul(s.mmul(U.transposeView()));
                    }

                    /**
                     * Creates an exact and independent copy of the matrix
                     * @return {Matrix}
                     */
                    clone() {
                        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);
                        for (var row = 0; row < this.rows; row++) {
                            for (var column = 0; column < this.columns; column++) {
                                newMatrix.set(row, column, this.get(row, column));
                            }
                        }
                        return newMatrix;
                    }
                }

                Matrix.prototype.klass = 'Matrix';

                function compareNumbers(a, b) {
                    return a - b;
                }

                /*
                 Synonyms
                 */

                Matrix.random = Matrix.rand;
                Matrix.diagonal = Matrix.diag;
                Matrix.prototype.diagonal = Matrix.prototype.diag;
                Matrix.identity = Matrix.eye;
                Matrix.prototype.negate = Matrix.prototype.neg;
                Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;
                Matrix.prototype.determinant = Matrix.prototype.det;

                /*
                 Add dynamically instance and static methods for mathematical operations
                 */

                var inplaceOperator = `
(function %name%(value) {
    if (typeof value === 'number') return this.%name%S(value);
    return this.%name%M(value);
})
`;

                var inplaceOperatorScalar = `
(function %name%S(value) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) %op% value);
        }
    }
    return this;
})
`;

                var inplaceOperatorMatrix = `
(function %name%M(matrix) {
    matrix = this.constructor.checkMatrix(matrix);
    if (this.rows !== matrix.rows ||
        this.columns !== matrix.columns) {
        throw new RangeError('Matrices dimensions must be equal');
    }
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));
        }
    }
    return this;
})
`;

                var staticOperator = `
(function %name%(matrix, value) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%(value);
})
`;

                var inplaceMethod = `
(function %name%() {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j)));
        }
    }
    return this;
})
`;

                var staticMethod = `
(function %name%(matrix) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%();
})
`;

                var inplaceMethodWithArgs = `
(function %name%(%args%) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), %args%));
        }
    }
    return this;
})
`;

                var staticMethodWithArgs = `
(function %name%(matrix, %args%) {
    var newMatrix = new this[Symbol.species](matrix);
    return newMatrix.%name%(%args%);
})
`;


                var inplaceMethodWithOneArgScalar = `
(function %name%S(value) {
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), value));
        }
    }
    return this;
})
`;
                var inplaceMethodWithOneArgMatrix = `
(function %name%M(matrix) {
    matrix = this.constructor.checkMatrix(matrix);
    if (this.rows !== matrix.rows ||
        this.columns !== matrix.columns) {
        throw new RangeError('Matrices dimensions must be equal');
    }
    for (var i = 0; i < this.rows; i++) {
        for (var j = 0; j < this.columns; j++) {
            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));
        }
    }
    return this;
})
`;

                var inplaceMethodWithOneArg = `
(function %name%(value) {
    if (typeof value === 'number') return this.%name%S(value);
    return this.%name%M(value);
})
`;

                var staticMethodWithOneArg = staticMethodWithArgs;

                var operators = [
                    // Arithmetic operators
                    ['+', 'add'],
                    ['-', 'sub', 'subtract'],
                    ['*', 'mul', 'multiply'],
                    ['/', 'div', 'divide'],
                    ['%', 'mod', 'modulus'],
                    // Bitwise operators
                    ['&', 'and'],
                    ['|', 'or'],
                    ['^', 'xor'],
                    ['<<', 'leftShift'],
                    ['>>', 'signPropagatingRightShift'],
                    ['>>>', 'rightShift', 'zeroFillRightShift']
                ];

                var i;
                var eval2 = eval;
                for (var operator of operators) {
                    var inplaceOp = eval2(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));
                    var inplaceOpS = eval2(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));
                    var inplaceOpM = eval2(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));
                    var staticOp = eval2(fillTemplateFunction(staticOperator, {name: operator[1]}));
                    for (i = 1; i < operator.length; i++) {
                        Matrix.prototype[operator[i]] = inplaceOp;
                        Matrix.prototype[operator[i] + 'S'] = inplaceOpS;
                        Matrix.prototype[operator[i] + 'M'] = inplaceOpM;
                        Matrix[operator[i]] = staticOp;
                    }
                }

                var methods = [
                    ['~', 'not']
                ];

                [
                    'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',
                    'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',
                    'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'
                ].forEach(function (mathMethod) {
                    methods.push(['Math.' + mathMethod, mathMethod]);
                });

                for (var method of methods) {
                    var inplaceMeth = eval2(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));
                    var staticMeth = eval2(fillTemplateFunction(staticMethod, {name: method[1]}));
                    for (i = 1; i < method.length; i++) {
                        Matrix.prototype[method[i]] = inplaceMeth;
                        Matrix[method[i]] = staticMeth;
                    }
                }

                var methodsWithArgs = [
                    ['Math.pow', 1, 'pow']
                ];

                for (var methodWithArg of methodsWithArgs) {
                    var args = 'arg0';
                    for (i = 1; i < methodWithArg[1]; i++) {
                        args += `, arg${i}`;
                    }
                    if (methodWithArg[1] !== 1) {
                        var inplaceMethWithArgs = eval2(fillTemplateFunction(inplaceMethodWithArgs, {
                            name: methodWithArg[2],
                            method: methodWithArg[0],
                            args: args
                        }));
                        var staticMethWithArgs = eval2(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));
                        for (i = 2; i < methodWithArg.length; i++) {
                            Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;
                            Matrix[methodWithArg[i]] = staticMethWithArgs;
                        }
                    } else {
                        var tmplVar = {
                            name: methodWithArg[2],
                            args: args,
                            method: methodWithArg[0]
                        };
                        var inplaceMethod2 = eval2(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));
                        var inplaceMethodS = eval2(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));
                        var inplaceMethodM = eval2(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));
                        var staticMethod2 = eval2(fillTemplateFunction(staticMethodWithOneArg, tmplVar));
                        for (i = 2; i < methodWithArg.length; i++) {
                            Matrix.prototype[methodWithArg[i]] = inplaceMethod2;
                            Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;
                            Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;
                            Matrix[methodWithArg[i]] = staticMethod2;
                        }
                    }
                }

                function fillTemplateFunction(template, values) {
                    for (var value in values) {
                        template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);
                    }
                    return template;
                }

                return Matrix;
            }

            class Matrix$a extends AbstractMatrix$4(Array) {
                constructor(nRows, nColumns) {
                    var i;
                    if (arguments.length === 1 && typeof nRows === 'number') {
                        return new Array(nRows);
                    }
                    if (Matrix$a.isMatrix(nRows)) {
                        return nRows.clone();
                    } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix
                        super(nRows);
                        if (Number.isInteger(nColumns) && nColumns > 0) {
                            for (i = 0; i < nRows; i++) {
                                this[i] = new Array(nColumns);
                            }
                        } else {
                            throw new TypeError('nColumns must be a positive integer');
                        }
                    } else if (Array.isArray(nRows)) { // Copy the values from the 2D array
                        const matrix = nRows;
                        nRows = matrix.length;
                        nColumns = matrix[0].length;
                        if (typeof nColumns !== 'number' || nColumns === 0) {
                            throw new TypeError('Data must be a 2D array with at least one element');
                        }
                        super(nRows);
                        for (i = 0; i < nRows; i++) {
                            if (matrix[i].length !== nColumns) {
                                throw new RangeError('Inconsistent array dimensions');
                            }
                            this[i] = [].concat(matrix[i]);
                        }
                    } else {
                        throw new TypeError('First argument must be a positive number or an array');
                    }
                    this.rows = nRows;
                    this.columns = nColumns;
                    return this;
                }

                set(rowIndex, columnIndex, value) {
                    this[rowIndex][columnIndex] = value;
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this[rowIndex][columnIndex];
                }

                /**
                 * Removes a row from the given index
                 * @param {number} index - Row index
                 * @return {Matrix} this
                 */
                removeRow(index) {
                    checkRowIndex$4(this, index);
                    if (this.rows === 1) {
                        throw new RangeError('A matrix cannot have less than one row');
                    }
                    this.splice(index, 1);
                    this.rows -= 1;
                    return this;
                }

                /**
                 * Adds a row at the given index
                 * @param {number} [index = this.rows] - Row index
                 * @param {Array|Matrix} array - Array or vector
                 * @return {Matrix} this
                 */
                addRow(index, array) {
                    if (array === undefined) {
                        array = index;
                        index = this.rows;
                    }
                    checkRowIndex$4(this, index, true);
                    array = checkRowVector$4(this, array, true);
                    this.splice(index, 0, array);
                    this.rows += 1;
                    return this;
                }

                /**
                 * Removes a column from the given index
                 * @param {number} index - Column index
                 * @return {Matrix} this
                 */
                removeColumn(index) {
                    checkColumnIndex$4(this, index);
                    if (this.columns === 1) {
                        throw new RangeError('A matrix cannot have less than one column');
                    }
                    for (var i = 0; i < this.rows; i++) {
                        this[i].splice(index, 1);
                    }
                    this.columns -= 1;
                    return this;
                }

                /**
                 * Adds a column at the given index
                 * @param {number} [index = this.columns] - Column index
                 * @param {Array|Matrix} array - Array or vector
                 * @return {Matrix} this
                 */
                addColumn(index, array) {
                    if (typeof array === 'undefined') {
                        array = index;
                        index = this.columns;
                    }
                    checkColumnIndex$4(this, index, true);
                    array = checkColumnVector$4(this, array);
                    for (var i = 0; i < this.rows; i++) {
                        this[i].splice(index, 0, array[i]);
                    }
                    this.columns += 1;
                    return this;
                }
            }

            class WrapperMatrix1D$4 extends AbstractMatrix$4() {
                /**
                 * @class WrapperMatrix1D
                 * @param {Array<number>} data
                 * @param {object} [options]
                 * @param {object} [options.rows = 1]
                 */
                constructor(data, options = {}) {
                    const {
                        rows = 1
                    } = options;

                    if (data.length % rows !== 0) {
                        throw new Error('the data length is not divisible by the number of rows');
                    }
                    super();
                    this.rows = rows;
                    this.columns = data.length / rows;
                    this.data = data;
                }

                set(rowIndex, columnIndex, value) {
                    var index = this._calculateIndex(rowIndex, columnIndex);
                    this.data[index] = value;
                    return this;
                }

                get(rowIndex, columnIndex) {
                    var index = this._calculateIndex(rowIndex, columnIndex);
                    return this.data[index];
                }

                _calculateIndex(row, column) {
                    return (row * this.columns) + column;
                }

                static get [Symbol.species]() {
                    return Matrix$a;
                }
            }

            class WrapperMatrix2D$4 extends AbstractMatrix$4() {
                /**
                 * @class WrapperMatrix2D
                 * @param {Array<Array<number>>} data
                 */
                constructor(data) {
                    super();
                    this.data = data;
                    this.rows = data.length;
                    this.columns = data[0].length;
                }

                set(rowIndex, columnIndex, value) {
                    this.data[rowIndex][columnIndex] = value;
                    return this;
                }

                get(rowIndex, columnIndex) {
                    return this.data[rowIndex][columnIndex];
                }

                static get [Symbol.species]() {
                    return Matrix$a;
                }
            }

            class LogisticRegressionTwoClasses {
                constructor(options = {}) {
                    this.numSteps = options.numSteps || 500000;
                    this.learningRate = options.learningRate || 5e-4;
                    this.weights = options.weights ? Matrix$a.checkMatrix(options.weights) : null;
                }

                train(features, target) {
                    var weights = Matrix$a.zeros(1, features.columns);

                    for (var step = 0; step < this.numSteps; step++) {
                        var scores = features.mmul(weights.transposeView());
                        var predictions = sigmoid(scores);

                        // Update weights with gradient
                        var outputErrorSignal = Matrix$a.columnVector(predictions).neg().add(target);
                        var gradient = features.transposeView().mmul(outputErrorSignal);
                        weights = weights.add(gradient.mul(this.learningRate).transposeView());
                    }

                    this.weights = weights;
                }

                testScores(features) {
                    var finalData = features.mmul(this.weights.transposeView());
                    var predictions = sigmoid(finalData);
                    predictions = Matrix$a.columnVector(predictions);
                    return predictions.to1DArray();
                }

                predict(features) {
                    var finalData = features.mmul(this.weights.transposeView());
                    var predictions = sigmoid(finalData);
                    predictions = Matrix$a.columnVector(predictions).round();
                    return predictions.to1DArray();
                }

                static load(model) {
                    return new LogisticRegressionTwoClasses(model);
                }

                toJSON() {
                    return {
                        numSteps: this.numSteps,
                        learningRate: this.learningRate,
                        weights: this.weights
                    };
                }
            }

            function sigmoid(scores) {
                scores = scores.to1DArray();
                var result = [];
                for (var i = 0; i < scores.length; i++) {
                    result.push(1 / (1 + Math.exp(-scores[i])));
                }
                return result;
            }

            function transformClassesForOneVsAll(Y, oneClass) {
                var y = Y.to1DArray();
                for (var i = 0; i < y.length; i++) {
                    if (y[i] === oneClass) {
                        y[i] = 0;
                    } else {
                        y[i] = 1;
                    }
                }
                return Matrix$a.columnVector(y);
            }

            class LogisticRegression {
                constructor(options = {}) {
                    this.numSteps = options. numSteps || 500000;
                    this.learningRate = options.learningRate || 5e-4;
                    this.classifiers = options.classifiers || [];
                    this.numberClasses = options.numberClasses || 0;
                }

                train(X, Y) {
                    this.numberClasses = new Set(Y.to1DArray()).size;
                    this.classifiers = new Array(this.numberClasses);

                    // train the classifiers
                    for (var i = 0; i < this.numberClasses; i++) {
                        this.classifiers[i] = new LogisticRegressionTwoClasses({numSteps: this.numSteps, learningRate: this.learningRate});
                        var y = Y.clone();
                        y = transformClassesForOneVsAll(y, i);
                        this.classifiers[i].train(X, y);
                    }
                }

                predict(Xtest) {
                    var resultsOneClass = new Array(this.numberClasses).fill(0);
                    var i;
                    for (i = 0; i < this.numberClasses; i++) {
                        resultsOneClass[i] = this.classifiers[i].testScores(Xtest);
                    }
                    var finalResults = new Array(Xtest.rows).fill(0);
                    for (i = 0; i < Xtest.rows; i++) {
                        var minimum = 100000;
                        for (var j = 0; j < this.numberClasses; j++) {
                            if (resultsOneClass[j][i] < minimum) {
                                minimum = resultsOneClass[j][i];
                                finalResults[i] = j;
                            }
                        }
                    }
                    return finalResults;
                }

                static load(model) {
                    if (model.name !== 'LogisticRegression') {
                        throw new Error('invalid model: ' + model.name);
                    }
                    const newClassifier = new LogisticRegression(model);
                    for (let i = 0; i < newClassifier.numberClasses; i++) {
                        newClassifier.classifiers[i] = LogisticRegressionTwoClasses.load(model.classifiers[i]);
                    }
                    return newClassifier;
                }

                toJSON() {
                    return {
                        name: 'LogisticRegression',
                        numSteps: this.numSteps,
                        learningRate: this.learningRate,
                        numberClasses: this.numberClasses,
                        classifiers: this.classifiers
                    };
                }
            }

            /**
             * base interface class for reinforced learning
             * @class ReinforcedLearningBase
             * @memberOf ml
             */
            class ReinforcedLearningBase{
              /**
               * base class for reinforced learning
               * @param {Object} [options={}]
               * @prop {Number} options.bounds - number of bounds / bandits
               * @prop {Function} options.getBound - get value of bound
               * @prop {Number} this.bounds - number of bounds / bandits
               * @prop {Array} this.last_selected - list of selections
               * @prop {Number} this.total_reward - total rewards
               * @prop {Number} this.iteration - total number of iterations
               * @returns {this} 
               */
              constructor(options = {}) {
                this.bounds = options.bounds || 5;
                this.getBound = options.getBound || function getBound(bound) {
                  return bound;
                };
                this.last_selected = [];
                this.total_reward = 0;
                this.iteration = 0;
                return this;
              }
              /** 
               * interface instance method for reinforced learning step
              */
              learn() {
                throw new ReferenceError('Missing learn method implementation');
              }
              /** 
               * interface instance method for reinforced training step
              */
              train() {
                throw new ReferenceError('Missing train method implementation');
              }
              /** 
               * interface instance method for reinforced prediction step
              */
              predict() {
                throw new ReferenceError('Missing predict method implementation');
              }
            }

            /**
             * Implementation of the Upper Confidence Bound algorithm
             * @class UpperConfidenceBound
             * @memberOf ml
             */
            class UpperConfidenceBound extends ReinforcedLearningBase{
              /**
               * creates a new instance of the Upper confidence bound(UCB) algorithm. UCB is based on the principle of optimism in the face of uncertainty, which is to choose your actions as if the environment (in this case bandit) is as nice as is plausibly possible
               * @see {@link http://banditalgs.com/2016/09/18/the-upper-confidence-bound-algorithm/}
               * @example
               * const dataset = new ms.ml.UpperConfidenceBound({bounds:10});
               * @param {Object} [options={}]
               * @prop {Map} this.numbers_of_selections - map of all bound selections
               * @prop {Map} this.sums_of_rewards - successful bound selections
               * @returns {this} 
               */
              constructor(options = {}) {
                super(options);
                this.numbers_of_selections = new Map();
                this.sums_of_rewards = new Map();
                for (let i = 0; i < this.bounds; i++){
                  this.numbers_of_selections.set(i, 0);
                  this.sums_of_rewards.set(i, 0);
                }
                return this;
              }
              /**
               * returns next action based off of the upper confidence bound
               * @return {number} returns bound selection
               */
              predict() {
                let ad = 0; //ad is each bandit
                let max_upper_bound = 0;
                for (let i = 0; i < this.bounds; i++){
                  let upper_bound = 1e400;
                  if (this.numbers_of_selections.get( i ) > 0) {
                    // if selected at least once
                    let average_reward = this.sums_of_rewards.get( i ) / this.numbers_of_selections.get( i );
                    let delta_i = Math.sqrt(3 / 2 * Math.log(this.iteration + 1) / this.numbers_of_selections.get( i ));
                    upper_bound = average_reward + delta_i;
                  } 
                  if (upper_bound > max_upper_bound) { //get max at each round
                    max_upper_bound = upper_bound;
                    ad = i;
                  }
                }
                return ad;
              }
              /**
               * single step trainning method
               * @param {Object} ucbRow - row of bound selections
               * @param {Function} [getBound=this.getBound] - select value of ucbRow by selection value
               * @return {this} 
               */
              learn(options={}) {
                const { ucbRow, getBound, } = options;
                let ad = this.predict();
                this.last_selected.push(ad);
                this.numbers_of_selections.set(ad,  this.numbers_of_selections.get(ad) + 1);
                let reward = ucbRow[getBound(ad)];
                this.sums_of_rewards.set(ad,  this.sums_of_rewards.get(ad) + reward);
                this.total_reward = this.total_reward + reward;
                this.iteration++;
                return this;
              }
              /**
               * training method for upper confidence bound calculations
               * @param {Object|Object[]} ucbRow - row of bound selections
               * @param {Function} [getBound=this.getBound] - select value of ucbRow by selection value
               * @return {this} 
               */
              train(options) {
                const {
                  ucbRow,
                  getBound = this.getBound,
                } = options;
                if (Array.isArray(ucbRow)) {
                  for (let i in ucbRow) {
                    this.learn({
                      ucbRow: ucbRow[i],
                      getBound,
                    });
                  }
                } else {
                  this.learn({
                    ucbRow,
                    getBound,
                  });
                }
                return this;
              }
            }

            /**
             * Implementation of the Thompson Sampling algorithm
             * @class ThompsonSampling
             * @memberOf ml
             */
            class ThompsonSampling extends ReinforcedLearningBase{
              /**
               * creates a new instance of the Thompson Sampling(TS) algorithm. TS a heuristic for choosing actions that addresses the exploration-exploitation dilemma in the multi-armed bandit problem. It consists in choosing the action that maximizes the expected reward with respect to a randomly drawn belief
               * @see {@link https://en.wikipedia.org/wiki/Thompson_sampling}
               * @example
               * const dataset = new ms.ml.ThompsonSampling({bounds:10});
               * @param {Object} [options={}]
               * @prop {Map} this.numbers_of_rewards_1 - map of all reward 1 selections
               * @prop {Map} this.numbers_of_rewards_0 - map of all reward 0 selections
               * @returns {this} 
               */
              constructor(options = {}) {
                super(options);
                this.numbers_of_rewards_1 = new Map();
                this.numbers_of_rewards_0 = new Map();
                for (let i = 0; i < this.bounds; i++){
                  this.numbers_of_rewards_1.set(i, 0);
                  this.numbers_of_rewards_0.set(i, 0);
                }
                return this;
              }
              /**
               * returns next action based off of the thompson sampling
               * @return {number} returns thompson sample
               */
              predict() {
                let ad = 0; //ad is each bandit
                let max_random = 0;
                for (let i = 0; i < this.bounds; i++){
                  let random_beta = probabilityDistributions.rbeta(1, this.numbers_of_rewards_1.get(i) + 1, this.numbers_of_rewards_0.get(i) + 1);
                  if (random_beta > max_random) {
                    max_random = random_beta;
                    ad = i;
                  }
                }
                return ad;
              }
              /**
               * single step trainning method
               * @param {Object} tsRow - row of bound selections
               * @param {Function} [getBound=this.getBound] - select value of tsRow by selection value
               * @return {this} 
               */
              learn(options = {}) {
                const { tsRow, getBound, } = options;
                let ad = this.predict();
                this.last_selected.push(ad);
                let reward = tsRow[ getBound(ad) ];
                if (reward === 1) {
                  this.numbers_of_rewards_1.set(ad,  this.numbers_of_rewards_1.get(ad) + 1);
                } else {
                  this.numbers_of_rewards_0.set(ad,  this.numbers_of_rewards_0.get(ad) + 1);
                }
                this.total_reward = this.total_reward + reward;
                this.iteration++;
                return this;
              }
              /**
               * training method for thompson sampling calculations
               * @param {Object|Object[]} tsRow - row of bound selections
               * @param {Function} [getBound=this.getBound] - select value of tsRow by selection value
               * @return {this} 
               */
              train(options) {
                const {
                  tsRow,
                  getBound = this.getBound,
                } = options;
                if (Array.isArray(tsRow)) {
                  for (let i in tsRow) {
                    this.learn({
                      tsRow: tsRow[i],
                      getBound,
                    });
                  }
                } else {
                  this.learn({
                    tsRow,
                    getBound,
                  });
                }
                return this;
              }
            }

            /* fix for rollup */
            /* istanbul ignore next */
            const mlf = (undefined) ? undefined : src$1;
            const mlc = (undefined) ? undefined : src;
            const mln = (undefined) ? undefined : src$6;
            const { RandomForestRegression: RandomForestRegression$1, RandomForestClassifier: RandomForestClassifier$1, } = mlf;
            const { DecisionTreeRegression: DecisionTreeRegression$1, DecisionTreeClassifier: DecisionTreeClassifier$1, } = mlc;
            const { GaussianNB: GaussianNB$1, } = mln;

            src$n.Regression = Object.assign({},
              src$n.Regression);
            src$n.SL = Object.assign({},
              src$n.SL);
            src$n.Stat = Object.assign({},
              src$n.Stat);
            src$n.RL = Object.assign({},
              src$n.RL, {
                ReinforcedLearningBase,
                UpperConfidenceBound,
                ThompsonSampling,
              });
            src$n.UpperConfidenceBound = UpperConfidenceBound;
            src$n.ThompsonSampling = ThompsonSampling;
            src$n.Regression.DecisionTreeRegression = DecisionTreeRegression$1;
            src$n.Regression.RandomForestRegression = RandomForestRegression$1;
            src$n.Regression.MultivariateLinearRegression = MultivariateLinearRegression;

            src$n.SL.GaussianNB = GaussianNB$1;
            src$n.SL.LogisticRegression = LogisticRegression;
            src$n.SL.DecisionTreeClassifier = DecisionTreeClassifier$1;
            src$n.SL.RandomForestClassifier = RandomForestClassifier$1;

            src$n.Stat.PCA = pca;

            /**
             * @namespace
             * @see {@link https://github.com/mljs/ml} 
             */
            const ml = src$n;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // a list of commonly used words that have little meaning and can be excluded
            // from analysis.
            var words$1 = [
                'about', 'above', 'after', 'again', 'all', 'also', 'am', 'an', 'and', 'another',
                'any', 'are', 'as', 'at', 'be', 'because', 'been', 'before', 'being', 'below',
                'between', 'both', 'but', 'by', 'came', 'can', 'cannot', 'come', 'could', 'did',
                'do', 'does', 'doing', 'during', 'each', 'few', 'for', 'from', 'further', 'get',
                'got', 'has', 'had', 'he', 'have', 'her', 'here', 'him', 'himself', 'his', 'how',
                'if', 'in', 'into', 'is', 'it', 'its', 'itself', 'like', 'make', 'many', 'me',
                'might', 'more', 'most', 'much', 'must', 'my', 'myself', 'never', 'now', 'of', 'on',
                'only', 'or', 'other', 'our', 'ours', 'ourselves', 'out', 'over', 'own',
                'said', 'same', 'see', 'should', 'since', 'so', 'some', 'still', 'such', 'take', 'than',
                'that', 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'there', 'these', 'they',
                'this', 'those', 'through', 'to', 'too', 'under', 'until', 'up', 'very', 'was',
                'way', 'we', 'well', 'were', 'what', 'where', 'when', 'which', 'while', 'who',
                'whom', 'with', 'would', 'why', 'you', 'your', 'yours', 'yourself',
                'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '$', '1',
                '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];

            // tell the world about the noise words.
            var words_1 = words$1;

            var stopwords = {
            	words: words_1
            };

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            /**
             * \@todo Use .bind() in Tokenizer.prototype.attach().
             */

            var Tokenizer = function() {
            };

            Tokenizer.prototype.trim = function(array) {
              while (array[array.length - 1] == '')
                array.pop();

              while (array[0] == '')
                array.shift();

              return array;
            };

            // Expose an attach function that will patch String with new methods.
            Tokenizer.prototype.attach = function() {
              var self = this;

              String.prototype.tokenize = function() {
                return self.tokenize(this);
              };
            };

            Tokenizer.prototype.tokenize = function() {};

            var tokenizer = Tokenizer;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var AggressiveTokenizer = function() {
                tokenizer.call(this);    
            };
            util$2.inherits(AggressiveTokenizer, tokenizer);

            var aggressive_tokenizer = AggressiveTokenizer;

            AggressiveTokenizer.prototype.tokenize = function(text) {
                // break a string up into an array of tokens by anything non-word
                return this.trim(text.split(/\W+/));
            };

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */


            var tokenizer$1 = new aggressive_tokenizer();

            var phonetic = function() {
                this.compare = function(stringA, stringB) {
                    return this.process(stringA) == this.process(stringB);
                };

                this.attach = function() {
            	var phonetic = this;

                    String.prototype.soundsLike = function(compareTo) {
                        return phonetic.compare(this, compareTo);
                    };
                    
                    String.prototype.phonetics = function() {
                        return phonetic.process(this);
                    };
            	
                    String.prototype.tokenizeAndPhoneticize = function(keepStops) {
                        var phoneticizedTokens = [];
                        
                        tokenizer$1.tokenize(this).forEach(function(token) {
                            if(keepStops || stopwords.words.indexOf(token) < 0)
                                phoneticizedTokens.push(token.phonetics());
                        });
                        
                        return phoneticizedTokens;
                    };
                };
            };

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            function transformLipps(token) {
                return token.replace(/[bfpv]/g, '1');
            }

            function transformThroats(token) {
                return token.replace(/[cgjkqsxz]/g, '2');
            }

            function transformToungue(token) {
                return token.replace(/[dt]/g, '3');
            }

            function transformL(token) {
                return token.replace(/l/g, '4');
            }

            function transformHum(token) {
                return token.replace(/[mn]/g, '5');
            }

            function transformR(token) {
                return token.replace(/r/g, '6');
            }

            function condense(token) {
                return token.replace(/(\d)?\1+/g, '$1');
            }

            function padRight0(token) {
                if(token.length < 4)
                    return token + Array(4 - token.length).join('0');
                else
                    return token;
            }

            function transform(token) {
                return transformLipps(transformThroats(
                    transformToungue(transformL(transformHum(transformR(token))))));
            }

            var SoundEx = new phonetic();
            var soundex = SoundEx;

            SoundEx.process = function(token, maxLength) {
                token = token.toLowerCase();    
                var transformed = condense(transform(token.substr(1, token.length - 1))); // anything that isn't a digit goes
                // deal with duplicate INITIAL consonant SOUNDS
                transformed = transformed.replace(new RegExp("^" + transform(token.charAt(0))), '');
                return token.charAt(0).toUpperCase() + padRight0(transformed.replace(/\D/g, '')).substr(0, (maxLength && maxLength - 1) || 3);
            };

            // export for tests;
            SoundEx.transformLipps = transformLipps;
            SoundEx.transformThroats = transformThroats;
            SoundEx.transformToungue = transformToungue;
            SoundEx.transformL = transformL;
            SoundEx.transformHum = transformHum;
            SoundEx.transformR = transformR;
            SoundEx.condense = condense;
            SoundEx.padRight0 = padRight0;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            function dedup(token) {
                return token.replace(/([^c])\1/g, '$1');
            }

            function dropInitialLetters(token) {
                if(token.match(/^(kn|gn|pn|ae|wr)/))
                    return token.substr(1, token.length - 1);
                    
                return token;
            }

            function dropBafterMAtEnd(token) {
                return token.replace(/mb$/, 'm');
            }

            function cTransform(token) {
                

                token = token.replace(/([^s]|^)(c)(h)/g, '$1x$3').trim();


                token = token.replace(/cia/g, 'xia');
                token = token.replace(/c(i|e|y)/g, 's$1');
                token = token.replace(/c/g, 'k'); 
                
                return token;
            }

            function dTransform(token) {
                token = token.replace(/d(ge|gy|gi)/g, 'j$1');
                token = token.replace(/d/g, 't');
                
                return token;
            }

            function dropG(token) {
                token = token.replace(/gh(^$|[^aeiou])/g, 'h$1');
                token = token.replace(/g(n|ned)$/g, '$1');    
                
                return token;
            }

            function transformG(token) {
                token = token.replace(/gh/g, 'f'); 
                token = token.replace(/([^g]|^)(g)(i|e|y)/g, '$1j$3');
                token = token.replace(/gg/g, 'g');
                token = token.replace(/g/g, 'k');    
                
                return token;
            }

            function dropH(token) {
                return token.replace(/([aeiou])h([^aeiou]|$)/g, '$1$2');
            }

            function transformCK(token) {
                return token.replace(/ck/g, 'k');
            }
            function transformPH(token) {
                return token.replace(/ph/g, 'f');
            }

            function transformQ(token) {
                return token.replace(/q/g, 'k');
            }

            function transformS(token) {
                return token.replace(/s(h|io|ia)/g, 'x$1');
            }

            function transformT(token) {
                token = token.replace(/t(ia|io)/g, 'x$1');
                token = token.replace(/th/, '0');
                
                return token;
            }

            function dropT(token) {
                return token.replace(/tch/g, 'ch');
            }

            function transformV(token) {
                return token.replace(/v/g, 'f');
            }

            function transformWH(token) {
                return token.replace(/^wh/, 'w');
            }

            function dropW(token) {
                return token.replace(/w([^aeiou]|$)/g, '$1');
            }

            function transformX(token) {
                token = token.replace(/^x/, 's');
                token = token.replace(/x/g, 'ks');
                return token;
            }

            function dropY(token) {
                return token.replace(/y([^aeiou]|$)/g, '$1');
            }

            function transformZ(token) {
                return token.replace(/z/, 's');
            }

            function dropVowels(token) {
                return token.charAt(0) + token.substr(1, token.length).replace(/[aeiou]/g, '');
            }

            var Metaphone = new phonetic();
            var metaphone = Metaphone;

            Metaphone.process = function(token, maxLength) {
                token = token.toLowerCase();
                token = dedup(token);
                token = dropInitialLetters(token);
                token = dropBafterMAtEnd(token);
                token = transformCK(token);
                token = cTransform(token);
                token = dTransform(token);
                token = dropG(token);
                token = transformG(token);
                token = dropH(token);
                token = transformPH(token);
                token = transformQ(token);
                token = transformS(token);
                token = transformX(token);    
                token = transformT(token);
                token = dropT(token);
                token = transformV(token);
                token = transformWH(token);
                token = dropW(token);
                token = dropY(token);
                token = transformZ(token);
                token = dropVowels(token);
                
                token.toUpperCase();
                if(token.length >= maxLength)
                    token = token.substring(0, maxLength);        

                return token.toUpperCase();
            };

            // expose functions for testing    
            Metaphone.dedup = dedup;
            Metaphone.dropInitialLetters = dropInitialLetters;
            Metaphone.dropBafterMAtEnd = dropBafterMAtEnd;
            Metaphone.cTransform = cTransform;
            Metaphone.dTransform = dTransform;
            Metaphone.dropG = dropG;
            Metaphone.transformG = transformG;
            Metaphone.dropH = dropH;
            Metaphone.transformCK = transformCK;
            Metaphone.transformPH = transformPH;
            Metaphone.transformQ = transformQ;
            Metaphone.transformS = transformS;
            Metaphone.transformT = transformT;
            Metaphone.dropT = dropT;
            Metaphone.transformV = transformV;
            Metaphone.transformWH = transformWH;
            Metaphone.dropW = dropW;
            Metaphone.transformX = transformX;
            Metaphone.dropY = dropY;
            Metaphone.transformZ = transformZ;
            Metaphone.dropVowels = dropVowels;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var DoubleMetaphone = new phonetic();
            var double_metaphone = DoubleMetaphone;

            function isVowel(c) {
            	return c && c.match(/[aeiouy]/i);
            }

            function truncate(string, length) {
                if(string.length >= length)
                    string = string.substring(0, length);

                return string;
            }

            function process$1(token, maxLength) {
            	token = token.toUpperCase();
            	var primary = '', secondary = '';
                var pos = 0;

                function subMatch(startOffset, stopOffset, terms) {
                    return subMatchAbsolute(pos + startOffset, pos + stopOffset, terms);
                }

                function subMatchAbsolute(startOffset, stopOffset, terms) {
                    return terms.indexOf(token.substring(startOffset, stopOffset)) > -1;
                }

                function addSecondary(primaryAppendage, secondaryAppendage) {
                	primary += primaryAppendage;
                	secondary += secondaryAppendage;
                }

                function add(primaryAppendage) {
                	addSecondary(primaryAppendage, primaryAppendage);
                }

                function addCompressedDouble(c, encoded) {
                	if(token[pos + 1] == c)
                		pos++;
                	add(encoded || c);
                }

                function handleC() {

                    if(pos >= 1 && !isVowel(token[pos - 2])
                            && token[pos - 1] == 'A' && token[pos + 1] == 'H'
                                && token[pos + 2] != 'I'
                                    || subMatch(-2, 4, ['BACHER', 'MACHER'])) {
                        add('K');
                        pos++;
                    } else if(pos == 0 && token.substring(1, 6) == 'EASAR') {
                        add('S');
                        add('S');
                        add('R');
                        pos += 6;
                    } else if(token.substring(pos + 1, pos + 4) == 'HIA') {
                        add('K');
                        pos++;
                    } else if(token[pos + 1] == 'H') {
                        if(pos > 0 && token.substring(pos + 2, pos + 4) == 'AE') {
                            addSecondary('K', 'X');
                            pos++;
                        } else if(pos == 0
                                    && (subMatch(1, 6, ['HARAC', 'HARIS'])
                                        || subMatch(1, 4, ['HOR', 'HUM', 'HIA', 'HEM']))
                                    && token.substring(pos + 1, pos + 5) != 'HORE') {
                            add('K');
                            pos++;
                        } else {
                            if((subMatchAbsolute(0, 3, ['VAN', 'VON']) || token.substring(0,  3) == 'SCH')
                                || subMatch(-2, 4, ['ORCHES', 'ARCHIT', 'ORCHID'])
                                || subMatch(2, 3, ['T', 'S'])
                                || ((subMatch(-1, 0, ['A', 'O', 'U', 'E']) || pos == 0)
                                    && subMatch(2, 3, ['B', 'F', 'H', 'L', 'M', 'N', 'R', 'V', 'W']))) {
                                add('K');
                            } else if(pos > 0) {

                                if(token.substring(0, 2) == 'MC') {
                                    add('K');
                                } else {
                                    addSecondary('X', 'K');
                                }
                            } else {
                                add('X');
                            }

                            pos++;
                        }
                    } else if(token.substring(pos, pos + 2) == 'CZ'
                            && token.substring(pos - 2, pos + 1) != 'WICZ') {
                        addSecondary('S', 'X');
                        pos++;
                    } else if(token.substring(pos, pos + 3) == 'CIA') {
                        add('X');
                        pos += 2;
                    } else if(token[pos + 1] == 'C' && pos != 1 && token[0] != 'M') {
                        if(['I', 'E', 'H'].indexOf(token[pos + 2]) > -1
                                && token.substring(pos + 2, pos + 4) != 'HU') {
                            if(pos == 1 && token[pos - 1] == 'A'
                                    || subMatch(-1, 4, ['UCCEE', 'UCCES'])) {
                                add('KS');
                            } else {
                               add('X');
                            }

                           pos +=2;
                        } else {
                            add('K');
                            pos++;
                        }
                    } else if(['K', 'G', 'Q'].indexOf(token[pos + 1]) > -1) {
                        add('K');
                        pos++;
                    } else if(['E', 'I', 'Y'].indexOf(token[pos + 1]) > -1) {
                        if(subMatch(1, 3, ['IA', 'IE', 'IO'])) {
                            addSecondary('S', 'X');
                        } else {
                            add('S');
                        }
                        pos++;
                    } else {
                        add('K');
                        if(token[pos + 1] == ' ' && ['C', 'Q', 'G'].indexOf(token[pos + 2])) {
                            pos += 2;
                        } else if(['C', 'K', 'Q'].indexOf(token[pos + 1]) > -1
                                && !subMatch(1, 3, ['CE', 'CI'])) {
                            pos++;
                        }
                    }
                }

                function handleD() {
                	if(token[pos + 1] == 'G') {
                		if(['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1)  {
                			add('J');
                			pos += 2;
                		} else {
                			add('TK');
                			pos++;
                		}
            	    } else if(token[pos + 1] == 'T') {
                		add('T');
            	    	pos++;
                	} else
                		addCompressedDouble('D', 'T');
                }

                function handleG() {
                    if(token[pos + 1] == 'H') {
                        if(pos > 0 && !isVowel(token[pos - 1])) {
                            add('K');
                            pos++;
                        } else if(pos == 0) {
                            if(token[pos + 2] == 'I') {
                                add('J');
                            } else {
                                add('K');
                            }
                            pos++;
                        } else if(pos > 1
                            && (['B', 'H', 'D'].indexOf(token[pos - 2]) > -1
                                || ['B', 'H', 'D'].indexOf(token[pos - 3]) > -1
                                || ['B', 'H'].indexOf(token[pos - 4]) > -1)) {
                            pos++;
                        } else {
                            if(pos > 2
                                    && token[pos - 1] == 'U'
                                    && ['C', 'G', 'L', 'R', 'T'].indexOf(token[pos - 3]) > -1) {
                                add('F');
                            } else if(token[pos - 1] != 'I') {
                                add('K');
                            }

                            pos++;
                        }
                    } else if(token[pos + 1] == 'N') {
                        if(pos == 1 && startsWithVowel && !slavoGermanic) {
                            addSecondary('KN', 'N');
                        } else {
                            if(token.substring(pos + 2, pos + 4) != 'EY'
                                    && (token[pos + 1] != 'Y'
                                        && !slavoGermanic)) {
                                addSecondary('N', 'KN');
                            } else
                                add('KN');
                        }
                        pos++;
                    } else if(token.substring(pos + 1, pos + 3) == 'LI' && !slavoGermanic) {
                        addSecondary('KL', 'L');
                        pos++;
                    } else if(pos == 0 && (token[pos + 1] == 'Y'
                            || subMatch(1, 3, ['ES', 'EP', 'EB', 'EL', 'EY', 'IB', 'IL', 'IN', 'IE', 'EI', 'ER']))) {
                        addSecondary('K', 'J');
                    } else {
                        addCompressedDouble('G', 'K');
                    }
                }

                function handleH() {
            		// keep if starts a word or is surrounded by vowels
            		if((pos == 0 || isVowel(token[pos - 1])) && isVowel(token[pos + 1])) {
            			add('H');
            			pos++;
            		}
                }

                function handleJ() {
                    var jose = (token.substring(pos + 1, pos + 4) == 'OSE');

                    if(san || jose) {
                        if((pos == 0 && token[pos + 4] == ' ')
                                || san) {
                            add('H');
                        } else
                            add('J', 'H');
                    } else {
                        if(pos == 0/* && !jose*/) {
                            addSecondary('J', 'A');
                        } else if(isVowel(token[pos - 1]) && !slavoGermanic
                                && (token[pos + 1] == 'A' || token[pos + 1] == 'O')) {
                            addSecondary('J', 'H');
                        } else if(pos == token.length - 1) {
                            addSecondary('J', ' ');
                        } else
                            addCompressedDouble('J');
                    }
                }

                function handleL() {
                	if(token[pos + 1] == 'L') {
                		if(pos == token.length - 3 && (
                					subMatch(-1, 3, ['ILLO', 'ILLA', 'ALLE']) || (
                						token.substring(pos - 1, pos + 3) == 'ALLE' &&
                						(subMatch(-2, -1, ['AS', 'OS']) > -1 ||
                						['A', 'O'].indexOf(token[token.length - 1]) > -1)))) {
                			addSecondary('L', '');
                			pos++;
                			return;
                		}
                		pos++;
                	}
                	add('L');
                }

                function handleM() {
                	addCompressedDouble('M');
                	if(token[pos - 1] == 'U' && token[pos + 1] == 'B' &&
                			((pos == token.length - 2  || token.substring(pos + 2, pos + 4) == 'ER')))
                		pos++;
                }

                function handleP() {
                	if(token[pos + 1] == 'H') {
                		add('F');
                		pos++;
                	} else {
                		addCompressedDouble('P');

            			if(token[pos + 1] == 'B')
                			pos++;
                	}
                }

                function handleR() {
                	if(pos == token.length - 1 && !slavoGermanic
                			&& token.substring(pos - 2, pos) == 'IE'
                			&& !subMatch(-4, -3, ['ME', 'MA'])) {
                		addSecondary('', 'R');
                	} else
            	    	addCompressedDouble('R');
                }

                function handleS() {
                    if(pos == 0 && token.substring(0, 5) == 'SUGAR') {
                        addSecondary('X', 'S');
                    } else if(token[pos + 1] == 'H') {
                        if(subMatch(2, 5, ['EIM', 'OEK', 'OLM', 'OLZ'])) {
                            add('S');
                        } else {
                            add('X');
                        }
                        pos++;
                    } else if(subMatch(1, 3, ['IO', 'IA'])) {
                        if(slavoGermanic) {
                            add('S');
                        } else {
                            addSecondary('S', 'X');
                        }
                        pos++;
                    } else if((pos == 0 && ['M', 'N', 'L', 'W'].indexOf(token[pos + 1]) > -1)
                            || token[pos + 1] == 'Z') {
                        addSecondary('S', 'X');
                        if(token[pos + 1] == 'Z')
                            pos++;
                    } else if(token.substring(pos, pos + 2) == 'SC') {
                        if(token[pos + 2] == 'H') {
                            if(subMatch(3, 5, ['ER', 'EN'])) {
                                addSecondary('X', 'SK');
                            } else if(subMatch(3, 5, ['OO', 'UY', 'ED', 'EM'])) {
                                add('SK');
                            } else if(pos == 0 && !isVowel(token[3]) && token[3] != 'W') {
                                addSecondary('X', 'S');
                            } else {
                                add('X');
                            }
                        } else if(['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1) {
                            add('S');
                        } else {
                            add('SK');
                        }

                        pos += 2;
                    } else if(pos == token.length - 1
                            && subMatch(-2, 0, ['AI', 'OI'])) {
                        addSecondary('', 'S');
                    } else if(token[pos + 1] != 'L' && (
                            token[pos - 1] != 'A' && token[pos - 1] != 'I')) {
                        addCompressedDouble('S');
                        if(token[pos + 1] == 'Z')
                            pos++;
                    }
                }

                function handleT() {
                    if(token.substring(pos + 1, pos + 4) == 'ION') {
                        add('XN');
                        pos += 3;
                    } else if(subMatch(1, 3, ['IA', 'CH'])) {
                        add('X');
                        pos += 2;
                    } else if(token[pos + 1] == 'H'
                            || token.substring(1, 2) == 'TH') {
                        if(subMatch(2, 4, ['OM', 'AM'])
                                || ['VAN ', 'VON '].indexOf(token.substring(0, 4)) > -1
                                || token.substring(0, 3) == 'SCH') {
                            add('T');
                        } else
                            addSecondary('0', 'T');
                        pos++;
                    } else {
                        addCompressedDouble('T');

                        if(token[pos + 1] == 'D')
                            pos++;
                    }
                }

                function handleX() {
                	if(pos == 0) {
                		add('S');
                	} else if(!(pos == token.length - 1
            	    		&& (['IAU', 'EAU', 'IEU'].indexOf(token.substring(pos - 3, pos)) > -1
            	    			|| ['AU', 'OU'].indexOf(token.substring(pos - 2, pos)) > -1))) {
                		add('KS');
                	}
                }

                function handleW() {
                    if(pos == 0) {
                        if(token[1] == 'H') {
                            add('A');
                        } else if (isVowel(token[1])) {
                            addSecondary('A', 'F');
                        }
                    } else if((pos == token.length - 1 && isVowel(token[pos - 1])
                                || subMatch(-1, 4, ['EWSKI', 'EWSKY', 'OWSKI', 'OWSKY'])
                                || token.substring(0, 3) == 'SCH')) {
                            addSecondary('', 'F');
                            pos++;
                    } else if(['ICZ', 'ITZ'].indexOf(token.substring(pos + 1, pos + 4)) > -1) {
                        addSecondary('TS', 'FX');
                        pos += 3;
                    }
                }

                function handleZ() {
                    if(token[pos + 1] == 'H') {
                        add('J');
                        pos++;
                    } else if(subMatch(1, 3, ['ZO', 'ZI', 'ZA'])
                            || (slavoGermanic && pos > 0 && token[pos - 1] != 'T')) {
                        addSecondary('S', 'TS');
                        pos++;
                    } else
                        addCompressedDouble('Z', 'S');
                }

                var san = (token.substring(0, 3) == 'SAN');
                var startsWithVowel = isVowel(token[0]);
                var slavoGermanic = token.match(/(W|K|CZ|WITZ)/);

                if(subMatch(0, 2, ['GN', 'KN', 'PN', 'WR', 'PS'])) {
                	pos++;
                }

                while(pos < token.length) {

                	switch(token[pos]) {
            	        case 'A': case 'E': case 'I': case 'O': case 'U': case 'Y':
            	        case 'Ê': case 'É': case 'É': case'À':
            		        if(pos == 0)
            		        	add('A');
            		        break;
            		    case 'B':
            		    	addCompressedDouble('B', 'P');
            		    	break;
                        case 'C':
                            handleC();
                            break;
            	        case 'Ç':
            	            add("S");
            	            break;
            	        case 'D':
            	        	handleD();
            	        	break;
            	        case 'F': case 'K': case 'N':
            	        	addCompressedDouble(token[pos]);
            	        	break;
                        case 'G':
                            handleG();
                            break;
            	        case 'H':
            	        	handleH();
            	        	break;
                        case 'J':
                            handleJ();
                            break;
            	        case 'L':
            	        	handleL();
            	        	break;
            	        case 'M':
            	        	handleM();
            	        	break;
            	        case 'Ñ':
            	        	add('N');
            	        	break;
            	        case 'P':
            	        	handleP();
            	        	break;
            	        case 'Q':
            	        	addCompressedDouble('Q', 'K');
            	        	break;
            	        case 'R':
            	        	handleR();
            	        	break;
                        case 'S':
                            handleS();
                            break;
                        case 'T':
                            handleT();
                            break;
            	        case 'V':
            	        	addCompressedDouble('V', 'F');
            	        	break;
                        case 'W':
                            handleW();
                            break;
            	        case 'X':
            	        	handleX();
            	        	break;
            	        case 'Z':
            	        	handleZ();
            	        	break;
                	}

                    if(primary.length >= maxLength && secondary.length >= maxLength) {
                        break;
                    }

                	pos++;
                }

                return [truncate(primary, maxLength), truncate(secondary, maxLength)];
            }

            function compare(stringA, stringB) {
                var encodingsA = process$1(stringA),
                    encodingsB = process$1(stringB);

                return encodingsA[0] == encodingsB[0] ||
                    encodingsA[1] == encodingsB[1];
            }
            DoubleMetaphone.compare = compare;
            DoubleMetaphone.process = process$1;
            DoubleMetaphone.isVowel = isVowel;

            /*
            Copyright (c) 2012, Alexy Maslenninkov

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            /*
             * Daitch-Mokotoff Soundex Coding
             *
             * The Daitch-Mokotoff Soundex System was created by Randy Daitch and Gary
             * Mokotoff of the Jewish Genealogical Society because they concluded the system
             * developed by Robert Russell in 1918, and in use today by the U.S. National
             * Archives and Records Administration (NARA) does not apply well to many Slavic
             * and Yiddish surnames.  It also includes refinements that are independent of
             * ethnic considerations.
             *
             * The rules for converting surnames into D-M Code numbers are listed below.
             * They are followed by the coding chart.
             *
             * 1. Names are coded to six digits, each digit representing a sound listed in
             * the coding chart (below).
             *
             * 2. When a name lacks enough coded sounds for six digits, use zeros to fill to
             * six digits. GOLDEN which has only four coded sounds [G-L-D-N] is coded as
             * 583600.
             *
             * 3. The letters A, E, I, O, U, J, and Y are always coded at the beginning of a
             * name as in Alpert 087930. In any other situation, they are ignored except
             * when two of them form a pair and the pair comes before a vowel, as in Breuer
             * 791900 but not Freud.
             *
             * 4. The letter H is coded at the beginning of a name, as in Haber 579000, or
             * preceding a vowel, as in Manheim 665600, otherwise it is not coded.
             *
             * 5. When adjacent sounds can combine to form a larger sound, they are given
             * the code number of the larger sound.  Mintz which is not coded MIN-T-Z but
             * MIN-TZ 664000.
             *
             * 6. When adjacent letters have the same code number, they are coded as one
             * sound, as in TOPF, which is not coded TO-P-F 377000 but TO-PF 370000.
             * Exceptions to this rule are the letter combinations MN and NM, whose letters
             * are coded separately, as in Kleinman, which is coded 586660 not 586600.
             *
             * 7. When a surname consists or more than one word, it is coded as if one word,
             * such as Ben Aron which is treated as Benaron.
             *
             * 8. Several letter and letter combinations pose the problem that they may
             * sound in one of two ways.  The letter and letter combinations CH, CK, C, J,
             * and RS are assigned two possible code numbers.
             *
             * For more info, see http://www.jewishgen.org/InfoFiles/soundex.html
             */

            /**
             * D-M transformation table in the form of finite-state machine.
             * Every element of the table having member with zero index represents
             * legal FSM state; every non-zero key is the transition rule.
             *
             * Every legal state comprises tree values chosen according to the position
             * of the letter combination in the word:
             *   0: start of a word;
             *   1: before a vowel;
             *   2: any other situation.
             */
            var codes = {
                A: {
                    0: [0, -1, -1],
                    I: [[0, 1, -1]],
                    J: [[0, 1, -1]],
                    Y: [[0, 1, -1]],
                    U: [[0, 7, -1]]},
                B: [[7, 7, 7]],
                C: {
                    0: [5, 5, 5],
                    Z: {0: [4, 4, 4], S: [[4, 4, 4]]},
                    S: {0: [4, 4, 4], Z: [[4, 4, 4]]},
                    K: [[5, 5, 5], [45, 45, 45]],
                    H: {0: [5, 5, 5], S: [[5, 54, 54]]}},
                D: {
                    0: [3, 3, 3],
                    T: [[3, 3, 3]],
                    Z: {0: [4, 4, 4], H: [[4, 4, 4]], S: [[4, 4, 4]]},
                    S: {0: [4, 4, 4], H: [[4, 4, 4]], Z: [[4, 4, 4]]},
                    R: {S: [[4, 4, 4]], Z: [[4, 4, 4]]}},
                E: {
                    0: [0, -1, -1],
                    I: [[0, 1, -1]],
                    J: [[0, 1, -1]],
                    Y: [[0, 1, -1]],
                    U: [[1, 1, -1]],
                    W: [[1, 1, -1]]},
                F: {
                    0: [7, 7, 7],
                    B: [[7, 7, 7]]},
                G: [[5, 5, 5]],
                H: [[5, 5, -1]],
                I: {
                    0: [0, -1, -1],
                    A: [[1, -1, -1]],
                    E: [[1, -1, -1]],
                    O: [[1, -1, -1]],
                    U: [[1, -1, -1]]},
                J: [[4, 4, 4]],
                K: {
                    0: [5, 5, 5],
                    H: [[5, 5, 5]],
                    S: [[5, 54, 54]]},
                L: [[8, 8, 8]],
                M: {
                    0: [6, 6, 6],
                    N: [[66, 66, 66]]},
                N: {
                    0: [6, 6, 6],
                    M: [[66, 66, 66]]},
                O: {
                    0: [0, -1, -1],
                    I: [[0, 1, -1]],
                    J: [[0, 1, -1]],
                    Y: [[0, 1, -1]]},
                P: {
                    0: [7, 7, 7],
                    F: [[7, 7, 7]],
                    H: [[7, 7, 7]]},
                Q: [[5, 5, 5]],
                R: {
                    0: [9, 9, 9],
                    Z: [[94, 94, 94], [94, 94, 94]],
                    S: [[94, 94, 94], [94, 94, 94]]},
                S: {
                    0: [4, 4, 4],
                    Z: {0: [4, 4, 4], T: [[2, 43, 43]], C: {Z: [[2, 4, 4]], S: [[2, 4, 4]]}, D: [[2, 43, 43]]},
                    D: [[2, 43, 43]],
                    T: {0: [2, 43, 43], R: {Z: [[2, 4, 4]], S: [[2, 4, 4]]}, C: {H: [[2, 4, 4]]}, S: {H: [[2, 4, 4]], C: {H: [[2, 4, 4]]}}},
                    C: {0: [2, 4, 4], H: {0: [4, 4, 4], T: {0: [2, 43, 43], S: {C: {H: [[2, 4, 4]]}, H: [[2, 4, 4]]}, C: {H: [[2, 4, 4]]}}, D: [[2, 43, 43]]}},
                    H: {0: [4, 4, 4], T: {0: [2, 43, 43], C: {H: [[2, 4, 4]]}, S: {H: [[2, 4, 4]]}}, C: {H: [[2, 4, 4]]}, D: [[2, 43, 43]]}},
                T: {
                    0: [3, 3, 3],
                    C: {0: [4, 4, 4], H: [[4, 4, 4]]},
                    Z: {0: [4, 4, 4], S: [[4, 4, 4]]},
                    S: {0: [4, 4, 4], Z: [[4, 4, 4]], H: [[4, 4, 4]], C: {H: [[4, 4, 4]]}},
                    T: {S: {0: [4, 4, 4], Z: [[4, 4, 4]], C: {H: [[4, 4, 4]]}}, C: {H: [[4, 4, 4]]}, Z: [[4, 4, 4]]},
                    H: [[3, 3, 3]],
                    R: {Z: [[4, 4, 4]], S: [[4, 4, 4]]}},
                U: {
                    0: [0, -1, -1],
                    E: [[0, -1, -1]],
                    I: [[0, 1, -1]],
                    J: [[0, 1, -1]],
                    Y: [[0, 1, -1]]},
                V: [[7, 7, 7]],
                W: [[7, 7, 7]],
                X: [[5, 54, 54]],
                Y: [[1, -1, -1]],
                Z: {
                    0: [4, 4, 4],
                    D: {0: [2, 43, 43], Z: {0: [2, 4, 4], H: [[2, 4, 4]]}},
                    H: {0: [4, 4, 4], D: {0: [2, 43, 43], Z: {H: [[2, 4, 4]]}}},
                    S: {0: [4, 4, 4], H: [[4, 4, 4]], C: {H: [[4, 4, 4]]}}}
            };


            function process$2(word, codeLength) {
            	codeLength = codeLength || 6;
                word = word.toUpperCase();
                var output = '';

                var pos = 0, lastCode = -1;
                while (pos < word.length) {
                    var substr = word.slice(pos);
                    var rules = findRules(substr);

                    var code;
                    if (pos == 0) {
                        // at the beginning of the word
                        code = rules.mapping[0];
                    } else if (substr[rules.length] && findRules(substr[rules.length]).mapping[0] == 0) {
                        // before a vowel
                        code = rules.mapping[1];
                    } else {
                        // any other situation
                        code = rules.mapping[2];
                    }

                    if ((code != -1) && (code != lastCode)) output += code;
                    lastCode = code;
                    pos += rules.length;

                }

                return normalizeLength(output, codeLength);
            }


            function findRules(str) {
                var state = codes[str[0]];
                var legalState = state || [[-1,-1,-1]],
                    charsInvolved = 1;

                for (var offs = 1; offs < str.length; offs++) {
                    if (!state || !state[str[offs]]) break;

                    state = state[str[offs]];
                    if (state[0]) {
                        legalState = state;
                        charsInvolved = offs + 1;
                    }
                }

                return {
                    length: charsInvolved,
                    mapping: legalState[0]
                };
            }


            /**
             * Pad right with zeroes or cut excess symbols to fit length
             */
            function normalizeLength(token, length) {
            	length = length || 6;
            	if (token.length < length) {
            		token += (new Array(length - token.length + 1)).join('0');
            	}
                return token.slice(0, length);
            }


            var soundex$1 = new phonetic();
            soundex$1.process = process$2;
            var dm_soundex = soundex$1;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */




            var stemmer = function() {
                var stemmer = this;

                stemmer.stem = function(token) {
                    return token;
                };

                stemmer.addStopWord = function(stopWord) {
                    stopwords.words.push(stopWord);
                };

                stemmer.addStopWords = function(moreStopWords) {
                    stopwords.words = stopwords.words.concat(moreStopWords);
                };

                stemmer.removeStopWord = function(stopWord) {
                    this.removeStopWords([stopWord]);
                };

                stemmer.removeStopWords = function(moreStopWords) {
                    moreStopWords.forEach(function(stopWord){
                        var idx = stopwords.words.indexOf(stopWord);
                        if (idx >= 0) {
                            stopwords.words.splice(idx, 1);
                        }
                    });

                };


                stemmer.tokenizeAndStem = function(text, keepStops) {
                    var stemmedTokens = [];
                    var lowercaseText = text.toLowerCase();
                    var tokens = new aggressive_tokenizer().tokenize(lowercaseText);

                    if (keepStops) {
                        tokens.forEach(function(token) {
                            stemmedTokens.push(stemmer.stem(token));
                        });
                    }

                    else {
                        tokens.forEach(function(token) {
                            if (stopwords.words.indexOf(token) == -1)
                                stemmedTokens.push(stemmer.stem(token));
                        });
                    }

                    return stemmedTokens;
                };

                stemmer.attach = function() {
                    String.prototype.stem = function() {
                        return stemmer.stem(this);
                    };

                    String.prototype.tokenizeAndStem = function(keepStops) {
                        return stemmer.tokenizeAndStem(this, keepStops);
                    };
                };
            };

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            // denote groups of consecutive consonants with a C and consecutive vowels
            // with a V.
            function categorizeGroups(token) {
                return token.replace(/[^aeiouy]+y/g, 'CV').replace(/[aeiou]+/g, 'V').replace(/[^V]+/g, 'C');
            }

            // denote single consonants with a C and single vowels with a V
            function categorizeChars(token) {
                return token.replace(/[^aeiouy]y/g, 'CV').replace(/[aeiou]/g, 'V').replace(/[^V]/g, 'C');
            }

            // calculate the "measure" M of a word. M is the count of VC sequences dropping
            // an initial C if it exists and a trailing V if it exists.
            function measure(token) {
                if(!token)
                	return -1;

                return categorizeGroups(token).replace(/^C/, '').replace(/V$/, '').length / 2;
            }

            // determine if a token end with a double consonant i.e. happ
            function endsWithDoublCons(token) {
                return token.match(/([^aeiou])\1$/);
            }

            // replace a pattern in a word. if a replacement occurs an optional callback
            // can be called to post-process the result. if no match is made NULL is
            // returned.
            function attemptReplace(token, pattern, replacement, callback) {
                var result = null;
                
                if((typeof pattern == 'string') && token.substr(0 - pattern.length) == pattern)
                    result = token.replace(new RegExp(pattern + '$'), replacement);
                else if((pattern instanceof RegExp) && token.match(pattern))
                    result = token.replace(pattern, replacement);
                    
                if(result && callback)
                    return callback(result);
                else
                    return result;
            }

            // attempt to replace a list of patterns/replacements on a token for a minimum
            // measure M.
            function attemptReplacePatterns(token, replacements, measureThreshold) {
                var replacement = token;

                for(var i = 0; i < replacements.length; i++) {   
                	if(measureThreshold == null || measure(attemptReplace(token, replacements[i][0], replacements[i][1])) > measureThreshold) {
                	    replacement = attemptReplace(replacement, replacements[i][0], replacements[i][2]) || replacement;
                    }
                }
                
                return replacement;
            }

            // replace a list of patterns/replacements on a word. if no match is made return
            // the original token.
            function replacePatterns(token, replacements, measureThreshold) {
                return attemptReplacePatterns(token, replacements, measureThreshold) || token;
            }

            // TODO: this should replace all of the messy replacement stuff above
            function replaceRegex(token, regex, includeParts, minimumMeasure) {
                var parts;
                var result = '';

                if(regex.test(token)) {
                    parts = regex.exec(token);

                    includeParts.forEach(function(i) {
                        result += parts[i];
                    });
                }

                if(measure(result) > minimumMeasure) {
                    return result;
                }

                return null;
            }

            // step 1a as defined for the porter stemmer algorithm. 
            function step1a(token) {    
                if(token.match(/(ss|i)es$/)) {
                    return token.replace(/(ss|i)es$/, '$1');
                }

                if(token.substr(-1) == 's' && token.substr(-2, 1) != 's' && token.length > 2) {
                    return token.replace(/s?$/, '');
                }

                return token;
            }

            // step 1b as defined for the porter stemmer algorithm. 
            function step1b(token) {   
                if(token.substr(-3) == 'eed') {
                    if(measure(token.substr(0, token.length - 3)) > 0)
                        return token.replace(/eed$/, 'ee');
                } else {
                    var result = attemptReplace(token, /(ed|ing)$/, '', function(token) {
                        if(categorizeGroups(token).indexOf('V') >= 0) {
                            result = attemptReplacePatterns(token, [['at', '', 'ate'],  ['bl', '', 'ble'], ['iz', '', 'ize']]);

                            if(result != token) {
                    		    return result;
                    		} else {
                    		  if(endsWithDoublCons(token) && token.match(/[^lsz]$/)) {
                    			 return token.replace(/([^aeiou])\1$/, '$1');
                                }

                    		  if(measure(token) == 1 && categorizeChars(token).substr(-3) == 'CVC' && token.match(/[^wxy]$/)) {
                    			 return token + 'e';
                                }
                    		}                

                    		return token;
                	    }
                	    
                	    return null;
                	});
                	
                	if(result) {
                	    return result;
                    }
                }

                return token;   
            }

            // step 1c as defined for the porter stemmer algorithm. 
            function step1c(token) {
                var categorizedGroups = categorizeGroups(token);

                if(token.substr(-1) == 'y' && categorizedGroups.substr(0, categorizedGroups.length - 1).indexOf('V') > -1) {
                    return token.replace(/y$/, 'i');
                }

                return token;
            }

            // step 2 as defined for the porter stemmer algorithm. 
            function step2(token) {
                token = replacePatterns(token, [['ational', '', 'ate'], ['tional', '', 'tion'], ['enci', '', 'ence'], ['anci', '', 'ance'],
                    ['izer', '', 'ize'], ['abli', '', 'able'], ['bli', '', 'ble'], ['alli', '', 'al'], ['entli', '', 'ent'], ['eli', '', 'e'],
                    ['ousli', '', 'ous'], ['ization', '', 'ize'], ['ation', '', 'ate'], ['ator', '', 'ate'],['alism', '', 'al'],
                    ['iveness', '', 'ive'], ['fulness', '', 'ful'], ['ousness', '', 'ous'], ['aliti', '', 'al'],
                    ['iviti', '', 'ive'], ['biliti', '', 'ble'], ['logi', '', 'log']], 0);

                return token;
            }

            // step 3 as defined for the porter stemmer algorithm. 
            function step3(token) {
                return replacePatterns(token, [['icate', '', 'ic'], ['ative', '', ''], ['alize', '', 'al'],
            				   ['iciti', '', 'ic'], ['ical', '', 'ic'], ['ful', '', ''], ['ness', '', '']], 0);
            }

            // step 4 as defined for the porter stemmer algorithm. 
            function step4(token) {
                return replaceRegex(token, /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/, [1], 1) || 
                    replaceRegex(token, /^(.+?)(s|t)(ion)$/, [1, 2], 1) ||
                    token; 
            }

            // step 5a as defined for the porter stemmer algorithm. 
            function step5a(token) {
                var m = measure(token.replace(/e$/, ''));



                if(m > 1 || (m == 1 && !(categorizeChars(token).substr(-4, 3) == 'CVC' && token.match(/[^wxy].$/)))) {
                    token = token.replace(/e$/, '');
                }

                return token;
            }

            // step 5b as defined for the porter stemmer algorithm. 
            function step5b(token) {
                if(measure(token) > 1) {
                   return token.replace(/ll$/, 'l'); 
                }
                
                return token;
            }

            var PorterStemmer = new stemmer();
            var porter_stemmer = PorterStemmer;


            // perform full stemming algorithm on a single word
            PorterStemmer.stem = function(token) {
                if(token.length < 3) return token;
                return step5b(step5a(step4(step3(step2(step1c(step1b(step1a(token.toLowerCase())))))))).toString();
            };

            //exports for tests
            PorterStemmer.categorizeGroups = categorizeGroups;
            PorterStemmer.measure = measure;
            PorterStemmer.step1a = step1a;
            PorterStemmer.step1b = step1b;
            PorterStemmer.step1c = step1c;
            PorterStemmer.step2 = step2;
            PorterStemmer.step3 = step3;
            PorterStemmer.step4 = step4;
            PorterStemmer.step5a = step5a;
            PorterStemmer.step5b = step5b;

            /*
            Copyright (c) 2011, Chris Umbel
            Farsi Stop Words by Fardin Koochaki <me@fardinak.com>

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // a list of commonly used words that have little meaning and can be excluded
            // from analysis.
            var words$2 = [
                // Words
                'از', 'با', 'یه', 'برای', 'و', 'باید', 'شاید',

                // Symbols
                '؟', '!', '٪', '.', '،', '؛', ':', ';', ',',
                
                // Numbers
                '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹', '۰'
            ];
                
            // tell the world about the noise words.    
            var words_1$1 = words$2;

            var stopwords_fa = {
            	words: words_1$1
            };

            /*
            Copyright (c) 2011, Chris Umbel
            Farsi Aggressive Tokenizer by Fardin Koochaki <me@fardinak.com>

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var AggressiveTokenizer$1 = function() {
                tokenizer.call(this);    
            };
            util$2.inherits(AggressiveTokenizer$1, tokenizer);

            var aggressive_tokenizer_fa = AggressiveTokenizer$1;

            AggressiveTokenizer$1.prototype.clearEmptyString = function(array) {
            	return array.filter(function(a) {
            		return a != '';
            	});
            };

            AggressiveTokenizer$1.prototype.clearText = function(text) {
            	return text.replace(new RegExp('\.\:\+\-\=\(\)\"\'\!\?\،\,\؛\;', 'g'), ' ');
            };

            AggressiveTokenizer$1.prototype.tokenize = function(text) {
                // break a string up into an array of tokens by anything non-word
                text = this.clearText(text);
                return this.clearEmptyString(text.split(/\s+/));
            };

            /*
            Copyright (c) 2011, Chris Umbel
            Farsi Stemmer by Fardin Koochaki <me@fardinak.com>

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */




            var stemmer_fa = function() {
                var stemmer = this;

                stemmer.stem = function(token) {
                    return token;
                };

                stemmer.tokenizeAndStem = function(text, keepStops) {
                    var stemmedTokens = [];
                    
                    new aggressive_tokenizer_fa().tokenize(text).forEach(function(token) {
                        if(keepStops || stopwords_fa.words.indexOf(token) == -1)
                            stemmedTokens.push(stemmer.stem(token));
                    });
                    
                    return stemmedTokens;
                };

                stemmer.attach = function() {
                    String.prototype.stem = function() {
                        return stemmer.stem(this);
                    };
                    
                    String.prototype.tokenizeAndStem = function(keepStops) {
                        return stemmer.tokenizeAndStem(this, keepStops);
                    };
                };
            };

            /*
            Copyright (c) 2011, Chris Umbel
            Farsi Porter Stemmer by Fardin Koochaki <me@fardinak.com>

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var PorterStemmer$1 = new stemmer_fa();
            var porter_stemmer_fa = PorterStemmer$1;

            // disabled stemming for Farsi
            // Farsi stemming will be supported soon
            PorterStemmer$1.stem = function(token) {
                return token;
            };

            /*
             Copyright (c) 2014, Ismaël Héry

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */

            // A list of commonly used french words that have little meaning and can be excluded
            // from analysis.

            var words$3 = ['être', 'avoir', 'faire',
                'a',
                'au',
                'aux',
                'avec',
                'ce',
                'ces',
                'dans',
                'de',
                'des',
                'du',
                'elle',
                'en',
                'et',
                'eux',
                'il',
                'je',
                'la',
                'le',
                'leur',
                'lui',
                'ma',
                'mais',
                'me',
                'même',
                'mes',
                'moi',
                'mon',
                'ne',
                'nos',
                'notre',
                'nous',
                'on',
                'ou',
                'où',
                'par',
                'pas',
                'pour',
                'qu',
                'que',
                'qui',
                'sa',
                'se',
                'ses',
                'son',
                'sur',
                'ta',
                'te',
                'tes',
                'toi',
                'ton',
                'tu',
                'un',
                'une',
                'vos',
                'votre',
                'vous',
                'c',
                'd',
                'j',
                'l',
                'à',
                'm',
                'n',
                's',
                't',
                'y',
                'été',
                'étée',
                'étées',
                'étés',
                'étant',
                'suis',
                'es',
                'est',
                'sommes',
                'êtes',
                'sont',
                'serai',
                'seras',
                'sera',
                'serons',
                'serez',
                'seront',
                'serais',
                'serait',
                'serions',
                'seriez',
                'seraient',
                'étais',
                'était',
                'étions',
                'étiez',
                'étaient',
                'fus',
                'fut',
                'fûmes',
                'fûtes',
                'furent',
                'sois',
                'soit',
                'soyons',
                'soyez',
                'soient',
                'fusse',
                'fusses',
                'fût',
                'fussions',
                'fussiez',
                'fussent',
                'ayant',
                'eu',
                'eue',
                'eues',
                'eus',
                'ai',
                'as',
                'avons',
                'avez',
                'ont',
                'aurai',
                'auras',
                'aura',
                'aurons',
                'aurez',
                'auront',
                'aurais',
                'aurait',
                'aurions',
                'auriez',
                'auraient',
                'avais',
                'avait',
                'avions',
                'aviez',
                'avaient',
                'eut',
                'eûmes',
                'eûtes',
                'eurent',
                'aie',
                'aies',
                'ait',
                'ayons',
                'ayez',
                'aient',
                'eusse',
                'eusses',
                'eût',
                'eussions',
                'eussiez',
                'eussent',
                'ceci',
                'cela',
                'cet',
                'cette',
                'ici',
                'ils',
                'les',
                'leurs',
                'quel',
                'quels',
                'quelle',
                'quelles',
                'sans',
                'soi'
            ];

            var words_1$2 = words$3;

            var stopwords_fr = {
            	words: words_1$2
            };

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var AggressiveTokenizer$2 = function() {
                tokenizer.call(this);    
            };
            util$2.inherits(AggressiveTokenizer$2, tokenizer);

            var aggressive_tokenizer_fr = AggressiveTokenizer$2;

            AggressiveTokenizer$2.prototype.tokenize = function(text) {
                // break a string up into an array of tokens by anything non-word
                return this.trim(text.split(/[^a-z0-9äâàéèëêïîöôùüûœç]+/i));
            };

            /*
            Copyright (c) 2014, Ismaël Héry

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */




            var stemmer_fr = function() {
               var stemmer = this;

               stemmer.stem = function(token) {
                  return token;
               };

               stemmer.tokenizeAndStem = function(text, keepStops) {
                  var stemmedTokens = [];

                  new aggressive_tokenizer_fr().tokenize(text).forEach(function(token) {
                     if (keepStops || stopwords_fr.words.indexOf(token) == -1) {
                        var resultToken = token.toLowerCase();
                        if (resultToken.match(/[a-zâàëéêèïîôûùç0-9]/gi)) {
                           resultToken = stemmer.stem(resultToken);
                        }
                        stemmedTokens.push(resultToken);
                     }
                  });

                  return stemmedTokens;
               };

               stemmer.attach = function() {
                  String.prototype.stem = function() {
                     return stemmer.stem(this);
                  };

                  String.prototype.tokenizeAndStem = function(keepStops) {
                     return stemmer.tokenizeAndStem(this, keepStops);
                  };
               };
            };

            /*
            Copyright (c) 2014, Ismaël Héry

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            /*
             * Spec for the French Porter Stemmer can be found at:
             * http://snowball.tartarus.org/algorithms/french/stemmer.html
             */



            var PorterStemmer$2 = new stemmer_fr();
            var porter_stemmer_fr = PorterStemmer$2;

            // Export
            PorterStemmer$2.stem = stem;

            // Exports for test purpose
            PorterStemmer$2.prelude = prelude;
            PorterStemmer$2.regions = regions;
            PorterStemmer$2.endsinArr = endsinArr;

            /**
             * Stem a word thanks to Porter Stemmer rules
             * @param  {String} token Word to be stemmed
             * @return {String}       Stemmed word
             */
            function stem(token) {
              token = prelude(token.toLowerCase());

              if (token.length == 1)
                return token;

              var regs = regions(token);

              var r1_txt, r2_txt, rv_txt;
              r1_txt = token.substring(regs.r1);
              r2_txt = token.substring(regs.r2);
              rv_txt = token.substring(regs.rv);

              // Step 1
              var beforeStep1 = token;
              var suf, letterBefore, letter2Before, i;
              var doStep2a = false;

              if ((suf = endsinArr(r2_txt, ['ance', 'iqUe', 'isme', 'able', 'iste', 'eux', 'ances', 'iqUes', 'ismes', 'ables', 'istes'])) != '') {
                token = token.slice(0, -suf.length); // delete
              } else if ((suf = endsinArr(token, ['icatrice', 'icateur', 'ication', 'icatrices', 'icateurs', 'ications'])) != '') {
                if (endsinArr(r2_txt, ['icatrice', 'icateur', 'ication', 'icatrices', 'icateurs', 'ications']) != '') {
                  token = token.slice(0, -suf.length); // delete
                } else {
                  token = token.slice(0, -suf.length) + 'iqU'; // replace by iqU
                }
              } else if ((suf = endsinArr(r2_txt, ['atrice', 'ateur', 'ation', 'atrices', 'ateurs', 'ations'])) != '') {
                token = token.slice(0, -suf.length); // delete
              } else if ((suf = endsinArr(r2_txt, ['logie', 'logies'])) != '') {
                token = token.slice(0, -suf.length) + 'log'; // replace with log
              } else if ((suf = endsinArr(r2_txt, ['usion', 'ution', 'usions', 'utions'])) != '') {
                token = token.slice(0, -suf.length) + 'u'; // replace with u
              } else if ((suf = endsinArr(r2_txt, ['ence', 'ences'])) != '') {
                token = token.slice(0, -suf.length) + 'ent'; // replace with ent
              }
              // ement(s)
              else if ((suf = endsinArr(r1_txt, ['issement', 'issements'])) != '') {
                if (!isVowel$1(token[token.length - suf.length - 1])) {
                  token = token.slice(0, -suf.length); // delete
                  r1_txt = token.substring(regs.r1);
                  r2_txt = token.substring(regs.r2);
                  rv_txt = token.substring(regs.rv);
                }
              } else if ((suf = endsinArr(r2_txt, ['ativement', 'ativements'])) != '') {
                token = token.slice(0, -suf.length); // delete
              } else if ((suf = endsinArr(r2_txt, ['ivement', 'ivements'])) != '') {
                token = token.slice(0, -suf.length); // delete
              } else if ((suf = endsinArr(token, ['eusement', 'eusements'])) != '') {
                if ((suf = endsinArr(r2_txt, ['eusement', 'eusements'])) != '')
                  token = token.slice(0, -suf.length); // delete
                else if ((suf = endsinArr(r1_txt, ['eusement', 'eusements'])) != '')
                  token = token.slice(0, -suf.length) + 'eux'; // replace by eux
                else if ((suf = endsinArr(rv_txt, ['ement', 'ements'])) != '')
                  token = token.slice(0, -suf.length); // delete
              } else if ((suf = endsinArr(r2_txt, ['ablement', 'ablements', 'iqUement', 'iqUements'])) != '') {
                token = token.slice(0, -suf.length); // delete
              } else if ((suf = endsinArr(rv_txt, ['ièrement', 'ièrements', 'Ièrement', 'Ièrements'])) != '') {
                token = token.slice(0, -suf.length) + 'i'; // replace by i
              } else if ((suf = endsinArr(rv_txt, ['ement', 'ements'])) != '') {
                token = token.slice(0, -suf.length); // delete
              }
              // ité(s)
              else if ((suf = endsinArr(token, ['icité', 'icités'])) != '') {
                if (endsinArr(r2_txt, ['icité', 'icités']) != '')
                  token = token.slice(0, -suf.length); // delete
                else
                  token = token.slice(0, -suf.length) + 'iqU'; // replace by iqU
              } else if ((suf = endsinArr(token, ['abilité', 'abilités'])) != '') {
                if (endsinArr(r2_txt, ['abilité', 'abilités']) != '')
                  token = token.slice(0, -suf.length); // delete
                else
                  token = token.slice(0, -suf.length) + 'abl'; // replace by abl
              } else if ((suf = endsinArr(r2_txt, ['ité', 'ités'])) != '') {
                token = token.slice(0, -suf.length); // delete if in R2
              } else if ((suf = endsinArr(token, ['icatif', 'icative', 'icatifs', 'icatives'])) != '') {
                if ((suf = endsinArr(r2_txt, ['icatif', 'icative', 'icatifs', 'icatives'])) != '') {
                  token = token.slice(0, -suf.length); // delete
                  r2_txt = token.substring(regs.r2);
                  rv_txt = token.substring(regs.rv);
                }
                if ((suf = endsinArr(r2_txt, ['atif', 'ative', 'atifs', 'atives'])) != '') {
                  token = token.slice(0, -suf.length - 2) + 'iqU'; // replace with iqU
                  r2_txt = token.substring(regs.r2);
                  rv_txt = token.substring(regs.rv);
                }
              } else if ((suf = endsinArr(r2_txt, ['atif', 'ative', 'atifs', 'atives'])) != '') {
                token = token.slice(0, -suf.length); // delete
              } else if ((suf = endsinArr(r2_txt, ['if', 'ive', 'ifs', 'ives'])) != '') {
                token = token.slice(0, -suf.length); // delete
              } else if ((suf = endsinArr(token, ['eaux'])) != '') {
                token = token.slice(0, -suf.length) + 'eau'; // replace by eau
              } else if ((suf = endsinArr(r1_txt, ['aux'])) != '') {
                token = token.slice(0, -suf.length) + 'al'; // replace by al
              } else if ((suf = endsinArr(r2_txt, ['euse', 'euses'])) != '') {
                token = token.slice(0, -suf.length); // delete
              } else if ((suf = endsinArr(r1_txt, ['euse', 'euses'])) != '') {
                token = token.slice(0, -suf.length) + 'eux'; // replace by eux
              } else if ((suf = endsinArr(rv_txt, ['amment'])) != '') {
                token = token.slice(0, -suf.length) + 'ant'; // replace by ant
                doStep2a = true;
              } else if ((suf = endsinArr(rv_txt, ['emment'])) != '') {
                token = token.slice(0, -suf.length) + 'ent'; // replace by ent
                doStep2a = true;
              } else if ((suf = endsinArr(rv_txt, ['ment', 'ments'])) != '') {
                // letter before must be a vowel in RV
                letterBefore = token[token.length - suf.length - 1];
                if (isVowel$1(letterBefore) && endsin(rv_txt, letterBefore + suf)) {
                  token = token.slice(0, -suf.length); // delete
                  doStep2a = true;
                }
              }

              // re compute regions
              r1_txt = token.substring(regs.r1);
              r2_txt = token.substring(regs.r2);
              rv_txt = token.substring(regs.rv);

              // Step 2a
              var beforeStep2a = token;
              var step2aDone = false;
              if (beforeStep1 === token || doStep2a) {
                step2aDone = true;
                if ((suf = endsinArr(rv_txt, ['îmes', 'ît', 'îtes', 'i', 'ie', 'Ie', 'ies', 'ir', 'ira', 'irai', 'iraIent', 'irais', 'irait', 'iras', 'irent', 'irez', 'iriez', 'irions', 'irons', 'iront', 'is', 'issaIent', 'issais', 'issait', 'issant', 'issante', 'issantes', 'issants', 'isse', 'issent', 'isses', 'issez', 'issiez', 'issions', 'issons', 'it'])) != '') {
                  letterBefore = token[token.length - suf.length - 1];
                  if (!isVowel$1(letterBefore) && endsin(rv_txt, letterBefore + suf))
                    token = token.slice(0, -suf.length); // delete
                }
              }

              // Step 2b
              if (step2aDone && token === beforeStep2a) {
                if ((suf = endsinArr(rv_txt, ['é', 'ée', 'ées', 'és', 'èrent', 'er', 'era', 'erai', 'eraIent', 'erais', 'erait', 'eras', 'erez', 'eriez', 'erions', 'erons', 'eront', 'ez', 'iez', 'Iez'])) != '') {
                  token = token.slice(0, -suf.length); // delete
                  r2_txt = token.substring(regs.r2);
                  rv_txt = token.substring(regs.rv);
                } else if ((suf = endsinArr(rv_txt, ['ions'])) != '' && endsinArr(r2_txt, ['ions'])) {
                  token = token.slice(0, -suf.length); // delete
                  r2_txt = token.substring(regs.r2);
                  rv_txt = token.substring(regs.rv);
                }
                // add 'Ie' suffix to pass test for 'évanouie'
                else if ((suf = endsinArr(rv_txt, ['âmes', 'ât', 'âtes', 'a', 'ai', 'aIent', 'ais', 'ait', 'ant', 'ante', 'antes', 'ants', 'as', 'asse', 'assent', 'asses', 'assiez', 'assions'])) != '') {
                  token = token.slice(0, -suf.length); // delete

                  letterBefore = token[token.length - 1];
                  if (letterBefore === 'e' && endsin(rv_txt, 'e' + suf))
                    token = token.slice(0, -1);

                  r2_txt = token.substring(regs.r2);
                  rv_txt = token.substring(regs.rv);
                }
              }

              // Step 3
              if (!(token === beforeStep1)) {
                if (token[token.length - 1] === 'Y')
                  token = token.slice(0, -1) + 'i';
                if (token[token.length - 1] === 'ç')
                  token = token.slice(0, -1) + 'c';
              } // Step 4
              else {
                letterBefore = token[token.length - 1];
                letter2Before = token[token.length - 2];

                if (letterBefore === 's' && ['a', 'i', 'o', 'u', 'è', 's'].indexOf(letter2Before) == -1) {
                  token = token.slice(0, -1);
                  r1_txt = token.substring(regs.r1);
                  r2_txt = token.substring(regs.r2);
                  rv_txt = token.substring(regs.rv);
                }

                if ((suf = endsinArr(r2_txt, ['ion'])) != '') {
                  letterBefore = token[token.length - suf.length - 1];
                  if (letterBefore === 's' || letterBefore === 't') {
                    token = token.slice(0, -suf.length); // delete
                    r1_txt = token.substring(regs.r1);
                    r2_txt = token.substring(regs.r2);
                    rv_txt = token.substring(regs.rv);
                  }
                }

                if ((suf = endsinArr(rv_txt, ['ier', 'ière', 'Ier', 'Ière'])) != '') {
                  token = token.slice(0, -suf.length) + 'i'; // replace by i
                  r1_txt = token.substring(regs.r1);
                  r2_txt = token.substring(regs.r2);
                  rv_txt = token.substring(regs.rv);
                }
                if ((suf = endsinArr(rv_txt, 'e')) != '') {
                  token = token.slice(0, -suf.length); // delete
                  r1_txt = token.substring(regs.r1);
                  r2_txt = token.substring(regs.r2);
                  rv_txt = token.substring(regs.rv);
                }
                if ((suf = endsinArr(rv_txt, 'ë')) != '') {
                  if (token.slice(token.length - 3, -1) === 'gu')
                    token = token.slice(0, -suf.length); // delete
                }
              }

              // Step 5
              if ((suf = endsinArr(token, ['enn', 'onn', 'ett', 'ell', 'eill'])) != '') {
                token = token.slice(0, -1); // delete last letter
              }

              // Step 6
              i = token.length - 1;
              while (i > 0) {
                if (!isVowel$1(token[i])) {
                  i--;
                } else if (i !== token.length - 1 && (token[i] === 'é' || token[i] === 'è')) {
                  token = token.substring(0, i) + 'e' + token.substring(i + 1, token.length);
                  break;
                } else {
                  break;
                }
              }

              return token.toLowerCase();

            }
            /**
             * Compute r1, r2, rv regions as required by french porter stemmer algorithm
             * @param  {String} token Word to compute regions on
             * @return {Object}       Regions r1, r2, rv as offsets from the begining of the word
             */
            function regions(token) {
              var r1, r2, rv, len;
              var i;

              r1 = r2 = rv = len = token.length;

              // R1 is the region after the first non-vowel following a vowel,
              for (var i = 0; i < len - 1 && r1 == len; i++) {
                if (isVowel$1(token[i]) && !isVowel$1(token[i + 1])) {
                  r1 = i + 2;
                }
              }
              // Or is the null region at the end of the word if there is no such non-vowel.

              // R2 is the region after the first non-vowel following a vowel in R1
              for (i = r1; i < len - 1 && r2 == len; i++) {
                if (isVowel$1(token[i]) && !isVowel$1(token[i + 1])) {
                  r2 = i + 2;
                }
              }
              // Or is the null region at the end of the word if there is no such non-vowel.

              // RV region
              var three = token.slice(0, 3);
              if (isVowel$1(token[0]) && isVowel$1(token[1])) {
                rv = 3;
              }
              if (three === 'par' || three == 'col' || three === 'tap')
                rv = 3;
              // the region after the first vowel not at the beginning of the word or null
              else {
                for (i = 1; i < len - 1 && rv == len; i++) {
                  if (isVowel$1(token[i])) {
                    rv = i + 1;
                  }
                }
              }

              return {
                r1: r1,
                r2: r2,
                rv: rv
              };
            }
            /**
             * Pre-process/prepare words as required by french porter stemmer algorithm
             * @param  {String} token Word to be prepared
             * @return {String}       Prepared word
             */
            function prelude(token) {
              token = token.toLowerCase();

              var result = '';
              var i = 0;

              // special case for i = 0 to avoid '-1' index
              if (token[i] === 'y' && isVowel$1(token[i + 1])) {
                result += token[i].toUpperCase();
              } else {
                result += token[i];
              }

              for (i = 1; i < token.length; i++) {
                if ((token[i] === 'u' || token[i] === 'i') && isVowel$1(token[i - 1]) && isVowel$1(token[i + 1])) {
                  result += token[i].toUpperCase();
                } else if (token[i] === 'y' && (isVowel$1(token[i - 1]) || isVowel$1(token[i + 1]))) {
                  result += token[i].toUpperCase();
                } else if (token[i] === 'u' && token[i - 1] === 'q') {
                  result += token[i].toUpperCase();
                } else {
                  result += token[i];
                }
              }

              return result;
            }
            /**
             * Return longest matching suffixes for a token or '' if no suffix match
             * @param  {String} token    Word to find matching suffix
             * @param  {Array} suffixes  Array of suffixes to test matching
             * @return {String}          Longest found matching suffix or ''
             */
            function endsinArr(token, suffixes) {
              var i, longest = '';
              for (i = 0; i < suffixes.length; i++) {
                if (endsin(token, suffixes[i]) && suffixes[i].length > longest.length)
                  longest = suffixes[i];
              }

              return longest;
            }

            function isVowel$1(letter) {
              return (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' || letter == 'y' || letter == 'â' || letter == 'à' || letter == 'ë' ||
                letter == 'é' || letter == 'ê' || letter == 'è' || letter == 'ï' || letter == 'î' || letter == 'ô' || letter == 'û' || letter == 'ù');
            }
            function endsin(token, suffix) {
              if (token.length < suffix.length) return false;
              return (token.slice(-suffix.length) == suffix);
            }

            /*
            Copyright (c) 2011, Polyakov Vladimir, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // a list of commonly used words that have little meaning and can be excluded
            // from analysis.
            var words$4 = [
                'о', 'после', 'все', 'также', 'и', 'другие', 'все', 'как', 'во', 'быть',
                'потому', 'был', 'до', 'являюсь', 'между', 'все', 'но', 'от', 'иди', 'могу',
                'подойди', 'мог', 'делал', 'делаю', 'каждый', 'для', 'откуда', 'иметь', 'имел',
                'он', 'имеет', 'её', 'здесь', 'его', 'как', 'если', 'в', 'оно', 'за',
                'делать', 'много', 'я', 'может быть', 'более', 'самый', 'должен',
                'мой', 'никогда', 'сейчас', 'из', 'на', 'только', 'или', 'другой', 'другая',
                'другое', 'наше', 'вне', 'конец', 'сказал', 'сказала', 'также', 'видел', 'c',
                'немного', 'все еще', 'так', 'затем', 'тот', 'их', 'там', 'этот', 'они', 'те',
                'через', 'тоже', 'под', 'над', 'очень', 'был', 'путь', 'мы', 'хорошо',
                'что', 'где', 'который', 'пока', 'кто', 'с кем', 'хотел бы', 'ты', 'твои',
                'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н',
                'o', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь',
                'э', 'ю', 'я','$', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];
                
            // tell the world about the noise words.    
            var words_1$3 = words$4;

            var stopwords_ru = {
            	words: words_1$3
            };

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var AggressiveTokenizer$3 = function() {
                tokenizer.call(this);    
            };

            util$2.inherits(AggressiveTokenizer$3, tokenizer);

            var aggressive_tokenizer_ru = AggressiveTokenizer$3;

            AggressiveTokenizer$3.prototype.withoutEmpty = function(array) {
            	return array.filter(function(a) {return a;});
            };

            AggressiveTokenizer$3.prototype.clearText = function(text) {
            	return text.replace(/[^a-zа-яё0-9]/gi, ' ').replace(/[\s\n]+/g, ' ').trim();
            };

            AggressiveTokenizer$3.prototype.tokenize = function(text) {
                // break a string up into an array of tokens by anything non-word
                return this.withoutEmpty(this.clearText(text).split(' '));
            };

            /*
            Copyright (c) 2012, Polyakov Vladimir, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */




            var stemmer_ru = function() {
                var stemmer = this;

                stemmer.stem = function(token) {
                    return token;
                };

                stemmer.tokenizeAndStem = function(text, keepStops) {
                    var stemmedTokens = [];
                    
                    new aggressive_tokenizer_ru().tokenize(text).forEach(function(token) {
                        if (keepStops || stopwords_ru.words.indexOf(token) == -1) {
                            var resultToken = token.toLowerCase();
                            if (resultToken.match(new RegExp('[а-яё0-9]+', 'gi'))) {
                                resultToken = stemmer.stem(resultToken);
                            }
                            stemmedTokens.push(resultToken);
                        }
                    });
                    
                    return stemmedTokens;
                };

                stemmer.attach = function() {
                    String.prototype.stem = function() {
                        return stemmer.stem(this);
                    };
                    
                    String.prototype.tokenizeAndStem = function(keepStops) {
                        return stemmer.tokenizeAndStem(this, keepStops);
                    };
                };
            };

            /*
            Copyright (c) 2012, Polyakov Vladimir, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var PorterStemmer$3 = new stemmer_ru();
            var porter_stemmer_ru = PorterStemmer$3;

            function attemptReplacePatterns$1(token, patterns) {
            	var replacement = null;
            	var i = 0, isReplaced = false;
            	while ((i < patterns.length) && !isReplaced) {
            		if (patterns[i][0].test(token)) {
            			replacement = token.replace(patterns[i][0], patterns[i][1]);
            			isReplaced = true;
            		}
            		i++;
            	}
            	return replacement;
            }
            function perfectiveGerund(token) {
            	var result = attemptReplacePatterns$1(token, [
            			[/[ая]в(ши|шись)$/g, ''],
            			[/(ив|ивши|ившись|ывши|ывшись|ыв)$/g, '']
            		]);
            	return result;
            }
            function adjectival(token) {
            	var result = adjective(token);
            	if (result != null) {
            		var pariticipleResult = participle(result);
            		result = pariticipleResult ? pariticipleResult : result;
            	}
            	return result;
            }
            function adjective(token) {
            	var result = attemptReplacePatterns$1(token, [
            			[/(ее|ие|ые|ое|ими|ыми|ей|ий|ый|ой|ем|им|ым|ом|его|ого|ему|ому|их|ых|ую|юю|ая|яя|ою|ею)$/g, '']
            		]);
            	return result;
            }
            function participle(token) {
            	var result = attemptReplacePatterns$1(token, [
            		[/([ая])(ем|нн|вш|ющ|щ)$/g, '$1'],
            		[/(ивш|ывш|ующ)$/g, '']
            	]);
            	return result;
            }
            function reflexive(token) {
            	var result = attemptReplacePatterns$1(token, [
            		[/(ся|сь)$/g, '']
            	]);
            	return result;
            }
            function verb(token) {
            	var result = attemptReplacePatterns$1(token, [
            		[/([ая])(ла|на|ете|йте|ли|й|л|ем|н|ло|но|ет|ют|ны|ть|ешь|нно)$/g, '$1'],
            		[/(ила|ыла|ена|ейте|уйте|ите|или|ыли|ей|уй|ил|ыл|им|ым|ен|ило|ыло|ено|ят|ует|ит|ыт|ены|ить|ыть|ишь|ую|ю)$/g, '']
            	]);
            	return result;
            }
            function noun(token) {
            	var result = attemptReplacePatterns$1(token, [
            		[/(а|ев|ов|ие|ье|е|иями|ями|ами|еи|ии|и|ией|ей|ой|ий|й|иям|ям|ием|ем|ам|ом|о|у|ах|иях|ях|ы|ь|ию|ью|ю|ия|ья|я)$/g, '']
            	]);
            	return result;
            }
            function superlative (token) {
            	var result = attemptReplacePatterns$1(token, [
            		[/(ейш|ейше)$/g, '']
            	]);
            	return result;
            }
            function derivational (token) {
            	var result = attemptReplacePatterns$1(token, [
            		[/(ост|ость)$/g, '']
            	]);
            	return result;
            }
            // perform full stemming algorithm on a single word
            PorterStemmer$3.stem = function(token) {
            	token = token.toLowerCase().replace(/ё/g, 'е');
            	var volwesRegexp = /^(.*?[аеиоюяуыиэ])(.*)$/g;
            	var RV = volwesRegexp.exec(token);
            	if (!RV || RV.length < 3) {
            		return token;
            	}
            	var head = RV[1];
            	RV = RV[2];
            	volwesRegexp.lastIndex = 0;
            	var R2 = volwesRegexp.exec(RV);
            	var result = perfectiveGerund(RV);
            	if (result === null) {
            		var resultReflexive = reflexive(RV) || RV;
            		result = adjectival(resultReflexive);
            		if (result === null) {
            			result = verb(resultReflexive);
            			if (result === null) {
            				result = noun(resultReflexive);
            				if (result === null) {
            					result = resultReflexive;
            				}
            			}
            		}
            	}
            	result = result.replace(/и$/g, '');
            	var derivationalResult = result;
            	if (R2 && R2[2]) {
            		derivationalResult = derivational(R2[2]);
            		if (derivationalResult != null) {
            			derivationalResult = derivational(result);
            		} else {
            			derivationalResult = result;
            		}
            	}

            	var superlativeResult = superlative(derivationalResult) || derivationalResult;

            	superlativeResult = superlativeResult.replace(/(н)н/g, '$1');
            	superlativeResult = superlativeResult.replace(/ь$/g, '');
            	return head + superlativeResult;
            };

            /*
            Copyright (c) 2011, David Przybilla, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // a list of commonly used words that have little meaning and can be excluded
            // from analysis.
            var words$5 = [
                'a','un','el','ella','y','sobre','de','la','que','en',
                'los','del','se','las','por','un','para','con','no',
                'una','su','al','lo','como','más','pero','sus','le',
                'ya','o','porque','cuando','muy','sin','sobre','también',
                'me','hasta','donde','quien','desde','nos','durante','uno',
                'ni','contra','ese','eso','mí','qué','otro','él','cual',
                'poco','mi','tú','te','ti','sí',
                 '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];
                
            // tell the world about the noise words.    
            var words_1$4 = words$5;

            var stopwords_es = {
            	words: words_1$4
            };

            /*
            Copyright (c) 2011, Chris Umbel,David Przybilla

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var AggressiveTokenizer$4 = function() {
                tokenizer.call(this);    
            };
            util$2.inherits(AggressiveTokenizer$4, tokenizer);

            var aggressive_tokenizer_es = AggressiveTokenizer$4;

            AggressiveTokenizer$4.prototype.tokenize = function(text) {
                // break a string up into an array of tokens by anything non-word
                return this.trim(text.split(/[^a-zA-Zá-úÁ-ÚñÑüÜ]+/));
            };

            /*
            Copyright (c) 2012, David Przybilla, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */




            var stemmer_es = function() {
                var stemmer = this;

                stemmer.stem = function(token) {
                    return token;
                };

                stemmer.tokenizeAndStem = function(text, keepStops) {
                    var stemmedTokens = [];
                    
                    new aggressive_tokenizer_es().tokenize(text).forEach(function(token) {
                        if (keepStops || stopwords_es.words.indexOf(token) == -1) {
                            var resultToken = token.toLowerCase();
                            if (resultToken.match(new RegExp('[a-záéíóúüñ0-9]+', 'gi'))) {
                                resultToken = stemmer.stem(resultToken);
                            }
                            stemmedTokens.push(resultToken);
                        }
                    });
                    
                    return stemmedTokens;
                };

                stemmer.attach = function() {
                    String.prototype.stem = function() {
                        return stemmer.stem(this);
                    };
                    
                    String.prototype.tokenizeAndStem = function(keepStops) {
                        return stemmer.tokenizeAndStem(this, keepStops);
                    };
                };
            };

            /*
            Copyright (c) 2012, David Przybilla, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var PorterStemmer$4 = new stemmer_es();
            var porter_stemmer_es = PorterStemmer$4;


            function isVowel$2(letter){
            	return (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' || letter == 'á' || letter == 'é' ||
            			letter == 'í' || letter == 'ó' || letter == 'ú');
            }
            function getNextVowelPos(token,start){
            	length=token.length;
            			for (var i = start; i < length; i++)
            				if (isVowel$2(token[i])) return i;
            			return length;
            }
            function getNextConsonantPos(token,start){
            	length=token.length;
            			for (var i = start; i < length; i++)
            				if (!isVowel$2(token[i])) return i;
            			return length;
            }

            function endsin$1(token, suffix) {
            	if (token.length < suffix.length) return false;
            	return (token.slice(-suffix.length) == suffix);
            }
            function endsinArr$1(token, suffixes) {
            	for(var i=0;i<suffixes.length;i++){
            		if (endsin$1(token, suffixes[i])) return suffixes[i];
            	}
            	return '';
            }
            function removeAccent(token) {
            	var str=token.replace(/á/gi,'a');
            	str=str.replace(/é/gi,'e');
            	str=str.replace(/í/gi,'i');
            	str=str.replace(/ó/gi,'o');
            	str=str.replace(/ú/gi,'u');
            	return str;
            }
            // perform full stemming algorithm on a single word
            PorterStemmer$4.stem = function(token) {
            	token = token.toLowerCase();

            	if (token.length<3){
            		return token;
            	}

            	var r1,r2,rv,len= token.length;
            	//looking for regions after vowels

            	for(var i=0; i< token.length-1 && r1==len;i++){
             		if(isVowel$2(token[i]) && !isVowel$2(token[i+1]) ){
             			r1=i+2;
             		}

            	}

            	for(var i=r1; i< token.length-1 && r2==len;i++){
            		if(isVowel$2(token[i]) && !isVowel$2(token[i+1])){
            			r2=i+2;
            		}
            	}

            	if (len > 3) {
            			if(isVowel$2(token[1])) {
            				// If the second letter is a consonant, RV is the region after the next following vowel
            				rv = getNextVowelPos(token, 2) +1;
            			} else if (isVowel$2(token[0]) && isVowel$2(token[1])) {
            				// or if the first two letters are vowels, RV is the region after the next consonant
            				rv = getNextConsonantPos(token, 2) + 1;
            			} else {
            				//otherwise (consonant-vowel case) RV is the region after the third letter. But RV is the end of the word if these positions cannot be found.
            				rv = 3;
            			}
            		}

            	var r1_txt = token.substring(r1-1);
            	var r2_txt = token.substring(r2-1);
            	var rv_txt = token.substring(rv-1);


            	var token_orig = token;

            	// Step 0: Attached pronoun
            	var pronoun_suf = new Array('me', 'se', 'sela', 'selo', 'selas', 'selos', 'la', 'le', 'lo', 'las', 'les', 'los', 'nos');
            	var pronoun_suf_pre1 = new Array('éndo', 'ándo', 'ár', 'ér', 'ír');
            	var pronoun_suf_pre2 = new Array('ando', 'iendo', 'ar', 'er', 'ir');
            	var suf = endsinArr$1(token, pronoun_suf);


            	if (suf!='') {

            		var pre_suff = endsinArr$1(rv_txt.slice(0,-suf.length),pronoun_suf_pre1);

            		if (pre_suff != '') {

            				token = removeAccent(token.slice(0,-suf.length));
            		} else {
            			var pre_suff = endsinArr$1(rv_txt.slice(0,-suf.length),pronoun_suf_pre2);

            			if (pre_suff != '' ||
            				(endsin$1(token, 'yendo' ) &&
            				(token.slice(-suf.length-6,1) == 'u'))) {
            				token = token.slice(0,-suf.length);
            			}
            		}
            	}

            		if (token != token_orig) {
            			r1_txt = token.substring(r1-1);
            			r2_txt = token.substring(r2-1);
            			rv_txt = token.substring(rv-1);
            		}
            		var token_after0 = token;

            		if ((suf = endsinArr$1(r2_txt, new Array('anza', 'anzas', 'ico', 'ica', 'icos', 'icas', 'ismo', 'ismos', 'able', 'ables', 'ible', 'ibles', 'ista', 'istas', 'oso', 'osa', 'osos', 'osas', 'amiento', 'amientos', 'imiento', 'imientos'))) != '') {
            			token = token.slice(0, -suf.length);
            		} else if ((suf = endsinArr$1(r2_txt, new  Array('icadora', 'icador', 'icación', 'icadoras', 'icadores', 'icaciones', 'icante', 'icantes', 'icancia', 'icancias', 'adora', 'ador', 'ación', 'adoras', 'adores', 'aciones', 'ante', 'antes', 'ancia', 'ancias'))) != '') {
            			token = token.slice(0,  -suf.length);
            		} else if ((suf = endsinArr$1(r2_txt, new  Array('logía', 'logías'))) != '') {
            			token = token.slice(0,  -suf.length)+ 'log';
            		} else if ((suf =endsinArr$1(r2_txt, new  Array('ución', 'uciones'))) != '') {
            			token = token.slice(0,  -suf.length) + 'u';
            		} else if ((suf = endsinArr$1(r2_txt, new  Array('encia', 'encias'))) != '') {
            			token = token.slice(0,  -suf.length)+ 'ente';
            		} else if ((suf = endsinArr$1(r2_txt, new  Array('ativamente', 'ivamente', 'osamente', 'icamente', 'adamente'))) != '') {
            			token = token.slice(0,  -suf.length);
            		} else if ((suf = endsinArr$1(r1_txt, new  Array('amente'))) != '') {
            			token = token.slice(0,  -suf.length);
            		} else if ((suf = endsinArr$1(r2_txt, new  Array('antemente', 'ablemente', 'iblemente', 'mente'))) != '') {
            			token = token.slice(0,  -suf.length);
            		} else if ((suf = endsinArr$1(r2_txt, new  Array('abilidad', 'abilidades', 'icidad', 'icidades', 'ividad', 'ividades', 'idad', 'idades'))) != '') {
            			token = token.slice(0,  -suf.length);
            		} else if ((suf = endsinArr$1(r2_txt, new  Array('ativa', 'ativo', 'ativas', 'ativos', 'iva', 'ivo', 'ivas', 'ivos'))) != '') {
            			token = token.slice(0,  -suf.length);
            		}

            		if (token != token_after0) {
            			r1_txt = token.substring(r1-1);
            			r2_txt = token.substring(r2-1);
            			rv_txt = token.substring(rv-1);
            		}
            		var token_after1 = token;

            		if (token_after0 == token_after1) {
            			// Do step 2a if no ending was removed by step 1.
            			if ((suf = endsinArr$1(rv_txt, new Array('ya', 'ye', 'yan', 'yen', 'yeron', 'yendo', 'yo', 'yó', 'yas', 'yes', 'yais', 'yamos'))) != '' && (token.substring(suf.length-1,1) == 'u')) {
            				token = token.slice(0, -suf.length);
            			}

            			if (token != token_after1) {
            				r1_txt = token.substring(r1-1);
            				r2_txt = token.substring(r2-1);
            				rv_txt = token.substring(rv-1);
            			}
            			var token_after2a = token;

            			// Do Step 2b if step 2a was done, but failed to remove a suffix.
            			if (token_after2a == token_after1) {

            				if ((suf = endsinArr$1(rv_txt,new Array('en', 'es', 'éis', 'emos'))) != '') {
            					token = token.slice(0,-suf.length);
            					if (endsin$1(token, 'gu')) {
            						token = token.slice(0,-1);
            					}
            				} else if ((suf = endsinArr$1(rv_txt, new Array('arían', 'arías', 'arán', 'arás', 'aríais', 'aría', 'aréis', 'aríamos', 'aremos', 'ará', 'aré', 'erían', 'erías', 'erán', 'erás', 'eríais', 'ería', 'eréis', 'eríamos', 'eremos', 'erá', 'eré', 'irían', 'irías', 'irán', 'irás', 'iríais', 'iría', 'iréis', 'iríamos', 'iremos', 'irá', 'iré', 'aba', 'ada', 'ida', 'ía', 'ara', 'iera', 'ad', 'ed', 'id', 'ase', 'iese', 'aste', 'iste', 'an', 'aban', 'ían', 'aran', 'ieran', 'asen', 'iesen', 'aron', 'ieron', 'ado', 'ido', 'ando', 'iendo', 'ió', 'ar', 'er', 'ir', 'as', 'abas', 'adas', 'idas', 'ías', 'aras', 'ieras', 'ases', 'ieses', 'ís', 'áis', 'abais', 'íais', 'arais', 'ierais', '  aseis', 'ieseis', 'asteis', 'isteis', 'ados', 'idos', 'amos', 'ábamos', 'íamos', 'imos', 'áramos', 'iéramos', 'iésemos', 'ásemos'))) != '') {

            					token = token.slice(0, -suf.length);

            				}
            			}
            		}

            		// Always do step 3.
            		r1_txt = token.substring(r1-1);
            		r2_txt = token.substring(r2-1);
            		rv_txt = token.substring(rv-1);

            		if ((suf = endsinArr$1(rv_txt, new Array('os', 'a', 'o', 'á', 'í', 'ó'))) != '') {
            			token = token.slice(0, -suf.length);
            		} else if ((suf = endsinArr$1(rv_txt ,new Array('e','é'))) != '') {
            			token = token.slice(0,-1);
            			rv_txt = token.substring(rv-1);
            			if (endsin$1(rv_txt,'u') && endsin$1(token,'gu')) {
            				token = token.slice(0,-1);
            			}
            		}

            		return removeAccent(token);

            };

            /*
            Copyright (c) 2011, David Przybilla, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // a list of commonly used words that have little meaning and can be excluded
            // from analysis.
            var words$6 = [
                'ad','al','allo','ai','agli','all','agl','alla','alle','con','col','coi','da','dal','dallo',
                'dai','dagli','dall','dagl','dalla','dalle','di','del','dello','dei','degli','dell','degl',
                'della','delle','in','nel','nello','nei','negli','nell','negl','nella','nelle','su','sul',
                'sullo','sui','sugli','sull','sugl','sulla','sulle','per','tra','contro','io','tu','lui',
                'lei','noi','voi','loro','mio','mia','miei','mie','tuo','tua','tuoi','tue','suo','sua','suoi',
                'sue','nostro','nostra','nostri','nostre','vostro','vostra','vostri','vostre','mi','ti','ci',
                'vi','lo','la','li','le','gli','ne','il','un','uno','una','ma','ed','se','perché','anche','come',
                'dov','dove','che','chi','cui','non','più','quale','quanto','quanti','quanta','quante','quello',
                'quelli','quella','quelle','questo','questi','questa','queste','si','tutto','tutti','a','c','e',
                'i','l','o','ho','hai','ha','abbiamo','avete','hanno','abbia','abbiate','abbiano','avrò','avrai',
                'avrà','avremo','avrete','avranno','avrei','avresti','avrebbe','avremmo','avreste','avrebbero',
                'avevo','avevi','aveva','avevamo','avevate','avevano','ebbi','avesti','ebbe','avemmo','aveste',
                'ebbero','avessi','avesse','avessimo','avessero','avendo','avuto','avuta','avuti','avute','sono',
                'sei','è','siamo','siete','sia','siate','siano','sarò','sarai','sarà','saremo','sarete','saranno',
                'sarei','saresti','sarebbe','saremmo','sareste','sarebbero','ero','eri','era','eravamo','eravate',
                'erano','fui','fosti','fu','fummo','foste','furono','fossi','fosse','fossimo','fossero','essendo',
                'faccio','fai','facciamo','fanno','faccia','facciate','facciano','farò','farai','farà','faremo',
                'farete','faranno','farei','faresti','farebbe','faremmo','fareste','farebbero','facevo','facevi',
                'faceva','facevamo','facevate','facevano','feci','facesti','fece','facemmo','faceste','fecero',
                'facessi','facesse','facessimo','facessero','facendo','sto','stai','sta','stiamo','stanno','stia',
                'stiate','stiano','starò','starai','starà','staremo','starete','staranno','starei','staresti',
                'starebbe','staremmo','stareste','starebbero','stavo','stavi','stava','stavamo','stavate','stavano',
                'stetti','stesti','stette','stemmo','steste','stettero','stessi','stesse','stessimo','stessero','stando',
                 '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];
                
            // tell the world about the noise words.    
            var words_1$5 = words$6;

            var stopwords_it = {
            	words: words_1$5
            };

            /*
            Copyright (c) 2011, Chris Umbel,David Przybilla

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var AggressiveTokenizer$5 = function() {
                tokenizer.call(this);    
            };
            util$2.inherits(AggressiveTokenizer$5, tokenizer);

            var aggressive_tokenizer_it = AggressiveTokenizer$5;

            AggressiveTokenizer$5.prototype.tokenize = function(text) {
                // break a string up into an array of tokens by anything non-word
                return this.trim(text.split(/\W+/));
            };

            var stemmer_it = function() {
                var stemmer = this;

                stemmer.stem = function(token) {
                    return token;
                };

                stemmer.tokenizeAndStem = function(text, keepStops) {
                    var stemmedTokens = [];
                    
                    new aggressive_tokenizer_it().tokenize(text).forEach(function(token) {
                        if (keepStops || stopwords_it.words.indexOf(token) == -1) {
                            var resultToken = token.toLowerCase();
                            if (resultToken.match(/[a-zàèìòù0-9]/gi)) {
                                resultToken = stemmer.stem(resultToken);
                            }
                            stemmedTokens.push(resultToken);
                        }
                    });
                    
                    return stemmedTokens;
                };

                stemmer.attach = function() {
                    String.prototype.stem = function() {
                        return stemmer.stem(this);
                    };
                    
                    String.prototype.tokenizeAndStem = function(keepStops) {
                        return stemmer.tokenizeAndStem(this, keepStops);
                    };
                };
            };

            /*
            Copyright (c) 2012, Leonardo Fenu, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var PorterStemmer$5 = new stemmer_it();
            var porter_stemmer_it = PorterStemmer$5;


            function isVowel$3(letter){
            	return (letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' || letter == 'à' ||
            			letter == 'è' || letter == 'ì' || letter == 'ò' || letter == 'ù');
            }
            function getNextVowelPos$1(token,start){
            	start = start + 1;
            	var length = token.length;
            	for (var i = start; i < length; i++) {
            		if (isVowel$3(token[i])) {
            			return i;
            		}
            	}
            	return length;
            }
            function getNextConsonantPos$1(token,start){
            	length=token.length;
            			for (var i = start; i < length; i++)
            				if (!isVowel$3(token[i])) return i;
            			return length;
            }

            function endsin$2(token, suffix) {
            	if (token.length < suffix.length) return false;
            	return (token.slice(-suffix.length) == suffix);
            }
            function endsinArr$2(token, suffixes) {
            	for(var i=0;i<suffixes.length;i++){
            		if (endsin$2(token, suffixes[i])) return suffixes[i];
            	}
            	return '';
            }
            function replaceAcute(token) {
            	var str=token.replace(/á/gi,'à');
            	str=str.replace(/é/gi,'è');
            	str=str.replace(/í/gi,'ì');
            	str=str.replace(/ó/gi,'ò');
            	str=str.replace(/ú/gi,'ù');
            	return str;
            }
            function vowelMarking(token) {
            	function replacer(match, p1, p2, p3){
              		return p1+p2.toUpperCase()+p3;
            	}	str=token.replace(/([aeiou])(i|u)([aeiou])/g, replacer);	
            	return str;
            }


            // perform full stemming algorithm on a single word
            PorterStemmer$5.stem = function(token) {
            	
            	token = token.toLowerCase();
            	token = replaceAcute(token);
            	token = token.replace(/qu/g,'qU');	
            	token = vowelMarking(token);
            	
            	if (token.length<3){
            		return token;
            	}

            	var r1 = r2 = rv = len = token.length;
            	// R1 is the region after the first non-vowel following a vowel, 
            	for(var i=0; i < token.length-1 && r1==len;i++){
             		if(isVowel$3(token[i]) && !isVowel$3(token[i+1]) ){
             			r1=i+2;
             		}
            	}
            	// Or is the null region at the end of the word if there is no such non-vowel.  

            	// R2 is the region after the first non-vowel following a vowel in R1
            	for(var i=r1; i< token.length-1 && r2==len;i++){
            		if(isVowel$3(token[i]) && !isVowel$3(token[i+1])){
            			r2=i+2;
            		}
            	}

            	// Or is the null region at the end of the word if there is no such non-vowel. 

            	// If the second letter is a consonant, RV is the region after the next following vowel, 
            	
            	// RV as follow

            	if (len > 3) {
            		if(!isVowel$3(token[1])) {
            			// If the second letter is a consonant, RV is the region after the next following vowel
            			rv = getNextVowelPos$1(token, 1) +1;
            		} else if (isVowel$3(token[0]) && isVowel$3(token[1])) { 
            			// or if the first two letters are vowels, RV is the region after the next consonant
            			rv = getNextConsonantPos$1(token, 2) + 1;
            		} else {
            			//otherwise (consonant-vowel case) RV is the region after the third letter. But RV is the end of the word if these positions cannot be found.
            			rv = 3;
            		}
            	}

            	var r1_txt = token.substring(r1);
            	var r2_txt = token.substring(r2);
            	var rv_txt = token.substring(rv);

            	var token_orig = token;

            	// Step 0: Attached pronoun

            	var pronoun_suf = new Array('glieli','glielo','gliene','gliela','gliele','sene','tene','cela','cele','celi','celo','cene','vela','vele','veli','velo','vene','mela','mele','meli','melo','mene','tela','tele','teli','telo','gli','ci', 'la','le','li','lo','mi','ne','si','ti','vi');	
            	var pronoun_suf_pre1 = new Array('ando','endo');	
            	var pronoun_suf_pre2 = new Array('ar', 'er', 'ir');
            	var suf = endsinArr$2(token, pronoun_suf);

            	if (suf!='') {
            		var pre_suff1 = endsinArr$2(rv_txt.slice(0,-suf.length),pronoun_suf_pre1);
            		var pre_suff2 = endsinArr$2(rv_txt.slice(0,-suf.length),pronoun_suf_pre2);	
            		
            		if (pre_suff1 != '') {
            			token = token.slice(0,-suf.length);
            		}
            		if (pre_suff2 != '') {
            			token = token.slice(0,  -suf.length)+ 'e';
            		}
            	}

            	if (token != token_orig) {
            		r1_txt = token.substring(r1);
            		r2_txt = token.substring(r2);
            		rv_txt = token.substring(rv);
            	}

            	var token_after0 = token;

            	// Step 1:  Standard suffix removal
            	
            	if ((suf = endsinArr$2(r2_txt, new  Array('ativamente','abilamente','ivamente','osamente','icamente'))) != '') {
            		token = token.slice(0, -suf.length);	// delete
            	} else if ((suf = endsinArr$2(r2_txt, new  Array('icazione','icazioni','icatore','icatori','azione','azioni','atore','atori'))) != '') {
            		token = token.slice(0,  -suf.length);	// delete
            	} else if ((suf = endsinArr$2(r2_txt, new  Array('logia','logie'))) != '') {
            		token = token.slice(0,  -suf.length)+ 'log'; // replace with log
            	} else if ((suf =endsinArr$2(r2_txt, new  Array('uzione','uzioni','usione','usioni'))) != '') {
            		token = token.slice(0,  -suf.length) + 'u'; // replace with u
            	} else if ((suf = endsinArr$2(r2_txt, new  Array('enza','enze'))) != '') {
            		token = token.slice(0,  -suf.length)+ 'ente'; // replace with ente
            	} else if ((suf = endsinArr$2(rv_txt, new  Array('amento', 'amenti', 'imento', 'imenti'))) != '') {
            		token = token.slice(0,  -suf.length);	// delete
            	} else if ((suf = endsinArr$2(r1_txt, new  Array('amente'))) != '') {
            		token = token.slice(0,  -suf.length); // delete
            	} else if ((suf = endsinArr$2(r2_txt, new Array('atrice','atrici','abile','abili','ibile','ibili','mente','ante','anti','anza','anze','iche','ichi','ismo','ismi','ista','iste','isti','istà','istè','istì','ico','ici','ica','ice','oso','osi','osa','ose'))) != '') {
            		token = token.slice(0,  -suf.length); // delete
            	} else if ((suf = endsinArr$2(r2_txt, new  Array('abilità', 'icità', 'ività', 'ità'))) != '') {
            		token = token.slice(0,  -suf.length); // delete
            	} else if ((suf = endsinArr$2(r2_txt, new  Array('icativa','icativo','icativi','icative','ativa','ativo','ativi','ative','iva','ivo','ivi','ive'))) != '') {
            		token = token.slice(0,  -suf.length);
            	}
            	
            	
            	if (token != token_after0) {
            		r1_txt = token.substring(r1);
            		r2_txt = token.substring(r2);
            		rv_txt = token.substring(rv);
            	}
            	

            	var token_after1 = token;
            	
            	// Step 2:  Verb suffixes

            	if (token_after0 == token_after1) {
            		if ((suf = endsinArr$2(rv_txt, new Array('erebbero','irebbero','assero','assimo','eranno','erebbe','eremmo','ereste','eresti','essero','iranno','irebbe','iremmo','ireste','iresti','iscano','iscono','issero','arono','avamo','avano','avate','eremo','erete','erono','evamo','evano','evate','iremo','irete','irono','ivamo','ivano','ivate','ammo','ando','asse','assi','emmo','enda','ende','endi','endo','erai','Yamo','iamo','immo','irai','irei','isca','isce','isci','isco','erei','uti','uto','ita','ite','iti','ito','iva','ivi','ivo','ono','uta','ute','ano','are','ata','ate','ati','ato','ava','avi','avo','erà','ere','erò','ete','eva','evi','evo','irà','ire','irò','ar','ir'))) != '') {
            			token = token.slice(0, -suf.length);
            		}
            	}

            	
            	r1_txt = token.substring(r1);
            	r2_txt = token.substring(r2);
            	rv_txt = token.substring(rv);

            	// Always do step 3. 

            	if ((suf = endsinArr$2(rv_txt, new Array('ia', 'ie', 'ii', 'io', 'ià', 'iè','iì', 'iò','a','e','i','o','à','è','ì','ò'))) != '') {
            		token = token.slice(0, -suf.length);
            	} 

            	r1_txt = token.substring(r1);
            	r2_txt = token.substring(r2);
            	rv_txt = token.substring(rv);
            	
            	if ((suf =endsinArr$2(rv_txt, new  Array('ch'))) != '') {
            		token = token.slice(0,  -suf.length) + 'c'; // replace with c
            	} else if ((suf =endsinArr$2(rv_txt, new  Array('gh'))) != '') {
            		token = token.slice(0,  -suf.length) + 'g'; // replace with g
            	}

            	
            	r1_txt = token.substring(r1);
            	r2_txt = token.substring(r2);
            	rv_txt = token.substring(rv);

            	return token.toLowerCase();

            };

            /*
            Copyright (c) 2014, Kristoffer Brabrand

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // a list of commonly used words that have little meaning and can be excluded
            // from analysis.
            var words$7 = [
                'og','i','jeg','det','at','en','et','den','til','er','som',
                'på','de','med','han','av','ikke','der','så','var','meg',
                'seg','men','ett','har','om','vi','min','mitt','ha','hadde',
                'hun','nå','over','da','ved','fra','du','ut','sin','dem',
                'oss','opp','man','kan','hans','hvor','eller','hva','skal',
                'selv','sjøl','her','alle','vil','bli','ble','blitt','kunne',
                'inn','når','være','kom','noen','noe','ville','dere','som',
                'deres','kun','ja','etter','ned','skulle','denne','for','deg',
                'si','sine','sitt','mot','å','meget','hvorfor','dette','disse',
                'uten','hvordan','ingen','din','ditt','blir','samme','hvilken',
                'hvilke','sånn','inni','mellom','vår','hver','hvem','vors',
                'hvis','både','bare','enn','fordi','før','mange','også','slik',
                'vært','være','begge','siden','henne','hennar','hennes',
                '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];

            // tell the world about the noise words.
            var words_1$6 = words$7;

            var stopwords_no = {
            	words: words_1$6
            };

            /*
             Copyright (c) 2014, Kristoffer Brabrand

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */

            /**
             * Remove commonly used diacritic marks from a string as these
             * are not used in a consistent manner. Leave only ä, ö, ü.
             */
            var remove_diacritics = function(text) {
                text = text.replace('à', 'a');
                text = text.replace('À', 'A');
                text = text.replace('á', 'a');
                text = text.replace('Á', 'A');
                text = text.replace('â', 'a');
                text = text.replace('Â', 'A');
                text = text.replace('ç', 'c');
                text = text.replace('Ç', 'C');
                text = text.replace('è', 'e');
                text = text.replace('È', 'E');
                text = text.replace('é', 'e');
                text = text.replace('É', 'E');
                text = text.replace('ê', 'e');
                text = text.replace('Ê', 'E');
                text = text.replace('î', 'i');
                text = text.replace('Î', 'I');
                text = text.replace('ñ', 'n');
                text = text.replace('Ñ', 'N');
                text = text.replace('ó', 'o');
                text = text.replace('Ó', 'O');
                text = text.replace('ô', 'o');
                text = text.replace('Ô', 'O');
                text = text.replace('û', 'u');
                text = text.replace('Û', 'U');
                text = text.replace('š', 's');
                text = text.replace('Š', 'S');

                return text;
            };

            // export the relevant stuff.
            var remove_diacritics_1 = remove_diacritics;

            var normalizer_no = {
            	remove_diacritics: remove_diacritics_1
            };

            /*
            Copyright (c) 2014, Kristoffer Brabrand

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var AggressiveTokenizer$6 = function() {
                tokenizer.call(this);
            };
            util$2.inherits(AggressiveTokenizer$6, tokenizer);

            var aggressive_tokenizer_no = AggressiveTokenizer$6;

            AggressiveTokenizer$6.prototype.tokenize = function(text) {
                text = normalizer_no.remove_diacritics(text);

                // break a string up into an array of tokens by anything non-word
                return this.trim(text.split(/[^A-Za-z0-9_æøåÆØÅäÄöÖüÜ]+/));
            };

            /*
            Copyright (c) 2014, Kristoffer Brabrand

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */




            var stemmer_no = function() {
                var stemmer = this;

                stemmer.stem = function(token) {
                    return token;
                };

                stemmer.addStopWord = function(stopWord) {
                    stopwords_no.words.push(stopWord);
                };

                stemmer.addStopWords = function(moreStopWords) {
                    stopwords_no.words = stopwords_no.words.concat(moreStopWords);
                };

                stemmer.tokenizeAndStem = function(text, keepStops) {
                    var stemmedTokens = [];

                    new aggressive_tokenizer_no().tokenize(text).forEach(function(token) {
                        if(keepStops || stopwords_no.words.indexOf(token.toLowerCase()) == -1)
                            stemmedTokens.push(stemmer.stem(token));
                    });

                    return stemmedTokens;
                };

                stemmer.attach = function() {
                    String.prototype.stem = function() {
                        return stemmer.stem(this);
                    };

                    String.prototype.tokenizeAndStem = function(keepStops) {
                        return stemmer.tokenizeAndStem(this, keepStops);
                    };
                };
            };

            /*
            Copyright (c) 2014, Kristoffer Brabrand

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            // Get the part of the token after the first non-vowel following a vowel
            function getR1(token) {
                var match = token.match(/[aeiouyæåø]{1}[^aeiouyæåø]([A-Za-z0-9_æøåÆØÅäÄöÖüÜ]+)/);

                if (match) {
                    var preR1Length = match.index + 2;

                    if (preR1Length < 3 && preR1Length > 0) {
                        return token.slice(3);
                    } else if (preR1Length >= 3) {
                        return match[1];
                    } else {
                        return token;
                    }
                }

                return null;
            }

            function step1(token) {
                // Perform step 1a-c
                var step1aResult = step1a$1(token),
                    step1bResult = step1b$1(token),
                    step1cResult = step1c$1(token);

                // Returne the shortest result string (from 1a, 1b and 1c)
                if (step1aResult.length < step1bResult.length) {
                    return (step1aResult.length < step1cResult.length) ? step1aResult : step1cResult;
                } else {
                    return (step1bResult.length < step1cResult.length) ? step1bResult : step1cResult;
                }
            }

            // step 1a as defined for the porter stemmer algorithm.
            function step1a$1(token) {
                var r1 = getR1(token);

                if (!r1) {
                    return token;
                }

                var r1Match = r1.match(/(a|e|ede|ande|ende|ane|ene|hetene|en|heten|ar|er|heter|as|es|edes|endes|enes|hetenes|ens|hetens|ers|ets|et|het|ast)$/);

                if (r1Match) {
                    return token.replace(new RegExp(r1Match[1] + '$'), '');
                }

                return token;
            }

            // step 1b as defined for the porter stemmer algorithm.
            function step1b$1(token) {
                var r1 = getR1(token);

                if (!r1) {
                    return token;
                }

                if (token.match(/(b|c|d|f|g|h|j|l|m|n|o|p|r|t|v|y|z)s$/)) {
                    return token.slice(0, -1);
                }

                if (token.match(/([^aeiouyæåø]k)s$/)) {
                    return token.slice(0, -1);
                }

                return token;
            }

            // step 1c as defined for the porter stemmer algorithm.
            function step1c$1(token) {
                var r1 = getR1(token);

                if (!r1) {
                    return token;
                }

                if (r1.match(/(erte|ert)$/)) {
                    return token.replace(/(erte|ert)$/, 'er');
                }

                return token;
            }

            // step 2 as defined for the porter stemmer algorithm.
            function step2$1(token) {
                var r1 = getR1(token);

                if (!r1) {
                    return token;
                }

                if (r1.match(/(d|v)t$/)) {
                    return token.slice(0, -1);
                }

                return token;
            }

            // step 3 as defined for the porter stemmer algorithm.
            function step3$1(token) {
                var r1 = getR1(token);

                if (!r1)
                    return token;

                var r1Match = r1.match(/(leg|eleg|ig|eig|lig|elig|els|lov|elov|slov|hetslov)$/);

                if (r1Match) {
                    return token.replace(new RegExp(r1Match[1] + '$'), '');
                }

                return token;
            }

            var PorterStemmer$6 = new stemmer_no();
            var porter_stemmer_no = PorterStemmer$6;

            // perform full stemming algorithm on a single word
            PorterStemmer$6.stem = function(token) {
                return step3$1(step2$1(step1(token.toLowerCase()))).toString();
            };

            //exports for tests
            PorterStemmer$6.getR1  = getR1;
            PorterStemmer$6.step1  = step1;
            PorterStemmer$6.step1a = step1a$1;
            PorterStemmer$6.step1b = step1b$1;
            PorterStemmer$6.step1c = step1c$1;
            PorterStemmer$6.step2  = step2$1;
            PorterStemmer$6.step3  = step3$1;

            /*
            Copyright (c) 2017, Dogan Yazar

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // a list of commonly used words that have little meaning and can be excluded
            // from analysis.
            const words$8 = ["aderton","adertonde","adjö","aldrig","alla","allas","allt","alltid",
            "alltså","andra","andras","annan","annat","artonde","artonn","att","av","bakom",
            "bara","behöva","behövas","behövde","behövt","beslut","beslutat","beslutit","bland",
            "blev","bli","blir","blivit","bort","borta","bra","bäst","bättre","båda","bådas",
            "dag","dagar","dagarna","dagen","de","del","delen","dem","den","denna","deras",
            "dess","dessa","det","detta","dig","din","dina","dit","ditt","dock","dom","du",
            "där","därför","då","e","efter","eftersom","ej","elfte","eller","elva","emot","en",
            "enkel","enkelt","enkla","enligt","ens","er","era","ers","ert","ett","ettusen",
            "fanns","fem","femte","femtio","femtionde","femton","femtonde","fick","fin",
            "finnas","finns","fjorton","fjortonde","fjärde","fler","flera","flesta","fram",
            "framför","från","fyra","fyrtio","fyrtionde","få","får","fått","följande","för",
            "före","förlåt","förra","första","genast","genom","gick","gjorde","gjort","god",
            "goda","godare","godast","gott","gälla","gäller","gällt","gärna","gå","går","gått",
            "gör","göra","ha","hade","haft","han","hans","har","heller","hellre","helst","helt",
            "henne","hennes","hit","hon","honom","hundra","hundraen","hundraett","hur","här",
            "hög","höger","högre","högst","i","ibland","icke","idag","igen","igår","imorgon",
            "in","inför","inga","ingen","ingenting","inget","innan","inne","inom","inte",
            "inuti","ja","jag","jo","ju","just","jämfört","kan","kanske","knappast","kom",
            "komma","kommer","kommit","kr","kunde","kunna","kunnat","kvar","legat","ligga",
            "ligger","lika","likställd","likställda","lilla","lite","liten","litet","länge",
            "längre","längst","lätt","lättare","lättast","långsam","långsammare","långsammast",
            "långsamt","långt","låt","man","med","mej","mellan","men","mer","mera","mest","mig",
            "min","mina","mindre","minst","mitt","mittemot","mot","mycket","många","måste",
            "möjlig","möjligen","möjligt","möjligtvis","ned","nederst","nedersta","nedre",
            "nej","ner","ni","nio","nionde","nittio","nittionde","nitton","nittonde","nog",
            "noll","nr","nu","nummer","när","nästa","någon","någonting","något","några","nån",
            "nånting","nåt","nödvändig","nödvändiga","nödvändigt","nödvändigtvis","och","också",
            "ofta","oftast","olika","olikt","om","oss","på","rakt","redan","rätt","sa","sade",
            "sagt","samma","sedan","senare","senast","sent","sex","sextio","sextionde","sexton",
            "sextonde","sig","sin","sina","sist","sista","siste","sitt","sitta","sju","sjunde",
            "sjuttio","sjuttionde","sjutton","sjuttonde","själv","sjätte","ska","skall","skulle",
            "slutligen","små","smått","snart","som","stor","stora","stort","större","störst",
            "säga","säger","sämre","sämst","så","sådan","sådana","sådant","ta","tack","tar",
            "tidig","tidigare","tidigast","tidigt","till","tills","tillsammans","tio","tionde",
            "tjugo","tjugoen","tjugoett","tjugonde","tjugotre","tjugotvå","tjungo","tolfte",
            "tolv","tre","tredje","trettio","trettionde","tretton","trettonde","två","tvåhundra",
            "under","upp","ur","ursäkt","ut","utan","utanför","ute","va","vad","var","vara",
            "varför","varifrån","varit","varje","varken","vars","varsågod","vart","vem","vems",
            "verkligen","vi","vid","vidare","viktig","viktigare","viktigast","viktigt","vilka",
            "vilkas","vilken","vilket","vill","väl","vänster","vänstra","värre","vår","våra",
            "vårt","än","ännu","är","även","åt","åtminstone","åtta","åttio","åttionde",
            "åttonde","över","övermorgon","överst","övre", "1", "2", "3", "4", "5", "6", "7",
            "8", "9", "0"];

            // tell the world about the noise words.
            var words_1$7 = words$8;

            var stopwords_sv = {
            	words: words_1$7
            };

            /*
             Copyright (c) 2017, Dogan Yazar

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */

            /**
             * Remove commonly used diacritic marks from a string as these
             * are not used in a consistent manner. Leave only ä, ö, å.
             */
            var remove_diacritics$1 = function(text) {
                text = text.replace('à', 'a');
                text = text.replace('À', 'A');
                text = text.replace('á', 'a');
                text = text.replace('Á', 'A');
                text = text.replace('è', 'e');
                text = text.replace('È', 'E');
                text = text.replace('é', 'e');
                text = text.replace('É', 'E');

                return text;
            };

            // export the relevant stuff.
            var remove_diacritics_1$1 = remove_diacritics$1;

            var normalizer_sv = {
            	remove_diacritics: remove_diacritics_1$1
            };

            /*
            Copyright (c) 2017, Dogan Yazar

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var AggressiveTokenizer$7 = function() {
                tokenizer.call(this);
            };
            util$2.inherits(AggressiveTokenizer$7, tokenizer);

            var aggressive_tokenizer_sv = AggressiveTokenizer$7;

            AggressiveTokenizer$7.prototype.tokenize = function(text) {
                text = normalizer_sv.remove_diacritics(text);

                // break a string up into an array of tokens by anything non-word
                // Ü is not part of swedish alphabet but there are words using it like müsli and München 
                return this.trim(text.split(/[^A-Za-z0-9_åÅäÄöÖüÜ]+/));
            };

            /*
            Copyright (c) 2017, Dogan Yazar

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */




            var stemmer_sv = function() {
                var stemmer = this;

                stemmer.stem = function(token) {
                    return token;
                };

                stemmer.addStopWord = function(stopWord) {
                    stopwords_sv.words.push(stopWord);
                };

                stemmer.addStopWords = function(moreStopWords) {
                    stopwords_sv.words = stopwords_sv.words.concat(moreStopWords);
                };

                stemmer.tokenizeAndStem = function(text, keepStops) {
                    var stemmedTokens = [];

                    new aggressive_tokenizer_sv().tokenize(text).forEach(function(token) {
                        if(keepStops || stopwords_sv.words.indexOf(token.toLowerCase()) == -1)
                            stemmedTokens.push(stemmer.stem(token));
                    });

                    return stemmedTokens;
                };

                stemmer.attach = function() {
                    String.prototype.stem = function() {
                        return stemmer.stem(this);
                    };

                    String.prototype.tokenizeAndStem = function(keepStops) {
                        return stemmer.tokenizeAndStem(this, keepStops);
                    };
                };
            };

            /*
            Copyright (c) 2017, Dogan Yazar

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            //Get R1 region
            function getRegions(str) {
              const match = str.match(/[aeiouyäåö][^aeiouyäåö]([a-zåäö]+)/);
              let r1 = '';
              if (match && match[1]) {
                r1 = match[1];
                if (match.index + 2 < 3) { //Not clear why we need this! Algorithm does not describe this part!
                  r1 = str.slice(3);
                }
              }
              return {
                r1,
                rest: str.slice(0, str.length - r1.length)
              }
            }

            function step1a$2(str, regions = getRegions(str)) {
              const r1 = regions.r1;
              if (!r1) {
                return str
              }

              const regEx = /(heterna|hetens|anden|andes|andet|arens|arnas|ernas|heten|heter|ornas|ande|ades|aren|arna|arne|aste|erna|erns|orna|ade|are|ast|ens|ern|het|ad|ar|as|at|en|er|es|or|a|e)$/;
              const match = r1.match(regEx);
              return match ? regions.rest + r1.slice(0, match.index) : str
            }

            function step1b$2(str, regions = getRegions(str)) {
              if (regions.r1 && str.match(/(b|c|d|f|g|h|j|k|l|m|n|o|p|r|t|v|y)s$/)) {
                return str.slice(0, -1)
              }

              return str
            }

            function step1$1(str) {
              const regions = getRegions(str);
              const resA = step1a$2(str, regions);
              const resB = step1b$2(str, regions);

              return resA.length < resB.length ? resA : resB
            }

            function step2$2(str, regions = getRegions(str)) {
              const r1 = regions.r1;
              if (r1 && r1.match(/(dd|gd|nn|dt|gt|kt|tt)$/)) {
                return str.slice(0, -1)
              }
              return str
            }

            function step3$2(str, regions = getRegions(str)) {
              const r1 = regions.r1;
              if (r1) {
                if (r1.match(/(lös|full)t$/)) {
                  return str.slice(0, -1)
                }

                const match = r1.match(/(lig|ig|els)$/);
                return match ? regions.rest + r1.slice(0, match.index) : str
              }

              return str
            }

            function stem$1(_str) {
              const str = _str.toLowerCase();
              return step3$2(step2$2(step1$1(str)))
            }

            var PorterStemmer$7 = new stemmer_sv();
            var porter_stemmer_sv = PorterStemmer$7;

            // perform full stemming algorithm on a single word
            PorterStemmer$7.stem = stem$1;

            /*
            Copyright (c) 2011, Luís Rodrigues

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // a list of commonly used words that have little meaning and can be excluded
            // from analysis.
            var words$9 = [
              'a',
              'à',
              'ao',
              'aos',
              'aquela',
              'aquelas',
              'aquele',
              'aqueles',
              'aquilo',
              'as',
              'às',
              'até',
              'com',
              'como',
              'da',
              'das',
              'de',
              'dela',
              'delas',
              'dele',
              'deles',
              'depois',
              'do',
              'dos',
              'e',
              'ela',
              'elas',
              'ele',
              'eles',
              'em',
              'entre',
              'essa',
              'essas',
              'esse',
              'esses',
              'esta',
              'estas',
              'este',
              'estes',
              'eu',
              'isso',
              'isto',
              'já',
              'lhe',
              'lhes',
              'mais',
              'mas',
              'me',
              'mesmo',
              'meu',
              'meus',
              'minha',
              'minhas',
              'muito',
              'muitos',
              'na',
              'não',
              'nas',
              'nem',
              'no',
              'nos',
              'nós',
              'nossa',
              'nossas',
              'nosso',
              'nossos',
              'num',
              'nuns',
              'numa',
              'numas',
              'o',
              'os',
              'ou',
              'para',
              'pela',
              'pelas',
              'pelo',
              'pelos',
              'por',
              'quais',
              'qual',
              'quando',
              'que',
              'quem',
              'se',
              'sem',
              'seu',
              'seus',
              'só',
              'sua',
              'suas',
              'também',
              'te',
              'teu',
              'teus',
              'tu',
              'tua',
              'tuas',
              'um',
              'uma',
              'umas',
              'você',
              'vocês',
              'vos',
              'vosso',
              'vossos',
              '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'
            ];

            // tell the world about the noise words.
            var words_1$8 = words$9;

            var stopwords_pt = {
            	words: words_1$8
            };

            /*
            Copyright (c) 2011, Chris Umbel,David Przybilla

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var AggressiveTokenizer$8 = function() {
                tokenizer.call(this);
            };
            util$2.inherits(AggressiveTokenizer$8, tokenizer);

            var aggressive_tokenizer_pt = AggressiveTokenizer$8;

            AggressiveTokenizer$8.prototype.withoutEmpty = function(array) {
            	return array.filter(function(a) {return a;});
            };

            AggressiveTokenizer$8.prototype.tokenize = function(text) {
                // break a string up into an array of tokens by anything non-word
                return this.withoutEmpty(this.trim(text.split(/[^a-zA-Zà-úÀ-Ú]/)));
            };

            /*
            Copyright (c) 2014, Ismaël Héry

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var stemmer_pt = function () {

              var Stemmer = this,
                stopwords = stopwords_pt,
                Tokenizer = aggressive_tokenizer_pt;

              Stemmer.stem = function (token) {
                return token;
              };

              Stemmer.addStopWords = function (word) {
                stopwords.words.push(word);
              };

              Stemmer.addStopWords = function (words) {
                stopwords.words = stopwords.words.concat(words);
              };

              Stemmer.tokenizeAndStem = function(text, keepStops) {
                var stemmedTokens = [];

                var tokenStemmer = function (token) {
                  if (keepStops || stopwords.words.indexOf(token.toLowerCase()) === -1) {
                    stemmedTokens.push(Stemmer.stem(token));
                  }
                };

                new Tokenizer().tokenize(text).forEach(tokenStemmer);

                return stemmedTokens;
              };

              Stemmer.attach = function () {
                String.prototype.stem = function () {
                  return Stemmer.stem(this);
                };

                String.prototype.tokenizeAndStem = function (keepStops) {
                  return Stemmer.tokenizeAndStem(this, keepStops);
                };
              };
            };

            /*
            Copyright (c) 2015, Luís Rodrigues

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var token = (function () {

              /**
               * Stemmer token constructor.
               *
               * @param {String} string Token string.
               */
              var Token = function (string) {
                this.vowels   = '';
                this.regions  = {};
                this.string   = string;
                this.original = string;
              };

              /**
               * Set vowels.
               *
               * @param  {String|Array} vowels List of vowels.
               * @return {Token}               Token instance.
               */
              Token.prototype.usingVowels = function (vowels) {
                this.vowels = vowels;
                return this;
              };

              /**
               * Marks a region by defining its starting index or providing a callback
               * function that does.
               *
               * @param  {String}       region   Region name.
               * @param  {Array|Number} args     Callback arguments or region start index.
               * @param  {Function}     callback Function that determines the start index (optional).
               * @param  {Object}       context  Callback context (optional, defaults to this).
               * @return {Token}                 Token instance.
               */
              Token.prototype.markRegion = function (region, args, callback, context) {
                if (typeof callback === 'function') {
                  this.regions[region] = callback.apply(context || this, [].concat(args));

                } else if (!isNaN(args)) {
                  this.regions[region] = args;
                }

                return this;
              };

              /**
               * Replaces all instances of a string with another.
               *
               * @param  {String} find    String to be replaced.
               * @param  {String} replace Replacement string.
               * @return {Token}          Token instance.
               */
              Token.prototype.replaceAll = function (find, replace) {
                this.string = this.string.split(find).join(replace);
                return this;
              };

              /**
               * Replaces the token suffix if in a region.
               *
               * @param  {String} suffix  Suffix to replace.
               * @param  {String} replace Replacement string.
               * @param  {String} region  Region name.
               * @return {Token}          Token instance.
               */
              Token.prototype.replaceSuffixInRegion = function (suffix, replace, region) {
                var suffixes = [].concat(suffix);
                for (var i = 0; i < suffixes.length; i++) {
                  if (this.hasSuffixInRegion(suffixes[i], region)) {
                    this.string = this.string.slice(0, -suffixes[i].length) + replace;
                    return this;
                  }
                }
                return this;
              };

              /**
               * Determines whether the token has a vowel at the provided index.
               *
               * @param  {Integer} index Character index.
               * @return {Boolean}       Whether the token has a vowel at the provided index.
               */
              Token.prototype.hasVowelAtIndex = function (index) {
                return this.vowels.indexOf(this.string[index]) !== -1;
              };

              /**
               * Finds the next vowel in the token.
               *
               * @param  {Integer} start Starting index offset.
               * @return {Integer}       Vowel index, or the end of the string.
               */
              Token.prototype.nextVowelIndex = function (start) {
                var index = (start >= 0 && start < this.string.length) ? start : this.string.length;
                while (index < this.string.length && !this.hasVowelAtIndex(index)) {
                  index++;
                }
                return index;
              };

              /**
               * Finds the next consonant in the token.
               *
               * @param  {Integer} start Starting index offset.
               * @return {Integer}       Consonant index, or the end of the string.
               */
              Token.prototype.nextConsonantIndex = function (start) {
                var index = (start >= 0 && start < this.string.length) ? start : this.string.length;
                while (index < this.string.length && this.hasVowelAtIndex(index)) {
                  index++;
                }
                return index;
              };

              /**
               * Determines whether the token has the provided suffix.
               * @param  {String}  suffix Suffix to match.
               * @return {Boolean}        Whether the token string ends in suffix.
               */
              Token.prototype.hasSuffix = function (suffix) {
                return this.string.slice(-suffix.length) === suffix;
              };

              /**
               * Determines whether the token has the provided suffix within the specified
               * region.
               *
               * @param  {String}  suffix Suffix to match.
               * @param  {String}  region Region name.
               * @return {Boolean}        Whether the token string ends in suffix.
               */
              Token.prototype.hasSuffixInRegion = function (suffix, region) {
                var regionStart = this.regions[region] || 0,
                  suffixStart   = this.string.length - suffix.length;
                return this.hasSuffix(suffix) && suffixStart >= regionStart;
              };

              return Token;
            })();

            /*
            Copyright (c) 2015, Luís Rodrigues

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var porter_stemmer_pt = (function () {

              var Stemmer     = stemmer_pt,
                Token         = token,
                PorterStemmer = new Stemmer();

              /**
               * Marks a region after the first non-vowel following a vowel, or the
               * null region at the end of the word if there is no such non-vowel.
               *
               * @param {Object} token Token to stem.
               * @param {Number} start Start index (defaults to 0).
               * @param {Number}       Region start index.
               */
               var markRegionN = function (start) {
                var index = start || 0,
                  length = this.string.length,
                  region = length;

                while (index < length - 1 && region === length) {
                  if (this.hasVowelAtIndex(index) && !this.hasVowelAtIndex(index + 1)) {
                    region = index + 2;
                  }
                  index++;
                }

                return region;
              };

              /**
               * Mark RV.
               *
               * @param  {Object} token Token to stem.
               * @return {Number}       Region start index.
               */
              var markRegionV = function () {
                var rv = this.string.length;

                if (rv > 3) {
                  if (!this.hasVowelAtIndex(1)) {
                    rv = this.nextVowelIndex(2) + 1;

                  } else if (this.hasVowelAtIndex(0) && this.hasVowelAtIndex(1)) {
                    rv = this.nextConsonantIndex(2) + 1;

                  } else {
                    rv = 3;
                  }
                }

                return rv;
              };

              /**
               * Prelude.
               *
               * Nasalised vowel forms should be treated as a vowel followed by a consonant.
               *
               * @param  {String} token Word to stem.
               * @return {String}       Stemmed token.
               */
              function prelude (token$$1) {
                return token$$1
                .replaceAll('ã', 'a~')
                .replaceAll('õ', 'o~');
              }

              /**
               * Step 1: Standard suffix removal.
               *
               * This step should always be performed.
               *
               * @param  {Token} token Word to stem.
               * @return {Token}       Stemmed token.
               */
              function standardSuffix (token$$1) {

                token$$1.replaceSuffixInRegion([
                  'amentos', 'imentos', 'aço~es', 'adoras', 'adores', 'amento', 'imento',

                  'aça~o', 'adora', 'ância', 'antes', 'ismos', 'istas',

                  'ador', 'ante', 'ável', 'ezas', 'icas', 'icos', 'ismo', 'ista', 'ível',
                  'osas', 'osos',

                  'eza', 'ica', 'ico', 'osa', 'oso'

                  ], '', 'r2');

                token$$1.replaceSuffixInRegion(['logias', 'logia'], 'log', 'r2');

                // token.replaceSuffixInRegion(['uço~es', 'uça~o'], 'u', 'r1');

                token$$1.replaceSuffixInRegion(['ências', 'ência'], 'ente', 'r2');

                token$$1.replaceSuffixInRegion([
                  'ativamente', 'icamente', 'ivamente', 'osamente', 'adamente'
                ], '', 'r2');

                token$$1.replaceSuffixInRegion('amente', '', 'r1');

                token$$1.replaceSuffixInRegion([
                  'antemente', 'avelmente', 'ivelmente', 'mente'
                ], '', 'r2');

                token$$1.replaceSuffixInRegion([
                  'abilidades', 'abilidade',
                  'icidades', 'icidade',
                  'ividades', 'ividade',
                  'idades', 'idade'
                ], '', 'r2');

                token$$1.replaceSuffixInRegion([
                  'ativas', 'ativos', 'ativa', 'ativo',
                  'ivas', 'ivos', 'iva', 'ivo'
                ], '', 'r2');

                if (token$$1.hasSuffix('eiras') || token$$1.hasSuffix('eira')) {
                  token$$1.replaceSuffixInRegion(['iras', 'ira'], 'ir', 'rv');
                }

                return token$$1;
              }

              /**
               * Step 2: Verb suffix removal.
               *
               * Perform this step if no ending was removed in step 1.
               *
               * @param  {Token} token   Token to stem.
               * @return {Token}         Stemmed token.
               */
              function verbSuffix (token$$1) {

                token$$1.replaceSuffixInRegion([
                  'aríamos', 'ássemos', 'eríamos', 'êssemos', 'iríamos', 'íssemos',

                  'áramos', 'aremos', 'aríeis', 'ásseis', 'ávamos', 'éramos', 'eremos',
                  'eríeis', 'ésseis', 'íramos', 'iremos', 'iríeis', 'ísseis',

                  'ara~o', 'ardes', 'areis', 'áreis', 'ariam', 'arias', 'armos', 'assem',
                  'asses', 'astes', 'áveis', 'era~o', 'erdes', 'ereis', 'éreis', 'eriam',
                  'erias', 'ermos', 'essem', 'esses', 'estes', 'íamos', 'ira~o', 'irdes',
                  'ireis', 'íreis', 'iriam', 'irias', 'irmos', 'issem', 'isses', 'istes',

                  'adas', 'ados', 'amos', 'ámos', 'ando', 'aram', 'aras', 'arás', 'arei',
                  'arem', 'ares', 'aria', 'asse', 'aste', 'avam', 'avas', 'emos', 'endo',
                  'eram', 'eras', 'erás', 'erei', 'erem', 'eres', 'eria', 'esse', 'este',
                  'idas', 'idos', 'íeis', 'imos', 'indo', 'iram', 'iras', 'irás', 'irei',
                  'irem', 'ires', 'iria', 'isse', 'iste',

                  'ada', 'ado', 'ais', 'ara', 'ará', 'ava', 'eis', 'era', 'erá', 'iam',
                  'ias', 'ida', 'ido', 'ira', 'irá',

                  'am', 'ar', 'as', 'ei', 'em', 'er', 'es', 'eu', 'ia', 'ir', 'is', 'iu', 'ou'

                ], '', 'rv');

                return token$$1;
              }

              /**
               * Step 3: Delete suffix i.
               *
               * Perform this step if the word was changed, in RV and preceded by c.
               *
               * @param  {Token} token   Token to stem.
               * @return {Token}         Stemmed token.
               */
              function iPrecededByCSuffix (token$$1) {

                if (token$$1.hasSuffix('ci')) {
                  token$$1.replaceSuffixInRegion('i', '', 'rv');
                }

                return token$$1;
              }

              /**
               * Step 4: Residual suffix.
               *
               * Perform this step if steps 1 and 2 did not alter the word.
               *
               * @param  {Token} token Token to stem.
               * @return {Token}       Stemmed token.
               */
              function residualSuffix (token$$1) {

                token$$1.replaceSuffixInRegion(['os', 'a', 'i', 'o', 'á', 'í', 'ó'], '', 'rv');

                return token$$1;
              }

              /**
               * Step 5: Residual form.
               *
               * This step should always be performed.
               *
               * @param  {Token} token Token to stem.
               * @return {Token}       Stemmed token.
               */
              function residualForm (token$$1) {

                var tokenString = token$$1.string;

                if (token$$1.hasSuffix('gue') || token$$1.hasSuffix('gué') || token$$1.hasSuffix('guê')) {
                  token$$1.replaceSuffixInRegion(['ue', 'ué', 'uê'], '', 'rv');
                }

                if (token$$1.hasSuffix('cie') || token$$1.hasSuffix('cié') || token$$1.hasSuffix('ciê')) {
                  token$$1.replaceSuffixInRegion(['ie', 'ié', 'iê'], '', 'rv');
                }

                if (tokenString === token$$1.string) {
                  token$$1.replaceSuffixInRegion(['e', 'é', 'ê'], '', 'rv');
                }

                token$$1.replaceSuffixInRegion('ç', 'c', 'all');

                return token$$1;
              }

              /**
               * Postlude.
               *
               * Turns a~, o~ back into ã, õ.
               *
               * @param  {String} token Word to stem.
               * @return {String}       Stemmed token.
               */
              function postlude (token$$1) {
                return token$$1
                  .replaceAll('a~', 'ã')
                  .replaceAll('o~', 'õ');
              }

              /**
               * Stems a word using a Porter stemmer algorithm.
               *
               * @param  {String} word Word to stem.
               * @return {String}      Stemmed token.
               */
              PorterStemmer.stem = function (word) {
                var token$$1 = new Token(word.toLowerCase()),
                  original;

                token$$1 = prelude(token$$1);

                token$$1.usingVowels('aeiouáéíóúâêôàãõ')
                  .markRegion('all', 0)
                  .markRegion('r1', null, markRegionN)
                  .markRegion('r2', token$$1.regions.r1, markRegionN)
                  .markRegion('rv', null, markRegionV);

                original = token$$1.string;

                // Always do step 1.
                token$$1 = standardSuffix(token$$1);

                // Do step 2 if no ending was removed by step 1.
                if (token$$1.string === original) {
                  token$$1 = verbSuffix(token$$1);
                }

                // If the last step to be obeyed — either step 1 or 2 — altered the word,
                // do step 3. Alternatively, if neither steps 1 nor 2 altered the word, do
                // step 4.
                token$$1 = token$$1.string !== original ? iPrecededByCSuffix(token$$1) : residualSuffix(token$$1);

                // Always do step 5.
                token$$1 = residualForm(token$$1);

                token$$1 = postlude(token$$1);

                return token$$1.string;
              };

              return PorterStemmer;
            })();

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var rules = {
                "a": [
                    {
                        "continuation": false, 
                        "intact": true, 
                        "pattern": "ia", 
                        "size": "2"
                    }, 
                    {
                        "continuation": false, 
                        "intact": true, 
                        "pattern": "a", 
                        "size": "1"
                    }
                ], 
                "b": [
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "bb", 
                        "size": "1"
                    }
                ], 
                "c": [
                    {
                        "appendage": "s", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ytic", 
                        "size": "3"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ic", 
                        "size": "2"
                   }, 
                    {
                        "appendage": "t", 
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "nc", 
                        "size": "1"
                    }
                ], 
                "d": [
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "dd", 
                        "size": "1"
                    }, 
                    {
                        "appendage": "y", 
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ied", 
                        "size": "3"
                    }, 
                    {
                        "appendage": "ss", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ceed", 
                        "size": "2"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "eed", 
                        "size": "1"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ed", 
                        "size": "2"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "hood", 
                        "size": "4"
                    }
                ], 
                "e": [
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "e", 
                        "size": "1"
                    }
                ], 
                "f": [
                    {
                        "appendage": "v", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "lief", 
                        "size": "1"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "if", 
                        "size": "2"
                    }
                ], 
                "g": [
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ing", 
                        "size": "3"
                    }, 
                    {
                        "appendage": "y", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "iag", 
                        "size": "3"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ag", 
                        "size": "2"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "gg", 
                        "size": "1"
                    }
                ], 
                "h": [
                    {
                        "continuation": false, 
                        "intact": true, 
                        "pattern": "th", 
                        "size": "2"
                    }, 
                    {
                        "appendage": "ct", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "guish", 
                        "size": "5"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ish", 
                        "size": "3"
                    }
                ], 
                "i": [
                    {
                        "continuation": false, 
                        "intact": true, 
                        "pattern": "i", 
                        "size": "1"
                    }, 
                    {
                        "appendage": "y", 
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "i", 
                        "size": "1"
                    }
                ], 
                "j": [
                    {
                        "appendage": "d", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ij", 
                        "size": "1"
                    }, 
                    {
                        "appendage": "s", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "fuj", 
                        "size": "1"
                    }, 
                    {
                        "appendage": "d", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "uj", 
                        "size": "1"
                    }, 
                    {
                        "appendage": "d", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "oj", 
                        "size": "1"
                    }, 
                    {
                        "appendage": "r", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "hej", 
                        "size": "1"
                    }, 
                    {
                        "appendage": "t", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "verj", 
                        "size": "1"
                    }, 
                    {
                        "appendage": "t", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "misj", 
                        "size": "2"
                    }, 
                    {
                        "appendage": "d", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "nj", 
                        "size": "1"
                    }, 
                    {
                        "appendage": "s", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "j", 
                        "size": "1"
                    }
                ], 
                "l": [
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ifiabl", 
                        "size": "6"
                    }, 
                    {
                        "appendage": "y", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "iabl", 
                        "size": "4"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "abl", 
                        "size": "3"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ibl", 
                        "size": "3"
                    }, 
                    {
                        "appendage": "l", 
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "bil", 
                        "size": "2"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "cl", 
                        "size": "1"
                    }, 
                    {
                        "appendage": "y", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "iful", 
                        "size": "4"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ful", 
                        "size": "3"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ul", 
                        "size": "2"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ial", 
                        "size": "3"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ual", 
                        "size": "3"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "al", 
                        "size": "2"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ll", 
                        "size": "1"
                    }
                ], 
                "m": [
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ium", 
                        "size": "3"
                    }, 
                    {
                        "continuation": false, 
                        "intact": true, 
                        "pattern": "um", 
                        "size": "2"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ism", 
                        "size": "3"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "mm", 
                        "size": "1"
                    }
                ], 
                "n": [
                    {
                        "appendage": "j", 
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "sion", 
                        "size": "4"
                    }, 
                    {
                        "appendage": "ct", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "xion", 
                        "size": "4"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ion", 
                        "size": "3"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ian", 
                        "size": "3"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "an", 
                        "size": "2"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "een", 
                        "size": "0"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "en", 
                        "size": "2"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "nn", 
                        "size": "1"
                    }
                ], 
                "p": [
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ship", 
                        "size": "4"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "pp", 
                        "size": "1"
                    }
                ], 
                "r": [
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "er", 
                        "size": "2"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ear", 
                        "size": "0"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ar", 
                        "size": "2"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "or", 
                        "size": "2"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ur", 
                        "size": "2"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "rr", 
                        "size": "1"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "tr", 
                        "size": "1"
                    }, 
                    {
                        "appendage": "y", 
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ier", 
                        "size": "3"
                    }
                ], 
                "s": [
                    {
                        "appendage": "y", 
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ies", 
                        "size": "3"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "sis", 
                        "size": "2"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "is", 
                        "size": "2"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ness", 
                        "size": "4"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ss", 
                        "size": "0"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ous", 
                        "size": "3"
                    }, 
                    {
                        "continuation": false, 
                        "intact": true, 
                        "pattern": "us", 
                        "size": "2"
                    }, 
                    {
                        "continuation": true, 
                        "intact": true, 
                        "pattern": "s", 
                        "size": "1"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "s", 
                        "size": "0"
                    }
                ], 
                "t": [
                    {
                        "appendage": "y", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "plicat", 
                        "size": "4"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "at", 
                        "size": "2"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ment", 
                        "size": "4"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ent", 
                        "size": "3"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ant", 
                        "size": "3"
                    }, 
                    {
                        "appendage": "b", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ript", 
                        "size": "2"
                    }, 
                    {
                        "appendage": "b", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "orpt", 
                        "size": "2"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "duct", 
                        "size": "1"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "sumpt", 
                        "size": "2"
                    }, 
                    {
                        "appendage": "iv", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "cept", 
                        "size": "2"
                    }, 
                    {
                        "appendage": "v", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "olut", 
                        "size": "2"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "sist", 
                        "size": "0"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ist", 
                        "size": "3"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "tt", 
                        "size": "1"
                    }
                ], 
                "u": [
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "iqu", 
                        "size": "3"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ogu", 
                        "size": "1"
                    }
                ], 
                "v": [
                    {
                        "appendage": "j", 
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "siv", 
                        "size": "3"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "eiv", 
                        "size": "0"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "iv", 
                        "size": "2"
                    }
                ], 
                "y": [
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "bly", 
                        "size": "1"
                    }, 
                    {
                        "appendage": "y", 
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ily", 
                        "size": "3"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ply", 
                        "size": "0"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ly", 
                        "size": "2"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ogy", 
                        "size": "1"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "phy", 
                        "size": "1"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "omy", 
                        "size": "1"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "opy", 
                        "size": "1"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ity", 
                        "size": "3"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ety", 
                        "size": "3"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "lty", 
                        "size": "2"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "istry", 
                        "size": "5"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ary", 
                        "size": "3"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ory", 
                        "size": "3"
                    }, 
                    {
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "ify", 
                        "size": "3"
                    }, 
                    {
                        "appendage": "t", 
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "ncy", 
                        "size": "2"
                    }, 
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "acy", 
                        "size": "3"
                    }
                ], 
                "z": [
                    {
                        "continuation": true, 
                        "intact": false, 
                        "pattern": "iz", 
                        "size": "2"
                    }, 
                    {
                        "appendage": "s", 
                        "continuation": false, 
                        "intact": false, 
                        "pattern": "yz", 
                        "size": "1"
                    }
                ]
            };

            var lancaster_rules = {
            	rules: rules
            };

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */


            var ruleTable = lancaster_rules.rules;

            function acceptable(candidate) {
                if (candidate.match(/^[aeiou]/))
                    return (candidate.length > 1);
                else
                    return (candidate.length > 2 && candidate.match(/[aeiouy]/));
            }

            // take a token, look up the applicatble rule section and attempt some stemming!
            function applyRuleSection(token, intact) {
                var section = token.substr( - 1);
                var rules = ruleTable[section];

                if (rules) {
                    for (var i = 0; i < rules.length; i++) {
                        if ((intact || !rules[i].intact)
                        // only apply intact rules to intact tokens
                        && token.substr(0 - rules[i].pattern.length) == rules[i].pattern) {
                            // hack off only as much as the rule indicates
                            var result = token.substr(0, token.length - rules[i].size);

                            // if the rules wants us to apply an appendage do so
                            if (rules[i].appendage)
                                result += rules[i].appendage;

                            if (acceptable(result)) {
                                token = result;

                                // see what the rules wants to do next
                                if (rules[i].continuation) {
                                    // this rule thinks there still might be stem left. keep at it.
                                    // since we've applied a change we'll pass false in for intact
                                    return applyRuleSection(result, false);
                                } else {
                                    // the rule thinks we're done stemming. drop out.
                                    return result;
                                }
                            }
                        }
                    }
                }

                return token;
            }

            var LancasterStemmer = new stemmer();
            var lancaster_stemmer = LancasterStemmer;

            LancasterStemmer.stem = function(token) {
                return applyRuleSection(token.toLowerCase(), true);
            };

            /*
            Copyright (c) 2013, Paweł Łaskarzewski

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // a list of commonly used words that have little meaning and can be excluded
            // from analysis.
            // list based on: http://pl.wikipedia.org/wiki/Wikipedia:Stopwords
            var words$a = [
                'a', 'aby', 'ach', 'acz', 'aczkolwiek', 'aj', 'albo', 'ale', 'ależ', 'ani',
                'aż', 'bardziej', 'bardzo', 'bo', 'bowiem', 'by', 'byli', 'bynajmniej',
                'być', 'był', 'była', 'było', 'były', 'będzie', 'będą', 'cali', 'cała',
                'cały', 'ci', 'cię', 'ciebie', 'co', 'cokolwiek', 'coś', 'czasami',
                'czasem', 'czemu', 'czy', 'czyli', 'daleko', 'dla', 'dlaczego', 'dlatego',
                'do', 'dobrze', 'dokąd', 'dość', 'dużo', 'dwa', 'dwaj', 'dwie', 'dwoje',
                'dziś', 'dzisiaj', 'gdy', 'gdyby', 'gdyż', 'gdzie', 'gdziekolwiek',
                'gdzieś', 'i', 'ich', 'ile', 'im', 'inna', 'inne', 'inny', 'innych', 'iż',
                'ja', 'ją', 'jak', 'jakaś', 'jakby', 'jaki', 'jakichś', 'jakie', 'jakiś',
                'jakiż', 'jakkolwiek', 'jako', 'jakoś', 'je', 'jeden', 'jedna', 'jedno',
                'jednak', 'jednakże', 'jego', 'jej', 'jemu', 'jest', 'jestem', 'jeszcze',
                'jeśli', 'jeżeli', 'już', 'ją', 'każdy', 'kiedy', 'kilka', 'kimś', 'kto',
                'ktokolwiek', 'ktoś', 'która', 'które', 'którego', 'której', 'który',
                'których', 'którym', 'którzy', 'ku', 'lat', 'lecz', 'lub', 'ma', 'mają',
                'mało', 'mam', 'mi', 'mimo', 'między', 'mną', 'mnie', 'mogą', 'moi', 'moim',
                'moja', 'moje', 'może', 'możliwe', 'można', 'mój', 'mu', 'musi', 'my', 'na',
                'nad', 'nam', 'nami', 'nas', 'nasi', 'nasz', 'nasza', 'nasze', 'naszego',
                'naszych', 'natomiast', 'natychmiast', 'nawet', 'nią', 'nic', 'nich', 'nie',
                'niech', 'niego', 'niej', 'niemu', 'nigdy', 'nim', 'nimi', 'niż', 'no', 'o',
                'obok', 'od', 'około', 'on', 'ona', 'one', 'oni', 'ono', 'oraz', 'oto',
                'owszem', 'pan', 'pana', 'pani', 'po', 'pod', 'podczas', 'pomimo', 'ponad',
                'ponieważ', 'powinien', 'powinna', 'powinni', 'powinno', 'poza', 'prawie',
                'przecież', 'przed', 'przede', 'przedtem', 'przez', 'przy', 'roku',
                'również', 'sam', 'sama', 'są', 'się', 'skąd', 'sobie', 'sobą', 'sposób',
                'swoje', 'ta', 'tak', 'taka', 'taki', 'takie', 'także', 'tam', 'te', 'tego',
                'tej', 'temu', 'ten', 'teraz', 'też', 'to', 'tobą', 'tobie', 'toteż',
                'trzeba', 'tu', 'tutaj', 'twoi', 'twoim', 'twoja', 'twoje', 'twym', 'twój',
                'ty', 'tych', 'tylko', 'tym', 'u', 'w', 'wam', 'wami', 'was', 'wasz', 'zaś',
                'wasza', 'wasze', 'we', 'według', 'wiele', 'wielu', 'więc', 'więcej', 'tę',
                'wszyscy', 'wszystkich', 'wszystkie', 'wszystkim', 'wszystko', 'wtedy',
                'wy', 'właśnie', 'z', 'za', 'zapewne', 'zawsze', 'ze', 'zł', 'znowu',
                'znów', 'został', 'żaden', 'żadna', 'żadne', 'żadnych', 'że', 'żeby',
                '$', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '_'];

            // tell the world about the noise words.
            var words_1$9 = words$a;

            var stopwords_pl = {
            	words: words_1$9
            };

            /*
            Copyright (c) 2013, Paweł Łaskarzewski

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var AggressiveTokenizer$9 = function() {
                tokenizer.call(this);
            };

            util$2.inherits(AggressiveTokenizer$9, tokenizer);

            var aggressive_tokenizer_pl = AggressiveTokenizer$9;

            AggressiveTokenizer$9.prototype.withoutEmpty = function(array) {
            	return array.filter(function(a) {return a;});
            };

            AggressiveTokenizer$9.prototype.clearText = function(text) {
            	return text.replace(/[^a-zążśźęćńół0-9]/gi, ' ').replace(/[\s\n]+/g, ' ').trim();
            };

            AggressiveTokenizer$9.prototype.tokenize = function(text) {
                // break a string up into an array of tokens by anything non-word
                return this.withoutEmpty(this.clearText(text).split(' '));
            };

            /*
            Copyright (c) 2013, Paweł Łaskarzewski

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */




            var stemmer_pl = function() {
                var stemmer = this;

                stemmer.stem = function(token) {
                    return token;
                };

                stemmer.tokenizeAndStem = function(text, keepStops) {
                    var stemmedTokens = [];

                    new aggressive_tokenizer_pl().tokenize(text).forEach(function(token) {
                        if (keepStops || stopwords_pl.words.indexOf(token) == -1) {
                            var resultToken = token.toLowerCase();
                            if (resultToken.match(new RegExp('[a-zążśźęćńół0-9]+', 'gi'))) {
                                resultToken = stemmer.stem(resultToken);
                            }
                            stemmedTokens.push(resultToken);
                        }
                    });

                    return stemmedTokens;
                };

                stemmer.attach = function() {
                    String.prototype.stem = function() {
                        return stemmer.stem(this);
                    };

                    String.prototype.tokenizeAndStem = function(keepStops) {
                        return stemmer.tokenizeAndStem(this, keepStops);
                    };
                };
            };

            /*
             Copyright (c) 2012, Guillaume Marty

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */


            /**
             * Generate a replacing function given a table of patterns. Inspired by:
             * http://code.google.com/p/jslibs/wiki/JavascriptTips#String_converter
             * The order of elements is significant. Longer elements should be listed first.
             * @see Speed test http://jsperf.com/build-a-regexp-table
             *
             * @param {Object.<string, string>} translationTable The translation table of key value.
             * @return {function(string): string} A translating function.
             */
            function replacer(translationTable) {
              /**
               * An array of translationTable keys.
               * @type {Array.<string>}
               */
              var pattern = [];

              /**
               * The regular expression doing the replacement job.
               * @type {RegExp}
               */
              var regExp;

              /**
               * Used to iterate over translationTable.
               * @type {string}
               */
              var key;

              for (key in translationTable) {
                // Escaping regexp special chars.
                // @see Speed test for type casting to string http://jsperf.com/string-type-casting/2
                // @see http://closure-library.googlecode.com/svn/docs/closure_goog_string_string.js.source.html#line956
                key = ('' + key).replace(/([-()\[\]{}+?*.$\^|,:#<!\\\/])/g, '\\$1').
                  replace(/\x08/g, '\\x08');

                pattern.push(key);
              }

              regExp = new RegExp(pattern.join('|'), 'g');

              /**
               * @param {string} str Input string.
               * @return {string} The string replaced.
               */
              return function(str) {
                return str.replace(regExp, function(str) {
                  return translationTable[str];
                });
              };
            }


            /**
             * Exchanges all keys with their associated values in an object.
             *
             * @param {Object.<string, string>} obj An object of strings.
             * @return {Object.<string, string>} An object of strings.
             */
            function flip(obj) {
              var newObj = Object.create(null),
                  key;

              for (key in obj) {
                newObj[obj[key]] = key;
              }

              return newObj;
            }


            /**
             * Merge several objects. Properties from earlier objects are overwritten by
             * laters's in case of conflict.
             *
             * @param {...Object.<string, string>} var_args One or more objects of strings.
             * @return {!Object.<string, string>} An object of strings.
             */
            function merge(var_args) {
              var args = [].slice.call(arguments),
                  newObj = Object.create(null),
                  id = 0, key;

              while (args[id]) {
                for (key in args[id]) {
                  newObj[key] = args[id][key];
                }

                id++;
              }

              return newObj;
            }

            var replacer_1 = replacer;
            var flip_1 = flip;
            var merge_1 = merge;

            var utils$2 = {
            	replacer: replacer_1,
            	flip: flip_1,
            	merge: merge_1
            };

            /*
             Copyright (c) 2012, Guillaume Marty

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */

            /**
             * Normalize Japanese inputs and expose function to perform several conversions.
             *
             * Note: The space character is treated like a roman character as it usually
             *   has the same width as them in Japanese texts.
             *
             * \@todo Replace characters range from ㈠ to ㉃, ㊀ to ㊰ and ㇰ to ㇿ.
             * \@todo Lazy initializations of conversionTables and converters.
             * \@todo Would fixHalfwidthKana be useful?
             *
             * Descriptions of functions exposed:
             * normalizeJapanese 「全角」英字・数字を「半角」、「半角」記・カタカナを「全角」に変換
             * converters.fullwidthToHalfwidth.alphabet    「全角」英字を「半角」に変換
             * converters.halfwidthToFullwidth.alphabet    「半角」英字を「全角」に変換
             * converters.fullwidthToHalfwidth.numbers     「全角」数字を「半角」に変換
             * converters.halfwidthToFullwidth.numbers     「半角」数字を「全角」に変換 「全角」スペースを「半角」
             * converters.fullwidthToHalfwidth.punctuation 「全角」記号を「半角」に変換 「半角」スペースを「全角」
             * converters.halfwidthToFullwidth.punctuation 「半角」記号を「全角」に変換
             * converters.fullwidthToHalfwidth.katakana    「全角カタカナ」を「半角カタカナ」に変換
             * converters.halfwidthToFullwidth.katakana    「半角カタカナ」を「全角カタカナ」に変換
             * converters.hiraganaToKatakana               「カタカナ」を「ひらがな」に変換
             * converters.katakanaToHiragana               「ひらがな」を「カタカナ」に変換
             */

            var flip$1 = utils$2.flip;
            var merge$1 = utils$2.merge;
            var replacer$1 = utils$2.replacer;

            // From http://fernweh.jp/b/mb_convert_kana_js/
            var conversionTables = {
              fullwidthToHalfwidth: {
                alphabet: {
                  'ａ': 'a',
                  'ｂ': 'b',
                  'ｃ': 'c',
                  'ｄ': 'd',
                  'ｅ': 'e',
                  'ｆ': 'f',
                  'ｇ': 'g',
                  'ｈ': 'h',
                  'ｉ': 'i',
                  'ｊ': 'j',
                  'ｋ': 'k',
                  'ｌ': 'l',
                  'ｍ': 'm',
                  'ｎ': 'n',
                  'ｏ': 'o',
                  'ｐ': 'p',
                  'ｑ': 'q',
                  'ｒ': 'r',
                  'ｓ': 's',
                  'ｔ': 't',
                  'ｕ': 'u',
                  'ｖ': 'v',
                  'ｗ': 'w',
                  'ｘ': 'x',
                  'ｙ': 'y',
                  'ｚ': 'z',
                  'Ａ': 'A',
                  'Ｂ': 'B',
                  'Ｃ': 'C',
                  'Ｄ': 'D',
                  'Ｅ': 'E',
                  'Ｆ': 'F',
                  'Ｇ': 'G',
                  'Ｈ': 'H',
                  'Ｉ': 'I',
                  'Ｊ': 'J',
                  'Ｋ': 'K',
                  'Ｌ': 'L',
                  'Ｍ': 'M',
                  'Ｎ': 'N',
                  'Ｏ': 'O',
                  'Ｐ': 'P',
                  'Ｑ': 'Q',
                  'Ｒ': 'R',
                  'Ｓ': 'S',
                  'Ｔ': 'T',
                  'Ｕ': 'U',
                  'Ｖ': 'V',
                  'Ｗ': 'W',
                  'Ｘ': 'X',
                  'Ｙ': 'Y',
                  'Ｚ': 'Z',
                  '　': ' ' // Fullwidth space
                },

                numbers: {
                  '０': '0',
                  '１': '1',
                  '２': '2',
                  '３': '3',
                  '４': '4',
                  '５': '5',
                  '６': '6',
                  '７': '7',
                  '８': '8',
                  '９': '9'
                },

                symbol: {
                  '＿': '_',
                  '－': '-',
                  '，': ',',
                  '；': ';',
                  '：': ':',
                  '！': '!',
                  '？': '?',
                  '．': '.',
                  '（': '(',
                  '）': ')',
                  '［': '[',
                  '］': ']',
                  '｛': '{',
                  '｝': '}',
                  '＠': '@',
                  '＊': '*',
                  '＼': '\\',
                  '／': '/',
                  '＆': '&',
                  '＃': '#',
                  '％': '%',
                  '｀': '`',
                  '＾': '^',
                  '＋': '+',
                  '＜': '<',
                  '＝': '=',
                  '＞': '>',
                  '｜': '|',
                  // Never converted: '～': '~',
                  '≪': '«',
                  '≫': '»',
                  '─': '-',
                  '＄': '$',
                  '＂': '"'
                },

                purePunctuation: {
                  '、': '､',
                  '。': '｡',
                  '・': '･',
                  '「': '｢',
                  '」': '｣'
                },

                punctuation: {},

                katakana: {
                  '゛': 'ﾞ',
                  '゜': 'ﾟ',
                  'ー': 'ｰ',

                  'ヴ': 'ｳﾞ',
                  'ガ': 'ｶﾞ',
                  'ギ': 'ｷﾞ',
                  'グ': 'ｸﾞ',
                  'ゲ': 'ｹﾞ',
                  'ゴ': 'ｺﾞ',
                  'ザ': 'ｻﾞ',
                  'ジ': 'ｼﾞ',
                  'ズ': 'ｽﾞ',
                  'ゼ': 'ｾﾞ',
                  'ゾ': 'ｿﾞ',
                  'ダ': 'ﾀﾞ',
                  'ヂ': 'ﾁﾞ',
                  'ヅ': 'ﾂﾞ',
                  'デ': 'ﾃﾞ',
                  'ド': 'ﾄﾞ',
                  'バ': 'ﾊﾞ',
                  'パ': 'ﾊﾟ',
                  'ビ': 'ﾋﾞ',
                  'ピ': 'ﾋﾟ',
                  'ブ': 'ﾌﾞ',
                  'プ': 'ﾌﾟ',
                  'ベ': 'ﾍﾞ',
                  'ペ': 'ﾍﾟ',
                  'ボ': 'ﾎﾞ',
                  'ポ': 'ﾎﾟ',

                  'ァ': 'ｧ',
                  'ア': 'ｱ',
                  'ィ': 'ｨ',
                  'イ': 'ｲ',
                  'ゥ': 'ｩ',
                  'ウ': 'ｳ',
                  'ェ': 'ｪ',
                  'エ': 'ｴ',
                  'ォ': 'ｫ',
                  'オ': 'ｵ',
                  'カ': 'ｶ',
                  'キ': 'ｷ',
                  'ク': 'ｸ',
                  'ケ': 'ｹ',
                  'コ': 'ｺ',
                  'サ': 'ｻ',
                  'シ': 'ｼ',
                  'ス': 'ｽ',
                  'セ': 'ｾ',
                  'ソ': 'ｿ',
                  'タ': 'ﾀ',
                  'チ': 'ﾁ',
                  'ッ': 'ｯ',
                  'ツ': 'ﾂ',
                  'テ': 'ﾃ',
                  'ト': 'ﾄ',
                  'ナ': 'ﾅ',
                  'ニ': 'ﾆ',
                  'ヌ': 'ﾇ',
                  'ネ': 'ﾈ',
                  'ノ': 'ﾉ',
                  'ハ': 'ﾊ',
                  'ヒ': 'ﾋ',
                  'フ': 'ﾌ',
                  'ヘ': 'ﾍ',
                  'ホ': 'ﾎ',
                  'マ': 'ﾏ',
                  'ミ': 'ﾐ',
                  'ム': 'ﾑ',
                  'メ': 'ﾒ',
                  'モ': 'ﾓ',
                  'ャ': 'ｬ',
                  'ヤ': 'ﾔ',
                  'ュ': 'ｭ',
                  'ユ': 'ﾕ',
                  'ョ': 'ｮ',
                  'ヨ': 'ﾖ',
                  'ラ': 'ﾗ',
                  'リ': 'ﾘ',
                  'ル': 'ﾙ',
                  'レ': 'ﾚ',
                  'ロ': 'ﾛ',
                  'ワ': 'ﾜ',
                  'ヲ': 'ｦ',
                  'ン': 'ﾝ'
                }
              },

              halfwidthToFullwidth: {}
            };

            var fixFullwidthKana = {
              'ゝ゛': 'ゞ',
              'ヽ゛': 'ヾ',

              'う゛': 'ゔ',
              'か゛': 'が',
              'き゛': 'ぎ',
              'く゛': 'ぐ',
              'け゛': 'げ',
              'こ゛': 'ご',
              'さ゛': 'ざ',
              'し゛': 'じ',
              'す゛': 'ず',
              'せ゛': 'ぜ',
              'そ゛': 'ぞ',
              'た゛': 'だ',
              'ち゛': 'ぢ',
              'つ゛': 'づ',
              'て゛': 'で',
              'と゛': 'ど',
              'は゛': 'ば',
              'は゜': 'ぱ',
              'ひ゛': 'び',
              'ひ゜': 'ぴ',
              'ふ゛': 'ぶ',
              'ふ゜': 'ぷ',
              'へ゛': 'べ',
              'へ゜': 'ぺ',
              'ほ゛': 'ぼ',
              'ほ゜': 'ぽ',
              'っな': 'んな',
              'っに': 'んに',
              'っぬ': 'んぬ',
              'っね': 'んね',
              'っの': 'んの',

              'ウ゛': 'ヴ',
              'カ゛': 'ガ',
              'キ゛': 'ギ',
              'ク゛': 'グ',
              'ケ゛': 'ゲ',
              'コ゛': 'ゴ',
              'サ゛': 'ザ',
              'シ゛': 'ジ',
              'ス゛': 'ズ',
              'セ゛': 'ゼ',
              'ソ゛': 'ゾ',
              'タ゛': 'ダ',
              'チ゛': 'ヂ',
              'ツ゛': 'ヅ',
              'テ゛': 'デ',
              'ト゛': 'ド',
              'ハ゛': 'バ',
              'ハ゜': 'パ',
              'ヒ゛': 'ビ',
              'ヒ゜': 'ピ',
              'フ゛': 'ブ',
              'フ゜': 'プ',
              'ヘ゛': 'ベ',
              'ヘ゜': 'ペ',
              'ホ゛': 'ボ',
              'ホ゜': 'ポ',
              'ッナ': 'ンナ',
              'ッニ': 'ンニ',
              'ッヌ': 'ンヌ',
              'ッネ': 'ンネ',
              'ッノ': 'ンノ'
            };

            var fixCompositeSymbolsTable = {
              '㋀': '1月',
              '㋁': '2月',
              '㋂': '3月',
              '㋃': '4月',
              '㋄': '5月',
              '㋅': '6月',
              '㋆': '7月',
              '㋇': '8月',
              '㋈': '9月',
              '㋉': '10月',
              '㋊': '11月',
              '㋋': '12月',

              '㏠': '1日',
              '㏡': '2日',
              '㏢': '3日',
              '㏣': '4日',
              '㏤': '5日',
              '㏥': '6日',
              '㏦': '7日',
              '㏧': '8日',
              '㏨': '9日',
              '㏩': '10日',
              '㏪': '11日',
              '㏫': '12日',
              '㏬': '13日',
              '㏭': '14日',
              '㏮': '15日',
              '㏯': '16日',
              '㏰': '17日',
              '㏱': '18日',
              '㏲': '19日',
              '㏳': '20日',
              '㏴': '21日',
              '㏵': '22日',
              '㏶': '23日',
              '㏷': '24日',
              '㏸': '25日',
              '㏹': '26日',
              '㏺': '27日',
              '㏻': '28日',
              '㏼': '29日',
              '㏽': '30日',
              '㏾': '31日',

              '㍘': '0点',
              '㍙': '1点',
              '㍚': '2点',
              '㍛': '3点',
              '㍜': '4点',
              '㍝': '5点',
              '㍞': '6点',
              '㍟': '7点',
              '㍠': '8点',
              '㍡': '9点',
              '㍢': '10点',
              '㍣': '11点',
              '㍤': '12点',
              '㍥': '13点',
              '㍦': '14点',
              '㍧': '15点',
              '㍨': '16点',
              '㍩': '17点',
              '㍪': '18点',
              '㍫': '19点',
              '㍬': '20点',
              '㍭': '21点',
              '㍮': '22点',
              '㍯': '23点',
              '㍰': '24点',

              '㍻': '平成',
              '㍼': '昭和',
              '㍽': '大正',
              '㍾': '明治',
              '㍿': '株式会社',

              '㌀': 'アパート',
              '㌁': 'アルファ',
              '㌂': 'アンペア',
              '㌃': 'アール',
              '㌄': 'イニング',
              '㌅': 'インチ',
              '㌆': 'ウオン',
              '㌇': 'エスクード',
              '㌈': 'エーカー',
              '㌉': 'オンス',
              '㌊': 'オーム',
              '㌋': 'カイリ', //海里
              '㌌': 'カラット',
              '㌍': 'カロリー',
              '㌎': 'ガロン',
              '㌏': 'ガンマ',
              '㌐': 'ギガ',
              '㌑': 'ギニー',
              '㌒': 'キュリー',
              '㌓': 'ギルダー',
              '㌔': 'キロ',
              '㌕': 'キログラム',
              '㌖': 'キロメートル',
              '㌗': 'キロワット',
              '㌘': 'グラム',
              '㌙': 'グラムトン',
              '㌚': 'クルゼイロ',
              '㌛': 'クローネ',
              '㌜': 'ケース',
              '㌝': 'コルナ',
              '㌞': 'コーポ',
              '㌟': 'サイクル',
              '㌠': 'サンチーム',
              '㌡': 'シリング',
              '㌢': 'センチ',
              '㌣': 'セント',
              '㌤': 'ダース',
              '㌥': 'デシ',
              '㌦': 'ドル',
              '㌧': 'トン',
              '㌨': 'ナノ',
              '㌩': 'ノット',
              '㌪': 'ハイツ',
              '㌫': 'パーセント',
              '㌬': 'パーツ',
              '㌭': 'バーレル',
              '㌮': 'ピアストル',
              '㌯': 'ピクル',
              '㌰': 'ピコ',
              '㌱': 'ビル',
              '㌲': 'ファラッド',
              '㌳': 'フィート',
              '㌴': 'ブッシェル',
              '㌵': 'フラン',
              '㌶': 'ヘクタール',
              '㌷': 'ペソ',
              '㌸': 'ペニヒ',
              '㌹': 'ヘルツ',
              '㌺': 'ペンス',
              '㌻': 'ページ',
              '㌼': 'ベータ',
              '㌽': 'ポイント',
              '㌾': 'ボルト',
              '㌿': 'ホン',
              '㍀': 'ポンド',
              '㍁': 'ホール',
              '㍂': 'ホーン',
              '㍃': 'マイクロ',
              '㍄': 'マイル',
              '㍅': 'マッハ',
              '㍆': 'マルク',
              '㍇': 'マンション',
              '㍈': 'ミクロン',
              '㍉': 'ミリ',
              '㍊': 'ミリバール',
              '㍋': 'メガ',
              '㍌': 'メガトン',
              '㍍': 'メートル',
              '㍎': 'ヤード',
              '㍏': 'ヤール',
              '㍐': 'ユアン',
              '㍑': 'リットル',
              '㍒': 'リラ',
              '㍓': 'ルピー',
              '㍔': 'ルーブル',
              '㍕': 'レム',
              '㍖': 'レントゲン',
              '㍗': 'ワット'
            };

            // punctuation is pure_punctuation
            conversionTables.fullwidthToHalfwidth.punctuation = merge$1(
                conversionTables.fullwidthToHalfwidth.symbol,
                conversionTables.fullwidthToHalfwidth.purePunctuation
            );

            // Fill in the conversion tables with the flipped tables.
            conversionTables.halfwidthToFullwidth.alphabet = flip$1(conversionTables.fullwidthToHalfwidth.alphabet);
            conversionTables.halfwidthToFullwidth.numbers = flip$1(conversionTables.fullwidthToHalfwidth.numbers);
            conversionTables.halfwidthToFullwidth.symbol = flip$1(conversionTables.fullwidthToHalfwidth.symbol);
            conversionTables.halfwidthToFullwidth.purePunctuation = flip$1(conversionTables.fullwidthToHalfwidth.purePunctuation);
            conversionTables.halfwidthToFullwidth.punctuation = flip$1(conversionTables.fullwidthToHalfwidth.punctuation);
            conversionTables.halfwidthToFullwidth.katakana = flip$1(conversionTables.fullwidthToHalfwidth.katakana);

            // Build the normalization table.
            conversionTables.normalize = merge$1(
                conversionTables.fullwidthToHalfwidth.alphabet,
                conversionTables.fullwidthToHalfwidth.numbers,
                conversionTables.fullwidthToHalfwidth.symbol,
                conversionTables.halfwidthToFullwidth.purePunctuation,
                conversionTables.halfwidthToFullwidth.katakana
                );

            var converters = {
              fullwidthToHalfwidth: {
                alphabet: replacer$1(conversionTables.fullwidthToHalfwidth.alphabet),
                numbers: replacer$1(conversionTables.fullwidthToHalfwidth.numbers),
                symbol: replacer$1(conversionTables.fullwidthToHalfwidth.symbol),
                purePunctuation: replacer$1(conversionTables.fullwidthToHalfwidth.purePunctuation),
                punctuation: replacer$1(conversionTables.fullwidthToHalfwidth.punctuation),
                katakana: replacer$1(conversionTables.fullwidthToHalfwidth.katakana)
              },

              halfwidthToFullwidth: {
                alphabet: replacer$1(conversionTables.halfwidthToFullwidth.alphabet),
                numbers: replacer$1(conversionTables.halfwidthToFullwidth.numbers),
                symbol: replacer$1(conversionTables.halfwidthToFullwidth.symbol),
                purePunctuation: replacer$1(conversionTables.halfwidthToFullwidth.purePunctuation),
                punctuation: replacer$1(conversionTables.halfwidthToFullwidth.punctuation),
                katakana: replacer$1(conversionTables.halfwidthToFullwidth.katakana)
              },

              fixFullwidthKana: replacer$1(fixFullwidthKana),
              normalize: replacer$1(conversionTables.normalize)
            };

            var fixCompositeSymbols = replacer$1(fixCompositeSymbolsTable);


            /**
             * Convert hiragana to fullwidth katakana.
             * According to http://jsperf.com/converting-japanese, these implementations are
             * faster than using lookup tables.
             *
             * @param {string} str A string.
             * @return {string} A string not containing hiragana.
             */
            converters.hiraganaToKatakana = function(str) {
              str = converters.halfwidthToFullwidth.katakana(str);
              str = converters.fixFullwidthKana(str);

              str = str.replace(/ゝ/g, 'ヽ');
              str = str.replace(/ゞ/g, 'ヾ');
              //str = str.replace(/?/g, '𛀀'); // Letter archaic E

              str = str.replace(/[ぁ-ゖ]/g, function(str) {
                return String.fromCharCode(str.charCodeAt(0) + 96);
              });

              return str;
            };


            /**
             * Convert katakana to hiragana.
             *
             * @param {string} str A string.
             * @return {string} A string not containing katakana.
             */
            converters.katakanaToHiragana = function(str) {
              str = converters.halfwidthToFullwidth.katakana(str);
              str = converters.fixFullwidthKana(str);

              str = str.replace(/ヽ/g, 'ゝ');
              str = str.replace(/ヾ/g, 'ゞ');
              //str = str.replace(/?/g, '𛀁'); // Letter archaic E

              str = str.replace(/[ァ-ヶ]/g, function(str) {
                return String.fromCharCode(str.charCodeAt(0) - 96);
              });

              return str;
            };


            /**
             * Fix kana and apply the following processes;
             * * Replace repeat characters
             * * Alphabet to halfwidth
             * * Numbers to halfwidth
             * * Punctuation to fullwidth
             * * Katakana to fullwidth
             * * Fix fullwidth kana
             * * Replace composite symbols
             *
             * @param {string} str
             * @return {string}
             */
            var normalize_ja = function(str) {
              // Replace repeat characters.
              str = str
                .replace(/(..)々々/g, '$1$1')
                .replace(/(.)々/g, '$1$1');

              str = converters.normalize(str);
              str = converters.fixFullwidthKana(str);

              // Replace composite symbols.
              str = fixCompositeSymbols(str);

              return str;
            };

            var normalize_ja_1 = normalize_ja;
            var converters_1 = converters;

            var normalizer_ja = {
            	normalize_ja: normalize_ja_1,
            	converters: converters_1
            };

            // Original copyright:
            /*
             Copyright (c) 2008, Taku Kudo

             All rights reserved.

             Redistribution and use in source and binary forms, with or without
             modification, are permitted provided that the following conditions are met:

             * Redistributions of source code must retain the above copyright notice,
             this list of conditions and the following disclaimer.
             * Redistributions in binary form must reproduce the above copyright
             notice, this list of conditions and the following disclaimer in the
             documentation and/or other materials provided with the distribution.
             * Neither the name of the <ORGANIZATION> nor the names of its
             contributors may be used to endorse or promote products derived from this
             software without specific prior written permission.

             THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
             "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
             LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
             A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
             CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
             EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
             PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
             PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
             LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
             NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
             SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
             */

            // This version:
            /*
             Copyright (c) 2012, Guillaume Marty

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */

            // TinySegmenter 0.1 -- Super compact Japanese tokenizer in Javascript
            // (c) 2008 Taku Kudo <taku@chasen.org>
            // TinySegmenter is freely distributable under the terms of a new BSD licence.
            // For details, see http://chasen.org/~taku/software/TinySegmenter/LICENCE.txt

            var normalize = normalizer_ja.normalize_ja;



            /**
             * @constructor
             */
            var TokenizerJa = function() {
              this.chartype_ = [
                [/[〇一二三四五六七八九十百千万億兆]/, 'M'],
                [/[一-鿌〆]/, 'H'],
                [/[ぁ-ゟ]/, 'I'],
                [/[゠-ヿ]/, 'K'],
                [/[a-zA-Z]/, 'A'],
                [/[0-9]/, 'N']
              ];

              this.BIAS__ = -332;
              this.BC1__ = {'HH': 6, 'II': 2461, 'KH': 406, 'OH': -1378};
              this.BC2__ = {'AA': -3267, 'AI': 2744, 'AN': -878, 'HH': -4070, 'HM': -1711, 'HN': 4012, 'HO': 3761, 'IA': 1327, 'IH': -1184, 'II': -1332, 'IK': 1721, 'IO': 5492, 'KI': 3831, 'KK': -8741, 'MH': -3132, 'MK': 3334, 'OO': -2920};
              this.BC3__ = {'HH': 996, 'HI': 626, 'HK': -721, 'HN': -1307, 'HO': -836, 'IH': -301, 'KK': 2762, 'MK': 1079, 'MM': 4034, 'OA': -1652, 'OH': 266};
              this.BP1__ = {'BB': 295, 'OB': 304, 'OO': -125, 'UB': 352};
              this.BP2__ = {'BO': 60, 'OO': -1762};
              this.BQ1__ = {'BHH': 1150, 'BHM': 1521, 'BII': -1158, 'BIM': 886, 'BMH': 1208, 'BNH': 449, 'BOH': -91, 'BOO': -2597, 'OHI': 451, 'OIH': -296, 'OKA': 1851, 'OKH': -1020, 'OKK': 904, 'OOO': 2965};
              this.BQ2__ = {'BHH': 118, 'BHI': -1159, 'BHM': 466, 'BIH': -919, 'BKK': -1720, 'BKO': 864, 'OHH': -1139, 'OHM': -181, 'OIH': 153, 'UHI': -1146};
              this.BQ3__ = {'BHH': -792, 'BHI': 2664, 'BII': -299, 'BKI': 419, 'BMH': 937, 'BMM': 8335, 'BNN': 998, 'BOH': 775, 'OHH': 2174, 'OHM': 439, 'OII': 280, 'OKH': 1798, 'OKI': -793, 'OKO': -2242, 'OMH': -2402, 'OOO': 11699};
              this.BQ4__ = {'BHH': -3895, 'BIH': 3761, 'BII': -4654, 'BIK': 1348, 'BKK': -1806, 'BMI': -3385, 'BOO': -12396, 'OAH': 926, 'OHH': 266, 'OHK': -2036, 'ONN': -973};
              this.BW1__ = {'，と': 660, '，同': 727, 'B1あ': 1404, 'B1同': 542, '、と': 660, '、同': 727, '｣と': 1682, 'あっ': 1505, 'いう': 1743, 'いっ': -2055, 'いる': 672, 'うし': -4817, 'うん': 665, 'から': 3472, 'がら': 600, 'こう': -790, 'こと': 2083, 'こん': -1262, 'さら': -4143, 'さん': 4573, 'した': 2641, 'して': 1104, 'すで': -3399, 'そこ': 1977, 'それ': -871, 'たち': 1122, 'ため': 601, 'った': 3463, 'つい': -802, 'てい': 805, 'てき': 1249, 'でき': 1127, 'です': 3445, 'では': 844, 'とい': -4915, 'とみ': 1922, 'どこ': 3887, 'ない': 5713, 'なっ': 3015, 'など': 7379, 'なん': -1113, 'にし': 2468, 'には': 1498, 'にも': 1671, 'に対': -912, 'の一': -501, 'の中': 741, 'ませ': 2448, 'まで': 1711, 'まま': 2600, 'まる': -2155, 'やむ': -1947, 'よっ': -2565, 'れた': 2369, 'れで': -913, 'をし': 1860, 'を見': 731, '亡く': -1886, '京都': 2558, '取り': -2784, '大き': -2604, '大阪': 1497, '平方': -2314, '引き': -1336, '日本': -195, '本当': -2423, '毎日': -2113, '目指': -724};
              this.BW2__ = {'11': -669, '．．': -11822, '――': -5730, '−−': -13175, 'いう': -1609, 'うか': 2490, 'かし': -1350, 'かも': -602, 'から': -7194, 'かれ': 4612, 'がい': 853, 'がら': -3198, 'きた': 1941, 'くな': -1597, 'こと': -8392, 'この': -4193, 'させ': 4533, 'され': 13168, 'さん': -3977, 'しい': -1819, 'しか': -545, 'した': 5078, 'して': 972, 'しな': 939, 'その': -3744, 'たい': -1253, 'たた': -662, 'ただ': -3857, 'たち': -786, 'たと': 1224, 'たは': -939, 'った': 4589, 'って': 1647, 'っと': -2094, 'てい': 6144, 'てき': 3640, 'てく': 2551, 'ては': -3110, 'ても': -3065, 'でい': 2666, 'でき': -1528, 'でし': -3828, 'です': -4761, 'でも': -4203, 'とい': 1890, 'とこ': -1746, 'とと': -2279, 'との': 720, 'とみ': 5168, 'とも': -3941, 'ない': -2488, 'なが': -1313, 'など': -6509, 'なの': 2614, 'なん': 3099, 'にお': -1615, 'にし': 2748, 'にな': 2454, 'によ': -7236, 'に対': -14943, 'に従': -4688, 'に関': -11388, 'のか': 2093, 'ので': -7059, 'のに': -6041, 'のの': -6125, 'はい': 1073, 'はが': -1033, 'はず': -2532, 'ばれ': 1813, 'まし': -1316, 'まで': -6621, 'まれ': 5409, 'めて': -3153, 'もい': 2230, 'もの': -10713, 'らか': -944, 'らし': -1611, 'らに': -1897, 'りし': 651, 'りま': 1620, 'れた': 4270, 'れて': 849, 'れば': 4114, 'ろう': 6067, 'われ': 7901, 'を通': -11877, 'んだ': 728, 'んな': -4115, '一人': 602, '一方': -1375, '一日': 970, '一部': -1051, '上が': -4479, '会社': -1116, '出て': 2163, '分の': -7758, '同党': 970, '同日': -913, '大阪': -2471, '委員': -1250, '少な': -1050, '年度': -8669, '年間': -1626, '府県': -2363, '手権': -1982, '新聞': -4066, '日新': -722, '日本': -7068, '日米': 3372, '曜日': -601, '朝鮮': -2355, '本人': -2697, '東京': -1543, '然と': -1384, '社会': -1276, '立て': -990, '第に': -1612, '米国': -4268};
              this.BW3__ = {'あた': -2194, 'あり': 719, 'ある': 3846, 'い．': -1185, 'い。': -1185, 'いい': 5308, 'いえ': 2079, 'いく': 3029, 'いた': 2056, 'いっ': 1883, 'いる': 5600, 'いわ': 1527, 'うち': 1117, 'うと': 4798, 'えと': 1454, 'か．': 2857, 'か。': 2857, 'かけ': -743, 'かっ': -4098, 'かに': -669, 'から': 6520, 'かり': -2670, 'が，': 1816, 'が、': 1816, 'がき': -4855, 'がけ': -1127, 'がっ': -913, 'がら': -4977, 'がり': -2064, 'きた': 1645, 'けど': 1374, 'こと': 7397, 'この': 1542, 'ころ': -2757, 'さい': -714, 'さを': 976, 'し，': 1557, 'し、': 1557, 'しい': -3714, 'した': 3562, 'して': 1449, 'しな': 2608, 'しま': 1200, 'す．': -1310, 'す。': -1310, 'する': 6521, 'ず，': 3426, 'ず、': 3426, 'ずに': 841, 'そう': 428, 'た．': 8875, 'た。': 8875, 'たい': -594, 'たの': 812, 'たり': -1183, 'たる': -853, 'だ．': 4098, 'だ。': 4098, 'だっ': 1004, 'った': -4748, 'って': 300, 'てい': 6240, 'てお': 855, 'ても': 302, 'です': 1437, 'でに': -1482, 'では': 2295, 'とう': -1387, 'とし': 2266, 'との': 541, 'とも': -3543, 'どう': 4664, 'ない': 1796, 'なく': -903, 'など': 2135, 'に，': -1021, 'に、': -1021, 'にし': 1771, 'にな': 1906, 'には': 2644, 'の，': -724, 'の、': -724, 'の子': -1000, 'は，': 1337, 'は、': 1337, 'べき': 2181, 'まし': 1113, 'ます': 6943, 'まっ': -1549, 'まで': 6154, 'まれ': -793, 'らし': 1479, 'られ': 6820, 'るる': 3818, 'れ，': 854, 'れ、': 854, 'れた': 1850, 'れて': 1375, 'れば': -3246, 'れる': 1091, 'われ': -605, 'んだ': 606, 'んで': 798, 'カ月': 990, '会議': 860, '入り': 1232, '大会': 2217, '始め': 1681, '市': 965, '新聞': -5055, '日，': 974, '日、': 974, '社会': 2024};
              this.TC1__ = {'AAA': 1093, 'HHH': 1029, 'HHM': 580, 'HII': 998, 'HOH': -390, 'HOM': -331, 'IHI': 1169, 'IOH': -142, 'IOI': -1015, 'IOM': 467, 'MMH': 187, 'OOI': -1832};
              this.TC2__ = {'HHO': 2088, 'HII': -1023, 'HMM': -1154, 'IHI': -1965, 'KKH': 703, 'OII': -2649};
              this.TC3__ = {'AAA': -294, 'HHH': 346, 'HHI': -341, 'HII': -1088, 'HIK': 731, 'HOH': -1486, 'IHH': 128, 'IHI': -3041, 'IHO': -1935, 'IIH': -825, 'IIM': -1035, 'IOI': -542, 'KHH': -1216, 'KKA': 491, 'KKH': -1217, 'KOK': -1009, 'MHH': -2694, 'MHM': -457, 'MHO': 123, 'MMH': -471, 'NNH': -1689, 'NNO': 662, 'OHO': -3393};
              this.TC4__ = {'HHH': -203, 'HHI': 1344, 'HHK': 365, 'HHM': -122, 'HHN': 182, 'HHO': 669, 'HIH': 804, 'HII': 679, 'HOH': 446, 'IHH': 695, 'IHO': -2324, 'IIH': 321, 'III': 1497, 'IIO': 656, 'IOO': 54, 'KAK': 4845, 'KKA': 3386, 'KKK': 3065, 'MHH': -405, 'MHI': 201, 'MMH': -241, 'MMM': 661, 'MOM': 841};
              this.TQ1__ = {'BHHH': -227, 'BHHI': 316, 'BHIH': -132, 'BIHH': 60, 'BIII': 1595, 'BNHH': -744, 'BOHH': 225, 'BOOO': -908, 'OAKK': 482, 'OHHH': 281, 'OHIH': 249, 'OIHI': 200, 'OIIH': -68};
              this.TQ2__ = {'BIHH': -1401, 'BIII': -1033, 'BKAK': -543, 'BOOO': -5591};
              this.TQ3__ = {'BHHH': 478, 'BHHM': -1073, 'BHIH': 222, 'BHII': -504, 'BIIH': -116, 'BIII': -105, 'BMHI': -863, 'BMHM': -464, 'BOMH': 620, 'OHHH': 346, 'OHHI': 1729, 'OHII': 997, 'OHMH': 481, 'OIHH': 623, 'OIIH': 1344, 'OKAK': 2792, 'OKHH': 587, 'OKKA': 679, 'OOHH': 110, 'OOII': -685};
              this.TQ4__ = {'BHHH': -721, 'BHHM': -3604, 'BHII': -966, 'BIIH': -607, 'BIII': -2181, 'OAAA': -2763, 'OAKK': 180, 'OHHH': -294, 'OHHI': 2446, 'OHHO': 480, 'OHIH': -1573, 'OIHH': 1935, 'OIHI': -493, 'OIIH': 626, 'OIII': -4007, 'OKAK': -8156};
              this.TW1__ = {'につい': -4681, '東京都': 2026};
              this.TW2__ = {'ある程': -2049, 'いった': -1256, 'ころが': -2434, 'しょう': 3873, 'その後': -4430, 'だって': -1049, 'ていた': 1833, 'として': -4657, 'ともに': -4517, 'もので': 1882, '一気に': -792, '初めて': -1512, '同時に': -8097, '大きな': -1255, '対して': -2721, '社会党': -3216};
              this.TW3__ = {'いただ': -1734, 'してい': 1314, 'として': -4314, 'につい': -5483, 'にとっ': -5989, 'に当た': -6247, 'ので，': -727, 'ので、': -727, 'のもの': -600, 'れから': -3752, '十二月': -2287};
              this.TW4__ = {'いう．': 8576, 'いう。': 8576, 'からな': -2348, 'してい': 2958, 'たが，': 1516, 'たが、': 1516, 'ている': 1538, 'という': 1349, 'ました': 5543, 'ません': 1097, 'ようと': -4258, 'よると': 5865};
              this.UC1__ = {'A': 484, 'K': 93, 'M': 645, 'O': -505};
              this.UC2__ = {'A': 819, 'H': 1059, 'I': 409, 'M': 3987, 'N': 5775, 'O': 646};
              this.UC3__ = {'A': -1370, 'I': 2311};
              this.UC4__ = {'A': -2643, 'H': 1809, 'I': -1032, 'K': -3450, 'M': 3565, 'N': 3876, 'O': 6646};
              this.UC5__ = {'H': 313, 'I': -1238, 'K': -799, 'M': 539, 'O': -831};
              this.UC6__ = {'H': -506, 'I': -253, 'K': 87, 'M': 247, 'O': -387};
              this.UP1__ = {'O': -214};
              this.UP2__ = {'B': 69, 'O': 935};
              this.UP3__ = {'B': 189};
              this.UQ1__ = {'BH': 21, 'BI': -12, 'BK': -99, 'BN': 142, 'BO': -56, 'OH': -95, 'OI': 477, 'OK': 410, 'OO': -2422};
              this.UQ2__ = {'BH': 216, 'BI': 113, 'OK': 1759};
              this.UQ3__ = {'BA': -479, 'BH': 42, 'BI': 1913, 'BK': -7198, 'BM': 3160, 'BN': 6427, 'BO': 14761, 'OI': -827, 'ON': -3212};
              this.UW1__ = {'，': 156, '、': 156, '｢': -463, 'あ': -941, 'う': -127, 'が': -553, 'き': 121, 'こ': 505, 'で': -201, 'と': -547, 'ど': -123, 'に': -789, 'の': -185, 'は': -847, 'も': -466, 'や': -470, 'よ': 182, 'ら': -292, 'り': 208, 'れ': 169, 'を': -446, 'ん': -137, '・': -135, '主': -402, '京': -268, '区': -912, '午': 871, '国': -460, '大': 561, '委': 729, '市': -411, '日': -141, '理': 361, '生': -408, '県': -386, '都': -718};
              this.UW2__ = {'，': -829, '、': -829, '〇': 892, '｢': -645, '｣': 3145, 'あ': -538, 'い': 505, 'う': 134, 'お': -502, 'か': 1454, 'が': -856, 'く': -412, 'こ': 1141, 'さ': 878, 'ざ': 540, 'し': 1529, 'す': -675, 'せ': 300, 'そ': -1011, 'た': 188, 'だ': 1837, 'つ': -949, 'て': -291, 'で': -268, 'と': -981, 'ど': 1273, 'な': 1063, 'に': -1764, 'の': 130, 'は': -409, 'ひ': -1273, 'べ': 1261, 'ま': 600, 'も': -1263, 'や': -402, 'よ': 1639, 'り': -579, 'る': -694, 'れ': 571, 'を': -2516, 'ん': 2095, 'ア': -587, 'カ': 306, 'キ': 568, 'ッ': 831, '三': -758, '不': -2150, '世': -302, '中': -968, '主': -861, '事': 492, '人': -123, '会': 978, '保': 362, '入': 548, '初': -3025, '副': -1566, '北': -3414, '区': -422, '大': -1769, '天': -865, '太': -483, '子': -1519, '学': 760, '実': 1023, '小': -2009, '市': -813, '年': -1060, '強': 1067, '手': -1519, '揺': -1033, '政': 1522, '文': -1355, '新': -1682, '日': -1815, '明': -1462, '最': -630, '朝': -1843, '本': -1650, '東': -931, '果': -665, '次': -2378, '民': -180, '気': -1740, '理': 752, '発': 529, '目': -1584, '相': -242, '県': -1165, '立': -763, '第': 810, '米': 509, '自': -1353, '行': 838, '西': -744, '見': -3874, '調': 1010, '議': 1198, '込': 3041, '開': 1758, '間': -1257};
              this.UW3__ = {'1': -800, '，': 4889, '−': -1723, '、': 4889, '々': -2311, '〇': 5827, '｣': 2670, '〓': -3573, 'あ': -2696, 'い': 1006, 'う': 2342, 'え': 1983, 'お': -4864, 'か': -1163, 'が': 3271, 'く': 1004, 'け': 388, 'げ': 401, 'こ': -3552, 'ご': -3116, 'さ': -1058, 'し': -395, 'す': 584, 'せ': 3685, 'そ': -5228, 'た': 842, 'ち': -521, 'っ': -1444, 'つ': -1081, 'て': 6167, 'で': 2318, 'と': 1691, 'ど': -899, 'な': -2788, 'に': 2745, 'の': 4056, 'は': 4555, 'ひ': -2171, 'ふ': -1798, 'へ': 1199, 'ほ': -5516, 'ま': -4384, 'み': -120, 'め': 1205, 'も': 2323, 'や': -788, 'よ': -202, 'ら': 727, 'り': 649, 'る': 5905, 'れ': 2773, 'わ': -1207, 'を': 6620, 'ん': -518, 'ア': 551, 'グ': 1319, 'ス': 874, 'ッ': -1350, 'ト': 521, 'ム': 1109, 'ル': 1591, 'ロ': 2201, 'ン': 278, '・': -3794, '一': -1619, '下': -1759, '世': -2087, '両': 3815, '中': 653, '主': -758, '予': -1193, '二': 974, '人': 2742, '今': 792, '他': 1889, '以': -1368, '低': 811, '何': 4265, '作': -361, '保': -2439, '元': 4858, '党': 3593, '全': 1574, '公': -3030, '六': 755, '共': -1880, '円': 5807, '再': 3095, '分': 457, '初': 2475, '別': 1129, '前': 2286, '副': 4437, '力': 365, '動': -949, '務': -1872, '化': 1327, '北': -1038, '区': 4646, '千': -2309, '午': -783, '協': -1006, '口': 483, '右': 1233, '各': 3588, '合': -241, '同': 3906, '和': -837, '員': 4513, '国': 642, '型': 1389, '場': 1219, '外': -241, '妻': 2016, '学': -1356, '安': -423, '実': -1008, '家': 1078, '小': -513, '少': -3102, '州': 1155, '市': 3197, '平': -1804, '年': 2416, '広': -1030, '府': 1605, '度': 1452, '建': -2352, '当': -3885, '得': 1905, '思': -1291, '性': 1822, '戸': -488, '指': -3973, '政': -2013, '教': -1479, '数': 3222, '文': -1489, '新': 1764, '日': 2099, '旧': 5792, '昨': -661, '時': -1248, '曜': -951, '最': -937, '月': 4125, '期': 360, '李': 3094, '村': 364, '東': -805, '核': 5156, '森': 2438, '業': 484, '氏': 2613, '民': -1694, '決': -1073, '法': 1868, '海': -495, '無': 979, '物': 461, '特': -3850, '生': -273, '用': 914, '町': 1215, '的': 7313, '直': -1835, '省': 792, '県': 6293, '知': -1528, '私': 4231, '税': 401, '立': -960, '第': 1201, '米': 7767, '系': 3066, '約': 3663, '級': 1384, '統': -4229, '総': 1163, '線': 1255, '者': 6457, '能': 725, '自': -2869, '英': 785, '見': 1044, '調': -562, '財': -733, '費': 1777, '車': 1835, '軍': 1375, '込': -1504, '通': -1136, '選': -681, '郎': 1026, '郡': 4404, '部': 1200, '金': 2163, '長': 421, '開': -1432, '間': 1302, '関': -1282, '雨': 2009, '電': -1045, '非': 2066, '駅': 1620};
              this.UW4__ = {'，': 3930, '．': 3508, '―': -4841, '、': 3930, '。': 3508, '〇': 4999, '｢': 1895, '｣': 3798, '〓': -5156, 'あ': 4752, 'い': -3435, 'う': -640, 'え': -2514, 'お': 2405, 'か': 530, 'が': 6006, 'き': -4482, 'ぎ': -3821, 'く': -3788, 'け': -4376, 'げ': -4734, 'こ': 2255, 'ご': 1979, 'さ': 2864, 'し': -843, 'じ': -2506, 'す': -731, 'ず': 1251, 'せ': 181, 'そ': 4091, 'た': 5034, 'だ': 5408, 'ち': -3654, 'っ': -5882, 'つ': -1659, 'て': 3994, 'で': 7410, 'と': 4547, 'な': 5433, 'に': 6499, 'ぬ': 1853, 'ね': 1413, 'の': 7396, 'は': 8578, 'ば': 1940, 'ひ': 4249, 'び': -4134, 'ふ': 1345, 'へ': 6665, 'べ': -744, 'ほ': 1464, 'ま': 1051, 'み': -2082, 'む': -882, 'め': -5046, 'も': 4169, 'ゃ': -2666, 'や': 2795, 'ょ': -1544, 'よ': 3351, 'ら': -2922, 'り': -9726, 'る': -14896, 'れ': -2613, 'ろ': -4570, 'わ': -1783, 'を': 13150, 'ん': -2352, 'カ': 2145, 'コ': 1789, 'セ': 1287, 'ッ': -724, 'ト': -403, 'メ': -1635, 'ラ': -881, 'リ': -541, 'ル': -856, 'ン': -3637, '・': -4371, 'ー': -11870, '一': -2069, '中': 2210, '予': 782, '事': -190, '井': -1768, '人': 1036, '以': 544, '会': 950, '体': -1286, '作': 530, '側': 4292, '先': 601, '党': -2006, '共': -1212, '内': 584, '円': 788, '初': 1347, '前': 1623, '副': 3879, '力': -302, '動': -740, '務': -2715, '化': 776, '区': 4517, '協': 1013, '参': 1555, '合': -1834, '和': -681, '員': -910, '器': -851, '回': 1500, '国': -619, '園': -1200, '地': 866, '場': -1410, '塁': -2094, '士': -1413, '多': 1067, '大': 571, '子': -4802, '学': -1397, '定': -1057, '寺': -809, '小': 1910, '屋': -1328, '山': -1500, '島': -2056, '川': -2667, '市': 2771, '年': 374, '庁': -4556, '後': 456, '性': 553, '感': 916, '所': -1566, '支': 856, '改': 787, '政': 2182, '教': 704, '文': 522, '方': -856, '日': 1798, '時': 1829, '最': 845, '月': -9066, '木': -485, '来': -442, '校': -360, '業': -1043, '氏': 5388, '民': -2716, '気': -910, '沢': -939, '済': -543, '物': -735, '率': 672, '球': -1267, '生': -1286, '産': -1101, '田': -2900, '町': 1826, '的': 2586, '目': 922, '省': -3485, '県': 2997, '空': -867, '立': -2112, '第': 788, '米': 2937, '系': 786, '約': 2171, '経': 1146, '統': -1169, '総': 940, '線': -994, '署': 749, '者': 2145, '能': -730, '般': -852, '行': -792, '規': 792, '警': -1184, '議': -244, '谷': -1000, '賞': 730, '車': -1481, '軍': 1158, '輪': -1433, '込': -3370, '近': 929, '道': -1291, '選': 2596, '郎': -4866, '都': 1192, '野': -1100, '銀': -2213, '長': 357, '間': -2344, '院': -2297, '際': -2604, '電': -878, '領': -1659, '題': -792, '館': -1984, '首': 1749, '高': 2120};
              this.UW5__ = {'1': -514, '，': 465, '．': -299, 'E2': -32768, '］': -2762, '、': 465, '。': -299, '｢': 363, 'あ': 1655, 'い': 331, 'う': -503, 'え': 1199, 'お': 527, 'か': 647, 'が': -421, 'き': 1624, 'ぎ': 1971, 'く': 312, 'げ': -983, 'さ': -1537, 'し': -1371, 'す': -852, 'だ': -1186, 'ち': 1093, 'っ': 52, 'つ': 921, 'て': -18, 'で': -850, 'と': -127, 'ど': 1682, 'な': -787, 'に': -1224, 'の': -635, 'は': -578, 'べ': 1001, 'み': 502, 'め': 865, 'ゃ': 3350, 'ょ': 854, 'り': -208, 'る': 429, 'れ': 504, 'わ': 419, 'を': -1264, 'ん': 327, 'イ': 241, 'ル': 451, 'ン': -343, '中': -871, '京': 722, '会': -1153, '党': -654, '務': 3519, '区': -901, '告': 848, '員': 2104, '大': -1296, '学': -548, '定': 1785, '嵐': -1304, '市': -2991, '席': 921, '年': 1763, '思': 872, '所': -814, '挙': 1618, '新': -1682, '日': 218, '月': -4353, '査': 932, '格': 1356, '機': -1508, '氏': -1347, '田': 240, '町': -3912, '的': -3149, '相': 1319, '省': -1052, '県': -4003, '研': -997, '社': -278, '空': -813, '統': 1955, '者': -2233, '表': 663, '語': -1073, '議': 1219, '選': -1018, '郎': -368, '長': 786, '間': 1191, '題': 2368, '館': -689};
              this.UW6__ = {'1': -270, '，': 227, '．': 808, 'E1': 306, '、': 227, '。': 808, 'あ': -307, 'う': 189, 'か': 241, 'が': -73, 'く': -121, 'こ': -200, 'じ': 1782, 'す': 383, 'た': -428, 'っ': 573, 'て': -1014, 'で': 101, 'と': -105, 'な': -253, 'に': -149, 'の': -417, 'は': -236, 'も': -206, 'り': 187, 'る': -135, 'を': 195, 'ル': -673, 'ン': -496, '一': -277, '中': 201, '件': -800, '会': 624, '前': 302, '区': 1792, '員': -1212, '委': 798, '学': -960, '市': 887, '広': -695, '後': 535, '業': -697, '相': 753, '社': -507, '福': 974, '空': -822, '者': 1811, '連': 463, '郎': 1082};

              return this;
            };

            util$2.inherits(TokenizerJa, tokenizer);


            /**
             * @param {string} str
             * @return {string}
             * @private
             */
            TokenizerJa.prototype.ctype_ = function(str) {
              for (var i = 0, length = this.chartype_.length; i < length; i++) {
                if (str.match(this.chartype_[i][0])) {
                  return this.chartype_[i][1];
                }
              }
              return 'O';
            };


            /**
             * @param {string} v
             * @return {number}
             * @private
             */
            TokenizerJa.prototype.ts_ = function(v) {
              if (v) { return v; }
              return 0;
            };


            /**
             * Remove punctuations signs from tokens.
             *
             * @param {Array.<string>} tokens An array of tokens.
             * @return {Array.<string>} An array of tokens.
             * @private
             */
            TokenizerJa.prototype.removePuncTokens = function(tokens) {
              return tokens
                  .map(function(token) {
                    return token.replace(/[＿－・，、；：！？．。（）［］｛｝｢｣＠＊＼／＆＃％｀＾＋＜＝＞｜～≪≫─＄＂_\-･,､;:!?.｡()[\]{}「」@*\/&#%`^+<=>|~«»$"\s]+/g, '');
                  })
                  .filter(function(token) {
                    return token != '';
                  });
            };


            /**
             * @param {string} text
             * @return {Array.<string>}
             */
            TokenizerJa.prototype.tokenize = function(text) {
              if (text == null || text == undefined || text == '') {
                return [];
              }
              text = normalize(text);
              var result = [];
              var seg = ['B3', 'B2', 'B1'];
              var ctype = ['O', 'O', 'O'];
              var o = text.split('');
              var i;
              var length;
              for (i = 0, length = o.length; i < length; ++i) {
                seg.push(o[i]);
                ctype.push(this.ctype_(o[i]));
              }
              seg.push('E1');
              seg.push('E2');
              seg.push('E3');
              ctype.push('O');
              ctype.push('O');
              ctype.push('O');
              var word = seg[3];
              var p1 = 'U';
              var p2 = 'U';
              var p3 = 'U';
              for (i = 4, length = seg.length - 3; i < length; ++i) {
                var score = this.BIAS__;
                var w1 = seg[i - 3];
                var w2 = seg[i - 2];
                var w3 = seg[i - 1];
                var w4 = seg[i];
                var w5 = seg[i + 1];
                var w6 = seg[i + 2];
                var c1 = ctype[i - 3];
                var c2 = ctype[i - 2];
                var c3 = ctype[i - 1];
                var c4 = ctype[i];
                var c5 = ctype[i + 1];
                var c6 = ctype[i + 2];
                score += this.ts_(this.UP1__[p1]);
                score += this.ts_(this.UP2__[p2]);
                score += this.ts_(this.UP3__[p3]);
                score += this.ts_(this.BP1__[p1 + p2]);
                score += this.ts_(this.BP2__[p2 + p3]);
                score += this.ts_(this.UW1__[w1]);
                score += this.ts_(this.UW2__[w2]);
                score += this.ts_(this.UW3__[w3]);
                score += this.ts_(this.UW4__[w4]);
                score += this.ts_(this.UW5__[w5]);
                score += this.ts_(this.UW6__[w6]);
                score += this.ts_(this.BW1__[w2 + w3]);
                score += this.ts_(this.BW2__[w3 + w4]);
                score += this.ts_(this.BW3__[w4 + w5]);
                score += this.ts_(this.TW1__[w1 + w2 + w3]);
                score += this.ts_(this.TW2__[w2 + w3 + w4]);
                score += this.ts_(this.TW3__[w3 + w4 + w5]);
                score += this.ts_(this.TW4__[w4 + w5 + w6]);
                score += this.ts_(this.UC1__[c1]);
                score += this.ts_(this.UC2__[c2]);
                score += this.ts_(this.UC3__[c3]);
                score += this.ts_(this.UC4__[c4]);
                score += this.ts_(this.UC5__[c5]);
                score += this.ts_(this.UC6__[c6]);
                score += this.ts_(this.BC1__[c2 + c3]);
                score += this.ts_(this.BC2__[c3 + c4]);
                score += this.ts_(this.BC3__[c4 + c5]);
                score += this.ts_(this.TC1__[c1 + c2 + c3]);
                score += this.ts_(this.TC2__[c2 + c3 + c4]);
                score += this.ts_(this.TC3__[c3 + c4 + c5]);
                score += this.ts_(this.TC4__[c4 + c5 + c6]);
                //score += this.ts_(this.TC5__[c4 + c5 + c6]);
                score += this.ts_(this.UQ1__[p1 + c1]);
                score += this.ts_(this.UQ2__[p2 + c2]);
                score += this.ts_(this.UQ3__[p3 + c3]);
                score += this.ts_(this.BQ1__[p2 + c2 + c3]);
                score += this.ts_(this.BQ2__[p2 + c3 + c4]);
                score += this.ts_(this.BQ3__[p3 + c2 + c3]);
                score += this.ts_(this.BQ4__[p3 + c3 + c4]);
                score += this.ts_(this.TQ1__[p2 + c1 + c2 + c3]);
                score += this.ts_(this.TQ2__[p2 + c2 + c3 + c4]);
                score += this.ts_(this.TQ3__[p3 + c1 + c2 + c3]);
                score += this.ts_(this.TQ4__[p3 + c2 + c3 + c4]);
                var p = 'O';
                if (score > 0) {
                  result.push(word);
                  word = '';
                  p = 'B';
                }
                p1 = p2;
                p2 = p3;
                p3 = p;
                word += seg[i];
              }
              result.push(word);

              result = this.removePuncTokens(result);

              return result;
            };

            var tokenizer_ja = TokenizerJa;

            // Original copyright:
            /*
             Licensed to the Apache Software Foundation (ASF) under one or more
             contributor license agreements.  See the NOTICE file distributed with
             this work for additional information regarding copyright ownership.
             The ASF licenses this file to You under the Apache License, Version 2.0
             the "License"); you may not use this file except in compliance with
             the License.  You may obtain a copy of the License at

             http://www.apache.org/licenses/LICENSE-2.0

             Unless required by applicable law or agreed to in writing, software
             distributed under the License is distributed on an "AS IS" BASIS,
             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             See the License for the specific language governing permissions and
             limitations under the License.
            */

            // This version:
            /*
            Copyright (c) 2012, Guillaume Marty

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // a list of commonly used words that have little meaning and can be excluded
            // from analysis.
            // Original location:
            // http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/analysis/kuromoji/src/resources/org/apache/lucene/analysis/ja/stopwords.txt
            var words$b = ['の', 'に', 'は', 'を', 'た', 'が', 'で', 'て', 'と', 'し', 'れ', 'さ',
              'ある', 'いる', 'も', 'する', 'から', 'な', 'こと', 'として', 'い', 'や', 'れる',
              'など', 'なっ', 'ない', 'この', 'ため', 'その', 'あっ', 'よう', 'また', 'もの',
              'という', 'あり', 'まで', 'られ', 'なる', 'へ', 'か', 'だ', 'これ', 'によって',
              'により', 'おり', 'より', 'による', 'ず', 'なり', 'られる', 'において', 'ば', 'なかっ',
              'なく', 'しかし', 'について', 'せ', 'だっ', 'その後', 'できる', 'それ', 'う', 'ので',
              'なお', 'のみ', 'でき', 'き', 'つ', 'における', 'および', 'いう', 'さらに', 'でも',
              'ら', 'たり', 'その他', 'に関する', 'たち', 'ます', 'ん', 'なら', 'に対して', '特に',
              'せる', '及び', 'これら', 'とき', 'では', 'にて', 'ほか', 'ながら', 'うち', 'そして',
              'とともに', 'ただし', 'かつて', 'それぞれ', 'または', 'お', 'ほど', 'ものの', 'に対する',
              'ほとんど', 'と共に', 'といった', 'です', 'とも', 'ところ', 'ここ'];

            // tell the world about the noise words.
            var stopwords_ja = words$b;

            /*
             Copyright (c) 2012, Guillaume Marty

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */

            /**
             * A very basic stemmer that performs the following steps:
             * * Stem katakana.
             * Inspired by:
             * http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseKatakanaStemFilter.java
             *
             * This script assumes input is normalized using normalizer_ja().
             *
             * \@todo Use .bind() in StemmerJa.prototype.attach().
             */






            /**
             * @constructor
             */
            var StemmerJa = function() {
            };


            /**
             * Tokenize and stem a text.
             * Stop words are excluded except if the second argument is true.
             *
             * @param {string} text
             * @param {boolean} keepStops Whether to keep stop words from the output or not.
             * @return {Array.<string>}
             */
            StemmerJa.prototype.tokenizeAndStem = function(text, keepStops) {
              var self = this;
              var stemmedTokens = [];
              var tokens = new tokenizer_ja().tokenize(text);

              // This is probably faster than an if at each iteration.
              if (keepStops) {
                tokens.forEach(function(token) {
                  var resultToken = token.toLowerCase();
                  resultToken = self.stem(resultToken);
                  stemmedTokens.push(resultToken);
                });
              } else {
                tokens.forEach(function(token) {
                  if (stopwords_ja.indexOf(token) == -1) {
                    var resultToken = token.toLowerCase();
                    resultToken = self.stem(resultToken);
                    stemmedTokens.push(resultToken);
                  }
                });
              }

              return stemmedTokens;
            };


            /**
             * Stem a term.
             *
             * @param {string} token
             * @return {string}
             */
            StemmerJa.prototype.stem = function(token) {
              token = this.stemKatakana(token);

              return token;
            };


            /**
             * Remove the final prolonged sound mark on katakana if length is superior to
             * a threshold.
             *
             * @param {string} token A katakana string to stem.
             * @return {string} A katakana string stemmed.
             */
            StemmerJa.prototype.stemKatakana = function(token) {
              var HIRAGANA_KATAKANA_PROLONGED_SOUND_MARK = 'ー';
              var DEFAULT_MINIMUM_LENGTH = 4;

              if (token.length >= DEFAULT_MINIMUM_LENGTH
                  && token.slice(-1) === HIRAGANA_KATAKANA_PROLONGED_SOUND_MARK
                  && this.isKatakana(token)) {
                token = token.slice(0, token.length - 1);
              }
              return token;
            };


            /**
             * Is a string made of fullwidth katakana only?
             * This implementation is the fastest I know:
             * http://jsperf.com/string-contain-katakana-only/2
             *
             * @param {string} str A string.
             * @return {boolean} True if the string has katakana only.
             */
            StemmerJa.prototype.isKatakana = function(str) {
              return !!str.match(/^[゠-ヿ]+$/);
            };

            // Expose an attach function that will patch String with new methods.
            StemmerJa.prototype.attach = function() {
              var self = this;

              String.prototype.stem = function() {
                return self.stem(this);
              };

              String.prototype.tokenizeAndStem = function(keepStops) {
                return self.tokenizeAndStem(this, keepStops);
              };
            };

            var stemmer_ja = StemmerJa;

            var __dirname$1 = '/Users/yawjosephetse/Developer/github/repetere/modelscript/node_modules/natural/lib/natural/stemmers/indonesian';

            /*
            Copyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // a list of commonly used words that have little meaning and can be excluded
            // from analysis.
            var words$c = 
            	['a','ada','adalah','adanya','adapun','agak','agaknya','agar','akan','akankah','akhir',
                'akhiri','akhirnya','aku','akulah','amat','amatlah','anda','andalah','antar','antara',
                'antaranya','apa','apaan','apabila','apakah','apalagi','apatah','arti','artinya','asal',
                'asalkan','atas','atau','ataukah','ataupun','awal','awalnya','b','bagai','bagaikan',
                'bagaimana','bagaimanakah','bagaimanapun','bagainamakah','bagi','bagian','bahkan','bahwa',
                'bahwasannya','bahwasanya','baik','baiklah','bakal','bakalan','balik','banyak','bapak',
                'baru','bawah','beberapa','begini','beginian','beginikah','beginilah','begitu','begitukah',
                'begitulah','begitupun','bekerja','belakang','belakangan','belum','belumlah','benar',
                'benarkah','benarlah','berada','berakhir','berakhirlah','berakhirnya','berapa','berapakah',
                'berapalah','berapapun','berarti','berawal','berbagai','berdatangan','beri','berikan',
                'berikut','berikutnya','berjumlah','berkali-kali','berkata','berkehendak','berkeinginan',
                'berkenaan','berlainan','berlalu','berlangsung','berlebihan','bermacam','bermacam-macam',
                'bermaksud','bermula','bersama','bersama-sama','bersiap','bersiap-siap','bertanya',
                'bertanya-tanya','berturut','berturut-turut','bertutur','berujar','berupa','besar',
                'betul','betulkah','biasa','biasanya','bila','bilakah','bisa','bisakah','boleh','bolehkah',
                'bolehlah','buat','bukan','bukankah','bukanlah','bukannya','bulan','bung','c','cara',
                'caranya','cukup','cukupkah','cukuplah','cuma','d','dahulu','dalam','dan','dapat','dari',
                'daripada','datang','dekat','demi','demikian','demikianlah','dengan','depan','di','dia',
                'diakhiri','diakhirinya','dialah','diantara','diantaranya','diberi','diberikan','diberikannya',
                'dibuat','dibuatnya','didapat','didatangkan','digunakan','diibaratkan','diibaratkannya',
                'diingat','diingatkan','diinginkan','dijawab','dijelaskan','dijelaskannya','dikarenakan',
                'dikatakan','dikatakannya','dikerjakan','diketahui','diketahuinya','dikira','dilakukan',
                'dilalui','dilihat','dimaksud','dimaksudkan','dimaksudkannya','dimaksudnya','diminta',
                'dimintai','dimisalkan','dimulai','dimulailah','dimulainya','dimungkinkan','dini','dipastikan',
                'diperbuat','diperbuatnya','dipergunakan','diperkirakan','diperlihatkan','diperlukan',
                'diperlukannya','dipersoalkan','dipertanyakan','dipunyai','diri','dirinya','disampaikan',
                'disebut','disebutkan','disebutkannya','disini','disinilah','ditambahkan','ditandaskan',
                'ditanya','ditanyai','ditanyakan','ditegaskan','ditujukan','ditunjuk','ditunjuki','ditunjukkan',
                'ditunjukkannya','ditunjuknya','dituturkan','dituturkannya','diucapkan','diucapkannya',
                'diungkapkan','dong','dua','dulu','e','empat','enak','enggak','enggaknya','entah','entahlah',
                'f','g','guna','gunakan','h','hadap','hai','hal','halo','hallo','hampir','hanya','hanyalah',
                'hari','harus','haruslah','harusnya','helo','hello','hendak','hendaklah','hendaknya','hingga',
                'i','ia','ialah','ibarat','ibaratkan','ibaratnya','ibu','ikut','ingat','ingat-ingat','ingin',
                'inginkah','inginkan','ini','inikah','inilah','itu','itukah','itulah','j','jadi','jadilah',
                'jadinya','jangan','jangankan','janganlah','jauh','jawab','jawaban','jawabnya','jelas',
                'jelaskan','jelaslah','jelasnya','jika','jikalau','juga','jumlah','jumlahnya','justru',
                'k','kadar','kala','kalau','kalaulah','kalaupun','kali','kalian','kami','kamilah','kamu',
                'kamulah','kan','kapan','kapankah','kapanpun','karena','karenanya','kasus','kata','katakan',
                'katakanlah','katanya','ke','keadaan','kebetulan','kecil','kedua','keduanya','keinginan',
                'kelamaan','kelihatan','kelihatannya','kelima','keluar','kembali','kemudian','kemungkinan',
                'kemungkinannya','kena','kenapa','kepada','kepadanya','kerja','kesampaian','keseluruhan',
                'keseluruhannya','keterlaluan','ketika','khusus','khususnya','kini','kinilah','kira',
                'kira-kira','kiranya','kita','kitalah','kok','kurang','l','lagi','lagian','lah','lain',
                'lainnya','laku','lalu','lama','lamanya','langsung','lanjut','lanjutnya','lebih','lewat',
                'lihat','lima','luar','m','macam','maka','makanya','makin','maksud','malah','malahan',
                'mampu','mampukah','mana','manakala','manalagi','masa','masalah','masalahnya','masih',
                'masihkah','masing','masing-masing','masuk','mata','mau','maupun','melainkan','melakukan',
                'melalui','melihat','melihatnya','memang','memastikan','memberi','memberikan','membuat',
                'memerlukan','memihak','meminta','memintakan','memisalkan','memperbuat','mempergunakan',
                'memperkirakan','memperlihatkan','mempersiapkan','mempersoalkan','mempertanyakan','mempunyai',
                'memulai','memungkinkan','menaiki','menambahkan','menandaskan','menanti','menanti-nanti',
                'menantikan','menanya','menanyai','menanyakan','mendapat','mendapatkan','mendatang','mendatangi',
                'mendatangkan','menegaskan','mengakhiri','mengapa','mengatakan','mengatakannya','mengenai',
                'mengerjakan','mengetahui','menggunakan','menghendaki','mengibaratkan','mengibaratkannya',
                'mengingat','mengingatkan','menginginkan','mengira','mengucapkan','mengucapkannya','mengungkapkan',
                'menjadi','menjawab','menjelaskan','menuju','menunjuk','menunjuki','menunjukkan','menunjuknya',
                'menurut','menuturkan','menyampaikan','menyangkut','menyatakan','menyebutkan','menyeluruh',
                'menyiapkan','merasa','mereka','merekalah','merupakan','meski','meskipun','meyakini','meyakinkan',
                'minta','mirip','misal','misalkan','misalnya','mohon','mula','mulai','mulailah','mulanya','mungkin',
                'mungkinkah','n','nah','naik','namun','nanti','nantinya','nya','nyaris','nyata','nyatanya',
                'o','oleh','olehnya','orang','p','pada','padahal','padanya','pak','paling','panjang','pantas',
                'para','pasti','pastilah','penting','pentingnya','per','percuma','perlu','perlukah','perlunya',
                'pernah','persoalan','pertama','pertama-tama','pertanyaan','pertanyakan','pihak','pihaknya',
                'pukul','pula','pun','punya','q','r','rasa','rasanya','rupa','rupanya','s','saat','saatnya','saja',
                'sajalah','salam','saling','sama','sama-sama','sambil','sampai','sampai-sampai','sampaikan','sana',
                'sangat','sangatlah','sangkut','satu','saya','sayalah','se','sebab','sebabnya','sebagai',
                'sebagaimana','sebagainya','sebagian','sebaik','sebaik-baiknya','sebaiknya','sebaliknya',
                'sebanyak','sebegini','sebegitu','sebelum','sebelumnya','sebenarnya','seberapa','sebesar',
                'sebetulnya','sebisanya','sebuah','sebut','sebutlah','sebutnya','secara','secukupnya','sedang',
                'sedangkan','sedemikian','sedikit','sedikitnya','seenaknya','segala','segalanya','segera',
                'seharusnya','sehingga','seingat','sejak','sejauh','sejenak','sejumlah','sekadar','sekadarnya',
                'sekali','sekali-kali','sekalian','sekaligus','sekalipun','sekarang','sekaranglah','sekecil',
                'seketika','sekiranya','sekitar','sekitarnya','sekurang-kurangnya','sekurangnya','sela','selain',
                'selaku','selalu','selama','selama-lamanya','selamanya','selanjutnya','seluruh','seluruhnya',
                'semacam','semakin','semampu','semampunya','semasa','semasih','semata','semata-mata','semaunya',
                'sementara','semisal','semisalnya','sempat','semua','semuanya','semula','sendiri','sendirian',
                'sendirinya','seolah','seolah-olah','seorang','sepanjang','sepantasnya','sepantasnyalah',
                'seperlunya','seperti','sepertinya','sepihak','sering','seringnya','serta','serupa','sesaat',
                'sesama','sesampai','sesegera','sesekali','seseorang','sesuatu','sesuatunya','sesudah',
                'sesudahnya','setelah','setempat','setengah','seterusnya','setiap','setiba','setibanya',
                'setidak-tidaknya','setidaknya','setinggi','seusai','sewaktu','siap','siapa','siapakah',
                'siapapun','sini','sinilah','soal','soalnya','suatu','sudah','sudahkah','sudahlah','supaya',
                't','tadi','tadinya','tahu','tak','tambah','tambahnya','tampak','tampaknya','tandas','tandasnya',
                'tanpa','tanya','tanyakan','tanyanya','tapi','tegas','tegasnya','telah','tempat','tentang','tentu',
                'tentulah','tentunya','tepat','terakhir','terasa','terbanyak','terdahulu','terdapat','terdiri',
                'terhadap','terhadapnya','teringat','teringat-ingat','terjadi','terjadilah','terjadinya','terkira',
                'terlalu','terlebih','terlihat','termasuk','ternyata','tersampaikan','tersebut','tersebutlah',
                'tertentu','tertuju','terus','terutama','tetap','tetapi','tiap','tiba','tiba-tiba','tidak',
                'tidakkah','tidaklah','tiga','toh','tuju','tunjuk','turut','tutur','tuturnya','u','ucap','ucapnya',
                'ujar','ujarnya','umumnya','ungkap','ungkapnya','untuk','usah','usai','v','w','waduh','wah','wahai',
                'waktunya','walau','walaupun','wong','x','y','ya','yaitu','yakin','yakni','yang','z'];

            // tell the world about the noise words.
            var words_1$a = words$c;

            var stopwords_id = {
            	words: words_1$a
            };

            /*
            Copyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var AggressiveTokenizer$a = function() {
                tokenizer.call(this);    
            };
            util$2.inherits(AggressiveTokenizer$a, tokenizer);

            var aggressive_tokenizer_id = AggressiveTokenizer$a;

            // Remove all non alphanumeric characters except '-'
            // Replace more than one space character to ' '
            function normalizeText(text){
            	result = text.replace(/[^a-z0-9 -]/g, ' ').replace(/( +)/g, ' ');
            	return result;
            }

            AggressiveTokenizer$a.prototype.tokenize = function(text) {
                // break a string up into an array of tokens by space
                text = normalizeText(text);
                return this.trim(text.split(' '));
            };

            /*
            Copyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */




            var base_stemmer_id = function() {
                var stemmer = this;

                stemmer.stem = function(token) {
                    return token;
                };

                stemmer.addStopWord = function(stopWord) {
                    stopwords_id.words.push(stopWord);
                };

                stemmer.addStopWords = function(moreStopWords) {
                    stopwords_id.words = stopwords_id.words.concat(moreStopWords);
                };

                stemmer.removeStopWord = function(stopWord) {
                    this.removeStopWords([stopWord]);
                };

                stemmer.removeStopWords = function(moreStopWords) {
                    moreStopWords.forEach(function(stopWord){
                        var idx = stopwords_id.words.indexOf(stopWord);
                        if (idx >= 0) {
                            stopwords_id.words.splice(idx, 1);
                        }
                    });

                };


                stemmer.tokenizeAndStem = function(text, keepStops) {
                    var stemmedTokens = [];
                    var lowercaseText = text.toLowerCase();
                    var tokens = new aggressive_tokenizer_id().tokenize(lowercaseText);

                    if (keepStops) {
                        tokens.forEach(function(token) {
                            stemmedTokens.push(stemmer.stem(token));
                        });
                    }

                    else {
                        tokens.forEach(function(token) {
                            if (stopwords_id.words.indexOf(token) == -1)
                                stemmedTokens.push(stemmer.stem(token));
                        });
                    }

                    return stemmedTokens;
                };

                stemmer.attach = function() {
                    String.prototype.stem = function() {
                        return stemmer.stem(this);
                    };

                    String.prototype.tokenizeAndStem = function(keepStops) {
                        return stemmer.tokenizeAndStem(this, keepStops);
                    };
                };
            };

            /*
            Copyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // a list of commonly used words that have little meaning and can be excluded
            // from analysis.

            function Removal (original_word, result, removedPart, affixType) {
                this.original_word 	= original_word;
                this.result 		= result;
                this.removedPart 	= removedPart;
                this.affixType 		= affixType;
            }
             
            Removal.prototype.getOriginalWord = function() {
                return this.original_word;
            };

            Removal.prototype.getResult = function() {
                return this.result;
            };

            Removal.prototype.getRemovedPart = function() {
                return this.removedPart;
            };

            Removal.prototype.getAffixType = function() {
                return this.affixType;
            };

            var removal = Removal;

            /*
            Copyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // a list of commonly used words that have little meaning and can be excluded
            // from analysis.



            SuffixRules = function() {
            	var SuffixRules = this;

            	this.removal = undefined;
            	this.current_word = undefined;

            	function createResultObject(result, word, type){
            		if(result!=word){
            			var removedPart = word.replace(result, '');

            			var removal$$1 = new removal(word, result, removedPart, type);

            			this.removal = removal$$1;
            		}
            		else{
            			this.removal = undefined;
            		}
            		this.current_word = result;
            		return this;
            	}

            	SuffixRules.RemoveInflectionalParticle = function(word){
            		var result = word.replace(/-*(lah|kah|tah|pun)$/, '');
            		return createResultObject(result, word, "P");
            	};

            	SuffixRules.RemoveInflectionalPossessivePronoun = function(word){
            		var result = word.replace(/-*(ku|mu|nya)$/, '');
            		return createResultObject(result, word, "PP");
            	};

            	SuffixRules.RemoveDerivationalSuffix = function(word){
            		var result = word.replace(/(is|isme|isasi|i|kan|an)$/, '');
            		return createResultObject(result, word, "DS");
            	};
            };

            var suffix_rules = SuffixRules;

            // Initalize suffix rules array
            var rules$1 = [];
            var sr = new SuffixRules();

            rules$1.push(sr.RemoveInflectionalParticle);
            rules$1.push(sr.RemoveInflectionalPossessivePronoun);
            rules$1.push(sr.RemoveDerivationalSuffix);

            SuffixRules.rules = rules$1;

            var __dirname$2 = '/Users/yawjosephetse/Developer/github/repetere/modelscript/node_modules/natural/lib/natural/stemmers/indonesian';

            /*
            Copyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // a list of commonly used words that have little meaning and can be excluded
            // from analysis.



            // Make global variable for dictionary
            var dictionary = [];
            function loadDictionary(){
                var fs$$1 = fs;
                var dirname = __dirname$2 + "/../../../../data/kata-dasar.txt";
                var fin = fs$$1.readFileSync(dirname).toString().split("\n");
                for(var i in fin){
                    var word = fin[i];
                    word = word.trim();
                    dictionary.push(word);
                }
            }
            loadDictionary();

            PrefixRules = function() {
            	var PrefixRules = this;

            	this.removal = undefined;
            	this.current_word = undefined;

            	// Find certain word in dictionary
            	function find(word) {
            	    return (dictionary.indexOf(word) != -1);
            	}

            	// Run the array of disambiguate rules on input word
            	function runDisambiguator(disambiguateRules, word){
            		var result = undefined;
            	
            		for(var i in disambiguateRules){
            	    	result = disambiguateRules[i](word);
            	    	if(find(result)){
            	    		break;
            	    	}
            	    }
            	    
            	    if(result==undefined){
            	    	this.current_word = word;
            	    	this.removal = undefined;
            	    	return this;
            	    }

            	    return createResultObject(result, word, "DP");
            	}

            	function createResultObject(result, word, type){
            		var removedPart = word.replace(result, '');
            		var removal$$1 = new removal(word, result, removedPart, type);

            		this.removal = removal$$1;
            		this.current_word = result;
            		
            		return this;
            	}

            	PrefixRules.RemovePlainPrefix = function(word){
            		var result = word.replace(/^(di|ke|se)/, '');
            		if(result!=word){
            			var removedPart = word.replace(result, '');

            			var removal$$1 = new removal(word, result, removedPart, 'DP');

            			this.removal = removal$$1;
            		}
            		else{
            			this.removal = undefined;
            		}
            		this.current_word = result;
            		return this;
            	};

            	// RULE 1
            	function disambiguateRule1A(word){
            		// Rule 1a : berV -> ber-V
            		var matches = word.match(/^ber([aiueo].*)$/);
            	    if(matches){
            	        return matches[1];
            	    }
            	}

            	function disambiguateRule1B(word){
            		// Rule 1b : berV -> be-rV
            	    var matches = word.match(/^ber([aiueo].*)$/);
            	    if(matches){
            	        return 'r' + matches[1];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule1 = function(word){
            		// Push rules 1A & 1B
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule1A);
            		disambiguateRules.push(disambiguateRule1B);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 2
            	function disambiguateRule2(word){
            		// Rule 2 : berCAP -> ber-CAP where C != 'r' AND P != 'er'
            		var matches = word.match(/^ber([bcdfghjklmnpqrstvwxyz])([a-z])(.*)/);
            	    if(matches){
            	    	if(matches[3].match(/^er(.*)$/)){
            	    		return
            	    	}
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule2 = function(word){
            		// Push rule 2
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule2);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 3
            	function disambiguateRule3(word){
            		// Rule 3 : berCAerV -> ber-CAerV where C != 'r'
            		var matches = word.match(/ber([bcdfghjklmnpqrstvwxyz])([a-z])er([aiueo])(.*)/);
            	    if(matches){
            	    	if(matches[1] == "r"){
            	    		return
            	    	}
            	        return matches[1] + matches[2] + "er" + matches[3] + matches[4];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule3 = function(word){
            		// Push rule 3
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule3);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 4
            	function disambiguateRule4(word){
            		// Rule 4 : belajar -> ajar
            		if(word == "belajar"){
            			return "ajar";
            		}
            	}

            	PrefixRules.DisambiguatorPrefixRule4 = function(word){
            		// Push rule 4
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule4);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 5
            	function disambiguateRule5(word){
            		// Rule 5 : beC1erC2 -> be-C1erC2 where C1 != 'r'
            		var matches = word.match(/be([bcdfghjklmnpqstvwxyz])(er[bcdfghjklmnpqrstvwxyz])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule5 = function(word){
            		// Push rule 5
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule5);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 6
            	function disambiguateRule6a(word){
            		// Rule 6a : terV -> ter-V
            		var matches = word.match(/^ter([aiueo].*)$/);
            	    if(matches){
            	        return matches[1];
            	    }
            	}

            	function disambiguateRule6b(word){
            		// Rule 6b : terV -> te-rV
            		var matches = word.match(/^ter([aiueo].*)$/);
            	    if(matches){
            	        return "r" + matches[1];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule6 = function(word){
            		// Push rule 6
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule6a);
            		disambiguateRules.push(disambiguateRule6b);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 7
            	function disambiguateRule7(word){
            		// Rule 7 : terCerv -> ter-CerV where C != 'r'
            		var matches = word.match(/^ter([bcdfghjklmnpqrstvwxyz])er([aiueo].*)$/);
            	    if(matches){
            	    	if(matches[1]=="r"){
            	    		return
            	    	}
            	        return matches[1] + "er" + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule7 = function(word){
            		// Push rule 7
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule7);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 8
            	function disambiguateRule8(word){
            		// Rule 8 : terCP -> ter-CP where C != 'r' and P != 'er'
            		var matches = word.match(/^ter([bcdfghjklmnpqrstvwxyz])(.*)$/);
            	    if(matches){
            	    	if(matches[1]=="r" || matches[2].match(/^er(.*)$/)){
            	    		return
            	    	}
            	        return matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule8 = function(word){
            		// Push rule 8
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule8);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 9
            	function disambiguateRule9(word){
            		// Rule 9 : te-C1erC2 -> te-C1erC2 where C1 != 'r'
            		var matches = word.match(/^te([bcdfghjklmnpqrstvwxyz])er([bcdfghjklmnpqrstvwxyz])(.*)$/);
            	    if(matches){
            	    	if(matches[1]=="r"){
            	    		return
            	    	}
            	        return matches[1] + "er" + matches[2] + matches[3];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule9 = function(word){
            		// Push rule 9
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule9);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 10
            	function disambiguateRule10(word){
            		// Rule 10 : me{l|r|w|y}V -> me-{l|r|w|y}V
            		var matches = word.match(/^me([lrwy])([aiueo])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule10 = function(word){
            		// Push rule 10
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule10);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 11
            	function disambiguateRule11(word){
            		// Rule 11 : mem{b|f|v} -> mem-{b|f|v}
            		var matches = word.match(/^mem([bfv])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule11 = function(word){
            		// Push rule 11
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule11);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 12
            	function disambiguateRule12(word){
            		// Nazief and Adriani Rule 12 : beC1erC2 -> be-C1erC2 where C1 != 'r'
                    // Modified by Jelita Asian's CS Rule 12 : mempe -> mem-pe to stem mempengaruhi
            		var matches = word.match(/^mempe(.*)$/);
            	    if(matches){
            	        return "pe" + matches[1];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule12 = function(word){
            		// Push rule 12
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule12);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 13
            	function disambiguateRule13a(word){
            		// Rule 13a : mem{rV|V} -> me-m{rV|V}
            		var matches = word.match(/^mem([aiueo])(.*)$/);
            	    if(matches){
            	        return "m" + matches[1] + matches[2];
            	    }
            	}

            	function disambiguateRule13b(word){
            		// Rule 13b : mem{rV|V} -> me-p{rV|V}
            		var matches = word.match(/^mem([aiueo])(.*)$/);
            	    if(matches){
            	        return "p" + matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule13 = function(word){
            		// Push rule 13
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule13a);
            		disambiguateRules.push(disambiguateRule13b);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 14
            	function disambiguateRule14(word){
            		/*Rule 14 modified by Andy Librian : men{c|d|j|s|t|z} -> men-{c|d|j|s|t|z}
                    in order to stem mentaati
              
                    Rule 14 modified by ECS: men{c|d|j|s|z} -> men-{c|d|j|s|z}
                    in order to stem mensyaratkan, mensyukuri
              
                    Original CS Rule no 14 was : men{c|d|j|z} -> men-{c|d|j|z}*/
            		var matches = word.match(/^men([cdjstz])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule14 = function(word){
            		// Push rule 14
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule14);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 15
            	function disambiguateRule15a(word){
            		// Rule 15a : men{V} -> me-n{V}
            		var matches = word.match(/^men([aiueo])(.*)$/);
            	    if(matches){
            	        return "n" + matches[1] + matches[2];
            	    }
            	}

            	function disambiguateRule15b(word){
            		// Rule 15b : men{V} -> me-t{V}
            		var matches = word.match(/^men([aiueo])(.*)$/);
            	    if(matches){
            	        return "t" + matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule15 = function(word){
            		// Push rule 15
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule15a);
            		disambiguateRules.push(disambiguateRule15b);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 16
            	function disambiguateRule16(word){
            		// Original Nazief and Adriani's Rule 16 : meng{g|h|q} -> meng-{g|h|q}
                    // Modified Jelita Asian's CS Rule 16 : meng{g|h|q|k} -> meng-{g|h|q|k} to stem mengkritik
            		var matches = word.match(/^meng([g|h|q|k])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule16 = function(word){
            		// Push rule 16
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule16);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 17
            	function disambiguateRule17a(word){
            		// Rule 17a : mengV -> meng-V
            		var matches = word.match(/^meng([aiueo])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2];
            	    }
            	}

            	function disambiguateRule17b(word){
            		// Rule 17b : mengV -> meng-kV
            		var matches = word.match(/^meng([aiueo])(.*)$/);
            	    if(matches){
            	        return "k" + matches[1] + matches[2];
            	    }
            	}

            	function disambiguateRule17c(word){
            		// Rule 17c : mengV -> meng-V- where V = 'e'
            		var matches = word.match(/^menge(.*)$/);
            	    if(matches){
            	        return matches[1];
            	    }
            	}

            	function disambiguateRule17d(word){
            		// Rule 17d : mengV -> me-ngV
            		var matches = word.match(/^meng([aiueo])(.*)$/);
            	    if(matches){
            	        return "ng" + matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule17 = function(word){
            		// Push rule 17
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule17a);
            		disambiguateRules.push(disambiguateRule17b);
            		disambiguateRules.push(disambiguateRule17c);
            		disambiguateRules.push(disambiguateRule17d);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 18
            	function disambiguateRule18a(word){
            		// Rule 18a : menyV -> me-nyV to stem menyala -> nyala
            		var matches = word.match(/^meny([aiueo])(.*)$/);
            	    if(matches){
            	        return "ny" + matches[1] + matches[2];
            	    }
            	}

            	function disambiguateRule18b(word){
            		// Original Rule 18b : menyV -> meny-sV
                    // Modified by CC (shifted into 18b, see also 18a)
            		var matches = word.match(/^meny([aiueo])(.*)$/);
            	    if(matches){
            	        return "s" + matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule18 = function(word){
            		// Push rule 18
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule18a);
            		disambiguateRules.push(disambiguateRule18b);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 19
            	function disambiguateRule19(word){
            		// Original Rule 19 : mempV -> mem-pV where V != 'e'
                    // Modified Rule 19 by ECS : mempA -> mem-pA where A != 'e' in order to stem memproteksi
            		var matches = word.match(/^memp([abcdfghijklmopqrstuvwxyz])(.*)$/);
            	    if(matches){
            	        return "p" + matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule19 = function(word){
            		// Push rule 19
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule19);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 20
            	function disambiguateRule20(word){
            		// Rule 20 : pe{w|y}V -> pe-{w|y}V
            		var matches = word.match(/^pe([wy])([aiueo])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule20 = function(word){
            		// Push rule 20
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule20);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 21
            	function disambiguateRule21a(word){
            		// Rule 21a : perV -> per-V
            		var matches = word.match(/^per([aiueo])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2];
            	    }
            	}

            	function disambiguateRule21b(word){
            		// Rule 21b : perV -> pe-rV
            		var matches = word.match(/^pe(r[aiueo])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule21= function(word){
            		// Push rule 21
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule21a);
            		disambiguateRules.push(disambiguateRule21b);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 23
            	function disambiguateRule23(word){
            		// Rule 23 : perCAP -> per-CAP where C != 'r' AND P != 'er'
            		var matches = word.match(/^per([bcdfghjklmnpqrstvwxyz])([a-z])(.*)$/);
            	    if(matches){
            	    	if(matches[3].match(/^er(.*)$/)){
            	    		return
            	    	}
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule23 = function(word){
            		// Push rule 23
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule23);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 24
            	function disambiguateRule24(word){
            		// Rule 24 : perCAerV -> per-CAerV where C != 'r'
            		var matches = word.match(/^per([bcdfghjklmnpqrstvwxyz])([a-z])er([aiueo])(.*)$/);
            	    if(matches){
            	    	if(matches[1] == "r"){
            	    		return
            	    	}
            	        return matches[1] + matches[2] + "er" + matches[3] + matches[4];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule24 = function(word){
            		// Push rule 24
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule24);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 25
            	function disambiguateRule25(word){
            		// Rule 25 : pem{b|f|v} -> pem-{b|f|v}
            		var matches = word.match(/^pem([bfv])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule25 = function(word){
            		// Push rule 25
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule25);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 26
            	function disambiguateRule26a(word){
            		// Rule 26a : pem{rV|V} -> pe-m{rV|V}
            		var matches = word.match(/^pem([aiueo])(.*)$/);
            	    if(matches){
            	        return "m" + matches[1] + matches[2];
            	    }
            	}

            	function disambiguateRule26b(word){
            		// Rule 26b : pem{rV|V} -> pe-p{rV|V}
            		var matches = word.match(/^pem([aiueo])(.*)$/);
            	    if(matches){
            	        return "p" + matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule26 = function(word){
            		// Push rule 26
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule26a);
            		disambiguateRules.push(disambiguateRule26b);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 27
            	function disambiguateRule27(word){
            		// Rule 27 : pen{c|d|j|s|t|z} -> pen-{c|d|j|s|t|z}
            		var matches = word.match(/^pen([cdjstz])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule27 = function(word){
            		// Push rule 27
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule27);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 28
            	function disambiguateRule28a(word){
            		// Rule 28a : pen{V} -> pe-n{V}
            		var matches = word.match(/^pen([aiueo])(.*)$/);
            	    if(matches){
            	        return "n" + matches[1] + matches[2];
            	    }
            	}

            	function disambiguateRule28b(word){
            		// Rule 28b : pen{V} -> pe-t{V}
            		var matches = word.match(/^pen([aiueo])(.*)$/);
            	    if(matches){
            	        return "t" + matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule28 = function(word){
            		// Push rule 28
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule28a);
            		disambiguateRules.push(disambiguateRule28b);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 29
            	function disambiguateRule29(word){
            		// Rule 29 by ECS : pengC -> peng-C
            		var matches = word.match(/^peng([bcdfghjklmnpqrstvwxyz])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule29 = function(word){
            		// Push rule 29
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule29);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 30
            	function disambiguateRule30a(word){
            		// Rule 30a : pengV -> peng-V
            		var matches = word.match(/^peng([aiueo])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2];
            	    }
            	}

            	function disambiguateRule30b(word){
            		// Rule 30b : pengV -> peng-kV
            		var matches = word.match(/^peng([aiueo])(.*)$/);
            	    if(matches){
            	        return "k" + matches[1] + matches[2];
            	    }
            	}

            	function disambiguateRule30c(word){
            		// Rule 30c : pengV -> pengV- where V = 'e'
            		var matches = word.match(/^penge(.*)$/);
            	    if(matches){
            	        return matches[1];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule30 = function(word){
            		// Push rule 30
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule30a);
            		disambiguateRules.push(disambiguateRule30b);
            		disambiguateRules.push(disambiguateRule30c);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 31
            	function disambiguateRule31a(word){
            		// Rule 31a : penyV -> pe-nyV
            		var matches = word.match(/^peny([aiueo])(.*)$/);
            	    if(matches){
            	        return "ny" + matches[1] + matches[2];
            	    }
            	}

            	function disambiguateRule31b(word){
            		// Original Rule 31 : penyV -> peny-sV
            		var matches = word.match(/^peny([aiueo])(.*)$/);
            	    if(matches){
            	        return "s" + matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule31 = function(word){
            		// Push rule 31
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule31a);
            		disambiguateRules.push(disambiguateRule31b);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 32
            	function disambiguateRule32(word){
            		// Rule 32 : pelV -> pe-lV except pelajar -> ajar
            		if(word=="pelajar"){
            			return "ajar";
            		}
            		var matches = word.match(/^pe(l[aiueo])(.*)/);
            	    if(matches){
            	        return matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule32 = function(word){
            		// Push rule 32
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule32);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 34
            	function disambiguateRule34(word){
            		// Rule 34 : peCP -> pe-CP where C != {r|w|y|l|m|n} and P != 'er'
            		var matches = word.match(/^pe([bcdfghjklmnpqrstvwxyz])(.*)$/);
            	    if(matches){
            	    	if(matches[2].match(/^er(.*)$/)){
            	    		return
            	    	}
            	        return matches[1] + matches[2];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule34 = function(word){
            		// Push rule 34
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule34);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 35
            	function disambiguateRule35(word){
            		// Rule 35 : terC1erC2 -> ter-C1erC2 where C1 != {r}
            		var matches = word.match(/^ter([bcdfghjkpqstvxz])(er[bcdfghjklmnpqrstvwxyz])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule35 = function(word){
            		// Push rule 35
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule35);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 36
            	function disambiguateRule36(word){
            		// Rule 36 : peC1erC2 -> pe-C1erC2 where C1 != {r|w|y|l|m|n}
            		var matches = word.match(/^pe([bcdfghjkpqstvxz])(er[bcdfghjklmnpqrstvwxyz])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule36 = function(word){
            		// Push rule 36
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule36);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 37
            	function disambiguateRule37a(word){
            		// Rule 37a : CerV -> CerV
            		var matches = word.match(/^([bcdfghjklmnpqrstvwxyz])(er[aiueo])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	function disambiguateRule37b(word){
            		// Rule 37b : CerV -> CV
            		var matches = word.match(/^([bcdfghjklmnpqrstvwxyz])er([aiueo])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule37 = function(word){
            		// Push rule 37
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule37a);
            		disambiguateRules.push(disambiguateRule37b);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 38
            	function disambiguateRule38a(word){
            		// Rule 38a : CelV -> CelV
            		var matches = word.match(/^([bcdfghjklmnpqrstvwxyz])(el[aiueo])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	function disambiguateRule38b(word){
            		// Rule 38b : CelV -> CV
            		var matches = word.match(/^([bcdfghjklmnpqrstvwxyz])el([aiueo])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule38 = function(word){
            		// Push rule 38
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule38a);
            		disambiguateRules.push(disambiguateRule38b);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 39
            	function disambiguateRule39a(word){
            		// Rule 39a : CemV -> CemV
            		var matches = word.match(/^([bcdfghjklmnpqrstvwxyz])(em[aiueo])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	function disambiguateRule39b(word){
            		// Rule 39b : CemV -> CV
            		var matches = word.match(/^([bcdfghjklmnpqrstvwxyz])em([aiueo])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule39 = function(word){
            		// Push rule 39
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule39a);
            		disambiguateRules.push(disambiguateRule39b);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 40
            	function disambiguateRule40a(word){
            		// Rule 40a : CinV -> CinV
            		var matches = word.match(/^([bcdfghjklmnpqrstvwxyz])(in[aiueo])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	function disambiguateRule40b(word){
            		// Rule 40b : CinV -> CV
            		var matches = word.match(/^([bcdfghjklmnpqrstvwxyz])in([aiueo])(.*)$/);
            	    if(matches){
            	        return matches[1] + matches[2] + matches[3];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule40 = function(word){
            		// Push rule 40
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule40a);
            		disambiguateRules.push(disambiguateRule40b);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 41
            	function disambiguateRule41(word){
            		// Rule 41 : kuA -> ku-A
            		var matches = word.match(/^ku(.*)$/);
            	    if(matches){
            	        return matches[1];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule41 = function(word){
            		// Push rule 41
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule41);

            	    return runDisambiguator(disambiguateRules, word);
            	};

            	// RULE 42
            	function disambiguateRule42(word){
            		// Rule 42 : kauA -> kau-A
            		var matches = word.match(/^kau(.*)$/);
            	    if(matches){
            	        return matches[1];
            	    }
            	}

            	PrefixRules.DisambiguatorPrefixRule42 = function(word){
            		// Push rule 42
            		var disambiguateRules = [];
            		disambiguateRules.push(disambiguateRule42);

            	    return runDisambiguator(disambiguateRules, word);
            	};
            };

            var prefix_rules 	= PrefixRules;

            // Initalize prefix rules array
            var rules$2 		= [];
            var pr = new PrefixRules();

            // Push all rules
            rules$2.push(pr.RemovePlainPrefix);
            rules$2.push(pr.DisambiguatorPrefixRule1);
            rules$2.push(pr.DisambiguatorPrefixRule2);
            rules$2.push(pr.DisambiguatorPrefixRule3);
            rules$2.push(pr.DisambiguatorPrefixRule4);
            rules$2.push(pr.DisambiguatorPrefixRule5);
            rules$2.push(pr.DisambiguatorPrefixRule6);
            rules$2.push(pr.DisambiguatorPrefixRule7);
            rules$2.push(pr.DisambiguatorPrefixRule8);
            rules$2.push(pr.DisambiguatorPrefixRule9);
            rules$2.push(pr.DisambiguatorPrefixRule10);
            rules$2.push(pr.DisambiguatorPrefixRule11);
            rules$2.push(pr.DisambiguatorPrefixRule12);
            rules$2.push(pr.DisambiguatorPrefixRule13);
            rules$2.push(pr.DisambiguatorPrefixRule14);
            rules$2.push(pr.DisambiguatorPrefixRule15);
            rules$2.push(pr.DisambiguatorPrefixRule16);
            rules$2.push(pr.DisambiguatorPrefixRule17);
            rules$2.push(pr.DisambiguatorPrefixRule18);
            rules$2.push(pr.DisambiguatorPrefixRule19);
            rules$2.push(pr.DisambiguatorPrefixRule20);
            rules$2.push(pr.DisambiguatorPrefixRule21);
            rules$2.push(pr.DisambiguatorPrefixRule23);
            rules$2.push(pr.DisambiguatorPrefixRule24);
            rules$2.push(pr.DisambiguatorPrefixRule25);
            rules$2.push(pr.DisambiguatorPrefixRule26);
            rules$2.push(pr.DisambiguatorPrefixRule27);
            rules$2.push(pr.DisambiguatorPrefixRule28);
            rules$2.push(pr.DisambiguatorPrefixRule29);
            rules$2.push(pr.DisambiguatorPrefixRule30);
            rules$2.push(pr.DisambiguatorPrefixRule31);
            rules$2.push(pr.DisambiguatorPrefixRule32);
            rules$2.push(pr.DisambiguatorPrefixRule34);
            rules$2.push(pr.DisambiguatorPrefixRule35);
            rules$2.push(pr.DisambiguatorPrefixRule36);
            rules$2.push(pr.DisambiguatorPrefixRule37);
            rules$2.push(pr.DisambiguatorPrefixRule38);
            rules$2.push(pr.DisambiguatorPrefixRule39);
            rules$2.push(pr.DisambiguatorPrefixRule40);
            rules$2.push(pr.DisambiguatorPrefixRule41);
            rules$2.push(pr.DisambiguatorPrefixRule42);

            PrefixRules.rules = rules$2;

            /*
            Copyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */


            var stemmer$1 = new base_stemmer_id();

            // Dictionary
            var dictionary$1 = [];
            loadDictionary$1();

            // Rules



            var suffix_rules$1 = suffix_rules.rules;
            var prefix_rules$1 = prefix_rules.rules;

            // Removals
            var removals;

            // Words
            var original_word;
            var current_word;

            var stemmer_id = stemmer$1;

            // perform full stemming algorithm on a single word
            stemmer$1.stem = function(token) {
                // Cache stemmer not yet implemented
                // Set to lowercase
                token = token.toLowerCase();

                //Initiate everything
                removals = [];

                if(isPlural(token)){
                    return stemPluralWord(token);
                }
                else{
                    return stemSingularWord(token);
                }
            };

            // Stem for plural word
            function stemPluralWord(plural_word){
                var matches = plural_word.match(/^(.*)-(.*)$/);
                if(!matches){
                    return plural_word;
                }
                words = [matches[1], matches[2]];

                //malaikat-malaikat-nya -> malaikat malaikat-nya
                suffix = words[1];
                suffixes = ["ku", "mu", "nya", "lah", "kah", "tah", "pun"];
                matches = words[0].match(/^(.*)-(.*)$/);
                if(suffixes.indexOf(suffix) != -1 && matches){
                    words[0] = matches[1];
                    words[1] = matches[2] + '-' + suffix;
                }

                //berbalas-balasan -> balas
                rootWord1 = stemSingularWord(words[0]);
                rootWord2 = stemSingularWord(words[1]);

                //meniru-nirukan -> tiru
                if(!find(words[1]) && rootWord2==words[1]){
                    rootWord2 = stemSingularWord("me" + words[1]);
                }
                if(rootWord1==rootWord2){
                    return rootWord1;
                }
                else{
                    return plural_word;
                }
            }

            // Stem for singular word
            function stemSingularWord(word){
                original_word = word; // Save the original word for reverting later
                current_word = word;

                // Step 1
                if(current_word.length>3){
                    // Step 2-5
                    stemmingProcess();
                }

                // Step 6
                if(find(current_word)){
                    return current_word;
                }
                else{
                    return original_word;
                }
            }

            // Return true if word is in plural form ex: gelas-gelas, else false
            function isPlural(token){
                var matches = token.match(/^(.*)-(ku|mu|nya|lah|kah|tah|pun)$/);
                if(matches){
                    return matches[1].search('-') != -1;
                }
                return token.search('-') != -1;
            }

            // Find certain word in dictionary
            function find(word) {
                return (dictionary$1.indexOf(word) != -1);
            }

            function loadDictionary$1(){
                var fs$$1 = fs;
                var dirname = __dirname$1 + "/../../../../data/kata-dasar.txt";
                var fin = fs$$1.readFileSync(dirname).toString().split("\n");
                for(var i in fin){
                    var word = fin[i];
                    word = word.trim();
                    dictionary$1.push(word);
                }
            }

            // Stemming from step 2-5
            function stemmingProcess(){
                if(find(current_word))
                    return
                
                // Confix Stripping
                // Try to remove prefixes first before suffixes if the specification is met
                if(precedenceAdjustmentSpecification(original_word)){
                    // Step 4, 5
                    removePrefixes();
                    if(find(current_word))
                        return

                    // Step 2, 3
                    removeSuffixes();
                    if(find(current_word)){
                        return
                    }
                    else{
                        // if the trial is failed, restore the original word
                        // and continue to normal rule precedence (suffix first, prefix afterwards)
                        current_word = original_word;
                        removals = [];
                    }
                }

                // Step 2, 3
                removeSuffixes();
                if(find(current_word))
                    return
                
                // Step 4, 5
                removePrefixes();
                if(find(current_word))
                    return

                //ECS Loop Restore Prefixes
                loopRestorePrefixes();
            }

            // Remove Suffixes
            function removeSuffixes(){
                for(var i in suffix_rules$1){
                    resultObj = suffix_rules$1[i](current_word);
                    
                    // Add result to variable
                    if(resultObj.removal!=undefined){
                        removals.push(resultObj.removal);
                    }
                    current_word = resultObj.current_word;

                    if(find(current_word))
                        return current_word;
                }
            }

            // Remove Prefixes
            function removePrefixes(){
                for(var i=0; i<3; i++){
                    var removalCount = removals.length;
                    checkPrefixRules();
                    if(find(current_word))
                        return current_word;
                }
            }

            function checkPrefixRules(){
                var removalCount = removals.length;
                var j = 0;
                for(j=0; j<prefix_rules$1.length; j++){
                    resultObj = prefix_rules$1[j](current_word);
                    
                    // Add result to variable
                    if(resultObj.removal!=undefined){
                        removals.push(resultObj.removal);
                    }
                    current_word = resultObj.current_word;

                    if(find(current_word))
                        return current_word;
                    if(removals.length>removalCount){
                        return
                    }
                }
            }

            // Loop Restore Prefixes
            function loopRestorePrefixes(){
                restorePrefix();

                var reversed_removals = removals.reverse();
                var temp_current_word = current_word;

                for(var i in reversed_removals){
                    current_removal = reversed_removals[i];
                    
                    if(!isSuffixRemovals(current_removal)){
                        continue
                    }

                    if(current_removal.getRemovedPart() == "kan"){
                        current_word = current_removal.getResult() + "k";

                        // Step 4, 5
                        removePrefixes();
                        if(find(current_word))
                            return
                        current_word = current_removal.getResult() + "kan";            
                    }
                    else{
                        current_word = current_removal.getOriginalWord();
                    }

                    // Step 4, 5
                    removePrefixes();
                    if(find(current_word))
                        return

                    current_word = temp_current_word;
                }
            }

            function isSuffixRemovals(removal){
                var type = removal.getAffixType();
                if(type == "DS" || type == "PP" || type == "P"){
                    return true;
                }
                return false;
            }
            function restorePrefix(){
                for(var i=0; i<removals.length; i++){
                    current_word = removals[i].getOriginalWord();
                    break;
                }

                for(var i=0; i<removals.length; i++){
                    if(removals[i].getAffixType() == "DP"){
                        removals.splice(i, 1);
                        i--;
                    }
                }
            }

            // Check if word require precedence adjustment or not
            // Adjustment means remove prefix then suffix instead of remove suffix then prefix
            function precedenceAdjustmentSpecification(word){
                var regex_rules = [
                    /^be(.*)lah$/,
                    /^be(.*)an$/,
                    /^me(.*)i$/,
                    /^di(.*)i$/,
                    /^pe(.*)i$/,
                    /^ter(.*)i$/,
                ];
                
                for(var i in regex_rules){
                    if(word.match(regex_rules[i])){
                        return true;
                    }
                }
                return false;
            }

            //exports for tests
            stemmer$1.isPlural = isPlural;
            stemmer$1.dictionary = dictionary$1;
            stemmer$1.a = suffix_rules$1[0];

            /*
            Copyright (c) 2011, Chris Umbel, Martijn de Boer

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var AggressiveTokenizer$b = function() {
                tokenizer.call(this);
            };
            util$2.inherits(AggressiveTokenizer$b, tokenizer);

            var aggressive_tokenizer_nl = AggressiveTokenizer$b;

            AggressiveTokenizer$b.prototype.tokenize = function(text) {
                // break a string up into an array of tokens by anything non-word
                return this.trim(text.split(/[^a-zA-Z0-9_']+/));
            };

            /*
             Copyright (c) 2011, Chris Umbel, Alex Langberg

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */

            var CaseTokenizer = function() {
                tokenizer.call(this);
              };

            util$2.inherits(CaseTokenizer, tokenizer);

            CaseTokenizer.prototype.attach = function() {
              var self = this;

              String.prototype.tokenize = function(preserveApostrophe) {
                return self.tokenize(this, preserveApostrophe);
              };
            };

            // Idea from Seagull: http://stackoverflow.com/a/26482650
            CaseTokenizer.prototype.tokenize = function(text, preserveApostrophe) {
              var whitelist = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
              var lower = text.toLowerCase();
              var upper = text.toUpperCase();
              var result = '';
              var i;

              for (i = 0; i < lower.length; ++i) {
                if (lower[i] !== upper[i] || whitelist.indexOf(lower[i]) > -1 || (text[i] === '\'' && preserveApostrophe)) {
                  result += text[i];
                } else {
                  result += ' ';
                }
              }

              return this.trim(result.replace(/\s+/g, ' ').split(' '));
            };

            var tokenizer_case = CaseTokenizer;

            var underscore = createCommonjsModule(function (module, exports) {
            //     Underscore.js 1.8.3
            //     http://underscorejs.org
            //     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
            //     Underscore may be freely distributed under the MIT license.

            (function() {

              // Baseline setup
              // --------------

              // Establish the root object, `window` in the browser, or `exports` on the server.
              var root = this;

              // Save the previous value of the `_` variable.
              var previousUnderscore = root._;

              // Save bytes in the minified (but not gzipped) version:
              var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

              // Create quick reference variables for speed access to core prototypes.
              var
                push             = ArrayProto.push,
                slice            = ArrayProto.slice,
                toString         = ObjProto.toString,
                hasOwnProperty   = ObjProto.hasOwnProperty;

              // All **ECMAScript 5** native function implementations that we hope to use
              // are declared here.
              var
                nativeIsArray      = Array.isArray,
                nativeKeys         = Object.keys,
                nativeBind         = FuncProto.bind,
                nativeCreate       = Object.create;

              // Naked function reference for surrogate-prototype-swapping.
              var Ctor = function(){};

              // Create a safe reference to the Underscore object for use below.
              var _ = function(obj) {
                if (obj instanceof _) return obj;
                if (!(this instanceof _)) return new _(obj);
                this._wrapped = obj;
              };

              // Export the Underscore object for **Node.js**, with
              // backwards-compatibility for the old `require()` API. If we're in
              // the browser, add `_` as a global object.
              {
                if (module.exports) {
                  exports = module.exports = _;
                }
                exports._ = _;
              }

              // Current version.
              _.VERSION = '1.8.3';

              // Internal function that returns an efficient (for current engines) version
              // of the passed-in callback, to be repeatedly applied in other Underscore
              // functions.
              var optimizeCb = function(func, context, argCount) {
                if (context === void 0) return func;
                switch (argCount == null ? 3 : argCount) {
                  case 1: return function(value) {
                    return func.call(context, value);
                  };
                  case 2: return function(value, other) {
                    return func.call(context, value, other);
                  };
                  case 3: return function(value, index, collection) {
                    return func.call(context, value, index, collection);
                  };
                  case 4: return function(accumulator, value, index, collection) {
                    return func.call(context, accumulator, value, index, collection);
                  };
                }
                return function() {
                  return func.apply(context, arguments);
                };
              };

              // A mostly-internal function to generate callbacks that can be applied
              // to each element in a collection, returning the desired result — either
              // identity, an arbitrary callback, a property matcher, or a property accessor.
              var cb = function(value, context, argCount) {
                if (value == null) return _.identity;
                if (_.isFunction(value)) return optimizeCb(value, context, argCount);
                if (_.isObject(value)) return _.matcher(value);
                return _.property(value);
              };
              _.iteratee = function(value, context) {
                return cb(value, context, Infinity);
              };

              // An internal function for creating assigner functions.
              var createAssigner = function(keysFunc, undefinedOnly) {
                return function(obj) {
                  var length = arguments.length;
                  if (length < 2 || obj == null) return obj;
                  for (var index = 1; index < length; index++) {
                    var source = arguments[index],
                        keys = keysFunc(source),
                        l = keys.length;
                    for (var i = 0; i < l; i++) {
                      var key = keys[i];
                      if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
                    }
                  }
                  return obj;
                };
              };

              // An internal function for creating a new object that inherits from another.
              var baseCreate = function(prototype) {
                if (!_.isObject(prototype)) return {};
                if (nativeCreate) return nativeCreate(prototype);
                Ctor.prototype = prototype;
                var result = new Ctor;
                Ctor.prototype = null;
                return result;
              };

              var property = function(key) {
                return function(obj) {
                  return obj == null ? void 0 : obj[key];
                };
              };

              // Helper for collection methods to determine whether a collection
              // should be iterated as an array or as an object
              // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
              // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
              var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
              var getLength = property('length');
              var isArrayLike = function(collection) {
                var length = getLength(collection);
                return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
              };

              // Collection Functions
              // --------------------

              // The cornerstone, an `each` implementation, aka `forEach`.
              // Handles raw objects in addition to array-likes. Treats all
              // sparse array-likes as if they were dense.
              _.each = _.forEach = function(obj, iteratee, context) {
                iteratee = optimizeCb(iteratee, context);
                var i, length;
                if (isArrayLike(obj)) {
                  for (i = 0, length = obj.length; i < length; i++) {
                    iteratee(obj[i], i, obj);
                  }
                } else {
                  var keys = _.keys(obj);
                  for (i = 0, length = keys.length; i < length; i++) {
                    iteratee(obj[keys[i]], keys[i], obj);
                  }
                }
                return obj;
              };

              // Return the results of applying the iteratee to each element.
              _.map = _.collect = function(obj, iteratee, context) {
                iteratee = cb(iteratee, context);
                var keys = !isArrayLike(obj) && _.keys(obj),
                    length = (keys || obj).length,
                    results = Array(length);
                for (var index = 0; index < length; index++) {
                  var currentKey = keys ? keys[index] : index;
                  results[index] = iteratee(obj[currentKey], currentKey, obj);
                }
                return results;
              };

              // Create a reducing function iterating left or right.
              function createReduce(dir) {
                // Optimized iterator function as using arguments.length
                // in the main function will deoptimize the, see #1991.
                function iterator(obj, iteratee, memo, keys, index, length) {
                  for (; index >= 0 && index < length; index += dir) {
                    var currentKey = keys ? keys[index] : index;
                    memo = iteratee(memo, obj[currentKey], currentKey, obj);
                  }
                  return memo;
                }

                return function(obj, iteratee, memo, context) {
                  iteratee = optimizeCb(iteratee, context, 4);
                  var keys = !isArrayLike(obj) && _.keys(obj),
                      length = (keys || obj).length,
                      index = dir > 0 ? 0 : length - 1;
                  // Determine the initial value if none is provided.
                  if (arguments.length < 3) {
                    memo = obj[keys ? keys[index] : index];
                    index += dir;
                  }
                  return iterator(obj, iteratee, memo, keys, index, length);
                };
              }

              // **Reduce** builds up a single result from a list of values, aka `inject`,
              // or `foldl`.
              _.reduce = _.foldl = _.inject = createReduce(1);

              // The right-associative version of reduce, also known as `foldr`.
              _.reduceRight = _.foldr = createReduce(-1);

              // Return the first value which passes a truth test. Aliased as `detect`.
              _.find = _.detect = function(obj, predicate, context) {
                var key;
                if (isArrayLike(obj)) {
                  key = _.findIndex(obj, predicate, context);
                } else {
                  key = _.findKey(obj, predicate, context);
                }
                if (key !== void 0 && key !== -1) return obj[key];
              };

              // Return all the elements that pass a truth test.
              // Aliased as `select`.
              _.filter = _.select = function(obj, predicate, context) {
                var results = [];
                predicate = cb(predicate, context);
                _.each(obj, function(value, index, list) {
                  if (predicate(value, index, list)) results.push(value);
                });
                return results;
              };

              // Return all the elements for which a truth test fails.
              _.reject = function(obj, predicate, context) {
                return _.filter(obj, _.negate(cb(predicate)), context);
              };

              // Determine whether all of the elements match a truth test.
              // Aliased as `all`.
              _.every = _.all = function(obj, predicate, context) {
                predicate = cb(predicate, context);
                var keys = !isArrayLike(obj) && _.keys(obj),
                    length = (keys || obj).length;
                for (var index = 0; index < length; index++) {
                  var currentKey = keys ? keys[index] : index;
                  if (!predicate(obj[currentKey], currentKey, obj)) return false;
                }
                return true;
              };

              // Determine if at least one element in the object matches a truth test.
              // Aliased as `any`.
              _.some = _.any = function(obj, predicate, context) {
                predicate = cb(predicate, context);
                var keys = !isArrayLike(obj) && _.keys(obj),
                    length = (keys || obj).length;
                for (var index = 0; index < length; index++) {
                  var currentKey = keys ? keys[index] : index;
                  if (predicate(obj[currentKey], currentKey, obj)) return true;
                }
                return false;
              };

              // Determine if the array or object contains a given item (using `===`).
              // Aliased as `includes` and `include`.
              _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
                if (!isArrayLike(obj)) obj = _.values(obj);
                if (typeof fromIndex != 'number' || guard) fromIndex = 0;
                return _.indexOf(obj, item, fromIndex) >= 0;
              };

              // Invoke a method (with arguments) on every item in a collection.
              _.invoke = function(obj, method) {
                var args = slice.call(arguments, 2);
                var isFunc = _.isFunction(method);
                return _.map(obj, function(value) {
                  var func = isFunc ? method : value[method];
                  return func == null ? func : func.apply(value, args);
                });
              };

              // Convenience version of a common use case of `map`: fetching a property.
              _.pluck = function(obj, key) {
                return _.map(obj, _.property(key));
              };

              // Convenience version of a common use case of `filter`: selecting only objects
              // containing specific `key:value` pairs.
              _.where = function(obj, attrs) {
                return _.filter(obj, _.matcher(attrs));
              };

              // Convenience version of a common use case of `find`: getting the first object
              // containing specific `key:value` pairs.
              _.findWhere = function(obj, attrs) {
                return _.find(obj, _.matcher(attrs));
              };

              // Return the maximum element (or element-based computation).
              _.max = function(obj, iteratee, context) {
                var result = -Infinity, lastComputed = -Infinity,
                    value, computed;
                if (iteratee == null && obj != null) {
                  obj = isArrayLike(obj) ? obj : _.values(obj);
                  for (var i = 0, length = obj.length; i < length; i++) {
                    value = obj[i];
                    if (value > result) {
                      result = value;
                    }
                  }
                } else {
                  iteratee = cb(iteratee, context);
                  _.each(obj, function(value, index, list) {
                    computed = iteratee(value, index, list);
                    if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
                      result = value;
                      lastComputed = computed;
                    }
                  });
                }
                return result;
              };

              // Return the minimum element (or element-based computation).
              _.min = function(obj, iteratee, context) {
                var result = Infinity, lastComputed = Infinity,
                    value, computed;
                if (iteratee == null && obj != null) {
                  obj = isArrayLike(obj) ? obj : _.values(obj);
                  for (var i = 0, length = obj.length; i < length; i++) {
                    value = obj[i];
                    if (value < result) {
                      result = value;
                    }
                  }
                } else {
                  iteratee = cb(iteratee, context);
                  _.each(obj, function(value, index, list) {
                    computed = iteratee(value, index, list);
                    if (computed < lastComputed || computed === Infinity && result === Infinity) {
                      result = value;
                      lastComputed = computed;
                    }
                  });
                }
                return result;
              };

              // Shuffle a collection, using the modern version of the
              // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
              _.shuffle = function(obj) {
                var set = isArrayLike(obj) ? obj : _.values(obj);
                var length = set.length;
                var shuffled = Array(length);
                for (var index = 0, rand; index < length; index++) {
                  rand = _.random(0, index);
                  if (rand !== index) shuffled[index] = shuffled[rand];
                  shuffled[rand] = set[index];
                }
                return shuffled;
              };

              // Sample **n** random values from a collection.
              // If **n** is not specified, returns a single random element.
              // The internal `guard` argument allows it to work with `map`.
              _.sample = function(obj, n, guard) {
                if (n == null || guard) {
                  if (!isArrayLike(obj)) obj = _.values(obj);
                  return obj[_.random(obj.length - 1)];
                }
                return _.shuffle(obj).slice(0, Math.max(0, n));
              };

              // Sort the object's values by a criterion produced by an iteratee.
              _.sortBy = function(obj, iteratee, context) {
                iteratee = cb(iteratee, context);
                return _.pluck(_.map(obj, function(value, index, list) {
                  return {
                    value: value,
                    index: index,
                    criteria: iteratee(value, index, list)
                  };
                }).sort(function(left, right) {
                  var a = left.criteria;
                  var b = right.criteria;
                  if (a !== b) {
                    if (a > b || a === void 0) return 1;
                    if (a < b || b === void 0) return -1;
                  }
                  return left.index - right.index;
                }), 'value');
              };

              // An internal function used for aggregate "group by" operations.
              var group = function(behavior) {
                return function(obj, iteratee, context) {
                  var result = {};
                  iteratee = cb(iteratee, context);
                  _.each(obj, function(value, index) {
                    var key = iteratee(value, index, obj);
                    behavior(result, value, key);
                  });
                  return result;
                };
              };

              // Groups the object's values by a criterion. Pass either a string attribute
              // to group by, or a function that returns the criterion.
              _.groupBy = group(function(result, value, key) {
                if (_.has(result, key)) result[key].push(value); else result[key] = [value];
              });

              // Indexes the object's values by a criterion, similar to `groupBy`, but for
              // when you know that your index values will be unique.
              _.indexBy = group(function(result, value, key) {
                result[key] = value;
              });

              // Counts instances of an object that group by a certain criterion. Pass
              // either a string attribute to count by, or a function that returns the
              // criterion.
              _.countBy = group(function(result, value, key) {
                if (_.has(result, key)) result[key]++; else result[key] = 1;
              });

              // Safely create a real, live array from anything iterable.
              _.toArray = function(obj) {
                if (!obj) return [];
                if (_.isArray(obj)) return slice.call(obj);
                if (isArrayLike(obj)) return _.map(obj, _.identity);
                return _.values(obj);
              };

              // Return the number of elements in an object.
              _.size = function(obj) {
                if (obj == null) return 0;
                return isArrayLike(obj) ? obj.length : _.keys(obj).length;
              };

              // Split a collection into two arrays: one whose elements all satisfy the given
              // predicate, and one whose elements all do not satisfy the predicate.
              _.partition = function(obj, predicate, context) {
                predicate = cb(predicate, context);
                var pass = [], fail = [];
                _.each(obj, function(value, key, obj) {
                  (predicate(value, key, obj) ? pass : fail).push(value);
                });
                return [pass, fail];
              };

              // Array Functions
              // ---------------

              // Get the first element of an array. Passing **n** will return the first N
              // values in the array. Aliased as `head` and `take`. The **guard** check
              // allows it to work with `_.map`.
              _.first = _.head = _.take = function(array, n, guard) {
                if (array == null) return void 0;
                if (n == null || guard) return array[0];
                return _.initial(array, array.length - n);
              };

              // Returns everything but the last entry of the array. Especially useful on
              // the arguments object. Passing **n** will return all the values in
              // the array, excluding the last N.
              _.initial = function(array, n, guard) {
                return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
              };

              // Get the last element of an array. Passing **n** will return the last N
              // values in the array.
              _.last = function(array, n, guard) {
                if (array == null) return void 0;
                if (n == null || guard) return array[array.length - 1];
                return _.rest(array, Math.max(0, array.length - n));
              };

              // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
              // Especially useful on the arguments object. Passing an **n** will return
              // the rest N values in the array.
              _.rest = _.tail = _.drop = function(array, n, guard) {
                return slice.call(array, n == null || guard ? 1 : n);
              };

              // Trim out all falsy values from an array.
              _.compact = function(array) {
                return _.filter(array, _.identity);
              };

              // Internal implementation of a recursive `flatten` function.
              var flatten = function(input, shallow, strict, startIndex) {
                var output = [], idx = 0;
                for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
                  var value = input[i];
                  if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
                    //flatten current level of array or arguments object
                    if (!shallow) value = flatten(value, shallow, strict);
                    var j = 0, len = value.length;
                    output.length += len;
                    while (j < len) {
                      output[idx++] = value[j++];
                    }
                  } else if (!strict) {
                    output[idx++] = value;
                  }
                }
                return output;
              };

              // Flatten out an array, either recursively (by default), or just one level.
              _.flatten = function(array, shallow) {
                return flatten(array, shallow, false);
              };

              // Return a version of the array that does not contain the specified value(s).
              _.without = function(array) {
                return _.difference(array, slice.call(arguments, 1));
              };

              // Produce a duplicate-free version of the array. If the array has already
              // been sorted, you have the option of using a faster algorithm.
              // Aliased as `unique`.
              _.uniq = _.unique = function(array, isSorted, iteratee, context) {
                if (!_.isBoolean(isSorted)) {
                  context = iteratee;
                  iteratee = isSorted;
                  isSorted = false;
                }
                if (iteratee != null) iteratee = cb(iteratee, context);
                var result = [];
                var seen = [];
                for (var i = 0, length = getLength(array); i < length; i++) {
                  var value = array[i],
                      computed = iteratee ? iteratee(value, i, array) : value;
                  if (isSorted) {
                    if (!i || seen !== computed) result.push(value);
                    seen = computed;
                  } else if (iteratee) {
                    if (!_.contains(seen, computed)) {
                      seen.push(computed);
                      result.push(value);
                    }
                  } else if (!_.contains(result, value)) {
                    result.push(value);
                  }
                }
                return result;
              };

              // Produce an array that contains the union: each distinct element from all of
              // the passed-in arrays.
              _.union = function() {
                return _.uniq(flatten(arguments, true, true));
              };

              // Produce an array that contains every item shared between all the
              // passed-in arrays.
              _.intersection = function(array) {
                var result = [];
                var argsLength = arguments.length;
                for (var i = 0, length = getLength(array); i < length; i++) {
                  var item = array[i];
                  if (_.contains(result, item)) continue;
                  for (var j = 1; j < argsLength; j++) {
                    if (!_.contains(arguments[j], item)) break;
                  }
                  if (j === argsLength) result.push(item);
                }
                return result;
              };

              // Take the difference between one array and a number of other arrays.
              // Only the elements present in just the first array will remain.
              _.difference = function(array) {
                var rest = flatten(arguments, true, true, 1);
                return _.filter(array, function(value){
                  return !_.contains(rest, value);
                });
              };

              // Zip together multiple lists into a single array -- elements that share
              // an index go together.
              _.zip = function() {
                return _.unzip(arguments);
              };

              // Complement of _.zip. Unzip accepts an array of arrays and groups
              // each array's elements on shared indices
              _.unzip = function(array) {
                var length = array && _.max(array, getLength).length || 0;
                var result = Array(length);

                for (var index = 0; index < length; index++) {
                  result[index] = _.pluck(array, index);
                }
                return result;
              };

              // Converts lists into objects. Pass either a single array of `[key, value]`
              // pairs, or two parallel arrays of the same length -- one of keys, and one of
              // the corresponding values.
              _.object = function(list, values) {
                var result = {};
                for (var i = 0, length = getLength(list); i < length; i++) {
                  if (values) {
                    result[list[i]] = values[i];
                  } else {
                    result[list[i][0]] = list[i][1];
                  }
                }
                return result;
              };

              // Generator function to create the findIndex and findLastIndex functions
              function createPredicateIndexFinder(dir) {
                return function(array, predicate, context) {
                  predicate = cb(predicate, context);
                  var length = getLength(array);
                  var index = dir > 0 ? 0 : length - 1;
                  for (; index >= 0 && index < length; index += dir) {
                    if (predicate(array[index], index, array)) return index;
                  }
                  return -1;
                };
              }

              // Returns the first index on an array-like that passes a predicate test
              _.findIndex = createPredicateIndexFinder(1);
              _.findLastIndex = createPredicateIndexFinder(-1);

              // Use a comparator function to figure out the smallest index at which
              // an object should be inserted so as to maintain order. Uses binary search.
              _.sortedIndex = function(array, obj, iteratee, context) {
                iteratee = cb(iteratee, context, 1);
                var value = iteratee(obj);
                var low = 0, high = getLength(array);
                while (low < high) {
                  var mid = Math.floor((low + high) / 2);
                  if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
                }
                return low;
              };

              // Generator function to create the indexOf and lastIndexOf functions
              function createIndexFinder(dir, predicateFind, sortedIndex) {
                return function(array, item, idx) {
                  var i = 0, length = getLength(array);
                  if (typeof idx == 'number') {
                    if (dir > 0) {
                        i = idx >= 0 ? idx : Math.max(idx + length, i);
                    } else {
                        length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
                    }
                  } else if (sortedIndex && idx && length) {
                    idx = sortedIndex(array, item);
                    return array[idx] === item ? idx : -1;
                  }
                  if (item !== item) {
                    idx = predicateFind(slice.call(array, i, length), _.isNaN);
                    return idx >= 0 ? idx + i : -1;
                  }
                  for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
                    if (array[idx] === item) return idx;
                  }
                  return -1;
                };
              }

              // Return the position of the first occurrence of an item in an array,
              // or -1 if the item is not included in the array.
              // If the array is large and already in sort order, pass `true`
              // for **isSorted** to use binary search.
              _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
              _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

              // Generate an integer Array containing an arithmetic progression. A port of
              // the native Python `range()` function. See
              // [the Python documentation](http://docs.python.org/library/functions.html#range).
              _.range = function(start, stop, step) {
                if (stop == null) {
                  stop = start || 0;
                  start = 0;
                }
                step = step || 1;

                var length = Math.max(Math.ceil((stop - start) / step), 0);
                var range = Array(length);

                for (var idx = 0; idx < length; idx++, start += step) {
                  range[idx] = start;
                }

                return range;
              };

              // Function (ahem) Functions
              // ------------------

              // Determines whether to execute a function as a constructor
              // or a normal function with the provided arguments
              var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
                if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
                var self = baseCreate(sourceFunc.prototype);
                var result = sourceFunc.apply(self, args);
                if (_.isObject(result)) return result;
                return self;
              };

              // Create a function bound to a given object (assigning `this`, and arguments,
              // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
              // available.
              _.bind = function(func, context) {
                if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
                if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
                var args = slice.call(arguments, 2);
                var bound = function() {
                  return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
                };
                return bound;
              };

              // Partially apply a function by creating a version that has had some of its
              // arguments pre-filled, without changing its dynamic `this` context. _ acts
              // as a placeholder, allowing any combination of arguments to be pre-filled.
              _.partial = function(func) {
                var boundArgs = slice.call(arguments, 1);
                var bound = function() {
                  var position = 0, length = boundArgs.length;
                  var args = Array(length);
                  for (var i = 0; i < length; i++) {
                    args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
                  }
                  while (position < arguments.length) args.push(arguments[position++]);
                  return executeBound(func, bound, this, this, args);
                };
                return bound;
              };

              // Bind a number of an object's methods to that object. Remaining arguments
              // are the method names to be bound. Useful for ensuring that all callbacks
              // defined on an object belong to it.
              _.bindAll = function(obj) {
                var i, length = arguments.length, key;
                if (length <= 1) throw new Error('bindAll must be passed function names');
                for (i = 1; i < length; i++) {
                  key = arguments[i];
                  obj[key] = _.bind(obj[key], obj);
                }
                return obj;
              };

              // Memoize an expensive function by storing its results.
              _.memoize = function(func, hasher) {
                var memoize = function(key) {
                  var cache = memoize.cache;
                  var address = '' + (hasher ? hasher.apply(this, arguments) : key);
                  if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
                  return cache[address];
                };
                memoize.cache = {};
                return memoize;
              };

              // Delays a function for the given number of milliseconds, and then calls
              // it with the arguments supplied.
              _.delay = function(func, wait) {
                var args = slice.call(arguments, 2);
                return setTimeout(function(){
                  return func.apply(null, args);
                }, wait);
              };

              // Defers a function, scheduling it to run after the current call stack has
              // cleared.
              _.defer = _.partial(_.delay, _, 1);

              // Returns a function, that, when invoked, will only be triggered at most once
              // during a given window of time. Normally, the throttled function will run
              // as much as it can, without ever going more than once per `wait` duration;
              // but if you'd like to disable the execution on the leading edge, pass
              // `{leading: false}`. To disable execution on the trailing edge, ditto.
              _.throttle = function(func, wait, options) {
                var context, args, result;
                var timeout = null;
                var previous = 0;
                if (!options) options = {};
                var later = function() {
                  previous = options.leading === false ? 0 : _.now();
                  timeout = null;
                  result = func.apply(context, args);
                  if (!timeout) context = args = null;
                };
                return function() {
                  var now = _.now();
                  if (!previous && options.leading === false) previous = now;
                  var remaining = wait - (now - previous);
                  context = this;
                  args = arguments;
                  if (remaining <= 0 || remaining > wait) {
                    if (timeout) {
                      clearTimeout(timeout);
                      timeout = null;
                    }
                    previous = now;
                    result = func.apply(context, args);
                    if (!timeout) context = args = null;
                  } else if (!timeout && options.trailing !== false) {
                    timeout = setTimeout(later, remaining);
                  }
                  return result;
                };
              };

              // Returns a function, that, as long as it continues to be invoked, will not
              // be triggered. The function will be called after it stops being called for
              // N milliseconds. If `immediate` is passed, trigger the function on the
              // leading edge, instead of the trailing.
              _.debounce = function(func, wait, immediate) {
                var timeout, args, context, timestamp, result;

                var later = function() {
                  var last = _.now() - timestamp;

                  if (last < wait && last >= 0) {
                    timeout = setTimeout(later, wait - last);
                  } else {
                    timeout = null;
                    if (!immediate) {
                      result = func.apply(context, args);
                      if (!timeout) context = args = null;
                    }
                  }
                };

                return function() {
                  context = this;
                  args = arguments;
                  timestamp = _.now();
                  var callNow = immediate && !timeout;
                  if (!timeout) timeout = setTimeout(later, wait);
                  if (callNow) {
                    result = func.apply(context, args);
                    context = args = null;
                  }

                  return result;
                };
              };

              // Returns the first function passed as an argument to the second,
              // allowing you to adjust arguments, run code before and after, and
              // conditionally execute the original function.
              _.wrap = function(func, wrapper) {
                return _.partial(wrapper, func);
              };

              // Returns a negated version of the passed-in predicate.
              _.negate = function(predicate) {
                return function() {
                  return !predicate.apply(this, arguments);
                };
              };

              // Returns a function that is the composition of a list of functions, each
              // consuming the return value of the function that follows.
              _.compose = function() {
                var args = arguments;
                var start = args.length - 1;
                return function() {
                  var i = start;
                  var result = args[start].apply(this, arguments);
                  while (i--) result = args[i].call(this, result);
                  return result;
                };
              };

              // Returns a function that will only be executed on and after the Nth call.
              _.after = function(times, func) {
                return function() {
                  if (--times < 1) {
                    return func.apply(this, arguments);
                  }
                };
              };

              // Returns a function that will only be executed up to (but not including) the Nth call.
              _.before = function(times, func) {
                var memo;
                return function() {
                  if (--times > 0) {
                    memo = func.apply(this, arguments);
                  }
                  if (times <= 1) func = null;
                  return memo;
                };
              };

              // Returns a function that will be executed at most one time, no matter how
              // often you call it. Useful for lazy initialization.
              _.once = _.partial(_.before, 2);

              // Object Functions
              // ----------------

              // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
              var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
              var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                                  'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

              function collectNonEnumProps(obj, keys) {
                var nonEnumIdx = nonEnumerableProps.length;
                var constructor = obj.constructor;
                var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

                // Constructor is a special case.
                var prop = 'constructor';
                if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

                while (nonEnumIdx--) {
                  prop = nonEnumerableProps[nonEnumIdx];
                  if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
                    keys.push(prop);
                  }
                }
              }

              // Retrieve the names of an object's own properties.
              // Delegates to **ECMAScript 5**'s native `Object.keys`
              _.keys = function(obj) {
                if (!_.isObject(obj)) return [];
                if (nativeKeys) return nativeKeys(obj);
                var keys = [];
                for (var key in obj) if (_.has(obj, key)) keys.push(key);
                // Ahem, IE < 9.
                if (hasEnumBug) collectNonEnumProps(obj, keys);
                return keys;
              };

              // Retrieve all the property names of an object.
              _.allKeys = function(obj) {
                if (!_.isObject(obj)) return [];
                var keys = [];
                for (var key in obj) keys.push(key);
                // Ahem, IE < 9.
                if (hasEnumBug) collectNonEnumProps(obj, keys);
                return keys;
              };

              // Retrieve the values of an object's properties.
              _.values = function(obj) {
                var keys = _.keys(obj);
                var length = keys.length;
                var values = Array(length);
                for (var i = 0; i < length; i++) {
                  values[i] = obj[keys[i]];
                }
                return values;
              };

              // Returns the results of applying the iteratee to each element of the object
              // In contrast to _.map it returns an object
              _.mapObject = function(obj, iteratee, context) {
                iteratee = cb(iteratee, context);
                var keys =  _.keys(obj),
                      length = keys.length,
                      results = {},
                      currentKey;
                  for (var index = 0; index < length; index++) {
                    currentKey = keys[index];
                    results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
                  }
                  return results;
              };

              // Convert an object into a list of `[key, value]` pairs.
              _.pairs = function(obj) {
                var keys = _.keys(obj);
                var length = keys.length;
                var pairs = Array(length);
                for (var i = 0; i < length; i++) {
                  pairs[i] = [keys[i], obj[keys[i]]];
                }
                return pairs;
              };

              // Invert the keys and values of an object. The values must be serializable.
              _.invert = function(obj) {
                var result = {};
                var keys = _.keys(obj);
                for (var i = 0, length = keys.length; i < length; i++) {
                  result[obj[keys[i]]] = keys[i];
                }
                return result;
              };

              // Return a sorted list of the function names available on the object.
              // Aliased as `methods`
              _.functions = _.methods = function(obj) {
                var names = [];
                for (var key in obj) {
                  if (_.isFunction(obj[key])) names.push(key);
                }
                return names.sort();
              };

              // Extend a given object with all the properties in passed-in object(s).
              _.extend = createAssigner(_.allKeys);

              // Assigns a given object with all the own properties in the passed-in object(s)
              // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
              _.extendOwn = _.assign = createAssigner(_.keys);

              // Returns the first key on an object that passes a predicate test
              _.findKey = function(obj, predicate, context) {
                predicate = cb(predicate, context);
                var keys = _.keys(obj), key;
                for (var i = 0, length = keys.length; i < length; i++) {
                  key = keys[i];
                  if (predicate(obj[key], key, obj)) return key;
                }
              };

              // Return a copy of the object only containing the whitelisted properties.
              _.pick = function(object, oiteratee, context) {
                var result = {}, obj = object, iteratee, keys;
                if (obj == null) return result;
                if (_.isFunction(oiteratee)) {
                  keys = _.allKeys(obj);
                  iteratee = optimizeCb(oiteratee, context);
                } else {
                  keys = flatten(arguments, false, false, 1);
                  iteratee = function(value, key, obj) { return key in obj; };
                  obj = Object(obj);
                }
                for (var i = 0, length = keys.length; i < length; i++) {
                  var key = keys[i];
                  var value = obj[key];
                  if (iteratee(value, key, obj)) result[key] = value;
                }
                return result;
              };

               // Return a copy of the object without the blacklisted properties.
              _.omit = function(obj, iteratee, context) {
                if (_.isFunction(iteratee)) {
                  iteratee = _.negate(iteratee);
                } else {
                  var keys = _.map(flatten(arguments, false, false, 1), String);
                  iteratee = function(value, key) {
                    return !_.contains(keys, key);
                  };
                }
                return _.pick(obj, iteratee, context);
              };

              // Fill in a given object with default properties.
              _.defaults = createAssigner(_.allKeys, true);

              // Creates an object that inherits from the given prototype object.
              // If additional properties are provided then they will be added to the
              // created object.
              _.create = function(prototype, props) {
                var result = baseCreate(prototype);
                if (props) _.extendOwn(result, props);
                return result;
              };

              // Create a (shallow-cloned) duplicate of an object.
              _.clone = function(obj) {
                if (!_.isObject(obj)) return obj;
                return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
              };

              // Invokes interceptor with the obj, and then returns obj.
              // The primary purpose of this method is to "tap into" a method chain, in
              // order to perform operations on intermediate results within the chain.
              _.tap = function(obj, interceptor) {
                interceptor(obj);
                return obj;
              };

              // Returns whether an object has a given set of `key:value` pairs.
              _.isMatch = function(object, attrs) {
                var keys = _.keys(attrs), length = keys.length;
                if (object == null) return !length;
                var obj = Object(object);
                for (var i = 0; i < length; i++) {
                  var key = keys[i];
                  if (attrs[key] !== obj[key] || !(key in obj)) return false;
                }
                return true;
              };


              // Internal recursive comparison function for `isEqual`.
              var eq = function(a, b, aStack, bStack) {
                // Identical objects are equal. `0 === -0`, but they aren't identical.
                // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
                if (a === b) return a !== 0 || 1 / a === 1 / b;
                // A strict comparison is necessary because `null == undefined`.
                if (a == null || b == null) return a === b;
                // Unwrap any wrapped objects.
                if (a instanceof _) a = a._wrapped;
                if (b instanceof _) b = b._wrapped;
                // Compare `[[Class]]` names.
                var className = toString.call(a);
                if (className !== toString.call(b)) return false;
                switch (className) {
                  // Strings, numbers, regular expressions, dates, and booleans are compared by value.
                  case '[object RegExp]':
                  // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
                  case '[object String]':
                    // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
                    // equivalent to `new String("5")`.
                    return '' + a === '' + b;
                  case '[object Number]':
                    // `NaN`s are equivalent, but non-reflexive.
                    // Object(NaN) is equivalent to NaN
                    if (+a !== +a) return +b !== +b;
                    // An `egal` comparison is performed for other numeric values.
                    return +a === 0 ? 1 / +a === 1 / b : +a === +b;
                  case '[object Date]':
                  case '[object Boolean]':
                    // Coerce dates and booleans to numeric primitive values. Dates are compared by their
                    // millisecond representations. Note that invalid dates with millisecond representations
                    // of `NaN` are not equivalent.
                    return +a === +b;
                }

                var areArrays = className === '[object Array]';
                if (!areArrays) {
                  if (typeof a != 'object' || typeof b != 'object') return false;

                  // Objects with different constructors are not equivalent, but `Object`s or `Array`s
                  // from different frames are.
                  var aCtor = a.constructor, bCtor = b.constructor;
                  if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                                           _.isFunction(bCtor) && bCtor instanceof bCtor)
                                      && ('constructor' in a && 'constructor' in b)) {
                    return false;
                  }
                }
                // Assume equality for cyclic structures. The algorithm for detecting cyclic
                // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

                // Initializing stack of traversed objects.
                // It's done here since we only need them for objects and arrays comparison.
                aStack = aStack || [];
                bStack = bStack || [];
                var length = aStack.length;
                while (length--) {
                  // Linear search. Performance is inversely proportional to the number of
                  // unique nested structures.
                  if (aStack[length] === a) return bStack[length] === b;
                }

                // Add the first object to the stack of traversed objects.
                aStack.push(a);
                bStack.push(b);

                // Recursively compare objects and arrays.
                if (areArrays) {
                  // Compare array lengths to determine if a deep comparison is necessary.
                  length = a.length;
                  if (length !== b.length) return false;
                  // Deep compare the contents, ignoring non-numeric properties.
                  while (length--) {
                    if (!eq(a[length], b[length], aStack, bStack)) return false;
                  }
                } else {
                  // Deep compare objects.
                  var keys = _.keys(a), key;
                  length = keys.length;
                  // Ensure that both objects contain the same number of properties before comparing deep equality.
                  if (_.keys(b).length !== length) return false;
                  while (length--) {
                    // Deep compare each member
                    key = keys[length];
                    if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
                  }
                }
                // Remove the first object from the stack of traversed objects.
                aStack.pop();
                bStack.pop();
                return true;
              };

              // Perform a deep comparison to check if two objects are equal.
              _.isEqual = function(a, b) {
                return eq(a, b);
              };

              // Is a given array, string, or object empty?
              // An "empty" object has no enumerable own-properties.
              _.isEmpty = function(obj) {
                if (obj == null) return true;
                if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
                return _.keys(obj).length === 0;
              };

              // Is a given value a DOM element?
              _.isElement = function(obj) {
                return !!(obj && obj.nodeType === 1);
              };

              // Is a given value an array?
              // Delegates to ECMA5's native Array.isArray
              _.isArray = nativeIsArray || function(obj) {
                return toString.call(obj) === '[object Array]';
              };

              // Is a given variable an object?
              _.isObject = function(obj) {
                var type = typeof obj;
                return type === 'function' || type === 'object' && !!obj;
              };

              // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
              _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
                _['is' + name] = function(obj) {
                  return toString.call(obj) === '[object ' + name + ']';
                };
              });

              // Define a fallback version of the method in browsers (ahem, IE < 9), where
              // there isn't any inspectable "Arguments" type.
              if (!_.isArguments(arguments)) {
                _.isArguments = function(obj) {
                  return _.has(obj, 'callee');
                };
              }

              // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
              // IE 11 (#1621), and in Safari 8 (#1929).
              if (typeof Int8Array != 'object') {
                _.isFunction = function(obj) {
                  return typeof obj == 'function' || false;
                };
              }

              // Is a given object a finite number?
              _.isFinite = function(obj) {
                return isFinite(obj) && !isNaN(parseFloat(obj));
              };

              // Is the given value `NaN`? (NaN is the only number which does not equal itself).
              _.isNaN = function(obj) {
                return _.isNumber(obj) && obj !== +obj;
              };

              // Is a given value a boolean?
              _.isBoolean = function(obj) {
                return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
              };

              // Is a given value equal to null?
              _.isNull = function(obj) {
                return obj === null;
              };

              // Is a given variable undefined?
              _.isUndefined = function(obj) {
                return obj === void 0;
              };

              // Shortcut function for checking if an object has a given property directly
              // on itself (in other words, not on a prototype).
              _.has = function(obj, key) {
                return obj != null && hasOwnProperty.call(obj, key);
              };

              // Utility Functions
              // -----------------

              // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
              // previous owner. Returns a reference to the Underscore object.
              _.noConflict = function() {
                root._ = previousUnderscore;
                return this;
              };

              // Keep the identity function around for default iteratees.
              _.identity = function(value) {
                return value;
              };

              // Predicate-generating functions. Often useful outside of Underscore.
              _.constant = function(value) {
                return function() {
                  return value;
                };
              };

              _.noop = function(){};

              _.property = property;

              // Generates a function for a given object that returns a given property.
              _.propertyOf = function(obj) {
                return obj == null ? function(){} : function(key) {
                  return obj[key];
                };
              };

              // Returns a predicate for checking whether an object has a given set of
              // `key:value` pairs.
              _.matcher = _.matches = function(attrs) {
                attrs = _.extendOwn({}, attrs);
                return function(obj) {
                  return _.isMatch(obj, attrs);
                };
              };

              // Run a function **n** times.
              _.times = function(n, iteratee, context) {
                var accum = Array(Math.max(0, n));
                iteratee = optimizeCb(iteratee, context, 1);
                for (var i = 0; i < n; i++) accum[i] = iteratee(i);
                return accum;
              };

              // Return a random integer between min and max (inclusive).
              _.random = function(min, max) {
                if (max == null) {
                  max = min;
                  min = 0;
                }
                return min + Math.floor(Math.random() * (max - min + 1));
              };

              // A (possibly faster) way to get the current timestamp as an integer.
              _.now = Date.now || function() {
                return new Date().getTime();
              };

               // List of HTML entities for escaping.
              var escapeMap = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#x27;',
                '`': '&#x60;'
              };
              var unescapeMap = _.invert(escapeMap);

              // Functions for escaping and unescaping strings to/from HTML interpolation.
              var createEscaper = function(map) {
                var escaper = function(match) {
                  return map[match];
                };
                // Regexes for identifying a key that needs to be escaped
                var source = '(?:' + _.keys(map).join('|') + ')';
                var testRegexp = RegExp(source);
                var replaceRegexp = RegExp(source, 'g');
                return function(string) {
                  string = string == null ? '' : '' + string;
                  return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
                };
              };
              _.escape = createEscaper(escapeMap);
              _.unescape = createEscaper(unescapeMap);

              // If the value of the named `property` is a function then invoke it with the
              // `object` as context; otherwise, return it.
              _.result = function(object, property, fallback) {
                var value = object == null ? void 0 : object[property];
                if (value === void 0) {
                  value = fallback;
                }
                return _.isFunction(value) ? value.call(object) : value;
              };

              // Generate a unique integer id (unique within the entire client session).
              // Useful for temporary DOM ids.
              var idCounter = 0;
              _.uniqueId = function(prefix) {
                var id = ++idCounter + '';
                return prefix ? prefix + id : id;
              };

              // By default, Underscore uses ERB-style template delimiters, change the
              // following template settings to use alternative delimiters.
              _.templateSettings = {
                evaluate    : /<%([\s\S]+?)%>/g,
                interpolate : /<%=([\s\S]+?)%>/g,
                escape      : /<%-([\s\S]+?)%>/g
              };

              // When customizing `templateSettings`, if you don't want to define an
              // interpolation, evaluation or escaping regex, we need one that is
              // guaranteed not to match.
              var noMatch = /(.)^/;

              // Certain characters need to be escaped so that they can be put into a
              // string literal.
              var escapes = {
                "'":      "'",
                '\\':     '\\',
                '\r':     'r',
                '\n':     'n',
                '\u2028': 'u2028',
                '\u2029': 'u2029'
              };

              var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

              var escapeChar = function(match) {
                return '\\' + escapes[match];
              };

              // JavaScript micro-templating, similar to John Resig's implementation.
              // Underscore templating handles arbitrary delimiters, preserves whitespace,
              // and correctly escapes quotes within interpolated code.
              // NB: `oldSettings` only exists for backwards compatibility.
              _.template = function(text, settings, oldSettings) {
                if (!settings && oldSettings) settings = oldSettings;
                settings = _.defaults({}, settings, _.templateSettings);

                // Combine delimiters into one regular expression via alternation.
                var matcher = RegExp([
                  (settings.escape || noMatch).source,
                  (settings.interpolate || noMatch).source,
                  (settings.evaluate || noMatch).source
                ].join('|') + '|$', 'g');

                // Compile the template source, escaping string literals appropriately.
                var index = 0;
                var source = "__p+='";
                text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
                  source += text.slice(index, offset).replace(escaper, escapeChar);
                  index = offset + match.length;

                  if (escape) {
                    source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
                  } else if (interpolate) {
                    source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
                  } else if (evaluate) {
                    source += "';\n" + evaluate + "\n__p+='";
                  }

                  // Adobe VMs need the match returned to produce the correct offest.
                  return match;
                });
                source += "';\n";

                // If a variable is not specified, place data values in local scope.
                if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

                source = "var __t,__p='',__j=Array.prototype.join," +
                  "print=function(){__p+=__j.call(arguments,'');};\n" +
                  source + 'return __p;\n';

                try {
                  var render = new Function(settings.variable || 'obj', '_', source);
                } catch (e) {
                  e.source = source;
                  throw e;
                }

                var template = function(data) {
                  return render.call(this, data, _);
                };

                // Provide the compiled source as a convenience for precompilation.
                var argument = settings.variable || 'obj';
                template.source = 'function(' + argument + '){\n' + source + '}';

                return template;
              };

              // Add a "chain" function. Start chaining a wrapped Underscore object.
              _.chain = function(obj) {
                var instance = _(obj);
                instance._chain = true;
                return instance;
              };

              // OOP
              // ---------------
              // If Underscore is called as a function, it returns a wrapped object that
              // can be used OO-style. This wrapper holds altered versions of all the
              // underscore functions. Wrapped objects may be chained.

              // Helper function to continue chaining intermediate results.
              var result = function(instance, obj) {
                return instance._chain ? _(obj).chain() : obj;
              };

              // Add your own custom functions to the Underscore object.
              _.mixin = function(obj) {
                _.each(_.functions(obj), function(name) {
                  var func = _[name] = obj[name];
                  _.prototype[name] = function() {
                    var args = [this._wrapped];
                    push.apply(args, arguments);
                    return result(this, func.apply(_, args));
                  };
                });
              };

              // Add all of the Underscore functions to the wrapper object.
              _.mixin(_);

              // Add all mutator Array functions to the wrapper.
              _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
                var method = ArrayProto[name];
                _.prototype[name] = function() {
                  var obj = this._wrapped;
                  method.apply(obj, arguments);
                  if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
                  return result(this, obj);
                };
              });

              // Add all accessor Array functions to the wrapper.
              _.each(['concat', 'join', 'slice'], function(name) {
                var method = ArrayProto[name];
                _.prototype[name] = function() {
                  return result(this, method.apply(this._wrapped, arguments));
                };
              });

              // Extracts the result from a wrapped and chained object.
              _.prototype.value = function() {
                return this._wrapped;
              };

              // Provide unwrapping proxy for some methods used in engine operations
              // such as arithmetic and JSON stringification.
              _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

              _.prototype.toString = function() {
                return '' + this._wrapped;
              };
            }.call(commonjsGlobal));
            });
            var underscore_1 = underscore._;

            /*
            Copyright (c) 2011, Rob Ellis, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var _ = underscore._;

            // Base Class for RegExp Matching
            var RegexpTokenizer = function(options) {
                var options = options || {};
                this._pattern = options.pattern || this._pattern;
                this.discardEmpty = options.discardEmpty || true;

                // Match and split on GAPS not the actual WORDS
                this._gaps = options.gaps;
                
                if (this._gaps === undefined) {
                    this._gaps = true;
                }
            };

            util$2.inherits(RegexpTokenizer, tokenizer);

            RegexpTokenizer.prototype.tokenize = function(s) {
                var results;

                if (this._gaps) {
                    results = s.split(this._pattern);
                    return (this.discardEmpty) ? _.without(results,'',' ') : results;
                } else {
                    return s.match(this._pattern);
                }
            };

            var RegexpTokenizer_1 = RegexpTokenizer;

            /***
             * A tokenizer that divides a text into sequences of alphabetic and
             * non-alphabetic characters.  E.g.:
             *
             *      >>> WordTokenizer().tokenize("She said 'hello'.")
             *      ['She', 'said', 'hello']
             * 
             */
            var WordTokenizer = function(options) {
                this._pattern = /[^A-Za-zА-Яа-я0-9_]+/;
                RegexpTokenizer.call(this,options);
            };

            util$2.inherits(WordTokenizer, RegexpTokenizer);
            var WordTokenizer_1 = WordTokenizer;

            /***
             * A tokenizer that divides a text into sequences of alphabetic and
             * non-alphabetic characters.  E.g.:
             *
             *      >>> WordPunctTokenizer().tokenize("She said 'hello'.")
             *      ["She","said","'","hello","'","."]
             * 
             */
            var WordPunctTokenizer = function(options) {
                this._pattern = new RegExp(/(\w+|[а-я0-9_]+|\.|\!|\'|\"")/i);
                RegexpTokenizer.call(this,options);
            };

            util$2.inherits(WordPunctTokenizer, RegexpTokenizer);
            var WordPunctTokenizer_1 = WordPunctTokenizer;

            var regexp_tokenizer = {
            	RegexpTokenizer: RegexpTokenizer_1,
            	WordTokenizer: WordTokenizer_1,
            	WordPunctTokenizer: WordPunctTokenizer_1
            };

            /*
            Copyright (c) 2011, Rob Ellis, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var _$1 = underscore._;

            var contractions2 = [
                /(.)('ll|'re|'ve|n't|'s|'m|'d)\b/ig,
                /\b(can)(not)\b/ig,
                /\b(D)('ye)\b/ig,
                /\b(Gim)(me)\b/ig,
                /\b(Gon)(na)\b/ig,
                /\b(Got)(ta)\b/ig,
                /\b(Lem)(me)\b/ig,
                /\b(Mor)('n)\b/ig,
                /\b(T)(is)\b/ig,
                /\b(T)(was)\b/ig,
                /\b(Wan)(na)\b/ig];

            var contractions3 = [
                /\b(Whad)(dd)(ya)\b/ig,
                /\b(Wha)(t)(cha)\b/ig
            ];

            var TreebankWordTokenizer = function() {
            };

            util$2.inherits(TreebankWordTokenizer, tokenizer);

            TreebankWordTokenizer.prototype.tokenize = function(text) {
                contractions2.forEach(function(regexp) {
            	text = text.replace(regexp,"$1 $2");
                });
                
                contractions3.forEach(function(regexp) {
            	text = text.replace(regexp,"$1 $2 $3");
                });

                // most punctuation
                text = text.replace(/([^\w\.\'\-\/\+\<\>,&])/g, " $1 ");

                // commas if followed by space
                text = text.replace(/(,\s)/g, " $1");

                // single quotes if followed by a space
                text = text.replace(/('\s)/g, " $1");

                // periods before newline or end of string
                text = text.replace(/\. *(\n|$)/g, " . ");
                
                return  _$1.without(text.split(/\s+/), '');	
            };

            var treebank_word_tokenizer = TreebankWordTokenizer;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var SentenceTokenizer = function() {
                tokenizer.call(this);
            };
            util$2.inherits(SentenceTokenizer, tokenizer);

            SentenceTokenizer.prototype.tokenize = function(text) {
                // break string up in to sentences based on punctation and quotation marks
                var tokens = text.match(/([\"\'\‘\“\'\"\[\(\{\⟨][^\.\?\!]+[\.\?\!][\"\'\’\”\'\"\]\)\}\⟩]|[^\.\?\!]+[\.\?\!])\s?/g);

                // remove unecessary white space
                tokens = tokens.map(Function.prototype.call, String.prototype.trim);

                return this.trim(tokens);
            };

            var sentence_tokenizer = SentenceTokenizer;

            var __filename = '/Users/yawjosephetse/Developer/github/repetere/modelscript/node_modules/webworker-threads/node_modules/bindings/bindings.js';

            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.

            // resolves . and .. elements in a path array with directory names there
            // must be no slashes, empty elements, or device names (c:\) in the array
            // (so also no leading and trailing slashes - it does not distinguish
            // relative and absolute paths)
            function normalizeArray(parts, allowAboveRoot) {
              // if the path tries to go above the root, `up` ends up > 0
              var up = 0;
              for (var i = parts.length - 1; i >= 0; i--) {
                var last = parts[i];
                if (last === '.') {
                  parts.splice(i, 1);
                } else if (last === '..') {
                  parts.splice(i, 1);
                  up++;
                } else if (up) {
                  parts.splice(i, 1);
                  up--;
                }
              }

              // if the path is allowed to go above the root, restore leading ..s
              if (allowAboveRoot) {
                for (; up--; up) {
                  parts.unshift('..');
                }
              }

              return parts;
            }

            // Split a filename into [root, dir, basename, ext], unix version
            // 'root' is just a slash, or nothing.
            var splitPathRe =
                /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
            var splitPath = function(filename) {
              return splitPathRe.exec(filename).slice(1);
            };

            // path.resolve([from ...], to)
            // posix version
            function resolve() {
              var resolvedPath = '',
                  resolvedAbsolute = false;

              for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                var path = (i >= 0) ? arguments[i] : '/';

                // Skip empty and invalid entries
                if (typeof path !== 'string') {
                  throw new TypeError('Arguments to path.resolve must be strings');
                } else if (!path) {
                  continue;
                }

                resolvedPath = path + '/' + resolvedPath;
                resolvedAbsolute = path.charAt(0) === '/';
              }

              // At this point the path should be resolved to a full absolute path, but
              // handle relative paths to be safe (might happen when process.cwd() fails)

              // Normalize the path
              resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
                return !!p;
              }), !resolvedAbsolute).join('/');

              return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
            }
            // path.normalize(path)
            // posix version
            function normalize$1(path) {
              var isPathAbsolute = isAbsolute(path),
                  trailingSlash = substr(path, -1) === '/';

              // Normalize the path
              path = normalizeArray(filter(path.split('/'), function(p) {
                return !!p;
              }), !isPathAbsolute).join('/');

              if (!path && !isPathAbsolute) {
                path = '.';
              }
              if (path && trailingSlash) {
                path += '/';
              }

              return (isPathAbsolute ? '/' : '') + path;
            }
            // posix version
            function isAbsolute(path) {
              return path.charAt(0) === '/';
            }

            // posix version
            function join() {
              var paths = Array.prototype.slice.call(arguments, 0);
              return normalize$1(filter(paths, function(p, index) {
                if (typeof p !== 'string') {
                  throw new TypeError('Arguments to path.join must be strings');
                }
                return p;
              }).join('/'));
            }


            // path.relative(from, to)
            // posix version
            function relative(from, to) {
              from = resolve(from).substr(1);
              to = resolve(to).substr(1);

              function trim(arr) {
                var start = 0;
                for (; start < arr.length; start++) {
                  if (arr[start] !== '') break;
                }

                var end = arr.length - 1;
                for (; end >= 0; end--) {
                  if (arr[end] !== '') break;
                }

                if (start > end) return [];
                return arr.slice(start, end - start + 1);
              }

              var fromParts = trim(from.split('/'));
              var toParts = trim(to.split('/'));

              var length = Math.min(fromParts.length, toParts.length);
              var samePartsLength = length;
              for (var i = 0; i < length; i++) {
                if (fromParts[i] !== toParts[i]) {
                  samePartsLength = i;
                  break;
                }
              }

              var outputParts = [];
              for (var i = samePartsLength; i < fromParts.length; i++) {
                outputParts.push('..');
              }

              outputParts = outputParts.concat(toParts.slice(samePartsLength));

              return outputParts.join('/');
            }

            var sep = '/';
            var delimiter$1 = ':';

            function dirname(path) {
              var result = splitPath(path),
                  root = result[0],
                  dir = result[1];

              if (!root && !dir) {
                // No dirname whatsoever
                return '.';
              }

              if (dir) {
                // It has a dirname, strip trailing slash
                dir = dir.substr(0, dir.length - 1);
              }

              return root + dir;
            }

            function basename(path, ext) {
              var f = splitPath(path)[2];
              // TODO: make this comparison case-insensitive on windows?
              if (ext && f.substr(-1 * ext.length) === ext) {
                f = f.substr(0, f.length - ext.length);
              }
              return f;
            }


            function extname(path) {
              return splitPath(path)[3];
            }
            var path = {
              extname: extname,
              basename: basename,
              dirname: dirname,
              sep: sep,
              delimiter: delimiter$1,
              relative: relative,
              join: join,
              isAbsolute: isAbsolute,
              normalize: normalize$1,
              resolve: resolve
            };
            function filter (xs, f) {
                if (xs.filter) return xs.filter(f);
                var res = [];
                for (var i = 0; i < xs.length; i++) {
                    if (f(xs[i], i, xs)) res.push(xs[i]);
                }
                return res;
            }

            // String.prototype.substr - negative index don't work in IE8
            var substr = 'ab'.substr(-1) === 'b' ?
                function (str, start, len) { return str.substr(start, len) } :
                function (str, start, len) {
                    if (start < 0) start = str.length + start;
                    return str.substr(start, len);
                }
            ;

            var path$1 = /*#__PURE__*/Object.freeze({
                        resolve: resolve,
                        normalize: normalize$1,
                        isAbsolute: isAbsolute,
                        join: join,
                        relative: relative,
                        sep: sep,
                        delimiter: delimiter$1,
                        dirname: dirname,
                        basename: basename,
                        extname: extname,
                        default: path
            });

            var path$2 = ( path$1 && path ) || path$1;

            var bindings_1 = createCommonjsModule(function (module, exports) {
            /**
             * Module dependencies.
             */

            var join = path$2.join
              , dirname = path$2.dirname
              , exists = ((fs.accessSync && function (path) { try { fs.accessSync(path); } catch (e) { return false; } return true; })
                  || fs.existsSync || path$2.existsSync)
              , defaults = {
                    arrow: ' → '
                  , compiled: 'compiled'
                  , platform: process.platform
                  , arch: process.arch
                  , version: process.versions.node
                  , bindings: 'bindings.node'
                  , try: [
                      // node-gyp's linked version in the "build" dir
                      [ 'module_root', 'build', 'bindings' ]
                      // node-waf and gyp_addon (a.k.a node-gyp)
                    , [ 'module_root', 'build', 'Debug', 'bindings' ]
                    , [ 'module_root', 'build', 'Release', 'bindings' ]
                      // Debug files, for development (legacy behavior, remove for node v0.9)
                    , [ 'module_root', 'out', 'Debug', 'bindings' ]
                    , [ 'module_root', 'Debug', 'bindings' ]
                      // Release files, but manually compiled (legacy behavior, remove for node v0.9)
                    , [ 'module_root', 'out', 'Release', 'bindings' ]
                    , [ 'module_root', 'Release', 'bindings' ]
                      // Legacy from node-waf, node <= 0.4.x
                    , [ 'module_root', 'build', 'default', 'bindings' ]
                      // Production "Release" buildtype binary (meh...)
                    , [ 'module_root', 'compiled', 'version', 'platform', 'arch', 'bindings' ]
                    ]
                };

            /**
             * The main `bindings()` function loads the compiled bindings for a given module.
             * It uses V8's Error API to determine the parent filename that this function is
             * being invoked from, which is then used to find the root directory.
             */

            function bindings (opts) {

              // Argument surgery
              if (typeof opts == 'string') {
                opts = { bindings: opts };
              } else if (!opts) {
                opts = {};
              }

              // maps `defaults` onto `opts` object
              Object.keys(defaults).map(function(i) {
                if (!(i in opts)) opts[i] = defaults[i];
              });

              // Get the module root
              if (!opts.module_root) {
                opts.module_root = exports.getRoot(exports.getFileName());
              }

              // Ensure the given bindings name ends with .node
              if (path$2.extname(opts.bindings) != '.node') {
                opts.bindings += '.node';
              }

              var tries = []
                , i = 0
                , l = opts.try.length
                , n
                , b
                , err;

              for (; i<l; i++) {
                n = join.apply(null, opts.try[i].map(function (p) {
                  return opts[p] || p
                }));
                tries.push(n);
                try {
                  b = opts.path ? commonjsRequire.resolve(n) : commonjsRequire(n);
                  if (!opts.path) {
                    b.path = n;
                  }
                  return b
                } catch (e) {
                  if (!/not find/i.test(e.message)) {
                    throw e
                  }
                }
              }

              err = new Error('Could not locate the bindings file. Tried:\n'
                + tries.map(function (a) { return opts.arrow + a }).join('\n'));
              err.tries = tries;
              throw err
            }
            module.exports = exports = bindings;


            /**
             * Gets the filename of the JavaScript file that invokes this function.
             * Used to help find the root directory of a module.
             * Optionally accepts an filename argument to skip when searching for the invoking filename
             */

            exports.getFileName = function getFileName (calling_file) {
              var origPST = Error.prepareStackTrace
                , origSTL = Error.stackTraceLimit
                , dummy = {}
                , fileName;

              Error.stackTraceLimit = 10;

              Error.prepareStackTrace = function (e, st) {
                for (var i=0, l=st.length; i<l; i++) {
                  fileName = st[i].getFileName();
                  if (fileName !== __filename) {
                    if (calling_file) {
                        if (fileName !== calling_file) {
                          return
                        }
                    } else {
                      return
                    }
                  }
                }
              };

              // run the 'prepareStackTrace' function above
              Error.captureStackTrace(dummy);

              // cleanup
              Error.prepareStackTrace = origPST;
              Error.stackTraceLimit = origSTL;

              return fileName
            };

            /**
             * Gets the root directory of a module, given an arbitrary filename
             * somewhere in the module tree. The "root directory" is the directory
             * containing the `package.json` file.
             *
             *   In:  /home/nate/node-native-module/lib/index.js
             *   Out: /home/nate/node-native-module
             */

            exports.getRoot = function getRoot (file) {
              var dir = dirname(file)
                , prev;
              while (true) {
                if (dir === '.') {
                  // Avoids an infinite loop in rare cases, like the REPL
                  dir = process.cwd();
                }
                if (exists(join(dir, 'package.json')) || exists(join(dir, 'node_modules'))) {
                  // Found the 'package.json' file or 'node_modules' dir; we're done
                  return dir
                }
                if (prev === dir) {
                  // Got to the top
                  throw new Error('Could not find module root given file: "' + file
                                + '". Do you have a `package.json` file? ')
                }
                // Try the parent dir next
                prev = dir;
                dir = join(dir, '..');
              }
            };
            });
            var bindings_2 = bindings_1.getFileName;
            var bindings_3 = bindings_1.getRoot;

            var WebWorkerThreads = bindings_1('WebWorkerThreads');
             
            var webworkerThreads = WebWorkerThreads;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            try {
                var Threads = webworkerThreads;
            } catch (e) {
                // Since webworker-threads are optional, only thow if the module is found
                if (e.code !== 'MODULE_NOT_FOUND') throw e;
            }

            function checkThreadSupport() {
                if (typeof Threads === 'undefined') {
                    throw new Error('parallel classification requires the optional dependency webworker-threads');
                }
            }

            var Classifier = function(classifier, stemmer) {
                this.classifier = classifier;
                this.docs = [];
                this.features = {};
                this.stemmer = stemmer || porter_stemmer;
                this.lastAdded = 0;
                this.events = new events$1.EventEmitter();
            };

            function addDocument(text, classification) {

                // Ignore further processing if classification is undefined
                if(typeof classification === 'undefined') return;

                // If classification is type of string then make sure it's dosen't have blank space at both end
                if(typeof classification === 'string'){
                  classification = classification.trim();
                }

                if(typeof text === 'string')
            	text = this.stemmer.tokenizeAndStem(text, this.keepStops);

                if(text.length === 0) {
                    // ignore empty documents
                    return;
                }

                this.docs.push({
            	label: classification,
            	text: text
                });

                for (var i = 0; i < text.length; i++) {
                    var token = text[i];
                    this.features[token] = (this.features[token] || 0) + 1;
                }
            }

            function removeDocument(text, classification) {
              var docs = this.docs
                , doc
                , pos;

              if (typeof text === 'string') {
                text = this.stemmer.tokenizeAndStem(text, this.keepStops);
              }

              for (var i = 0, ii = docs.length; i < ii; i++) {
                doc = docs[i];
                if (doc.text.join(' ') == text.join(' ') &&
                    doc.label == classification) {
                  pos = i;
                }
              }

              // Remove if there's a match
              if (!isNaN(pos)) {
                this.docs.splice(pos, 1);

                for (var i = 0, ii = text.length; i < ii; i++) {
                  delete this.features[text[i]];
                }
              }
            }

            function textToFeatures(observation) {
                var features = [];

                if(typeof observation === 'string')
            	observation = this.stemmer.tokenizeAndStem(observation, this.keepStops);

                for(var feature in this.features) {
                    if(observation.indexOf(feature) > -1)
                        features.push(1);
                    else
                        features.push(0);
                }

                return features;
            }

            function docsToFeatures(docs) {
                var parsedDocs = [];

                for (var i = 0; i < docs.length; i++) {
                    var features = [];

                    for (var feature in FEATURES) {
                        if (docs[i].observation.indexOf(feature) > -1)
                            features.push(1);
                        else
                            features.push(0);
                    }

                    parsedDocs.push({
                        index: docs[i].index,
                        features: features
                    });
                }

                return JSON.stringify(parsedDocs);
            }

            function train() {
                var totalDocs = this.docs.length;
                for(var i = this.lastAdded; i < totalDocs; i++) {
                    var features = this.textToFeatures(this.docs[i].text);
                    this.classifier.addExample(features, this.docs[i].label);
                    this.events.emit('trainedWithDocument', {index: i, total: totalDocs, doc: this.docs[i]});
                    this.lastAdded++;
                }
                this.events.emit('doneTraining', true);
                this.classifier.train();
            }

            function trainParallel(numThreads, callback) {
                checkThreadSupport();

                if (!callback) {
                    callback = numThreads;
                    numThreads = undefined;
                }

                if (isNaN(numThreads)) {
                    numThreads = require$$0$1.cpus().length;
                }

                var totalDocs = this.docs.length;
                var threadPool = Threads.createPool(numThreads);
                var docFeatures = {};
                var finished = 0;
                var self = this;

                // Init pool; send the features array and the parsing function
                threadPool.all.eval('var FEATURES = ' + JSON.stringify(this.features));
                threadPool.all.eval(docsToFeatures);

                // Convert docs to observation objects
                var obsDocs = [];
                for (var i = this.lastAdded; i < totalDocs; i++) {
                    var observation = this.docs[i].text;
                    if (typeof observation === 'string')
                        observation = this.stemmer.tokenizeAndStem(observation, this.keepStops);
                    obsDocs.push({
                        index: i,
                        observation: observation
                    });
                }

                // Called when a batch completes processing
                var onFeaturesResult = function(docs) {
                    setTimeout(function() {
                        self.events.emit('processedBatch', {
                            size: docs.length,
                            docs: totalDocs,
                            batches: numThreads,
                            index: finished
                        });
                    });

                    for (var j = 0; j < docs.length; j++) {
                        docFeatures[docs[j].index] = docs[j].features;
                    }
                };

                // Called when all batches finish processing
                var onFinished = function(err) {
                    if (err) {
                        threadPool.destroy();
                        return callback(err);
                    }

                    for (var j = self.lastAdded; j < totalDocs; j++) {
                        self.classifier.addExample(docFeatures[j], self.docs[j].label);
                        self.events.emit('trainedWithDocument', {
                            index: j,
                            total: totalDocs,
                            doc: self.docs[j]
                        });
                        self.lastAdded++;
                    }

                    self.events.emit('doneTraining', true);
                    self.classifier.train();

                    threadPool.destroy();
                    callback(null);
                };

                // Split the docs and start processing
                var batchSize = Math.ceil(obsDocs.length / numThreads);
                var lastError;

                for (var i = 0; i < numThreads; i++) {
                    var batchDocs = obsDocs.slice(i * batchSize, (i+1) * batchSize);
                    var batchJson = JSON.stringify(batchDocs);

                    threadPool.any.eval('docsToFeatures(' + batchJson + ')', function(err, docs) {
                        lastError = err || lastError;
                        finished++;

                        if (docs) {
                            docs = JSON.parse(docs);
                            onFeaturesResult(docs);
                        }

                        if (finished >= numThreads) {
                            onFinished(lastError);
                        }
                    });
                }
            }

            function trainParallelBatches(options) {
                checkThreadSupport();

                var numThreads = options && options.numThreads;
                var batchSize = options && options.batchSize;

                if (isNaN(numThreads)) {
                    numThreads = require$$0$1.cpus().length;
                }

                if (isNaN(batchSize)) {
                    batchSize = 2500;
                }

                var totalDocs = this.docs.length;
                var threadPool = Threads.createPool(numThreads);
                var docFeatures = {};
                var finished = 0;
                var self = this;

                var abort = false;
                var onError = function(err) {
                    if (!err || abort) return;
                    abort = true;
                    threadPool.destroy(true);
                    self.events.emit('doneTrainingError', err);
                };

                // Init pool; send the features array and the parsing function
                var str = JSON.stringify(this.features);
                threadPool.all.eval('var FEATURES = ' + str + ';', onError);
                threadPool.all.eval(docsToFeatures, onError);

                // Convert docs to observation objects
                var obsDocs = [];
                for (var i = this.lastAdded; i < totalDocs; i++) {
                    var observation = this.docs[i].text;
                    if (typeof observation === 'string')
                        observation = this.stemmer.tokenizeAndStem(observation, this.keepStops);
                    obsDocs.push({
                        index: i,
                        observation: observation
                    });
                }

                // Split the docs in batches
                var obsBatches = [];
                var i = 0;
                while (true) {
                    var batch = obsDocs.slice(i * batchSize, (i+1) * batchSize);
                    if (!batch || !batch.length) break;
                    obsBatches.push(batch);
                    i++;
                }
                obsDocs = null;
                self.events.emit('startedTraining', {
                    docs: totalDocs,
                    batches: obsBatches.length
                });

                // Called when a batch completes processing
                var onFeaturesResult = function(docs) {
                    self.events.emit('processedBatch', {
                        size: docs.length,
                        docs: totalDocs,
                        batches: obsBatches.length,
                        index: finished
                    });

                    for (var j = 0; j < docs.length; j++) {
                        docFeatures[docs[j].index] = docs[j].features;
                    }
                };

                // Called when all batches finish processing
                var onFinished = function() {
                    threadPool.destroy(true);
                    abort = true;

                    for (var j = self.lastAdded; j < totalDocs; j++) {
                        self.classifier.addExample(docFeatures[j], self.docs[j].label);
                        self.events.emit('trainedWithDocument', {
                            index: j,
                            total: totalDocs,
                            doc: self.docs[j]
                        });
                        self.lastAdded++;
                    }

                    self.events.emit('doneTraining', true);
                    self.classifier.train();
                };

                // Called to send the next batch to be processed
                var batchIndex = 0;
                var sendNext = function() {
                    if (abort) return;
                    if (batchIndex >= obsBatches.length) {
                        return;
                    }

                    sendBatch(JSON.stringify(obsBatches[batchIndex]));
                    batchIndex++;
                };

                // Called to send a batch of docs to the threads
                var sendBatch = function(batchJson) {
                    if (abort) return;
                    threadPool.any.eval('docsToFeatures(' + batchJson + ');', function(err, docs) {
                        if (err) {
                            return onError(err);
                        }

                        finished++;

                        if (docs) {
                            docs = JSON.parse(docs);
                            setTimeout(onFeaturesResult.bind(null, docs));
                        }

                        if (finished >= obsBatches.length) {
                            setTimeout(onFinished);
                        }

                        setTimeout(sendNext);
                    });
                };

                // Start processing
                for (var i = 0; i < numThreads; i++) {
                    sendNext();
                }
            }

            function retrain() {
              this.classifier = new (this.classifier.constructor)();
              this.lastAdded = 0;
              this.train();
            }

            function retrainParallel(numThreads, callback) {
              this.classifier = new (this.classifier.constructor)();
              this.lastAdded = 0;
              this.trainParallel(numThreads, callback);
            }

            function getClassifications(observation) {
                return this.classifier.getClassifications(this.textToFeatures(observation));
            }

            function classify(observation) {
                return this.classifier.classify(this.textToFeatures(observation));
            }

            function restore(classifier, stemmer) {
                classifier.stemmer = stemmer || porter_stemmer;
                classifier.events = new events$1.EventEmitter();
                return classifier;
            }

            function save(filename, callback) {
                var data = JSON.stringify(this);
                var fs$$1 = fs;
                var classifier = this;
                fs$$1.writeFile(filename, data, 'utf8', function(err) {
                    if(callback) {
                        callback(err, err ? null : classifier);
                    }
                });
            }

            function load(filename, callback) {
                var fs$$1 = fs;

                fs$$1.readFile(filename, 'utf8', function(err, data) {
                    var classifier;

                    if(!err) {
                        classifier = JSON.parse(data);
                    }

                    if(callback)
                        callback(err, classifier);
                });
            }

            function setOptions(options){
                this.keepStops = (options.keepStops) ? true : false;
            }

            Classifier.prototype.addDocument = addDocument;
            Classifier.prototype.removeDocument = removeDocument;
            Classifier.prototype.train = train;
            Classifier.prototype.trainParallel = trainParallel;
            Classifier.prototype.trainParallelBatches = trainParallelBatches;
            Classifier.prototype.retrain = retrain;
            Classifier.prototype.retrainParallel = retrainParallel;
            Classifier.prototype.classify = classify;
            Classifier.prototype.textToFeatures = textToFeatures;
            Classifier.prototype.save = save;
            Classifier.prototype.getClassifications = getClassifications;
            Classifier.prototype.setOptions = setOptions;
            Classifier.restore = restore;
            Classifier.load = load;

            var classifier = Classifier;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            function Classifier$1() {
            }

            function restore$1(classifier) {
                classifier = typeof classifier == 'string' ?  JSON.parse(classifier) : classifier;

                return classifier;
            }

            function addExample(observation, classification) {
                throw 'Not implemented';
            }

            function classify$1(observation) {
            	var classifications = this.getClassifications(observation);
            	if(!classifications || classifications.length === 0) {
            		throw "Not Trained";
            	} 
                return this.getClassifications(observation)[0].label;
            }

            function train$1() {
                throw 'Not implemented';
            }

            Classifier$1.prototype.addExample = addExample;
            Classifier$1.prototype.train = train$1;
            Classifier$1.prototype.classify = classify$1;

            Classifier$1.restore = restore$1;

            var classifier$1 = Classifier$1;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var BayesClassifier = function(smoothing) {
                classifier$1.call(this);
                this.classFeatures = {};
                this.classTotals = {};
                this.totalExamples = 1; // start at one to smooth
                this.smoothing = smoothing === undefined ? 1.0 : smoothing;
            };

            util$2.inherits(BayesClassifier, classifier$1);

            function addExample$1(observation, label) {
                if(!this.classFeatures[label]) {
                    this.classFeatures[label] = {};
                    this.classTotals[label] = 1; // give an extra for smoothing
                }

                if(observation instanceof Array) {
                    var i = observation.length;
                    this.totalExamples++;
                    this.classTotals[label]++;

                    while(i--) {
                        if(observation[i]) {
                            if(this.classFeatures[label][i]) {
                                this.classFeatures[label][i]++;
                            } else {
                                // give an extra for smoothing
                                this.classFeatures[label][i] = 1 + this.smoothing;
                            }
                        }
                    }
                } else {
                    // sparse observation
                    for(var key in observation){
                        value = observation[key];

                        if(this.classFeatures[label][value]) {
                           this.classFeatures[label][value]++;
                        } else {
                            // give an extra for smoothing
                           this.classFeatures[label][value] = 1 + this.smoothing;
                        }
                    }
                }
            }

            function train$2() {

            }

            function probabilityOfClass(observation, label) {
                var prob = 0;

                if(observation instanceof Array){
                    var i = observation.length;

                    while(i--) {
                        if(observation[i]) {
                            var count = this.classFeatures[label][i] || this.smoothing;
                            // numbers are tiny, add logs rather than take product
                            prob += Math.log(count / this.classTotals[label]);
                        }
                    }
                } else {
                    // sparse observation
                    for(var key in observation){
                        var count = this.classFeatures[label][observation[key]] || this.smoothing;
                        // numbers are tiny, add logs rather than take product
                        prob += Math.log(count / this.classTotals[label]);
                    }
                }

                // p(C) * unlogging the above calculation P(X|C)
                prob = (this.classTotals[label] / this.totalExamples) * Math.exp(prob);

                return prob;
            }

            function getClassifications$1(observation) {
                var classifier = this;
                var labels = [];

                for(var className in this.classFeatures) {
                    labels.push({label: className,
                    value: classifier.probabilityOfClass(observation, className)});
                }

                return labels.sort(function(x, y) {
                    return y.value - x.value;
                });
            }

            function restore$2(classifier) {
                 classifier = classifier$1.restore(classifier);
                 classifier.__proto__ = BayesClassifier.prototype;

                 return classifier;
            }

            BayesClassifier.prototype.addExample = addExample$1;
            BayesClassifier.prototype.train = train$2;
            BayesClassifier.prototype.getClassifications = getClassifications$1;
            BayesClassifier.prototype.probabilityOfClass = probabilityOfClass;

            BayesClassifier.restore = restore$2;

            var bayes_classifier = BayesClassifier;

            // Copyright (c) 2011, Chris Umbel, James Coglan
            // This file is required in order for any other classes to work. Some Vector methods work with the
            // other Sylvester classes and are useless unless they are included. Other classes such as Line and
            // Plane will not function at all without Vector being loaded first.           

            Math.sign = function(x) {
                return x < 0 ? -1: 1;
            };
                                                          
            var Sylvester = {
                precision: 1e-6,
                approxPrecision: 1e-5
            };

            var sylvester = Sylvester;

            // Copyright (c) 2011, Chris Umbel, James Coglan
            // Matrix class - depends on Vector.





            // augment a matrix M with identity rows/cols
            function identSize(M, m, n, k) {
                var e = M.elements;
                var i = k - 1;

                while(i--) {
            	var row = [];
            	
            	for(var j = 0; j < n; j++)
            	    row.push(j == i ? 1 : 0);
            	
                    e.unshift(row);
                }
                
                for(var i = k - 1; i < m; i++) {
                    while(e[i].length < n)
                        e[i].unshift(0);
                }

                return $M(e);
            }

            function pca$1(X) {
                var Sigma = X.transpose().x(X).x(1 / X.rows());
                var svd = Sigma.svd();
                return {U: svd.U, S: svd.S};
            }

            // singular value decomposition in pure javascript
            function svdJs() {
                var A = this;
                var V = Matrix$b.I(A.rows());
                var S = A.transpose();
                var U = Matrix$b.I(A.cols());
                var err = Number.MAX_VALUE;
                var i = 0;
                var maxLoop = 100;

                while(err > 2.2737e-13 && i < maxLoop) {
                    var qr = S.transpose().qrJs();
                    S = qr.R;
                    V = V.x(qr.Q);
                    qr = S.transpose().qrJs();
                    U = U.x(qr.Q);
                    S = qr.R;

                    var e = S.triu(1).unroll().norm();
                    var f = S.diagonal().norm();

                    if(f == 0)
                        f = 1;

                    err = e / f;

                    i++;
                }

                var ss = S.diagonal();
                var s = [];

                for(var i = 1; i <= ss.cols(); i++) {
                    var ssn = ss.e(i);
                    s.push(Math.abs(ssn));

                    if(ssn < 0) {
                        for(var j = 0; j < U.rows(); j++) {
                            V.elements[j][i - 1] = -(V.elements[j][i - 1]);
                        }
                    }
                }

                return {U: U, S: $V(s).toDiagonalMatrix(), V: V};
            }

            // singular value decomposition using LAPACK
            function svdPack() {
                var result = lapack$1.sgesvd('A', 'A', this.elements);

                return {
                    U: $M(result.U),
                    S: $M(result.S).column(1).toDiagonalMatrix(),
            	V: $M(result.VT).transpose()
                };
            }

            // QR decomposition in pure javascript
            function qrJs() {
                var m = this.rows();
                var n = this.cols();
                var Q = Matrix$b.I(m);
                var A = this;
                
                for(var k = 1; k < Math.min(m, n); k++) {
            	var ak = A.slice(k, 0, k, k).col(1);
            	var oneZero = [1];
            	
            	while(oneZero.length <=  m - k)
            	    oneZero.push(0);
            	
            	oneZero = $V(oneZero);
            	var vk = ak.add(oneZero.x(ak.norm() * Math.sign(ak.e(1))));
            	var Vk = $M(vk);
            	var Hk = Matrix$b.I(m - k + 1).subtract(Vk.x(2).x(Vk.transpose()).div(Vk.transpose().x(Vk).e(1, 1)));
            	var Qk = identSize(Hk, m, n, k);
            	A = Qk.x(A);
            	// slow way to compute Q
            	Q = Q.x(Qk);
                }
                
                return {Q: Q, R: A};
            }

            // QR decomposition using LAPACK
            function qrPack() {
                var qr = lapack$1.qr(this.elements);

                return {
            	Q: $M(qr.Q),
            	R: $M(qr.R)
                };
            }

            function Matrix$b() {}
            Matrix$b.prototype = {
                // solve a system of linear equations (work in progress)
                solve: function(b) {
            	var lu = this.lu();
            	b = lu.P.x(b);
            	var y = lu.L.forwardSubstitute(b);
            	var x = lu.U.backSubstitute(y);
            	return lu.P.x(x);
            	//return this.inv().x(b);
                },

                // project a matrix onto a lower dim
                pcaProject: function(k, U) {
            	var U = U || pca$1(this).U;
            	var Ureduce= U.slice(1, U.rows(), 1, k);
            	return {Z: this.x(Ureduce), U: U};
                },

                // recover a matrix to a higher dimension
                pcaRecover: function(U) {
            	var k = this.cols();
            	var Ureduce = U.slice(1, U.rows(), 1, k);
            	return this.x(Ureduce.transpose());
                },    

                // grab the upper triangular part of the matrix
                triu: function(k) {
            	if(!k)
            	    k = 0;
            	
            	return this.map(function(x, i, j) {
            	    return j - i >= k ? x : 0;
            	});
                },

                // unroll a matrix into a vector
                unroll: function() {
            	var v = [];
            	
            	for(var i = 1; i <= this.cols(); i++) {
            	    for(var j = 1; j <= this.rows(); j++) {
            		v.push(this.e(j, i));
            	    }
            	}

            	return $V(v);
                },

                // return a sub-block of the matrix
                slice: function(startRow, endRow, startCol, endCol) {
            	var x = [];
            	
            	if(endRow == 0)
            	    endRow = this.rows();
            	
            	if(endCol == 0)
            	    endCol = this.cols();

            	for(i = startRow; i <= endRow; i++) {
            	    var row = [];

            	    for(j = startCol; j <= endCol; j++) {
            		row.push(this.e(i, j));
            	    }

            	    x.push(row);
            	}

            	return $M(x);
                },

                // Returns element (i,j) of the matrix
                e: function(i,j) {
            	if (i < 1 || i > this.elements.length || j < 1 || j > this.elements[0].length) { return null; }
            	return this.elements[i - 1][j - 1];
                },

                // Returns row k of the matrix as a vector
                row: function(i) {
            	if (i > this.elements.length) { return null; }
            	return $V(this.elements[i - 1]);
                },

                // Returns column k of the matrix as a vector
                col: function(j) {
            	if (j > this.elements[0].length) { return null; }
            	var col = [], n = this.elements.length;
            	for (var i = 0; i < n; i++) { col.push(this.elements[i][j - 1]); }
            	return $V(col);
                },

                // Returns the number of rows/columns the matrix has
                dimensions: function() {
            	return {rows: this.elements.length, cols: this.elements[0].length};
                },

                // Returns the number of rows in the matrix
                rows: function() {
            	return this.elements.length;
                },

                // Returns the number of columns in the matrix
                cols: function() {
            	return this.elements[0].length;
                },

                approxEql: function(matrix) {
            	return this.eql(matrix, sylvester.approxPrecision);
                },

                // Returns true iff the matrix is equal to the argument. You can supply
                // a vector as the argument, in which case the receiver must be a
                // one-column matrix equal to the vector.
                eql: function(matrix, precision) {
            	var M = matrix.elements || matrix;
            	if (typeof(M[0][0]) == 'undefined') { M = Matrix$b.create(M).elements; }
            	if (this.elements.length != M.length ||
                        this.elements[0].length != M[0].length) { return false; }
            	var i = this.elements.length, nj = this.elements[0].length, j;
            	while (i--) { j = nj;
            		      while (j--) {
            			  if (Math.abs(this.elements[i][j] - M[i][j]) > (precision || sylvester.precision)) { return false; }
            		      }
            		    }
            	return true;
                },

                // Returns a copy of the matrix
                dup: function() {
            	return Matrix$b.create(this.elements);
                },

                // Maps the matrix to another matrix (of the same dimensions) according to the given function
                map: function(fn) {
                var els = [], i = this.elements.length, nj = this.elements[0].length, j;
            	while (i--) { j = nj;
            		      els[i] = [];
            		      while (j--) {
            			  els[i][j] = fn(this.elements[i][j], i + 1, j + 1);
            		      }
            		    }
            	return Matrix$b.create(els);
                },

                // Returns true iff the argument has the same dimensions as the matrix
                isSameSizeAs: function(matrix) {
            	var M = matrix.elements || matrix;
            	if (typeof(M[0][0]) == 'undefined') { M = Matrix$b.create(M).elements; }
            	return (this.elements.length == M.length &&
            		this.elements[0].length == M[0].length);
                },

                // Returns the result of adding the argument to the matrix
                add: function(matrix) {
            	if(typeof(matrix) == 'number') {
            	    return this.map(function(x, i, j) { return x + matrix});
            	} else {
            	    var M = matrix.elements || matrix;
            	    if (typeof(M[0][0]) == 'undefined') { M = Matrix$b.create(M).elements; }
            	    if (!this.isSameSizeAs(M)) { return null; }
            	    return this.map(function(x, i, j) { return x + M[i - 1][j - 1]; });
            	}
                },

                // Returns the result of subtracting the argument from the matrix
                subtract: function(matrix) {
            	if(typeof(matrix) == 'number') {
            	    return this.map(function(x, i, j) { return x - matrix});
            	} else {
            	    var M = matrix.elements || matrix;
            	    if (typeof(M[0][0]) == 'undefined') { M = Matrix$b.create(M).elements; }
            	    if (!this.isSameSizeAs(M)) { return null; }
            	    return this.map(function(x, i, j) { return x - M[i - 1][j - 1]; });
            	}
                },

                // Returns true iff the matrix can multiply the argument from the left
                canMultiplyFromLeft: function(matrix) {
            	var M = matrix.elements || matrix;
            	if (typeof(M[0][0]) == 'undefined') { M = Matrix$b.create(M).elements; }
            	// this.columns should equal matrix.rows
            	return (this.elements[0].length == M.length);
                },

                // Returns the result of a multiplication-style operation the matrix from the right by the argument.
                // If the argument is a scalar then just operate on all the elements. If the argument is
                // a vector, a vector is returned, which saves you having to remember calling
                // col(1) on the result.
                mulOp: function(matrix, op) {
            	if (!matrix.elements) {
            	    return this.map(function(x) { return op(x, matrix); });
            	}

            	var returnVector = matrix.modulus ? true : false;
            	var M = matrix.elements || matrix;
            	if (typeof(M[0][0]) == 'undefined') 
            	    M = Matrix$b.create(M).elements;
            	if (!this.canMultiplyFromLeft(M)) 
            	    return null; 
            	var e = this.elements, rowThis, rowElem, elements = [],
                    sum, m = e.length, n = M[0].length, o = e[0].length, i = m, j, k;

            	while (i--) {
                        rowElem = [];
                        rowThis = e[i];
                        j = n;

                        while (j--) {
            		sum = 0;
            		k = o;

            		while (k--) {
                                sum += op(rowThis[k], M[k][j]);
            		}

            		rowElem[j] = sum;
                        }

                        elements[i] = rowElem;
            	}

            	var M = Matrix$b.create(elements);
            	return returnVector ? M.col(1) : M;
                },

                // Returns the result of dividing the matrix from the right by the argument.
                // If the argument is a scalar then just divide all the elements. If the argument is
                // a vector, a vector is returned, which saves you having to remember calling
                // col(1) on the result.
                div: function(matrix) {
            	return this.mulOp(matrix, function(x, y) { return x / y});
                },

                // Returns the result of multiplying the matrix from the right by the argument.
                // If the argument is a scalar then just multiply all the elements. If the argument is
                // a vector, a vector is returned, which saves you having to remember calling
                // col(1) on the result.
                multiply: function(matrix) {
            	return this.mulOp(matrix, function(x, y) { return x * y});
                },

                x: function(matrix) { return this.multiply(matrix); },

                elementMultiply: function(v) {
                    return this.map(function(k, i, j) {
                        return v.e(i, j) * k;
                    });
                },

                // sum all elements in the matrix
                sum: function() {
                    var sum = 0;

                    this.map(function(x) { sum += x;});

                    return sum;
                },

                // Returns a Vector of each colum averaged.
                mean: function() {
                  var dim = this.dimensions();
                  var r = [];
                  for (var i = 1; i <= dim.cols; i++) {
                    r.push(this.col(i).sum() / dim.rows);
                  }
                  return $V(r);
                },

                column: function(n) {
            	return this.col(n);
                },

                // element-wise log
                log: function() {
            	return this.map(function(x) { return Math.log(x); });
                },

                // Returns a submatrix taken from the matrix
                // Argument order is: start row, start col, nrows, ncols
                // Element selection wraps if the required index is outside the matrix's bounds, so you could
                // use this to perform row/column cycling or copy-augmenting.
                minor: function(a, b, c, d) {
            	var elements = [], ni = c, i, nj, j;
            	var rows = this.elements.length, cols = this.elements[0].length;
            	while (ni--) {
            	    i = c - ni - 1;
            	    elements[i] = [];
            	    nj = d;
            	    while (nj--) {
            		j = d - nj - 1;
            		elements[i][j] = this.elements[(a + i - 1) % rows][(b + j - 1) % cols];
            	    }
            	}
            	return Matrix$b.create(elements);
                },

                // Returns the transpose of the matrix
                transpose: function() {
                var rows = this.elements.length, i, cols = this.elements[0].length, j;
            	var elements = [], i = cols;
            	while (i--) {
            	    j = rows;
            	    elements[i] = [];
            	    while (j--) {
            		elements[i][j] = this.elements[j][i];
            	    }
            	}
            	return Matrix$b.create(elements);
                },

                // Returns true iff the matrix is square
                isSquare: function() {
            	return (this.elements.length == this.elements[0].length);
                },

                // Returns the (absolute) largest element of the matrix
                max: function() {
            	var m = 0, i = this.elements.length, nj = this.elements[0].length, j;
            	while (i--) {
            	    j = nj;
            	    while (j--) {
            		if (Math.abs(this.elements[i][j]) > Math.abs(m)) { m = this.elements[i][j]; }
            	    }
            	}
            	return m;
                },

                // Returns the indeces of the first match found by reading row-by-row from left to right
                indexOf: function(x) {
            	var ni = this.elements.length, i, nj = this.elements[0].length, j;
            	for (i = 0; i < ni; i++) {
            	    for (j = 0; j < nj; j++) {
            		if (this.elements[i][j] == x) { return {i: i + 1, j: j + 1}; }
            	    }
            	}
            	return null;
                },

                // If the matrix is square, returns the diagonal elements as a vector.
                // Otherwise, returns null.
                diagonal: function() {
            	if (!this.isSquare) { return null; }
            	var els = [], n = this.elements.length;
            	for (var i = 0; i < n; i++) {
            	    els.push(this.elements[i][i]);
            	}
            	return $V(els);
                },

                // Make the matrix upper (right) triangular by Gaussian elimination.
                // This method only adds multiples of rows to other rows. No rows are
                // scaled up or switched, and the determinant is preserved.
                toRightTriangular: function() {
            	var M = this.dup(), els;
            	var n = this.elements.length, i, j, np = this.elements[0].length, p;
            	for (i = 0; i < n; i++) {
            	    if (M.elements[i][i] == 0) {
            		for (j = i + 1; j < n; j++) {
            		    if (M.elements[j][i] != 0) {
            			els = [];
            			for (p = 0; p < np; p++) { els.push(M.elements[i][p] + M.elements[j][p]); }
            			M.elements[i] = els;
            			break;
            		    }
            		}
            	    }
            	    if (M.elements[i][i] != 0) {
            		for (j = i + 1; j < n; j++) {
            		    var multiplier = M.elements[j][i] / M.elements[i][i];
            		    els = [];
            		    for (p = 0; p < np; p++) {
            			// Elements with column numbers up to an including the number
            			// of the row that we're subtracting can safely be set straight to
            			// zero, since that's the point of this routine and it avoids having
            			// to loop over and correct rounding errors later
            			els.push(p <= i ? 0 : M.elements[j][p] - M.elements[i][p] * multiplier);
            		    }
            		    M.elements[j] = els;
            		}
            	    }
            	}
            	return M;
                },

                toUpperTriangular: function() { return this.toRightTriangular(); },

                // Returns the determinant for square matrices
                determinant: function() {
            	if (!this.isSquare()) { return null; }
            	if (this.cols == 1 && this.rows == 1) { return this.row(1); }
            	if (this.cols == 0 && this.rows == 0) { return 1; }
            	var M = this.toRightTriangular();
            	var det = M.elements[0][0], n = M.elements.length;
            	for (var i = 1; i < n; i++) {
            	    det = det * M.elements[i][i];
            	}
            	return det;
                },
                det: function() { return this.determinant(); },

                // Returns true iff the matrix is singular
                isSingular: function() {
            	return (this.isSquare() && this.determinant() === 0);
                },

                // Returns the trace for square matrices
                trace: function() {
            	if (!this.isSquare()) { return null; }
            	var tr = this.elements[0][0], n = this.elements.length;
            	for (var i = 1; i < n; i++) {
            	    tr += this.elements[i][i];
            	}
            	return tr;
                },

                tr: function() { return this.trace(); },

                // Returns the rank of the matrix
                rank: function() {
            	var M = this.toRightTriangular(), rank = 0;
            	var i = this.elements.length, nj = this.elements[0].length, j;
            	while (i--) {
            	    j = nj;
            	    while (j--) {
            		if (Math.abs(M.elements[i][j]) > sylvester.precision) { rank++; break; }
            	    }
            	}
            	return rank;
                },

                rk: function() { return this.rank(); },

                // Returns the result of attaching the given argument to the right-hand side of the matrix
                augment: function(matrix) {
            	var M = matrix.elements || matrix;
            	if (typeof(M[0][0]) == 'undefined') { M = Matrix$b.create(M).elements; }
            	var T = this.dup(), cols = T.elements[0].length;
            	var i = T.elements.length, nj = M[0].length, j;
            	if (i != M.length) { return null; }
            	while (i--) {
            	    j = nj;
            	    while (j--) {
            		T.elements[i][cols + j] = M[i][j];
            	    }
            	}
            	return T;
                },

                // Returns the inverse (if one exists) using Gauss-Jordan
                inverse: function() {
            	if (!this.isSquare() || this.isSingular()) { return null; }
            	var n = this.elements.length, i = n, j;
            	var M = this.augment(Matrix$b.I(n)).toRightTriangular();
            	var np = M.elements[0].length, p, els, divisor;
            	var inverse_elements = [], new_element;
            	// Matrix is non-singular so there will be no zeros on the diagonal
            	// Cycle through rows from last to first
            	while (i--) {
            	    // First, normalise diagonal elements to 1
            	    els = [];
            	    inverse_elements[i] = [];
            	    divisor = M.elements[i][i];
            	    for (p = 0; p < np; p++) {
                    new_element = M.elements[i][p] / divisor;
            		els.push(new_element);
            		// Shuffle off the current row of the right hand side into the results
            		// array as it will not be modified by later runs through this loop
            		if (p >= n) { inverse_elements[i].push(new_element); }
            	    }
            	    M.elements[i] = els;
            	    // Then, subtract this row from those above it to
            	    // give the identity matrix on the left hand side
            	    j = i;
            	    while (j--) {
            		els = [];
            		for (p = 0; p < np; p++) {
            		    els.push(M.elements[j][p] - M.elements[i][p] * M.elements[j][i]);
            		}
            		M.elements[j] = els;
            	    }
            	}
            	return Matrix$b.create(inverse_elements);
                },

                inv: function() { return this.inverse(); },

                // Returns the result of rounding all the elements
                round: function() {
            	return this.map(function(x) { return Math.round(x); });
                },

                // Returns a copy of the matrix with elements set to the given value if they
                // differ from it by less than Sylvester.precision
                snapTo: function(x) {
            	return this.map(function(p) {
            	    return (Math.abs(p - x) <= sylvester.precision) ? x : p;
            	});
                },

                // Returns a string representation of the matrix
                inspect: function() {
            	var matrix_rows = [];
            	var n = this.elements.length;
            	for (var i = 0; i < n; i++) {
            	    matrix_rows.push($V(this.elements[i]).inspect());
            	}
            	return matrix_rows.join('\n');
                },

                // Returns a array representation of the matrix
                toArray: function() {
                	var matrix_rows = [];
                	var n = this.elements.length;
                	for (var i = 0; i < n; i++) {
                    matrix_rows.push(this.elements[i]);
                	}
                  return matrix_rows;
                },


                // Set the matrix's elements from an array. If the argument passed
                // is a vector, the resulting matrix will be a single column.
                setElements: function(els) {
            	var i, j, elements = els.elements || els;
            	if (typeof(elements[0][0]) != 'undefined') {
            	    i = elements.length;
            	    this.elements = [];
            	    while (i--) {
            		j = elements[i].length;
            		this.elements[i] = [];
            		while (j--) {
            		    this.elements[i][j] = elements[i][j];
            		}
            	    }
            	    return this;
            	}
            	var n = elements.length;
            	this.elements = [];
            	for (i = 0; i < n; i++) {
            	    this.elements.push([elements[i]]);
            	}
            	return this;
                },

                // return the indexes of the columns with the largest value
                // for each row
                maxColumnIndexes: function() {
            	var maxes = [];

            	for(var i = 1; i <= this.rows(); i++) {
            	    var max = null;
            	    var maxIndex = -1;

            	    for(var j = 1; j <= this.cols(); j++) {
            		if(max === null || this.e(i, j) > max) {
            		    max = this.e(i, j);
            		    maxIndex = j;
            		}
            	    }

            	    maxes.push(maxIndex);
            	}

            	return $V(maxes);
                },

                // return the largest values in each row
                maxColumns: function() {
            	var maxes = [];

            	for(var i = 1; i <= this.rows(); i++) {
            	    var max = null;

            	    for(var j = 1; j <= this.cols(); j++) {
            		if(max === null || this.e(i, j) > max) {
            		    max = this.e(i, j);
            		}
            	    }

            	    maxes.push(max);
            	}

            	return $V(maxes);
                },

                // return the indexes of the columns with the smallest values
                // for each row
                minColumnIndexes: function() {
            	var mins = [];

            	for(var i = 1; i <= this.rows(); i++) {
            	    var min = null;
            	    var minIndex = -1;

            	    for(var j = 1; j <= this.cols(); j++) {
            		if(min === null || this.e(i, j) < min) {
            		    min = this.e(i, j);
            		    minIndex = j;
            		}
            	    }

            	    mins.push(minIndex);
            	}

            	return $V(mins);
                },

                // return the smallest values in each row
                minColumns: function() {
            	var mins = [];

            	for(var i = 1; i <= this.rows(); i++) {
            	    var min = null;

            	    for(var j = 1; j <= this.cols(); j++) {
            		if(min === null || this.e(i, j) < min) {
            		    min = this.e(i, j);
            		}
            	    }

            	    mins.push(min);
            	}

            	return $V(mins);
                },
                
                // perorm a partial pivot on the matrix. essentially move the largest
                // row below-or-including the pivot and replace the pivot's row with it.
                // a pivot matrix is returned so multiplication can perform the transform.
                partialPivot: function(k, j, P, A, L) {
            	var maxIndex = 0;
            	var maxValue = 0;

            	for(var i = k; i <= A.rows(); i++) {
            	    if(Math.abs(A.e(i, j)) > maxValue) {
            		maxValue = Math.abs(A.e(k, j));
            		maxIndex = i;
            	    }
            	}

            	if(maxIndex != k) {
            	    var tmp = A.elements[k - 1];
            	    A.elements[k - 1] = A.elements[maxIndex - 1];
            	    A.elements[maxIndex - 1] = tmp;
            	    
            	    P.elements[k - 1][k - 1] = 0;
            	    P.elements[k - 1][maxIndex - 1] = 1;
            	    P.elements[maxIndex - 1][maxIndex - 1] = 0;
            	    P.elements[maxIndex - 1][k - 1] = 1;
            	}
            	
            	return P;
                },

                // solve lower-triangular matrix * x = b via forward substitution
                forwardSubstitute: function(b) {
            	var xa = [];

            	for(var i = 1; i <= this.rows(); i++) {
            	    var w = 0;

            	    for(var j = 1; j < i; j++) {
            		w += this.e(i, j) * xa[j - 1];
            	    }

            	    xa.push((b.e(i) - w) / this.e(i, i));
            	}

            	return $V(xa);
                },

                // solve an upper-triangular matrix * x = b via back substitution
                backSubstitute: function(b) {
            	var xa = [];

            	for(var i = this.rows(); i > 0; i--) {
            	    var w = 0;

            	    for(var j = this.cols(); j > i; j--) {
            		w += this.e(i, j) * xa[this.rows() - j];
            	    }

            	    xa.push((b.e(i) - w) / this.e(i, i));
            	}

            	return $V(xa.reverse());
                },
                
                luPack: luPack,
                luJs: luJs,
                svdJs: svdJs,
                svdPack: svdPack,
                qrJs: qrJs,
                qrPack: qrPack
            };

            // LU factorization from LAPACK
            function luPack() {
                var lu = lapack$1.lu(this.elements);
                return {
            	L: $M(lu.L),
            	U: $M(lu.U),
            	P: $M(lu.P)
            	// don't pass back IPIV
                };
            }

            // pure Javascript LU factorization
            function luJs() {
                var A = this.dup();
                var L = Matrix$b.I(A.rows());
                var P = Matrix$b.I(A.rows());
                var U = Matrix$b.Zeros(A.rows(), A.cols());
                var p = 1;

                for(var k = 1; k <= Math.min(A.cols(), A.rows()); k++) {
            	P = A.partialPivot(k, p, P, A, L);
            	
            	for(var i = k + 1; i <= A.rows(); i++) {
            	    var l = A.e(i, p) / A.e(k, p);
            	    L.elements[i - 1][k - 1] = l;
            	    
            	    for(var j = k + 1 ; j <= A.cols(); j++) {
            		A.elements[i - 1][j - 1] -= A.e(k, j) * l;
            	    }
            	}
            	
            	for(var j = k; j <= A.cols(); j++) {
            	    U.elements[k - 1][j - 1] = A.e(k, j);
            	}

            	if(p < A.cols())
            	    p++;
                }    
                
                return {L: L, U: U, P: P};
            }

            function getLapack() {
                try {
            	return lapack;
                } catch(e) {}
            }

            var lapack$1;

            // if node-lapack is installed use the fast, native fortran routines
            if(lapack$1 = getLapack()) {
                Matrix$b.prototype.svd = svdPack;
                Matrix$b.prototype.qr = qrPack;
                Matrix$b.prototype.lu = luPack;
            } else {
                // otherwise use the slower pure Javascript versions
                Matrix$b.prototype.svd = svdJs;
                Matrix$b.prototype.qr = qrJs;
                Matrix$b.prototype.lu = luJs;
            }

            // Constructor function
            Matrix$b.create = function(aElements, ignoreLapack) {
                var M = new Matrix$b().setElements(aElements);
                return M;
            };

            // Identity matrix of size n
            Matrix$b.I = function(n) {
                var els = [], i = n, j;
                while (i--) {
            	j = n;
            	els[i] = [];
            	while (j--) {
            	    els[i][j] = (i == j) ? 1 : 0;
            	}
                }
                return Matrix$b.create(els);
            };

            Matrix$b.loadFile = function(file) {
                var contents = fs.readFileSync(file, 'utf-8');
                var matrix = [];

                var rowArray = contents.split('\n');
                for (var i = 0; i < rowArray.length; i++) {
            	var d = rowArray[i].split(',');
            	if (d.length > 1) {
            	    matrix.push(d);
            	}
                }

                var M = new Matrix$b();
                return M.setElements(matrix);
            };

            // Diagonal matrix - all off-diagonal elements are zero
            Matrix$b.Diagonal = function(elements) {
                var i = elements.length;
                var M = Matrix$b.I(i);
                while (i--) {
            	M.elements[i][i] = elements[i];
                }
                return M;
            };

            // Rotation matrix about some axis. If no axis is
            // supplied, assume we're after a 2D transform
            Matrix$b.Rotation = function(theta, a) {
                if (!a) {
            	return Matrix$b.create([
            	    [Math.cos(theta), -Math.sin(theta)],
            	    [Math.sin(theta), Math.cos(theta)]
            	]);
                }
                var axis = a.dup();
                if (axis.elements.length != 3) { return null; }
                var mod = axis.modulus();
                var x = axis.elements[0] / mod, y = axis.elements[1] / mod, z = axis.elements[2] / mod;
                var s = Math.sin(theta), c = Math.cos(theta), t = 1 - c;
                // Formula derived here: http://www.gamedev.net/reference/articles/article1199.asp
                // That proof rotates the co-ordinate system so theta
                // becomes -theta and sin becomes -sin here.
                return Matrix$b.create([
            	[t * x * x + c, t * x * y - s * z, t * x * z + s * y],
            	[t * x * y + s * z, t * y * y + c, t * y * z - s * x],
            	[t * x * z - s * y, t * y * z + s * x, t * z * z + c]
                ]);
            };

            // Special case rotations
            Matrix$b.RotationX = function(t) {
                var c = Math.cos(t), s = Math.sin(t);
                return Matrix$b.create([
            	[1, 0, 0],
            	[0, c, -s],
            	[0, s, c]
                ]);
            };

            Matrix$b.RotationY = function(t) {
                var c = Math.cos(t), s = Math.sin(t);
                return Matrix$b.create([
            	[c, 0, s],
            	[0, 1, 0],
            	[-s, 0, c]
                ]);
            };

            Matrix$b.RotationZ = function(t) {
                var c = Math.cos(t), s = Math.sin(t);
                return Matrix$b.create([
            	[c, -s, 0],
            	[s, c, 0],
            	[0, 0, 1]
                ]);
            };

            // Random matrix of n rows, m columns
            Matrix$b.Random = function(n, m) {
                if (arguments.length === 1) m = n;
                return Matrix$b.Zero(n, m).map(
            	function() { return Math.random(); }
              );
            };

            Matrix$b.Fill = function(n, m, v) {
                if (arguments.length === 2) {
            	v = m;
            	m = n;
                }

                var els = [], i = n, j;

                while (i--) {
            	j = m;
            	els[i] = [];

            	while (j--) {
            	    els[i][j] = v;
            	}
                }

                return Matrix$b.create(els);
            };

            // Matrix filled with zeros
            Matrix$b.Zero = function(n, m) {
                return Matrix$b.Fill(n, m, 0);
            };

            // Matrix filled with zeros
            Matrix$b.Zeros = function(n, m) {
                return Matrix$b.Zero(n, m);
            };

            // Matrix filled with ones
            Matrix$b.One = function(n, m) {
                return Matrix$b.Fill(n, m, 1);
            };

            // Matrix filled with ones
            Matrix$b.Ones = function(n, m) {
                return Matrix$b.One(n, m);
            };

            var matrix$2 = Matrix$b;

            // Copyright (c) 2011, Chris Umbel, James Coglan
            // This file is required in order for any other classes to work. Some Vector methods work with the
            // other Sylvester classes and are useless unless they are included. Other classes such as Line and
            // Plane will not function at all without Vector being loaded first.



            function Vector() {}
            Vector.prototype = {

                norm: function() {
            	var n = this.elements.length;
            	var sum = 0;

            	while (n--) {
            	    sum += Math.pow(this.elements[n], 2);
            	}

            	return Math.sqrt(sum);
                },

                // Returns element i of the vector
                e: function(i) {
                  return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];
                },

                // Returns the number of rows/columns the vector has
                dimensions: function() {
                  return {rows: 1, cols: this.elements.length};
                },

                // Returns the number of rows in the vector
                rows: function() {
                  return 1;
                },

                // Returns the number of columns in the vector
                cols: function() {
                  return this.elements.length;
                },

                // Returns the modulus ('length') of the vector
                modulus: function() {
                  return Math.sqrt(this.dot(this));
                },

                // Returns true iff the vector is equal to the argument
                eql: function(vector) {
                	var n = this.elements.length;
                	var V = vector.elements || vector;
                	if (n != V.length) { return false; }
                	while (n--) {
                	    if (Math.abs(this.elements[n] - V[n]) > sylvester.precision) { return false; }
                	}
                	return true;
                },

                // Returns a copy of the vector
                dup: function() {
            	    return Vector.create(this.elements);
                },

                // Maps the vector to another vector according to the given function
                map: function(fn) {
            	var elements = [];
            	this.each(function(x, i) {
            	    elements.push(fn(x, i));
            	});
            	return Vector.create(elements);
                },

                // Calls the iterator for each element of the vector in turn
                each: function(fn) {
            	var n = this.elements.length;
            	for (var i = 0; i < n; i++) {
            	    fn(this.elements[i], i + 1);
            	}
                },

                // Returns a new vector created by normalizing the receiver
                toUnitVector: function() {
            	var r = this.modulus();
            	if (r === 0) { return this.dup(); }
            	return this.map(function(x) { return x / r; });
                },

                // Returns the angle between the vector and the argument (also a vector)
                angleFrom: function(vector) {
            	var V = vector.elements || vector;
            	var n = this.elements.length;
            	if (n != V.length) { return null; }
            	var dot = 0, mod1 = 0, mod2 = 0;
            	// Work things out in parallel to save time
            	this.each(function(x, i) {
            	    dot += x * V[i - 1];
            	    mod1 += x * x;
            	    mod2 += V[i - 1] * V[i - 1];
            	});
            	mod1 = Math.sqrt(mod1); mod2 = Math.sqrt(mod2);
            	if (mod1 * mod2 === 0) { return null; }
            	var theta = dot / (mod1 * mod2);
            	if (theta < -1) { theta = -1; }
            	if (theta > 1) { theta = 1; }
            	return Math.acos(theta);
                },

                // Returns true iff the vector is parallel to the argument
                isParallelTo: function(vector) {
            	var angle = this.angleFrom(vector);
            	return (angle === null) ? null : (angle <= sylvester.precision);
                },

                // Returns true iff the vector is antiparallel to the argument
                isAntiparallelTo: function(vector) {
            	var angle = this.angleFrom(vector);
            	return (angle === null) ? null : (Math.abs(angle - Math.PI) <= sylvester.precision);
                },

                // Returns true iff the vector is perpendicular to the argument
                isPerpendicularTo: function(vector) {
            	var dot = this.dot(vector);
            	return (dot === null) ? null : (Math.abs(dot) <= sylvester.precision);
                },

                // Returns the result of adding the argument to the vector
                add: function(value) {
            	var V = value.elements || value;

            	if (this.elements.length != V.length) 
            	    return this.map(function(v) { return v + value });
            	else
            	    return this.map(function(x, i) { return x + V[i - 1]; });
                },

                // Returns the result of subtracting the argument from the vector
                subtract: function(v) {
            	if (typeof(v) == 'number')
            	    return this.map(function(k) { return k - v; });

            	var V = v.elements || v;
            	if (this.elements.length != V.length) { return null; }
            	return this.map(function(x, i) { return x - V[i - 1]; });
                },

                // Returns the result of multiplying the elements of the vector by the argument
                multiply: function(k) {
            	return this.map(function(x) { return x * k; });
                },

                elementMultiply: function(v) {
            	return this.map(function(k, i) {
            	    return v.e(i) * k;
            	});
                },

                sum: function() {
            	var sum = 0;
            	this.map(function(x) { sum += x;});
            	return sum;
                },

                chomp: function(n) {
            	var elements = [];

            	for (var i = n; i < this.elements.length; i++) {
            	    elements.push(this.elements[i]);
            	}

            	return Vector.create(elements);
                },

                top: function(n) {
            	var elements = [];

            	for (var i = 0; i < n; i++) {
            	    elements.push(this.elements[i]);
            	}

            	return Vector.create(elements);
                },

                augment: function(elements) {
            	var newElements = this.elements;

            	for (var i = 0; i < elements.length; i++) {
            	    newElements.push(elements[i]);
            	}

            	return Vector.create(newElements);
                },

                x: function(k) { return this.multiply(k); },

                log: function() {
            	return Vector.log(this);
                },

                elementDivide: function(vector) {
            	return this.map(function(v, i) {
            	    return v / vector.e(i);
            	});
                },

                product: function() {
            	var p = 1;

            	this.map(function(v) {
            	    p *= v;
            	});

            	return p;
                },

                // Returns the scalar product of the vector with the argument
                // Both vectors must have equal dimensionality
                dot: function(vector) {
            	var V = vector.elements || vector;
            	var product = 0, n = this.elements.length;	
            	if (n != V.length) { return null; }
            	while (n--) { product += this.elements[n] * V[n]; }
            	return product;
                },

                // Returns the vector product of the vector with the argument
                // Both vectors must have dimensionality 3
                cross: function(vector) {
            	var B = vector.elements || vector;
            	if (this.elements.length != 3 || B.length != 3) { return null; }
            	var A = this.elements;
            	return Vector.create([
            	    (A[1] * B[2]) - (A[2] * B[1]),
            	    (A[2] * B[0]) - (A[0] * B[2]),
            	    (A[0] * B[1]) - (A[1] * B[0])
            	]);
                },

                // Returns the (absolute) largest element of the vector
                max: function() {
            	var m = 0, i = this.elements.length;
            	while (i--) {
            	    if (Math.abs(this.elements[i]) > Math.abs(m)) { m = this.elements[i]; }
            	}
            	return m;
                },


                maxIndex: function() {
            	var m = 0, i = this.elements.length;
            	var maxIndex = -1;

            	while (i--) {
            	    if (Math.abs(this.elements[i]) > Math.abs(m)) { 
            		m = this.elements[i]; 
            		maxIndex = i + 1;
            	    }
            	}

            	return maxIndex;
                },


                // Returns the index of the first match found
                indexOf: function(x) {
            	var index = null, n = this.elements.length;
            	for (var i = 0; i < n; i++) {
            	    if (index === null && this.elements[i] == x) {
            		index = i + 1;
            	    }
            	}
            	return index;
                },

                // Returns a diagonal matrix with the vector's elements as its diagonal elements
                toDiagonalMatrix: function() {
            	return matrix$2.Diagonal(this.elements);
                },

                // Returns the result of rounding the elements of the vector
                round: function() {
            	return this.map(function(x) { return Math.round(x); });
                },

                // Transpose a Vector, return a 1xn Matrix
                transpose: function() {
            	var rows = this.elements.length;
            	var elements = [];

            	for (var i = 0; i < rows; i++) {
            	    elements.push([this.elements[i]]);
            	}
            	return matrix$2.create(elements);
                },

                // Returns a copy of the vector with elements set to the given value if they
                // differ from it by less than Sylvester.precision
                snapTo: function(x) {
            	return this.map(function(y) {
            	    return (Math.abs(y - x) <= sylvester.precision) ? x : y;
            	});
                },

                // Returns the vector's distance from the argument, when considered as a point in space
                distanceFrom: function(obj) {
            	if (obj.anchor || (obj.start && obj.end)) { return obj.distanceFrom(this); }
            	var V = obj.elements || obj;
            	if (V.length != this.elements.length) { return null; }
            	var sum = 0, part;
            	this.each(function(x, i) {
            	    part = x - V[i - 1];
            	    sum += part * part;
            	});
            	return Math.sqrt(sum);
                },

                // Returns true if the vector is point on the given line
                liesOn: function(line) {
            	return line.contains(this);
                },

                // Return true iff the vector is a point in the given plane
                liesIn: function(plane) {
            	return plane.contains(this);
                },

                // Rotates the vector about the given object. The object should be a
                // point if the vector is 2D, and a line if it is 3D. Be careful with line directions!
                rotate: function(t, obj) {
            	var V, R = null, x, y, z;
            	if (t.determinant) { R = t.elements; }
            	switch (this.elements.length) {
            	case 2:
                        V = obj.elements || obj;
                        if (V.length != 2) { return null; }
                        if (!R) { R = matrix$2.Rotation(t).elements; }
                        x = this.elements[0] - V[0];
                        y = this.elements[1] - V[1];
                        return Vector.create([
            		V[0] + R[0][0] * x + R[0][1] * y,
            		V[1] + R[1][0] * x + R[1][1] * y
                        ]);
                        break;
            	case 3:
                        if (!obj.direction) { return null; }
                        var C = obj.pointClosestTo(this).elements;
                        if (!R) { R = matrix$2.Rotation(t, obj.direction).elements; }
                        x = this.elements[0] - C[0];
                        y = this.elements[1] - C[1];
                        z = this.elements[2] - C[2];
                        return Vector.create([
            		C[0] + R[0][0] * x + R[0][1] * y + R[0][2] * z,
            		C[1] + R[1][0] * x + R[1][1] * y + R[1][2] * z,
            		C[2] + R[2][0] * x + R[2][1] * y + R[2][2] * z
                        ]);
                        break;
            	default:
                        return null;
            	}
                },

                // Returns the result of reflecting the point in the given point, line or plane
                reflectionIn: function(obj) {
            	if (obj.anchor) {
            	    // obj is a plane or line
            	    var P = this.elements.slice();
            	    var C = obj.pointClosestTo(P).elements;
            	    return Vector.create([C[0] + (C[0] - P[0]), C[1] + (C[1] - P[1]), C[2] + (C[2] - (P[2] || 0))]);
            	} else {
            	    // obj is a point
            	    var Q = obj.elements || obj;
            	    if (this.elements.length != Q.length) { return null; }
            	    return this.map(function(x, i) { return Q[i - 1] + (Q[i - 1] - x); });
            	}
                },

                // Utility to make sure vectors are 3D. If they are 2D, a zero z-component is added
                to3D: function() {
            	var V = this.dup();
            	switch (V.elements.length) {
            	case 3: break;
            	case 2: V.elements.push(0); break;
            	default: return null;
            	}
            	return V;
                },

                // Returns a string representation of the vector
                inspect: function() {
            	return '[' + this.elements.join(', ') + ']';
                },

                // Set vector's elements from an array
                setElements: function(els) {
            	this.elements = (els.elements || els).slice();
            	return this;
                }
            };

            // Constructor function
            Vector.create = function(elements) {
                var V = new Vector();
                return V.setElements(elements);
            };

            // i, j, k unit vectors
            Vector.i = Vector.create([1, 0, 0]);
            Vector.j = Vector.create([0, 1, 0]);
            Vector.k = Vector.create([0, 0, 1]);

            // Random vector of size n
            Vector.Random = function(n) {
                var elements = [];
                while (n--) { elements.push(Math.random()); }
                return Vector.create(elements);
            };

            Vector.Fill = function(n, v) {
                var elements = [];
                while (n--) { elements.push(v); }
                return Vector.create(elements);
            };

            // Vector filled with zeros
            Vector.Zero = function(n) {
                return Vector.Fill(n, 0);
            };

            Vector.One = function(n) {
                return Vector.Fill(n, 1);
            };

            Vector.log = function(v) {
                return v.map(function(x) {
            	return Math.log(x);
                });
            };

            var vector = Vector;

            // Copyright (c) 2011, Chris Umbel, James Coglan
            // Plane class - depends on Vector. Some methods require Matrix and Line.






            function Plane$1() {}
            Plane$1.prototype = {

              // Returns true iff the plane occupies the same space as the argument
              eql: function(plane) {
                return (this.contains(plane.anchor) && this.isParallelTo(plane));
              },

              // Returns a copy of the plane
              dup: function() {
                return Plane$1.create(this.anchor, this.normal);
              },

              // Returns the result of translating the plane by the given vector
              translate: function(vector$$1) {
                var V = vector$$1.elements || vector$$1;
                return Plane$1.create([
                  this.anchor.elements[0] + V[0],
                  this.anchor.elements[1] + V[1],
                  this.anchor.elements[2] + (V[2] || 0)
                ], this.normal);
              },

              // Returns true iff the plane is parallel to the argument. Will return true
              // if the planes are equal, or if you give a line and it lies in the plane.
              isParallelTo: function(obj) {
                var theta;
                if (obj.normal) {
                  // obj is a plane
                  theta = this.normal.angleFrom(obj.normal);
                  return (Math.abs(theta) <= sylvester.precision || Math.abs(Math.PI - theta) <= sylvester.precision);
                } else if (obj.direction) {
                  // obj is a line
                  return this.normal.isPerpendicularTo(obj.direction);
                }
                return null;
              },

              // Returns true iff the receiver is perpendicular to the argument
              isPerpendicularTo: function(plane) {
                var theta = this.normal.angleFrom(plane.normal);
                return (Math.abs(Math.PI/2 - theta) <= sylvester.precision);
              },

              // Returns the plane's distance from the given object (point, line or plane)
              distanceFrom: function(obj) {
                if (this.intersects(obj) || this.contains(obj)) { return 0; }
                if (obj.anchor) {
                  // obj is a plane or line
                  var A = this.anchor.elements, B = obj.anchor.elements, N = this.normal.elements;
                  return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);
                } else {
                  // obj is a point
                  var P = obj.elements || obj;
                  var A = this.anchor.elements, N = this.normal.elements;
                  return Math.abs((A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2]);
                }
              },

              // Returns true iff the plane contains the given point or line
              contains: function(obj) {
                if (obj.normal) { return null; }
                if (obj.direction) {
                  return (this.contains(obj.anchor) && this.contains(obj.anchor.add(obj.direction)));
                } else {
                  var P = obj.elements || obj;
                  var A = this.anchor.elements, N = this.normal.elements;
                  var diff = Math.abs(N[0]*(A[0] - P[0]) + N[1]*(A[1] - P[1]) + N[2]*(A[2] - (P[2] || 0)));
                  return (diff <= sylvester.precision);
                }
              },

              // Returns true iff the plane has a unique point/line of intersection with the argument
              intersects: function(obj) {
                if (typeof(obj.direction) == 'undefined' && typeof(obj.normal) == 'undefined') { return null; }
                return !this.isParallelTo(obj);
              },

              // Returns the unique intersection with the argument, if one exists. The result
              // will be a vector if a line is supplied, and a line if a plane is supplied.
              intersectionWith: function(obj) {
                if (!this.intersects(obj)) { return null; }
                if (obj.direction) {
                  // obj is a line
                  var A = obj.anchor.elements, D = obj.direction.elements,
                      P = this.anchor.elements, N = this.normal.elements;
                  var multiplier = (N[0]*(P[0]-A[0]) + N[1]*(P[1]-A[1]) + N[2]*(P[2]-A[2])) / (N[0]*D[0] + N[1]*D[1] + N[2]*D[2]);
                  return vector.create([A[0] + D[0]*multiplier, A[1] + D[1]*multiplier, A[2] + D[2]*multiplier]);
                } else if (obj.normal) {
                  // obj is a plane
                  var direction = this.normal.cross(obj.normal).toUnitVector();
                  // To find an anchor point, we find one co-ordinate that has a value
                  // of zero somewhere on the intersection, and remember which one we picked
                  var N = this.normal.elements, A = this.anchor.elements,
                      O = obj.normal.elements, B = obj.anchor.elements;
                  var solver = matrix$2.Zero(2,2), i = 0;
                  while (solver.isSingular()) {
                    i++;
                    solver = matrix$2.create([
                      [ N[i%3], N[(i+1)%3] ],
                      [ O[i%3], O[(i+1)%3]  ]
                    ]);
                  }
                  // Then we solve the simultaneous equations in the remaining dimensions
                  var inverse = solver.inverse().elements;
                  var x = N[0]*A[0] + N[1]*A[1] + N[2]*A[2];
                  var y = O[0]*B[0] + O[1]*B[1] + O[2]*B[2];
                  var intersection = [
                    inverse[0][0] * x + inverse[0][1] * y,
                    inverse[1][0] * x + inverse[1][1] * y
                  ];
                  var anchor = [];
                  for (var j = 1; j <= 3; j++) {
                    // This formula picks the right element from intersection by
                    // cycling depending on which element we set to zero above
                    anchor.push((i == j) ? 0 : intersection[(j + (5 - i)%3)%3]);
                  }
                  return line.create(anchor, direction);
                }
              },

              // Returns the point in the plane closest to the given point
              pointClosestTo: function(point) {
                var P = point.elements || point;
                var A = this.anchor.elements, N = this.normal.elements;
                var dot = (A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2];
                return vector.create([P[0] + N[0] * dot, P[1] + N[1] * dot, (P[2] || 0) + N[2] * dot]);
              },

              // Returns a copy of the plane, rotated by t radians about the given line
              // See notes on Line#rotate.
              rotate: function(t, line$$1) {
                var R = t.determinant ? t.elements : matrix$2.Rotation(t, line$$1.direction).elements;
                var C = line$$1.pointClosestTo(this.anchor).elements;
                var A = this.anchor.elements, N = this.normal.elements;
                var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];
                var x = A1 - C1, y = A2 - C2, z = A3 - C3;
                return Plane$1.create([
                  C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,
                  C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,
                  C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z
                ], [
                  R[0][0] * N[0] + R[0][1] * N[1] + R[0][2] * N[2],
                  R[1][0] * N[0] + R[1][1] * N[1] + R[1][2] * N[2],
                  R[2][0] * N[0] + R[2][1] * N[1] + R[2][2] * N[2]
                ]);
              },

              // Returns the reflection of the plane in the given point, line or plane.
              reflectionIn: function(obj) {
                if (obj.normal) {
                  // obj is a plane
                  var A = this.anchor.elements, N = this.normal.elements;
                  var A1 = A[0], A2 = A[1], A3 = A[2], N1 = N[0], N2 = N[1], N3 = N[2];
                  var newA = this.anchor.reflectionIn(obj).elements;
                  // Add the plane's normal to its anchor, then mirror that in the other plane
                  var AN1 = A1 + N1, AN2 = A2 + N2, AN3 = A3 + N3;
                  var Q = obj.pointClosestTo([AN1, AN2, AN3]).elements;
                  var newN = [Q[0] + (Q[0] - AN1) - newA[0], Q[1] + (Q[1] - AN2) - newA[1], Q[2] + (Q[2] - AN3) - newA[2]];
                  return Plane$1.create(newA, newN);
                } else if (obj.direction) {
                  // obj is a line
                  return this.rotate(Math.PI, obj);
                } else {
                  // obj is a point
                  var P = obj.elements || obj;
                  return Plane$1.create(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.normal);
                }
              },

              // Sets the anchor point and normal to the plane. If three arguments are specified,
              // the normal is calculated by assuming the three points should lie in the same plane.
              // If only two are sepcified, the second is taken to be the normal. Normal vector is
              // normalised before storage.
              setVectors: function(anchor, v1, v2) {
                anchor = vector.create(anchor);
                anchor = anchor.to3D(); if (anchor === null) { return null; }
                v1 = vector.create(v1);
                v1 = v1.to3D(); if (v1 === null) { return null; }
                if (typeof(v2) == 'undefined') {
                  v2 = null;
                } else {
                  v2 = vector.create(v2);
                  v2 = v2.to3D(); if (v2 === null) { return null; }
                }
                var A1 = anchor.elements[0], A2 = anchor.elements[1], A3 = anchor.elements[2];
                var v11 = v1.elements[0], v12 = v1.elements[1], v13 = v1.elements[2];
                var normal, mod;
                if (v2 !== null) {
                  var v21 = v2.elements[0], v22 = v2.elements[1], v23 = v2.elements[2];
                  normal = vector.create([
                    (v12 - A2) * (v23 - A3) - (v13 - A3) * (v22 - A2),
                    (v13 - A3) * (v21 - A1) - (v11 - A1) * (v23 - A3),
                    (v11 - A1) * (v22 - A2) - (v12 - A2) * (v21 - A1)
                  ]);
                  mod = normal.modulus();
                  if (mod === 0) { return null; }
                  normal = vector.create([normal.elements[0] / mod, normal.elements[1] / mod, normal.elements[2] / mod]);
                } else {
                  mod = Math.sqrt(v11*v11 + v12*v12 + v13*v13);
                  if (mod === 0) { return null; }
                  normal = vector.create([v1.elements[0] / mod, v1.elements[1] / mod, v1.elements[2] / mod]);
                }
                this.anchor = anchor;
                this.normal = normal;
                return this;
              }
            };

            // Constructor function
            Plane$1.create = function(anchor, v1, v2) {
              var P = new Plane$1();
              return P.setVectors(anchor, v1, v2);
            };

            // X-Y-Z planes
            Plane$1.XY = Plane$1.create(vector.Zero(3), vector.k);
            Plane$1.YZ = Plane$1.create(vector.Zero(3), vector.i);
            Plane$1.ZX = Plane$1.create(vector.Zero(3), vector.j);
            Plane$1.YX = Plane$1.XY; Plane$1.ZY = Plane$1.YZ; Plane$1.XZ = Plane$1.ZX;

            // Returns the plane containing the given points (can be arrays as
            // well as vectors). If the points are not coplanar, returns null.
            Plane$1.fromPoints = function(points) {
              var np = points.length, list = [], i, P, n, N, A, B, C, D, theta, prevN, totalN = vector.Zero(3);
              for (i = 0; i < np; i++) {
                P = vector.create(points[i]).to3D();
                if (P === null) { return null; }
                list.push(P);
                n = list.length;
                if (n > 2) {
                  // Compute plane normal for the latest three points
                  A = list[n-1].elements; B = list[n-2].elements; C = list[n-3].elements;
                  N = vector.create([
                    (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),
                    (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),
                    (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])
                  ]).toUnitVector();
                  if (n > 3) {
                    // If the latest normal is not (anti)parallel to the previous one, we've strayed off the plane.
                    // This might be a slightly long-winded way of doing things, but we need the sum of all the normals
                    // to find which way the plane normal should point so that the points form an anticlockwise list.
                    theta = N.angleFrom(prevN);
                    if (theta !== null) {
                      if (!(Math.abs(theta) <= sylvester.precision || Math.abs(theta - Math.PI) <= sylvester.precision)) { return null; }
                    }
                  }
                  totalN = totalN.add(N);
                  prevN = N;
                }
              }
              // We need to add in the normals at the start and end points, which the above misses out
              A = list[1].elements; B = list[0].elements; C = list[n-1].elements; D = list[n-2].elements;
              totalN = totalN.add(vector.create([
                (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),
                (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),
                (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])
              ]).toUnitVector()).add(vector.create([
                (B[1] - C[1]) * (D[2] - C[2]) - (B[2] - C[2]) * (D[1] - C[1]),
                (B[2] - C[2]) * (D[0] - C[0]) - (B[0] - C[0]) * (D[2] - C[2]),
                (B[0] - C[0]) * (D[1] - C[1]) - (B[1] - C[1]) * (D[0] - C[0])
              ]).toUnitVector());
              return Plane$1.create(list[0], totalN);
            };

            var plane = Plane$1;

            // Copyright (c) 2011, Chris Umbel, James Coglan





            // Line class - depends on Vector, and some methods require Matrix and Plane.

            function Line() {}
            Line.prototype = {

              // Returns true if the argument occupies the same space as the line
              eql: function(line) {
                return (this.isParallelTo(line) && this.contains(line.anchor));
              },

              // Returns a copy of the line
              dup: function() {
                return Line.create(this.anchor, this.direction);
              },

              // Returns the result of translating the line by the given vector/array
              translate: function(vector$$1) {
                var V = vector$$1.elements || vector$$1;
                return Line.create([
                  this.anchor.elements[0] + V[0],
                  this.anchor.elements[1] + V[1],
                  this.anchor.elements[2] + (V[2] || 0)
                ], this.direction);
              },

              // Returns true if the line is parallel to the argument. Here, 'parallel to'
              // means that the argument's direction is either parallel or antiparallel to
              // the line's own direction. A line is parallel to a plane if the two do not
              // have a unique intersection.
              isParallelTo: function(obj) {
                if (obj.normal || (obj.start && obj.end)) { return obj.isParallelTo(this); }
                var theta = this.direction.angleFrom(obj.direction);
                return (Math.abs(theta) <= sylvester.precision || Math.abs(theta - Math.PI) <= sylvester.precision);
              },

              // Returns the line's perpendicular distance from the argument,
              // which can be a point, a line or a plane
              distanceFrom: function(obj) {
                if (obj.normal || (obj.start && obj.end)) { return obj.distanceFrom(this); }
                if (obj.direction) {
                  // obj is a line
                  if (this.isParallelTo(obj)) { return this.distanceFrom(obj.anchor); }
                  var N = this.direction.cross(obj.direction).toUnitVector().elements;
                  var A = this.anchor.elements, B = obj.anchor.elements;
                  return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);
                } else {
                  // obj is a point
                  var P = obj.elements || obj;
                  var A = this.anchor.elements, D = this.direction.elements;
                  var PA1 = P[0] - A[0], PA2 = P[1] - A[1], PA3 = (P[2] || 0) - A[2];
                  var modPA = Math.sqrt(PA1*PA1 + PA2*PA2 + PA3*PA3);
                  if (modPA === 0) return 0;
                  // Assumes direction vector is normalized
                  var cosTheta = (PA1 * D[0] + PA2 * D[1] + PA3 * D[2]) / modPA;
                  var sin2 = 1 - cosTheta*cosTheta;
                  return Math.abs(modPA * Math.sqrt(sin2 < 0 ? 0 : sin2));
                }
              },

              // Returns true iff the argument is a point on the line, or if the argument
              // is a line segment lying within the receiver
              contains: function(obj) {
                if (obj.start && obj.end) { return this.contains(obj.start) && this.contains(obj.end); }
                var dist = this.distanceFrom(obj);
                return (dist !== null && dist <= sylvester.precision);
              },

              // Returns the distance from the anchor of the given point. Negative values are
              // returned for points that are in the opposite direction to the line's direction from
              // the line's anchor point.
              positionOf: function(point) {
                if (!this.contains(point)) { return null; }
                var P = point.elements || point;
                var A = this.anchor.elements, D = this.direction.elements;
                return (P[0] - A[0]) * D[0] + (P[1] - A[1]) * D[1] + ((P[2] || 0) - A[2]) * D[2];
              },

              // Returns true iff the line lies in the given plane
              liesIn: function(plane$$1) {
                return plane$$1.contains(this);
              },

              // Returns true iff the line has a unique point of intersection with the argument
              intersects: function(obj) {
                if (obj.normal) { return obj.intersects(this); }
                return (!this.isParallelTo(obj) && this.distanceFrom(obj) <= sylvester.precision);
              },

              // Returns the unique intersection point with the argument, if one exists
              intersectionWith: function(obj) {
                if (obj.normal || (obj.start && obj.end)) { return obj.intersectionWith(this); }
                if (!this.intersects(obj)) { return null; }
                var P = this.anchor.elements, X = this.direction.elements,
                    Q = obj.anchor.elements, Y = obj.direction.elements;
                var X1 = X[0], X2 = X[1], X3 = X[2], Y1 = Y[0], Y2 = Y[1], Y3 = Y[2];
                var PsubQ1 = P[0] - Q[0], PsubQ2 = P[1] - Q[1], PsubQ3 = P[2] - Q[2];
                var XdotQsubP = - X1*PsubQ1 - X2*PsubQ2 - X3*PsubQ3;
                var YdotPsubQ = Y1*PsubQ1 + Y2*PsubQ2 + Y3*PsubQ3;
                var XdotX = X1*X1 + X2*X2 + X3*X3;
                var YdotY = Y1*Y1 + Y2*Y2 + Y3*Y3;
                var XdotY = X1*Y1 + X2*Y2 + X3*Y3;
                var k = (XdotQsubP * YdotY / XdotX + XdotY * YdotPsubQ) / (YdotY - XdotY * XdotY);
                return vector.create([P[0] + k*X1, P[1] + k*X2, P[2] + k*X3]);
              },

              // Returns the point on the line that is closest to the given point or line/line segment
              pointClosestTo: function(obj) {
                if (obj.start && obj.end) {
                  // obj is a line segment
                  var P = obj.pointClosestTo(this);
                  return (P === null) ? null : this.pointClosestTo(P);
                } else if (obj.direction) {
                  // obj is a line
                  if (this.intersects(obj)) { return this.intersectionWith(obj); }
                  if (this.isParallelTo(obj)) { return null; }
                  var D = this.direction.elements, E = obj.direction.elements;
                  var D1 = D[0], D2 = D[1], D3 = D[2], E1 = E[0], E2 = E[1], E3 = E[2];
                  // Create plane containing obj and the shared normal and intersect this with it
                  // Thank you: http://www.cgafaq.info/wiki/Line-line_distance
                  var x = (D3 * E1 - D1 * E3), y = (D1 * E2 - D2 * E1), z = (D2 * E3 - D3 * E2);
                  var N = [x * E3 - y * E2, y * E1 - z * E3, z * E2 - x * E1];
                  var P = plane.create(obj.anchor, N);
                  return P.intersectionWith(this);
                } else {
                  // obj is a point
                  var P = obj.elements || obj;
                  if (this.contains(P)) { return vector.create(P); }
                  var A = this.anchor.elements, D = this.direction.elements;
                  var D1 = D[0], D2 = D[1], D3 = D[2], A1 = A[0], A2 = A[1], A3 = A[2];
                  var x = D1 * (P[1]-A2) - D2 * (P[0]-A1), y = D2 * ((P[2] || 0) - A3) - D3 * (P[1]-A2),
                      z = D3 * (P[0]-A1) - D1 * ((P[2] || 0) - A3);
                  var V = vector.create([D2 * x - D3 * z, D3 * y - D1 * x, D1 * z - D2 * y]);
                  var k = this.distanceFrom(P) / V.modulus();
                  return vector.create([
                    P[0] + V.elements[0] * k,
                    P[1] + V.elements[1] * k,
                    (P[2] || 0) + V.elements[2] * k
                  ]);
                }
              },

              // Returns a copy of the line rotated by t radians about the given line. Works by
              // finding the argument's closest point to this line's anchor point (call this C) and
              // rotating the anchor about C. Also rotates the line's direction about the argument's.
              // Be careful with this - the rotation axis' direction affects the outcome!
              rotate: function(t, line) {
                // If we're working in 2D
                if (typeof(line.direction) == 'undefined') { line = Line.create(line.to3D(), vector.k); }
                var R = matrix$2.Rotation(t, line.direction).elements;
                var C = line.pointClosestTo(this.anchor).elements;
                var A = this.anchor.elements, D = this.direction.elements;
                var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];
                var x = A1 - C1, y = A2 - C2, z = A3 - C3;
                return Line.create([
                  C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,
                  C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,
                  C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z
                ], [
                  R[0][0] * D[0] + R[0][1] * D[1] + R[0][2] * D[2],
                  R[1][0] * D[0] + R[1][1] * D[1] + R[1][2] * D[2],
                  R[2][0] * D[0] + R[2][1] * D[1] + R[2][2] * D[2]
                ]);
              },

              // Returns a copy of the line with its direction vector reversed.
              // Useful when using lines for rotations.
              reverse: function() {
                return Line.create(this.anchor, this.direction.x(-1));
              },

              // Returns the line's reflection in the given point or line
              reflectionIn: function(obj) {
                if (obj.normal) {
                  // obj is a plane
                  var A = this.anchor.elements, D = this.direction.elements;
                  var A1 = A[0], A2 = A[1], A3 = A[2], D1 = D[0], D2 = D[1], D3 = D[2];
                  var newA = this.anchor.reflectionIn(obj).elements;
                  // Add the line's direction vector to its anchor, then mirror that in the plane
                  var AD1 = A1 + D1, AD2 = A2 + D2, AD3 = A3 + D3;
                  var Q = obj.pointClosestTo([AD1, AD2, AD3]).elements;
                  var newD = [Q[0] + (Q[0] - AD1) - newA[0], Q[1] + (Q[1] - AD2) - newA[1], Q[2] + (Q[2] - AD3) - newA[2]];
                  return Line.create(newA, newD);
                } else if (obj.direction) {
                  // obj is a line - reflection obtained by rotating PI radians about obj
                  return this.rotate(Math.PI, obj);
                } else {
                  // obj is a point - just reflect the line's anchor in it
                  var P = obj.elements || obj;
                  return Line.create(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.direction);
                }
              },

              // Set the line's anchor point and direction.
              setVectors: function(anchor, direction) {
                // Need to do this so that line's properties are not
                // references to the arguments passed in
                anchor = vector.create(anchor);
                direction = vector.create(direction);
                if (anchor.elements.length == 2) {anchor.elements.push(0); }
                if (direction.elements.length == 2) { direction.elements.push(0); }
                if (anchor.elements.length > 3 || direction.elements.length > 3) { return null; }
                var mod = direction.modulus();
                if (mod === 0) { return null; }
                this.anchor = anchor;
                this.direction = vector.create([
                  direction.elements[0] / mod,
                  direction.elements[1] / mod,
                  direction.elements[2] / mod
                ]);
                return this;
              }
            };

            // Constructor function
            Line.create = function(anchor, direction) {
              var L = new Line();
              return L.setVectors(anchor, direction);
            };

            // Axes
            Line.X = Line.create(vector.Zero(3), vector.i);
            Line.Y = Line.create(vector.Zero(3), vector.j);
            Line.Z = Line.create(vector.Zero(3), vector.k);

            var line = Line;

            // Copyright (c) 2011, Chris Umbel, James Coglan
            // Line.Segment class - depends on Line and its dependencies.




            line.Segment = function() {};
            line.Segment.prototype = {

              // Returns true iff the line segment is equal to the argument
              eql: function(segment) {
                return (this.start.eql(segment.start) && this.end.eql(segment.end)) ||
                    (this.start.eql(segment.end) && this.end.eql(segment.start));
              },

              // Returns a copy of the line segment
              dup: function() {
                return line.Segment.create(this.start, this.end);
              },

              // Returns the length of the line segment
              length: function() {
                var A = this.start.elements, B = this.end.elements;
                var C1 = B[0] - A[0], C2 = B[1] - A[1], C3 = B[2] - A[2];
                return Math.sqrt(C1*C1 + C2*C2 + C3*C3);
              },

              // Returns the line segment as a vector equal to its
              // end point relative to its endpoint
              toVector: function() {
                var A = this.start.elements, B = this.end.elements;
                return vector.create([B[0] - A[0], B[1] - A[1], B[2] - A[2]]);
              },

              // Returns the segment's midpoint as a vector
              midpoint: function() {
                var A = this.start.elements, B = this.end.elements;
                return vector.create([(B[0] + A[0])/2, (B[1] + A[1])/2, (B[2] + A[2])/2]);
              },

              // Returns the plane that bisects the segment
              bisectingPlane: function() {
                return Plane.create(this.midpoint(), this.toVector());
              },

              // Returns the result of translating the line by the given vector/array
              translate: function(vector$$1) {
                var V = vector$$1.elements || vector$$1;
                var S = this.start.elements, E = this.end.elements;
                return line.Segment.create(
                  [S[0] + V[0], S[1] + V[1], S[2] + (V[2] || 0)],
                  [E[0] + V[0], E[1] + V[1], E[2] + (V[2] || 0)]
                );
              },

              // Returns true iff the line segment is parallel to the argument. It simply forwards
              // the method call onto its line property.
              isParallelTo: function(obj) {
                return this.line.isParallelTo(obj);
              },

              // Returns the distance between the argument and the line segment's closest point to the argument
              distanceFrom: function(obj) {
                var P = this.pointClosestTo(obj);
                return (P === null) ? null : P.distanceFrom(obj);
              },

              // Returns true iff the given point lies on the segment
              contains: function(obj) {
                if (obj.start && obj.end) { return this.contains(obj.start) && this.contains(obj.end); }
                var P = (obj.elements || obj).slice();
                if (P.length == 2) { P.push(0); }
                if (this.start.eql(P)) { return true; }
                var S = this.start.elements;
                var V = vector.create([S[0] - P[0], S[1] - P[1], S[2] - (P[2] || 0)]);
                var vect = this.toVector();
                return V.isAntiparallelTo(vect) && V.modulus() <= vect.modulus();
              },

              // Returns true iff the line segment intersects the argument
              intersects: function(obj) {
                return (this.intersectionWith(obj) !== null);
              },

              // Returns the unique point of intersection with the argument
              intersectionWith: function(obj) {
                if (!this.line.intersects(obj)) { return null; }
                var P = this.line.intersectionWith(obj);
                return (this.contains(P) ? P : null);
              },

              // Returns the point on the line segment closest to the given object
              pointClosestTo: function(obj) {
                if (obj.normal) {
                  // obj is a plane
                  var V = this.line.intersectionWith(obj);
                  if (V === null) { return null; }
                  return this.pointClosestTo(V);
                } else {
                  // obj is a line (segment) or point
                  var P = this.line.pointClosestTo(obj);
                  if (P === null) { return null; }
                  if (this.contains(P)) { return P; }
                  return (this.line.positionOf(P) < 0 ? this.start : this.end).dup();
                }
              },

              // Set the start and end-points of the segment
              setPoints: function(startPoint, endPoint) {
                startPoint = vector.create(startPoint).to3D();
                endPoint = vector.create(endPoint).to3D();
                if (startPoint === null || endPoint === null) { return null; }
                this.line = line.create(startPoint, endPoint.subtract(startPoint));
                this.start = startPoint;
                this.end = endPoint;
                return this;
              }
            };

            // Constructor function
            line.Segment.create = function(v1, v2) {
              var S = new line.Segment();
              return S.setPoints(v1, v2);
            };

            var line_segment = line.Segment;

            var nodeSylvester = createCommonjsModule(function (module, exports) {
            // Copyright (c) 2011, Chris Umbel

            exports.Vector = vector;
            commonjsGlobal.$V = exports.Vector.create;
            exports.Matrix = matrix$2;
            commonjsGlobal.$M = exports.Matrix.create;
            exports.Line = line;
            commonjsGlobal.$L = exports.Line.create;
            exports.Plane = plane;
            commonjsGlobal.$P = exports.Plane.create;
            exports.Line.Segment = line_segment;
            exports.Sylvester = sylvester;
            });
            var nodeSylvester_1 = nodeSylvester.Vector;
            var nodeSylvester_2 = nodeSylvester.Matrix;
            var nodeSylvester_3 = nodeSylvester.Line;
            var nodeSylvester_4 = nodeSylvester.Plane;
            var nodeSylvester_5 = nodeSylvester.Sylvester;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            var Matrix$c = nodeSylvester.Matrix,
            Vector$1 = nodeSylvester.Vector;

            function sigmoid$1(z) {
                return 1 / (1 + Math.exp(0 - z));
            }

            function hypothesis(theta, Observations) {
                return Observations.x(theta).map(sigmoid$1);
            }

            function cost(theta, Examples, classifications) {
                var hypothesisResult = hypothesis(theta, Examples);

                var ones = Vector$1.One(Examples.rows());
                var cost_1 = Vector$1.Zero(Examples.rows()).subtract(classifications).elementMultiply(hypothesisResult.log());
                var cost_0 = ones.subtract(classifications).elementMultiply(ones.subtract(hypothesisResult).log());

                return (1 / Examples.rows()) * cost_1.subtract(cost_0).sum();
            }

            function descendGradient(theta, Examples, classifications) {
                var maxIt = 500 * Examples.rows();
                var last;
                var current;
                var learningRate = 3;
                var learningRateFound = false;

                Examples = Matrix$c.One(Examples.rows(), 1).augment(Examples);
                theta = theta.augment([0]);

                while(!learningRateFound) {
                    var i = 0;
                    last = null;

                    while(true) {
                        var hypothesisResult = hypothesis(theta, Examples);
                        theta = theta.subtract(Examples.transpose().x(
                        hypothesisResult.subtract(classifications)).x(1 / Examples.rows()).x(learningRate));
                        current = cost(theta, Examples, classifications);

                        i++;

                        if(last) {
                        if(current < last)
                            learningRateFound = true;
                        else
                            break;

                        if(last - current < 0.0001)
                            break;
                        }

                        if(i >= maxIt) {
                            throw 'unable to find minimum';
                        }

                        last = current;
                    }

                    learningRate /= 3;
                }

                return theta.chomp(1);
            }

            var LogisticRegressionClassifier = function() {
                classifier$1.call(this);
                this.examples = {};
                this.features = [];
                this.featurePositions = {};
                this.maxFeaturePosition = 0;
                this.classifications = [];
                this.exampleCount = 0;
            };

            util$2.inherits(LogisticRegressionClassifier, classifier$1);

            function createClassifications() {
                var classifications = [];

                for(var i = 0; i < this.exampleCount; i++) {
                    var classification = [];

                    for(var _ in this.examples) {
                        classification.push(0);
                    }

                   classifications.push(classification);
                }

                return classifications;
            }

            function computeThetas(Examples, Classifications) {
                this.theta = [];

                // each class will have it's own theta.
                var zero = function() { return 0; };
                for(var i = 1; i <= this.classifications.length; i++) {
                    var theta = Examples.row(1).map(zero);
                    this.theta.push(descendGradient(theta, Examples, Classifications.column(i)));
                }
            }

            function train$3() {
                var examples = [];
                var classifications = this.createClassifications();
                var d = 0, c = 0;

                for(var classification in this.examples) {
                    for(var i = 0; i < this.examples[classification].length; i++) {
                        var doc = this.examples[classification][i];
                        var example = doc;

                        examples.push(example);
                        classifications[d][c] = 1;
                        d++;
                    }

                    c++;
                }

                this.computeThetas($M(examples), $M(classifications));
            }

            function addExample$2(data, classification) {
                if(!this.examples[classification]) {
            	this.examples[classification] = [];
            	this.classifications.push(classification);
                }

                this.examples[classification].push(data);
                this.exampleCount++;
            }

            function getClassifications$2(observation) {
                observation = $V(observation);
                var classifications = [];

                for(var i = 0; i < this.theta.length; i++) {
                    classifications.push({label: this.classifications[i], value: sigmoid$1(observation.dot(this.theta[i])) });
                }

                return classifications.sort(function(x, y) {
                    return y.value - x.value;
                });
            }

            function restore$3(classifier) {
                classifier = classifier$1.restore(classifier);
                classifier.__proto__ = LogisticRegressionClassifier.prototype;

                return classifier;
            }

            LogisticRegressionClassifier.prototype.addExample = addExample$2;
            LogisticRegressionClassifier.prototype.restore = restore$3;
            LogisticRegressionClassifier.prototype.train = train$3;
            LogisticRegressionClassifier.prototype.createClassifications = createClassifications;
            LogisticRegressionClassifier.prototype.computeThetas = computeThetas;
            LogisticRegressionClassifier.prototype.getClassifications = getClassifications$2;

            LogisticRegressionClassifier.restore = restore$3;

            var logistic_regression_classifier = LogisticRegressionClassifier;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var Matrix$d = nodeSylvester.Matrix,
            Vector$2 = nodeSylvester.Vector;

            function KMeans(Observations) {
                if(!Observations.elements)
                Observations = $M(Observations);

                this.Observations = Observations;
            }

            // create an initial centroid matrix with initial values between
            // 0 and the max of feature data X.
            function createCentroids(k) {
                var Centroid = [];
                var maxes = this.Observations.maxColumns();
                //console.log(maxes);

                for(var i = 1; i <= k; i++) {
                    var centroid = [];
                    for(var j = 1; j <= this.Observations.cols(); j++) {
                        centroid.push(Math.random() * maxes.e(j));
                    }

                    Centroid.push(centroid);
                }

                //console.log(centroid)

                return $M(Centroid);
            }

            // get the euclidian distance between the feature data X and
            // a given centroid matrix C.
            function distanceFrom(Centroids) {
                var distances = [];

                for(var i = 1; i <= this.Observations.rows(); i++) {
                    var distance = [];

                    for(var j = 1; j <= Centroids.rows(); j++) {
                        distance.push(this.Observations.row(i).distanceFrom(Centroids.row(j)));
                    }

                    distances.push(distance);
                }

                return $M(distances);
            }

            // categorize the feature data X into k clusters. return a vector
            // containing the results.
            function cluster(k) {
                var Centroids = this.createCentroids(k);
                var LastDistances = Matrix$d.Zero(this.Observations.rows(), this.Observations.cols());
                var Distances = this.distanceFrom(Centroids);
                var Groups;

                while(!(LastDistances.eql(Distances))) {
                Groups = Distances.minColumnIndexes();
                LastDistances = Distances;

                var newCentroids = [];

                for(var i = 1; i <= Centroids.rows(); i++) {
                    var centroid = [];

                    for(var j = 1; j <= Centroids.cols(); j++) {
                    var sum = 0;
                    var count = 0;

                    for(var l = 1; l <= this.Observations.rows(); l++) {
                        if(Groups.e(l) == i) {
                        count++;
                        sum += this.Observations.e(l, j);
                        }
                    }

                    centroid.push(sum / count);
                    }

                    newCentroids.push(centroid);
                }

                Centroids = $M(newCentroids);
                Distances = this.distanceFrom(Centroids);
                }

                return Groups;
            }

            KMeans.prototype.createCentroids = createCentroids;
            KMeans.prototype.distanceFrom = distanceFrom;
            KMeans.prototype.cluster = cluster;

            var kmeans$1 = KMeans;

            var BayesClassifier$1 = bayes_classifier;
            var LogisticRegressionClassifier$1 = logistic_regression_classifier;
            var KMeans$1 = kmeans$1;

            var apparatus = {
            	BayesClassifier: BayesClassifier$1,
            	LogisticRegressionClassifier: LogisticRegressionClassifier$1,
            	KMeans: KMeans$1
            };

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var ApparatusBayesClassifier = apparatus.BayesClassifier;

            var BayesClassifier$2 = function(stemmer, smoothing) {
                var abc = new ApparatusBayesClassifier();
                if (smoothing && isFinite(smoothing)) {
                    abc = new ApparatusBayesClassifier(smoothing);
                }
                classifier.call(this, abc, stemmer);
            };

            util$2.inherits(BayesClassifier$2, classifier);

            function restore$4(classifier$$1, stemmer) {
                classifier$$1 = classifier.restore(classifier$$1, stemmer);
                classifier$$1.__proto__ = BayesClassifier$2.prototype;
                classifier$$1.classifier = ApparatusBayesClassifier.restore(classifier$$1.classifier);

                return classifier$$1;
            }

            function load$1(filename, stemmer, callback) {
                classifier.load(filename, function(err, classifier$$1) {
                    if (err) {
                        return callback(err);
                    }
                    else {
                        callback(err, restore$4(classifier$$1, stemmer));
                    }
                });
            }

            BayesClassifier$2.restore = restore$4;
            BayesClassifier$2.load = load$1;

            var bayes_classifier$1 = BayesClassifier$2;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var ApparatusLogisticRegressionClassifier = apparatus.LogisticRegressionClassifier;

            var LogisticRegressionClassifier$2 = function(stemmer) {
                classifier.call(this, new ApparatusLogisticRegressionClassifier(), stemmer);
            };

            util$2.inherits(LogisticRegressionClassifier$2, classifier);

            function restore$5(classifier$$1, stemmer) {
                classifier$$1 = classifier.restore(classifier$$1, stemmer);
                classifier$$1.__proto__ = LogisticRegressionClassifier$2.prototype;
                classifier$$1.classifier = ApparatusLogisticRegressionClassifier.restore(classifier$$1.classifier);

                return classifier$$1;
            }

            function load$2(filename, stemmer, callback) {
                classifier.load(filename, function(err, classifier$$1) {
                    if (err) {
                        callback(err);
                    }
                    else {
                        callback(err, restore$5(classifier$$1, stemmer));
                    }
                });
            }

            function train$4() {
                // we need to reset the traning state because logistic regression
                // needs its matricies to have their widths synced, etc.
                this.lastAdded = 0;
                this.classifier = new ApparatusLogisticRegressionClassifier();
                classifier.prototype.train.call(this);
            }

            LogisticRegressionClassifier$2.prototype.train = train$4;
            LogisticRegressionClassifier$2.restore = restore$5;
            LogisticRegressionClassifier$2.load = load$2;

            var logistic_regression_classifier$1 = LogisticRegressionClassifier$2;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var TenseInflector = function () {
            };

            TenseInflector.prototype.addSingular = function(pattern, replacement) {
                this.customSingularForms.push([pattern, replacement]);    
            };

            TenseInflector.prototype.addPlural = function(pattern, replacement) {
                this.customPluralForms.push([pattern, replacement]);
            };

            TenseInflector.prototype.ize = function (token, formSet, customForms) {
                var restoreCase = this.restoreCase(token);
                return restoreCase(this.izeRegExps(token, customForms) || this.izeAbiguous(token) ||
                    this.izeRegulars(token, formSet) || this.izeRegExps(token, formSet.regularForms) ||
                    token);
            };

            TenseInflector.prototype.izeAbiguous = function (token) {
                if(this.ambiguous.indexOf(token.toLowerCase()) > -1)
                    return token.toLowerCase();

                return false;
            };

            TenseInflector.prototype.pluralize = function (token) {
                return this.ize(token, this.pluralForms, this.customPluralForms);
            };

            TenseInflector.prototype.singularize = function(token) {
                return this.ize(token, this.singularForms, this.customSingularForms);
            };    

            var uppercaseify = function(token) {
                return token.toUpperCase();
            };
            var capitalize = function(token) {
                return token[0].toUpperCase() + token.slice(1);
            };
            var lowercaseify = function(token) {
                return token.toLowerCase();
            };

            TenseInflector.prototype.restoreCase = function(token) {
                if (token[0] === token[0].toUpperCase()) {
                    if (token[1] && token[1] === token[1].toLowerCase()) {
                        return capitalize;
                    } else {
                        return uppercaseify;
                    }
                } else {
                    return lowercaseify;
                }
            };

            TenseInflector.prototype.izeRegulars = function(token, formSet) {
                token = token.toLowerCase();
                if(formSet.irregularForms.hasOwnProperty(token) && formSet.irregularForms[token])
                    return formSet.irregularForms[token];

                return false;
            };

            TenseInflector.prototype.addForm = function(singularTable, pluralTable, singular, plural) {
                singular = singular.toLowerCase();
                plural = plural.toLowerCase();
                pluralTable[singular] = plural;
                singularTable[plural] = singular;
            };

            TenseInflector.prototype.addIrregular = function(singular, plural) {
                this.addForm(this.singularForms.irregularForms, this.pluralForms.irregularForms, singular, plural);
            };

            TenseInflector.prototype.izeRegExps = function(token, forms) {
                    var i, form;
                    for(i = 0; i < forms.length; i++) {
                        form = forms[i];
                        
                        if(token.match(form[0]))
                            return token.replace(form[0], form[1]);
                    }
                    
                    return false;
                };

            var singular_plural_inflector = TenseInflector;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var FormSet = function() {
                this.regularForms = [];
                this.irregularForms = {};
            };

            var form_set = FormSet;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            function attach() {
                var inflector = this;

                String.prototype.singularizeNoun = function() {
                    return inflector.singularize(this);
                };

                String.prototype.pluralizeNoun = function() {
                    return inflector.pluralize(this);
                };
            }

            var NounInflector = function() {
                this.ambiguous = [
                    'bison', 'bream', 'carp', 'chassis', 'cod', 'corps', 'debris', 'deer',
                    'diabetes', 'equipment', 'elk', 'fish', 'flounder', 'gallows', 'graffiti',
                    'headquarters', 'herpes', 'highjinks', 'homework', 'information',
                    'mackerel', 'mews', 'money', 'news', 'rice', 'rabies', 'salmon', 'series',
                    'sheep', 'shrimp', 'species', 'swine', 'trout', 'tuna', 'whiting', 'wildebeest'
                ];

                this.customPluralForms = [];
                this.customSingularForms = [];
                this.singularForms = new form_set();
                this.pluralForms = new form_set();

                this.attach = attach;

                this.addIrregular("child", "children");
                this.addIrregular("man", "men");
                this.addIrregular("person", "people");
                this.addIrregular("sex", "sexes");
                this.addIrregular("mouse", "mice");
                this.addIrregular("ox", "oxen");
                this.addIrregular("foot", "feet");
                this.addIrregular("tooth", "teeth");
                this.addIrregular("goose", "geese");
                this.addIrregular("ephemeris", "ephemerides");
                this.addIrregular("cloth", "clothes");
                this.addIrregular("hero", "heroes");

                // see if it is possible to unify the creation of both the singular and
                // plural regexes or maybe even just have one list. with a complete list
                // of rules it may only be possible for some regular forms, but worth a shot
                this.pluralForms.regularForms.push([/y$/i, 'ies']);
                this.pluralForms.regularForms.push([/ife$/i, 'ives']);
                this.pluralForms.regularForms.push([/(antenn|formul|nebul|vertebr|vit)a$/i, '$1ae']);
                this.pluralForms.regularForms.push([/(octop|vir|radi|nucle|fung|cact|stimul)us$/i, '$1i']);
                this.pluralForms.regularForms.push([/(buffal|tomat|tornad)o$/i, '$1oes']);
                this.pluralForms.regularForms.push([/(sis)$/i, 'ses']);
                this.pluralForms.regularForms.push([/(matr|vert|ind|cort)(ix|ex)$/i, '$1ices']);
                this.pluralForms.regularForms.push([/sses$/i, 'sses']);
                this.pluralForms.regularForms.push([/(x|ch|ss|sh|s|z)$/i, '$1es']);
                this.pluralForms.regularForms.push([/^(?!talis|.*hu)(.*)man$/i, '$1men']);
                this.pluralForms.regularForms.push([/(.*)/i, '$1s']);

                this.singularForms.regularForms.push([/([^v])ies$/i, '$1y']);
                this.singularForms.regularForms.push([/ives$/i, 'ife']);
                this.singularForms.regularForms.push([/(antenn|formul|nebul|vertebr|vit)ae$/i, '$1a']);
                this.singularForms.regularForms.push([/(octop|vir|radi|nucle|fung|cact|stimul)(i)$/i, '$1us']);
                this.singularForms.regularForms.push([/(buffal|tomat|tornad)(oes)$/i, '$1o']);
                this.singularForms.regularForms.push([/(analy|naly|synop|parenthe|diagno|the)ses$/i, '$1sis']);
                this.singularForms.regularForms.push([/(vert|ind|cort)(ices)$/i, '$1ex']);
                // our pluralizer won''t cause this form of appendix (appendicies)
                // but we should handle it
                this.singularForms.regularForms.push([/(matr|append)(ices)$/i, '$1ix']);
                this.singularForms.regularForms.push([/(x|ch|ss|sh|s|z)es$/i, '$1']);
                this.singularForms.regularForms.push([/men$/i, 'man']);
                this.singularForms.regularForms.push([/ss$/i, 'ss']);
                this.singularForms.regularForms.push([/s$/i, '']);

                this.pluralize = function (token) {
                    return this.ize(token, this.pluralForms, this.customPluralForms);
                };

                this.singularize = function(token) {
                    return this.ize(token, this.singularForms, this.customSingularForms);
                };
            };

            util$2.inherits(NounInflector, singular_plural_inflector);

            var noun_inflector = NounInflector;

            /*
             Copyright (c) 2012, Guillaume Marty

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */

            /**
             * A noun inflector for French.
             * Compiled from:
             * \@see http://fr.wiktionary.org/wiki/Annexe:Pluriels_irr%C3%A9guliers_en_fran%C3%A7ais
             * \@see http://fr.wikipedia.org/wiki/Pluriels_irr%C3%A9guliers_en_fran%C3%A7ais
             *
             * \@todo Take compounded noun into account (eaux-fortes, pique-nique...).
             * \@todo General note: French also requires AdjectiveInflector (femininize...).
             */



            function attach$1() {
              var inflector = this;

              String.prototype.singularizeNoun = function() {
                return inflector.singularize(this);
              };

              String.prototype.pluralizeNoun = function() {
                return inflector.pluralize(this);
              };
            }



            /**
             * @constructor
             */
            var NounInflector$1 = function() {
              // Ambiguous a.k.a. invariant.
              // \@todo Expand this list to be as comprehensive as possible.
              this.ambiguous = [
                // Nouns ending by -s
                'à-peu-près', 'à-propos', 'abattis', 'abcès', 'abois', 'abribus', 'abus',
                'accès', 'acquis', 'adénovirus', 'adonis', 'ados', 'agrès', 'aguets',
                'ailleurs', 'ais', 'albatros', 'albinos', 'alias', 'aloès', 'amaryllis',
                'amas', 'ampélopsis', 'ananas', 'anchois', 'angélus', 'anis', 'anticorps',
                'antihéros', 'antirides', 'anus', 'appas', 'appentis', 'appui-bras',
                'appuie-bras', 'arcanes', 'argus', 'arrérages', 'arrière-pays', 'as',
                'ascaris', 'asparagus', 'atlas', 'atours', 'aurochs', 'autobus',
                'autofocus', 'avant-bras', 'avant-corps', 'avant-propos', 'avers', 'avis',
                'axis', 'barbouillis', 'bas', 'beaujolais', 'beaux-arts', 'biais',
                'bibliobus', 'biceps', 'bicross', 'bien-fonds', 'bloc-notes', 'blockhaus',
                'blocus', 'blues', 'bois', 'bonus', 'bout-dehors', 'bouts-rimés',
                'branle-bas', 'bras', 'brebis', 'bris', 'brise-lames', 'brise-mottes',
                'brûlis', 'buis', 'burnous', 'bus', 'business', 'cabas', 'cacatoès',
                'cacatois', 'cactus', 'cadenas', 'cafouillis', 'caillebotis', 'calvados',
                'cambouis', 'campus', 'canevas', 'cannabis', 'carquois', 'cas',
                'casse-noisettes', 'casse-pieds', 'cassis', 'caucus', 'cens', 'cervelas',
                'chablis', 'chamois', 'chaos', 'chas', 'chasselas', 'châssis',
                'chatouillis', 'chauffe-assiettes', 'chauve-souris', 'chorus', 'choucas',
                'circoncis', 'cirrus', 'clafoutis', 'clapotis', 'cliquetis', 'clos',
                'cochylis', 'colis', 'coloris', 'commis', 'compas', 'compromis',
                'compte-chèques', 'compte-gouttes', 'compte-tours', 'concours', 'confins',
                'congrès', 'consensus', 'contrepoids', 'contresens', 'contretemps',
                'corn flakes', 'corps', 'corps-à-corps', 'corpus', 'cosinus', 'cosmos',
                'coulis', 'coupe-ongles', 'cours', 'court-jus', 'couscous', 'coutelas',
                'crocus', 'croquis', 'cross', 'cubitus', 'cumulus', 'cure-dents',
                'cure-ongles', 'cure-pipes', 'cursus', 'cyclo-cross', 'cyprès', 'dais',
                'damas', 'débarras', 'débours', 'débris', 'décès', 'dedans', 'dehors',
                'delirium tremens', 'demi-gros', 'dépens', 'dessous', 'dessus', 'détritus',
                'deux-mâts', 'deux-pièces', 'deux-points', 'deux-roues', 'deux-temps',
                'dévers', 'devis', 'diplodocus', 'discours', 'dos', 'ébats', 'éboulis',
                'échalas', 'edelweiss', 'élaeis', 'éleis', 'éléphantiasis', 'embarras',
                'empois', 'en-cas', 'encens', 'enclos', 'endos', 'engrais', 'entrelacs',
                'entremets', 'envers', 'épluche-légumes', 'ers', 'espace-temps',
                'essuie-mains', 'eucalyptus', 'ex-libris', 'excès', 'express', 'extrados',
                'faciès', 'fait-divers', 'fatras', 'faux-sens', 'favoris', 'ficus',
                'fier-à-bras', 'finnois', 'florès', 'focus', 'fœtus', 'fois', 'forceps',
                'fouillis', 'fracas', 'frais', 'français', 'franglais', 'frimas',
                'friselis', 'frisottis', 'froncis', 'frottis', 'fucus', 'gâchis', 'galetas',
                'galimatias', 'garde-à-vous', 'garde-corps', 'gargouillis', 'gars',
                'gâte-bois', 'gazouillis', 'génois', 'gibus', 'glacis', 'glas', 'gneiss',
                'gobe-mouches', 'grès', 'gribouillis', 'guet-apens', 'habeas corpus',
                'hachis', 'haras', 'hardes', 'harnais', 'haut-le-corps', 'hautbois',
                'herbe-aux-chats', 'héros', 'herpès', 'hiatus', 'hibiscus', 'hors-concours',
                'hors-pistes', 'hourdis', 'huis-clos', 'humérus', 'humus', 'ibis', 'iléus',
                'indique-fuites', 'infarctus', 'inlandsis', 'insuccès', 'intercours',
                'intrados', 'intrus', 'iris', 'isatis', 'jais', 'jars', 'jeans',
                'jeuconcours', 'judas', 'juliénas', 'jus', 'justaucorps', 'kakatoès',
                'kermès', 'kriss', 'lacis', 'laïus', 'lambris', 'lapis', 'laps', 'lapsus',
                'laquais', 'las', 'lattis', 'lave-mains', 'lavis', 'lèche-bottes',
                'lèche-vitrines', 'legs', 'lias', 'liégeois', 'lilas', 'lis', 'lœss',
                'logis', 'loris', 'lotus', 'louis', 'lupus', 'lys', 'mâchicoulis', 'madras',
                'maïs', 'malappris', 'malus', 'mânes', 'maquis', 'marais', 'maroilles',
                'marquis', 'mas', 'mass-médias', 'matelas', 'matois', 'médius', 'mépris',
                'mérinos', 'mess', 'mets', 'mi-bas', 'micro-ondes', 'mille-pattes',
                'millepertuis', 'minibus', 'minois', 'minus', 'mirabilis', 'mois',
                'monocorps', 'monte-plats', 'mors', 'motocross', 'mots-croisés', 'motus',
                'mouchetis', 'mucus', 'myosotis', 'nævus', 'négus', 'niais',
                'nimbo-stratus', 'nimbus', 'norois', 'nounours', 'nu-pieds', 'oasis',
                'obus', 'olibrius', 'omnibus', 'opus', 'os', 'ours', 'ouvre-boîtes',
                'ouvre-bouteilles', 'palais', 'palis', 'palmarès', 'palus', 'panais',
                'panaris', 'pancréas', 'papyrus', 'par-dehors', 'paradis', 'parcours',
                'pardessus', 'pare-balles', 'pare-chocs', 'parvis', 'pas', 'passe-temps',
                'pataquès', 'pathos', 'patois', 'pavois', 'pays', 'permis',
                'petit-bourgeois', 'petit-gris', 'petit-pois', 'phallus', 'phimosis',
                'pickles', 'pilotis', 'pique-fleurs', 'pis', 'pithiviers', 'pityriasis',
                'plateau-repas', 'plâtras', 'plein-temps', 'plexiglas', 'plexus', 'plus',
                'poids', 'pois', 'pont-levis', 'porte-avions', 'porte-bagages',
                'porte-billets', 'porte-bouteilles', 'porte-clés', 'porte-hélicoptères',
                'porte-jarretelles', 'porte-revues', 'pouls', 'préavis', 'presse-fruits',
                'presse-papiers', 'princeps', 'printemps', 'procès', 'processus', 'progrès',
                'propos', 'prospectus', 'protège-dents', 'psoriasis', 'pubis', 'puits',
                'pus', 'putois', 'quatre-épices', 'quatre-feuilles', 'quatre-heures',
                'quatre-mâts', 'quatre-quarts', 'quatre-temps', 'quitus', 'rabais',
                'rachis', 'radis', 'radius', 'raïs', 'ramassis', 'rébus', 'reclus',
                'recours', 'refus', 'relais', 'remords', 'remous', 'remue-méninges',
                'rendez-vous', 'repas', 'répons', 'repos', 'repris', 'reps', 'rétrovirus',
                'revers', 'rhinocéros', 'rictus', 'rince-doigts', 'ris', 'rollmops',
                'rosé-des-prés', 'roulis', 'rubis', 'salmigondis', 'salsifis', 'sans-logis',
                'sas', 'sassafras', 'sauternes', 'schnaps', 'schuss', 'secours', 'semis',
                'sens', 'serre-fils', 'serre-livres', 'sévices', 'sinus', 'skunks',
                'souris', 'sournois', 'sous-bois', 'stradivarius', 'stras', 'strass',
                'strato-cumulus', 'stratus', 'stress', 'succès', 'surdos', 'surplus',
                'surpoids', 'sursis', 'suspens', 'synopsis', 'syphilis', 'taffetas',
                'taillis', 'talus', 'tamaris', 'tamis', 'tapis', 'tas', 'taudis', 'temps',
                'tennis', 'terminus', 'terre-neuvas', 'tétanos', 'tétras', 'thalamus',
                'thermos', 'thesaurus', 'thésaurus', 'thymus', 'tire-fesses', 'tonus',
                'torchis', 'torticolis', 'tournedos', 'tournevis', 'tournis', 'tracas',
                'traîne-savates', 'travers', 'tréfonds', 'treillis', 'trépas', 'trias',
                'triceps', 'trichomonas', 'trois-étoiles', 'trois-mâts', 'trois-quarts',
                'trolleybus', 'tumulus', 'typhus', 'univers', 'us', 'utérus', 'vasistas',
                'vélocross', 'velours', 'verglas', 'verjus', 'vernis', 'vers',
                'vert-de-gris', 'vide-ordures', 'vide-poches', 'villageois', 'virus',
                'vis-à-vis', 'volubilis', 'vulgum pecus', 'waters', 'williams', 'xérès',

                // Nouns ending by -x
                'abat-voix', 'afflux', 'alpax', 'anthrax', 'apex', 'aptéryx',
                'archéoptéryx', 'arrière-faix', 'bombyx', 'borax', 'bordeaux', 'bouseux',
                'box', 'carex', 'casse-noix', 'cedex', 'céphalothorax', 'cérambyx', 'chaux',
                'choix', 'coccyx', 'codex', 'contumax', 'coqueleux', 'cortex', 'courroux',
                'croix', 'crucifix', 'culex', 'demodex', 'duplex', 'entre-deux', 'époux',
                'équivaux', 'eux', 'ex', 'faix', 'faucheux', 'faux', 'fax', 'ferreux',
                'flux', 'fox', 'freux', 'furax', 'hapax', 'harengueux', 'hélix',
                'horse-pox', 'houx', 'index', 'influx', 'inox', 'juke-box', 'kleenex',
                'lagothrix', 'larynx', 'lastex', 'latex', 'lux', 'lynx', 'macareux', 'max',
                'mésothorax', 'mi-voix', 'mirepoix', 'motteux', 'multiplex', 'murex',
                'narthex', 'noix', 'onyx', 'opopanax', 'oropharynx', 'paix', 'panax',
                'perdrix', 'pharynx', 'phénix', 'phlox', 'phoenix', 'pneumothorax', 'poix',
                'portefaix', 'pousse-cailloux', 'preux', 'prix', 'prothorax', 'pucheux',
                'pyrex', 'pyroligneux', 'quadruplex', 'queux', 'redoux', 'reflex', 'reflux',
                'relax', 'rhinopharynx', 'rose-croix', 'rouvieux', 'roux', 'rumex',
                'saindoux', 'sardonyx', 'scolex', 'sèche-cheveux', 'silex', 'simplex',
                'sioux', 'sirex', 'smilax', 'solex', 'songe-creux', 'spalax', 'sphex',
                'sphinx', 'storax', 'strix', 'styrax', 'surfaix', 'surtaux', 'syrinx',
                'tamarix', 'taux', 'télex', 'thorax', 'tord-boyaux', 'toux', 'trionyx',
                'tripoux', 'tubifex', 'vertex', 'vidéotex', 'vielleux', 'vieux',
                'violoneux', 'voix', 'volvox', 'vortex',

                // Nouns ending by -z
                'allume-gaz', 'assez', 'biogaz', 'cache-nez', 'camping-gaz', 'chez',
                'chintz', 'ersatz', 'fez', 'free-jazz', 'fritz', 'gaz', 'gin-fizz', 'hertz',
                'jazz', 'jerez', 'kibboutz', 'kilohertz', 'kolkhoz', 'kronprinz', 'lapiaz',
                'lez', 'mégahertz', 'merguez', 'nez', 'pince-nez', 'quartz', 'quiz', 'ranz',
                'raz', 'recez', 'rémiz', 'rez', 'riz', 'ruolz', 'seltz', 'serre-nez'
              ];

              this.customPluralForms = [];
              this.customSingularForms = [];
              this.singularForms = new form_set();
              this.pluralForms = new form_set();

              this.attach = attach$1;

              this.addIrregular('ail', 'aulx');
              this.addIrregular('bétail', 'bestiaux');
              this.addIrregular('bonhomme', 'bonshommes');
              this.addIrregular('ciel', 'cieux');
              this.addIrregular('monsieur', 'messieurs');
              this.addIrregular('mafioso', 'mafiosi');
              this.addIrregular('œil', 'yeux');
              this.addIrregular('putto', 'putti');
              this.addIrregular('targui', 'touareg'); // touareg -> touaregs is also OK.

              // Pluralize
              this.pluralForms.regularForms.push([/^(av|b|c|carnav|cérémoni|chac|corr|emment|emmenth|festiv|fut|gavi|gra|narv|p|récit|rég|rit|rorqu|st)al$/i, '$1als']);
              this.pluralForms.regularForms.push([/^(aspir|b|cor|ém|ferm|gemm|soupir|trav|vant|vent|vitr)ail$/i, '$1aux']);
              this.pluralForms.regularForms.push([/^(bij|caill|ch|gen|hib|jouj|p|rip|chouch)ou$/i, '$1oux']);
              this.pluralForms.regularForms.push([/^(gr|berimb|don|karb|land|pil|rest|sarr|un)au$/i, '$1aus']);
              this.pluralForms.regularForms.push([/^(bl|ém|enf|pn)eu$/i, '$1eus']);
              this.pluralForms.regularForms.push([/(au|eau|eu|œu)$/i, '$1x']);
              this.pluralForms.regularForms.push([/al$/i, 'aux']);
              this.pluralForms.regularForms.push([/(s|x)$/i, '$1']);
              this.pluralForms.regularForms.push([/(.*)$/i, '$1s']);

              // Singularize
              this.singularForms.regularForms.push([/^(aspir|b|cor|ém|ferm|gemm|soupir|trav|vant|vent|vitr)aux$/i, '$1ail']);
              this.singularForms.regularForms.push([/^(aloy|b|bouc|boy|burg|conoy|coy|cr|esquim|ét|fabli|flé|flûti|glu|gr|gru|hoy|joy|kérab|matéri|nobli|noy|pré|sen|sén|t|touch|tuss|tuy|v|ypré)aux$/i, '$1au']);
              this.singularForms.regularForms.push([/^(bij|caill|ch|gen|hib|jouj|p|rip|chouch)oux$/i, '$1ou']);
              this.singularForms.regularForms.push([/^(bis)?aïeux$/i, '$1aïeul']);
              this.singularForms.regularForms.push([/^apparaux$/i, 'appareil']); // One way transform, don't put on irregular list.
              this.singularForms.regularForms.push([/^ciels$/i, 'ciel']);
              this.singularForms.regularForms.push([/^œils$/i, 'œil']);
              this.singularForms.regularForms.push([/(eau|eu|œu)x$/i, '$1']);
              this.singularForms.regularForms.push([/aux$/i, 'al']);
              this.singularForms.regularForms.push([/(.*)s$/i, '$1']);

              this.pluralize = function(token) {
                return this.ize(token, this.pluralForms, this.customPluralForms);
              };

              this.singularize = function(token) {
                return this.ize(token, this.singularForms, this.customSingularForms);
              };
            };

            util$2.inherits(NounInflector$1, singular_plural_inflector);

            var noun_inflector$1 = NounInflector$1;

            /*
             Copyright (c) 2012, Guillaume Marty

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */

            /**
             * A noun inflector for Japanese.
             * Compiled from several sources including:
             * \@see http://answers.yahoo.com/question/index?qid=20080528201740AASBWy6
             * \@see http://www.excite.co.jp/dictionary/english_japanese/
             *
             * This script assumes input is normalized using normalizer_ja().
             * Pluralizing Japanese has a very limited interest.
             * Japanese don't usually distinct plural from singular, so even a word looking
             * like a singular might actually be a plural.
             *
             * Singularization of nouns ending by -tachi or -ra is achieved using a
             * comprehensive black list, while nouns ending by -domo or -gata use a white
             * list because there are too many exceptions.
             *
             * \@todo Singularize nouns ending by -ら, but there are too many exceptions.
             * \@todo Expand the list of common plurals ending by -domo and -gata.
             */



            function attach$2() {
              var inflector = this;

              String.prototype.singularizeNoun = function() {
                return inflector.singularize(this);
              };

              String.prototype.pluralizeNoun = function() {
                return inflector.pluralize(this);
              };
            }



            /**
             * @constructor
             */
            var NounInflector$2 = function() {
              // Ambiguous a.k.a. invariant.
              this.ambiguous = [
                'ともだち', '友だち', '友達', '遊び友達', '飲み友達', '酒飲み友達', '茶飲み友達',
                '学校友達', '女友達', '男友達', '幼友達'
              ];

              this.customPluralForms = [];
              this.customSingularForms = [];
              this.singularForms = new form_set();
              this.pluralForms = new form_set();

              this.attach = attach$2;

              this.addIrregular('神', '神神');
              this.addIrregular('人', '人人');
              this.addIrregular('年', '年年');
              this.addIrregular('月', '月月');
              this.addIrregular('日', '日日');
              this.addIrregular('星', '星星');
              this.addIrregular('島', '島島');
              this.addIrregular('我', '我我');
              this.addIrregular('山', '山山');
              this.addIrregular('国', '国国');
              this.addIrregular('所', '所所');
              this.addIrregular('隅', '隅隅');

              /**
               * Notes:
               * -たち exceptions: いたち, おいたち, ついたち, かたち, かおかたち, なりかたち, いでたち, はたち, からたち, なりたち
               * -達 exceptions: 伊達, 男伊達, 栄達, 上意下達, 熟達, 上達, 下意上達, 先達, 送達, 速達, 即日速達, 書留速達, 調達, 通達, 伝達, 到達, 配達, 牛乳配達, 新聞配達, 無料配達, 四通八達, 発達, 未発達, 御用達, 宮内庁御用達, 練達, 闊達
               * -等 exceptions: 一等, 下等, 何等, 均等, 勲等, 高等, 三等, 初等, 上等, 親等, 二親等, 数等, 対等, 中等, 同等, 特等, 二等, 品等, 不等, 平等, 悪平等, 男女平等, 不平等, 優等, 劣等
               */

              // Pluralize
              this.pluralForms.regularForms.push([/^(.+)$/i, '$1たち']);

              // Singularize
              this.singularForms.regularForms.push([/^(.+)たち$/i, function(a, mask) {
                if (['い', 'おい', 'つい', 'か', 'かおか', 'なりか', 'いで', 'は', 'から',
                  'なり'].indexOf(mask) >= 0)
                  return mask + 'たち';
                return mask;
              }]);
              this.singularForms.regularForms.push([/^(.+)達$/i, function(a, mask) {
                if (['伊', '伊', '栄', '上意下', '熟', '上', '下意上', '先', '送', '速',
                  '即日速', '書留速', '調', '通', '伝', '到', '配', '牛乳配', '新聞配', '無料配',
                  '四通八', '発', '未発', '御用', '宮内庁御用', '練', '闊'].indexOf(mask) >= 0)
                  return mask + '達';
                return mask;
              }]);  // Singularize nouns ending by -等, but not exceptions.
              this.singularForms.regularForms.push([/^(.+)等$/i, function(a, mask) {
                if (['一', '下', '何', '均', '勲', '高', '三', '初', '親', '二親', '数', '対',
                  '中', '同', '特', '二', '品', '不', '平', '悪平', '男女平', '不平', '優',
                  '劣'].indexOf(mask) >= 0)
                  return mask + '等';
                return mask;
              }]);
              this.singularForms.regularForms.push([/^(人間|わたくし|私|てまえ|手前|野郎|やろう|勇者|がき|ガキ|餓鬼|あくとう|悪党|猫|家来)(共|ども)$/i, '$1']);
              this.singularForms.regularForms.push([/^(神様|先生|あなた|大名|女中|奥様)(方|がた)$/i, '$1']);

              this.pluralize = function(token) {
                return this.ize(token, this.pluralForms, this.customPluralForms);
              };

              this.singularize = function(token) {
                return this.ize(token, this.singularForms, this.customSingularForms);
              };
            };

            util$2.inherits(NounInflector$2, singular_plural_inflector);

            var noun_inflector$2 = NounInflector$2;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            function attach$3() {
                var inflector = this;
                
                String.prototype.singularizePresentVerb = function() {
                    return inflector.singularize(this);
                };
                
                String.prototype.pluralizePresentVerb = function() {
                    return inflector.pluralize(this);
                };
            }

            var VerbInflector = function() {
                this.ambiguous = [
                    'will'
                ];
                
                this.attach = attach$3;
                    
                this.customPluralForms = [];
                this.customSingularForms = [];    
                this.singularForms = new form_set();
                this.pluralForms = new form_set();

                this.addIrregular("am", "are");    
                this.addIrregular("is", "are");
                this.addIrregular("was", "were");
                this.addIrregular("has", "have");
                
                this.singularForms.regularForms.push([/ed$/i, 'ed']);
                this.singularForms.regularForms.push([/ss$/i, 'sses']);
                this.singularForms.regularForms.push([/x$/i, 'xes']);    
                this.singularForms.regularForms.push([/(h|z|o)$/i, '$1es']);
                this.singularForms.regularForms.push([/$zz/i, 'zzes']);
                this.singularForms.regularForms.push([/([^a|e|i|o|u])y$/i, '$1ies']);
                this.singularForms.regularForms.push([/$/i, 's']);

                this.pluralForms.regularForms.push([/sses$/i, 'ss']);
                this.pluralForms.regularForms.push([/xes$/i, 'x']);
                this.pluralForms.regularForms.push([/([cs])hes$/i, '$1h']);
                this.pluralForms.regularForms.push([/zzes$/i, 'zz']);
                this.pluralForms.regularForms.push([/([^h|z|o|i])es$/i, '$1e']);
                this.pluralForms.regularForms.push([/ies$/i, 'y']);//flies->fly
                this.pluralForms.regularForms.push([/e?s$/i, '']); 
            };

            util$2.inherits(VerbInflector, singular_plural_inflector);

            var present_verb_inflector = VerbInflector;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            function nthForm(i) {
                var teenth = (i % 100);

                if(teenth > 10 && teenth < 14)
                    return 'th';
                else {
                    switch(i % 10) {
                        case 1:
                            return 'st';
                            break;
                        case 2:
                            return 'nd';
                            break;            
                        case 3:
                            return 'rd';
                            break;
                        default:
                            return 'th';
                    }
                }
            }

            function nth(i) {
                return i.toString() + nthForm(i);
            }

            var CountInflector = function() {
            };

            CountInflector.nth = nth;

            var count_inflector = CountInflector;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */




            function appendLineChar(fd, pos, buffPos, buff, callback) {
              if(buffPos >= buff.length) {
                var newBuff = new Buffer(buff.length * 2);
                buff.copy(newBuff, 0, 0, buff.length);
                buff = newBuff;
              }

              fs.read(fd, buff, buffPos, 1, pos, function(err, count) {
                if(err)
                  console.log(err);
                else {
                  if(buff[buffPos] == 10 || buffPos == buff.length)
                    callback(buff.slice(0, buffPos).toString('UTF-8'));
                  else {
                    appendLineChar(fd, pos + 1, buffPos + 1, buff, callback);
                  }
                }
              });
            }

            function open(callback) {
              var filePath = this.filePath;

              fs.open(filePath, 'r', null, function(err, fd) {
                if (err) {
                    console.log('Unable to open %s', filePath);
                    return;
                }
                callback(err, fd, function() {fs.close(fd);});
              });
            }

            var WordNetFile = function(dataDir, fileName) {
              this.dataDir = dataDir;
              this.fileName = fileName;
              this.filePath = path$2.join(this.dataDir, this.fileName);
            };

            WordNetFile.prototype.open = open;
            WordNetFile.appendLineChar = appendLineChar;

            var wordnet_file = WordNetFile;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            function getFileSize(path) {
              var stat = fs.statSync(path);
              return stat.size;
            }

            function findPrevEOL(fd, pos, callback) {
              var buff = new Buffer(1024);
              if(pos == 0)
                callback(0);
              else {
                fs.read(fd, buff, 0, 1, pos, function(err, count) {
                  if(buff[0] == 10)
                    callback(pos + 1);
                  else
                    findPrevEOL(fd, pos - 1, callback);
                });
              }
            }

            function readLine(fd, pos, callback) {
              var buff = new Buffer(1024);
              findPrevEOL(fd, pos, function(pos) {
                wordnet_file.appendLineChar(fd, pos, 0, buff, callback);
              });
            }

            function miss(callback) {
              callback({status: 'miss'});
            }

            function findAt(fd, size, pos, lastPos, adjustment, searchKey, callback, lastKey) {
              if (lastPos == pos || pos >= size) {
                miss(callback);
              } else {
                readLine(fd, pos, function(line) {
                  var tokens = line.split(/\s+/);
                  var key = tokens[0];

                if(key == searchKey) {
                    callback({status: 'hit', key: key, 'line': line, tokens: tokens});
                  } else if(adjustment == 1 || key == lastKey)  {
                    miss(callback);
                  } else {
                    adjustment = Math.ceil(adjustment * 0.5);

                    if (key < searchKey) {
                      findAt(fd, size, pos + adjustment, pos, adjustment, searchKey, callback, key);
                    } else {
                      findAt(fd, size, pos - adjustment, pos, adjustment, searchKey, callback, key);
                    }
                  }
                });
              }
            }

            function find$1(searchKey, callback) {
              var indexFile = this;

              indexFile.open(function(err, fd, done) {
                if(err) {
                  console.log(err);
                } else {
                  var size = getFileSize(indexFile.filePath) - 1;
                  var pos = Math.ceil(size / 2);
                  findAt(fd, size, pos, null, pos, searchKey,
                    function(result) { callback(result); done(); });
                }
              });
            }

            function lookupFromFile(word, callback) {
              this.find(word, function(record) {
                var indexRecord = null;

                if(record.status == 'hit') {
                  var ptrs = [], offsets = [];

                  for(var i = 0; i < parseInt(record.tokens[3]); i++)
                    ptrs.push(record.tokens[i]);

                  for(var i = 0; i < parseInt(record.tokens[2]); i++)
                    offsets.push(parseInt(record.tokens[ptrs.length + 6 + i], 10));

                  indexRecord = {
                    lemma: record.tokens[0],
                    pos: record.tokens[1],
                    ptrSymbol: ptrs,
                    senseCnt:  parseInt(record.tokens[ptrs.length + 4], 10),
                    tagsenseCnt:  parseInt(record.tokens[ptrs.length + 5], 10),
                    synsetOffset:  offsets
                  };
                }

                callback(indexRecord);
              });
            }

            function lookup$1(word, callback) {
              this.lookupFromFile(word, callback);
            }

            var IndexFile = function(dataDir, name) {
              wordnet_file.call(this, dataDir, 'index.' + name);
            };

            util$2.inherits(IndexFile, wordnet_file);

            IndexFile.prototype.lookupFromFile = lookupFromFile;
            IndexFile.prototype.lookup = lookup$1;
            IndexFile.prototype.find = find$1;

            IndexFile.prototype._findAt = findAt;

            var index_file = IndexFile;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            function get$1(location, callback) {
              var buff = new Buffer(4096);

              this.open(function(err, fd, done) {
                wordnet_file.appendLineChar(fd, location, 0, buff, function(line) {
                  done();
                  var data = line.split('| ');
                  var tokens = data[0].split(/\s+/);
                  var ptrs = [];
                  var wCnt = parseInt(tokens[3], 16);
                  var synonyms = [];

                  for(var i = 0; i < wCnt; i++) {
                    synonyms.push(tokens[4 + i * 2]);
                  }

                  var ptrOffset = (wCnt - 1) * 2 + 6;
                  for(var i = 0; i < parseInt(tokens[ptrOffset], 10); i++) {
                    ptrs.push({
                      pointerSymbol: tokens[ptrOffset + 1 + i * 4],
                      synsetOffset: parseInt(tokens[ptrOffset + 2 + i * 4], 10),
                      pos: tokens[ptrOffset + 3 + i * 4],
                      sourceTarget: tokens[ptrOffset + 4 + i * 4]
                    });
                  }

                  // break "gloss" into definition vs. examples
                  var glossArray = data[1].split("; ");
                  var definition = glossArray[0];
                  var examples = glossArray.slice(1);    

                  for (var k=0; k < examples.length; k++) {
                    examples[k] = examples[k].replace(/\"/g,'').replace(/\s\s+/g,'');
                  }
                  
                  callback({
                    synsetOffset: parseInt(tokens[0], 10),
                    lexFilenum: parseInt(tokens[1], 10),
                    pos: tokens[2],
                    wCnt: wCnt,
                    lemma: tokens[4],
                    synonyms: synonyms,
                    lexId: tokens[5],
                    ptrs: ptrs,
                    gloss: data[1],
                    def: definition,
                    exp: examples
                  });
                });
              });
            }

            var DataFile = function(dataDir, name) {
              wordnet_file.call(this, dataDir, 'data.' + name);
            };

            util$2.inherits(DataFile, wordnet_file);
            DataFile.prototype.get = get$1;

            var data_file = DataFile;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */



            function pushResults(data, results, offsets, callback) {
              var wordnet = this;

              if(offsets.length == 0) {
                callback(results);
              } else {
                data.get(offsets.pop(), function(record) {
                  results.push(record);
                  wordnet.pushResults(data, results, offsets, callback);
                });
              }
            }

            function lookupFromFiles(files, results, word, callback) {
              var wordnet = this;

              if(files.length == 0)
                callback(results);
              else {
                var file = files.pop();

                file.index.lookup(word, function(record) {
                  if(record) {
                    wordnet.pushResults(file.data, results, record.synsetOffset, function() {
                      wordnet.lookupFromFiles(files, results, word, callback);
                    });
                  } else {
                    wordnet.lookupFromFiles(files, results, word, callback);
                  }
                });
              }
            }

            function lookup$2(word, callback) {
              word = word.toLowerCase().replace(/\s+/g, '_');

              this.lookupFromFiles([
                {index: this.nounIndex, data: this.nounData},
                {index: this.verbIndex, data: this.verbData},
                {index: this.adjIndex, data: this.adjData},
                {index: this.advIndex, data: this.advData},
              ], [], word, callback);
            }

            function get$2(synsetOffset, pos, callback) {
              var dataFile = this.getDataFile(pos);

              dataFile.get(synsetOffset, function(result) {
                callback(result);
              });
            }

            function getDataFile(pos) {
                switch(pos) {
                  case 'n':
                    return this.nounData;
                  case 'v':
                    return this.verbData;
                  case 'a': case 's':
                    return this.adjData;
                  case 'r':
                    return this.advData;
                }
            }

            function loadSynonyms(synonyms, results, ptrs, callback) {
              var wordnet = this;

              if(ptrs.length > 0) {
                var ptr = ptrs.pop();

                this.get(ptr.synsetOffset, ptr.pos, function(result) {
                  synonyms.push(result);
                  wordnet.loadSynonyms(synonyms, results, ptrs, callback);
                });
              } else {
                wordnet.loadResultSynonyms(synonyms, results, callback);
              }
            }

            function loadResultSynonyms(synonyms, results, callback) {
              var wordnet = this;

              if(results.length > 0) {
                var result = results.pop();
                wordnet.loadSynonyms(synonyms, results, result.ptrs, callback);
              } else
                callback(synonyms);
            }

            function lookupSynonyms(word, callback) {
              var wordnet = this;

              wordnet.lookup(word, function(results) {
                wordnet.loadResultSynonyms([], results, callback);
              });
            }

            function getSynonyms() {
              var wordnet = this;
              var callback = arguments[2] ? arguments[2] : arguments[1];
              var pos = arguments[0].pos ? arguments[0].pos : arguments[1];
              var synsetOffset = arguments[0].synsetOffset ? arguments[0].synsetOffset : arguments[0];

              this.get(synsetOffset, pos, function(result) {
                wordnet.loadSynonyms([], [], result.ptrs, callback);
              });
            }

            function WordNet(dataDir) {

              if (!dataDir) {
                try {
                  var WNdb = wordnetDb;
                } catch(e) {
                  console.error("Please 'npm install wordnet-db' before using WordNet module or specify a dict directory.");
                  throw e;
                }
                dataDir = WNdb.path;
              }

              this.nounIndex = new index_file(dataDir, 'noun');
              this.verbIndex = new index_file(dataDir, 'verb');
              this.adjIndex = new index_file(dataDir, 'adj');
              this.advIndex = new index_file(dataDir, 'adv');

              this.nounData = new data_file(dataDir, 'noun');
              this.verbData = new data_file(dataDir, 'verb');
              this.adjData = new data_file(dataDir, 'adj');
              this.advData = new data_file(dataDir, 'adv');

              this.get = get$2;
              this.lookup = lookup$2;
              this.lookupFromFiles = lookupFromFiles;
              this.pushResults = pushResults;
              this.loadResultSynonyms = loadResultSynonyms;
              this.loadSynonyms = loadSynonyms;
              this.lookupSynonyms = lookupSynonyms;
              this.getSynonyms = getSynonyms;
              this.getDataFile = getDataFile;
            }

            var wordnet = WordNet;

            /*
            Copyright (c) 2011, Rob Ellis, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var _$2 = underscore._,
                Tokenizer$1 = regexp_tokenizer.WordTokenizer,
                tokenizer$2 = new Tokenizer$1(),
                stopwords$1 = stopwords.words;

            function buildDocument(text, key) {
                var stopOut;

                if(typeof text === 'string') {
                    text = tokenizer$2.tokenize(text.toLowerCase());
                    stopOut = true;
                } else if(!_$2.isArray(text)) {
                    stopOut = false;
                    return text;
                }

                return text.reduce(function(document, term) {
                    // next line solves https://github.com/NaturalNode/natural/issues/119
                    if(typeof document[term] === 'function') document[term] = 0;
                    if(!stopOut || stopwords$1.indexOf(term) < 0)
                        document[term] = (document[term] ? document[term] + 1 : 1);
                    return document;
                }, {__key: key});
            }

            function tf(term, document) {
                return document[term] ? document[term]: 0;
            }

            function documentHasTerm(term, document) {
                return document[term] && document[term] > 0;
            }

            function TfIdf(deserialized) {
                if(deserialized)
                    this.documents = deserialized.documents;
                else
                    this.documents = [];

                this._idfCache = {};
            }

            // backwards compatibility for < node 0.10
            function isEncoding(encoding) {
                if (typeof Buffer.isEncoding !== 'undefined')
                    return Buffer.isEncoding(encoding);
                switch ((encoding + '').toLowerCase()) {
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                    case 'raw':
                        return true;
                }
                return false;
            }

            var tfidf = TfIdf;
            TfIdf.tf = tf;

            TfIdf.prototype.idf = function(term, force) {

                // Lookup the term in the New term-IDF caching,
                // this will cut search times down exponentially on large document sets.
                if(this._idfCache[term] && this._idfCache.hasOwnProperty(term) && force !== true)
                    return this._idfCache[term];

                var docsWithTerm = this.documents.reduce(function(count, document) {
                    return count + (documentHasTerm(term, document) ? 1 : 0);
                }, 0);

                var idf = 1 + Math.log((this.documents.length) / ( 1 + docsWithTerm ));

                // Add the idf to the term cache and return it
                this._idfCache[term] = idf;
                return idf;
            };

            // If restoreCache is set to true, all terms idf scores currently cached will be recomputed.
            // Otherwise, the cache will just be wiped clean
            TfIdf.prototype.addDocument = function(document, key, restoreCache) {
                this.documents.push(buildDocument(document, key));

                // make sure the cache is invalidated when new documents arrive
                if(restoreCache === true) {
                    for(var term in this._idfCache) {
                        // invoking idf with the force option set will
                        // force a recomputation of the idf, and it will
                        // automatically refresh the cache value.
                        this.idf(term, true);
                    }
                }   else {
                    this._idfCache = {};
                }
            };

            // If restoreCache is set to true, all terms idf scores currently cached will be recomputed.
            // Otherwise, the cache will just be wiped clean
            TfIdf.prototype.addFileSync = function(path, encoding, key, restoreCache) {
                if(!encoding)
                    encoding = 'utf8';
                if(!isEncoding(encoding))
                    throw new Error('Invalid encoding: ' + encoding);

                var document = fs.readFileSync(path, encoding);
                this.documents.push(buildDocument(document, key));

                // make sure the cache is invalidated when new documents arrive
                if(restoreCache === true) {
                    for(var term in this._idfCache) {
                        // invoking idf with the force option set will
                        // force a recomputation of the idf, and it will
                        // automatically refresh the cache value.
                        this.idf(term, true);
                    }
                }
                else {
                    this._idfCache = {};
                }
            };

            TfIdf.prototype.tfidf = function(terms, d) {
                var _this = this;

                if(!_$2.isArray(terms))
                    terms = tokenizer$2.tokenize(terms.toString().toLowerCase());

                return terms.reduce(function(value, term) {
                    var idf = _this.idf(term);
                    idf = idf === Infinity ? 0 : idf;
                    return value + (tf(term, _this.documents[d]) * idf);
                }, 0.0);
            };

            TfIdf.prototype.listTerms = function(d) {
                var terms = [];

                for(var term in this.documents[d]) {
                    if(term != '__key')
                       terms.push({term: term, tfidf: this.tfidf(term, d)});
                }

                return terms.sort(function(x, y) { return y.tfidf - x.tfidf; });
            };

            TfIdf.prototype.tfidfs = function(terms, callback) {
                var tfidfs = new Array(this.documents.length);

                for(var i = 0; i < this.documents.length; i++) {
                    tfidfs[i] = this.tfidf(terms, i);

                    if(callback)
                        callback(i, tfidfs[i], this.documents[i].__key);
                }

                return tfidfs;
            };

            // Define a tokenizer other than the default "WordTokenizer"
            TfIdf.prototype.setTokenizer = function(t) {
                if(!_$2.isFunction(t.tokenize))
                    throw new Error('Expected a valid Tokenizer');
                tokenizer$2 = t;
            };

            /*
            Copyright (c) 2014 Ken Koch

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            /** 
             * The basis of the TRIE structure.
             **/
            function Trie(caseSensitive) {
            	this.dictionary = {};
            	this.$ = false;

            	if(typeof caseSensitive === "undefined") {
            		caseSensitive = true;
            	}

            	this.cs = caseSensitive;
            }

            /**
             * Add a single string to the TRIE, returns true if the word was already in the 
             * trie.
             **/
            Trie.prototype.addString = function(string) {
            	if(this.cs === false) {
            		string = string.toLowerCase();
            	}

            	// If the string has only one letter, mark this as a word.
            	if(string.length === 0) {
            		var wasWord = this.$;
            		this.$ = true;
            		return wasWord;
            	}

            	// Make sure theres a Trie node in our dictionary
            	var next = this.dictionary[string[0]];

            	if(!next) {
            		this.dictionary[string[0]] = new Trie(this.cs);
            		next = this.dictionary[string[0]];
            	}

            	// Continue adding the string
            	return next.addString(string.substring(1));
            };

            /**
             * Add multiple strings to the TRIE
             **/
            Trie.prototype.addStrings = function(list) {
            	for(var i in list) {
            		this.addString(list[i]);
            	}
            };

            /**
             * A function to search the TRIE and return an array of
             * words which have same prefix <prefix>
             * for example if we had the following words in our database:
             * a, ab, bc, cd, abc, abd
             * and we search the string: a
             * we will get :
             * [a, ab, abc, abd]
             **/
            Trie.prototype.keysWithPrefix = function(prefix) {
                if(this.caseSensitive === false) {
                    prefix = prefix.toLowerCase();
                }

                function isEmpty (object) {
                    for (var key in object) if (object.hasOwnProperty(key)) return false;
                    return true;
                }

                function get (node, word) {
                    if(!node) return null;
                    if(word.length == 0) return node;
                    return get(node.dictionary[word[0]], word.substring(1));
                }

                function recurse ( node, stringAgg, resultsAgg) {
                    if (!node) return;

                    // Check if this is a word
                    if (node.$) {
                        resultsAgg.push(stringAgg);
                    }

                    if (isEmpty(node.dictionary)) {
                        return ;
                    }

                    for (var c in node.dictionary) {
                        recurse (node.dictionary[c],stringAgg + c, resultsAgg);
                    }
                }

                var results = [];
                recurse (get(this, prefix), prefix, results);
                return results;
            };

            /** 
             * A function to search the given string and return true if it lands
             * on on a word. Essentially testing if the word exists in the database.
             **/
            Trie.prototype.contains = function(string) {
            	if(this.cs === false) {
            		string = string.toLowerCase();
            	}

            	if(string.length === 0) {
            		return this.$;
            	}

            	// Otherwise, we need to continue searching
            	var firstLetter = string[0];
            	var next = this.dictionary[firstLetter];		

            	// If we don't have a node, this isn't a word
            	if(!next) {
            		return false;
            	}

            	// Otherwise continue the search at the next node
            	return next.contains(string.substring(1));
            };

            /**
             * A function to search the TRIE and return an array of words which were encountered along the way.
             * This will only return words with full prefix matches.
             * for example if we had the following words in our database:
             * a, ab, bc, cd, abc
             * and we searched the string: abcd
             * we would get only:
             * [a, ab, abc]
             **/
            Trie.prototype.findMatchesOnPath = function(search) {
            	if(this.cs === false) {
            		search = search.toLowerCase();
            	}

            	function recurse(node, search, stringAgg, resultsAgg) {
            		// Check if this is a word.
            		if(node.$) {
            			resultsAgg.push(stringAgg);
            		}

            		// Check if the have completed the seearch
            		if(search.length === 0) {
            			return resultsAgg;
            		}

            		// Otherwise, continue searching
            		var next = node.dictionary[search[0]];
            		if(!next) {
            			return resultsAgg;
            		}
            		return recurse(next, search.substring(1), stringAgg + search[0], resultsAgg);
            	}
            	return recurse(this, search, "", []);
            };

            /**
             * Returns the longest match and the remaining part that could not be matched.
             * inspired by [NLTK containers.trie.find_prefix](http://nltk.googlecode.com/svn-/trunk/doc/api/nltk.containers.Trie-class.html).
             **/
            Trie.prototype.findPrefix = function(search) {
            	if(this.cs === false) {
            		search = search.toLowerCase();
            	}
            	
            	function recurse(node, search, stringAgg, lastWord) {
            		// Check if this is a word
            		if(node.$) {
            			lastWord = stringAgg;
            		}

            		// Check if we have no more to search
            		if(search.length === 0) {
            			return [lastWord, search];
            		}

            		// Continue searching
            		var next = node.dictionary[search[0]];
            		if(!next) {
            			return [lastWord, search];
            		}
            		return recurse(next, search.substring(1), stringAgg + search[0], lastWord);
            	}
            	return recurse(this, search, "", null);
            };

            /**
             * Computes the number of actual nodes from this node to the end.
             * Note: This involves traversing the entire structure and may not be
             * good for frequent use.
             **/
            Trie.prototype.getSize = function() { 
            	var total = 1;
            	for(var c in this.dictionary) {
            		total += this.dictionary[c].getSize();
            	}
            	return total;
            };

            /**
             * EXPORT THE TRIE
             **/
            var trie = Trie;

            /*
            Copyright (c) 2011, Rob Ellis, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var _$3 = underscore._;

            /*
             Sentences Analizer Class
             From http://www.writingcentre.uottawa.ca/hypergrammar/sntpurps.html

             Take a POS input and analyse it for
              - Type of Sentense
                 - Interrogative
                   - Tag Questions
                   - 
                 - Declarative
                 - Exclamatory 
                 - Imperative

              - Parts of a Sentense
                 - Subject
                 - Predicate

              - Show Preposition Phrases
            */

            var Sentences = function(pos, callback) {
                this.posObj = pos;
                this.senType = null;
                callback(this);
            };

            Sentences.prototype.part = function(callback) {
                var subject = [],
            	predicat = [],
            	verbFound = false;
            	
                this.prepositionPhrases();
            	
                for (var i = 0; i < this.posObj.tags.length; i++) {
                    if (this.posObj.tags[i].pos == "VB") {
                        if (i === 0) {
                            verbFound = true;
                        } else {
                            // We need to Test for any EX before the VB
                            if (this.posObj.tags[i - 1].pos != "EX") {
                                verbFound = true;
                            } else {
                                predicat.push(this.posObj.tags[i].token);
                            }					
                        }
                    }

                    // Add Pronoun Phrase (pp) Or Subject Phrase (sp)
                    if (!verbFound) {
                        if (this.posObj.tags[i].pp != true)
                            this.posObj.tags[i].spos = "SP";
                        
                        subject.push(this.posObj.tags[i].token);
                    } else {
                        if (this.posObj.tags[i].pp != true)
                            this.posObj.tags[i].spos = "PP";
                        
                        predicat.push(this.posObj.tags[i].token);
                    }
                }
            	
                if (subject.length == 0) {
            	this.posObj.tags.push({token:"You",spos:"SP",pos:"PRP",added:true});
                }
                
                callback(this);	
            };

            // Takes POS and removes IN to NN or NNS
            // Adds a PP for each prepositionPhrases
            Sentences.prototype.prepositionPhrases = function() {
                var remove = false;

                for (var i = 0; i < this.posObj.tags.length; i++) {
                    if (this.posObj.tags[i].pos.match("IN")) {
                        remove = true;
                    }
                
                    if (remove) {
                        this.posObj.tags[i].pp = true;
                    }
                
                    if (this.posObj.tags[i].pos.match("NN")) {
                        remove = false;
                    }
                }	
            };

            Sentences.prototype.subjectToString = function() {
                return this.posObj.tags.map(function(t){ if (t.spos == "SP" || t.spos == "S" ) return t.token }).join(' ');
            };

            Sentences.prototype.predicateToString = function() {
                return this.posObj.tags.map(function(t){ if (t.spos == "PP" || t.spos == "P" ) return t.token }).join(' ');
            };

            Sentences.prototype.implicitYou = function() {
                for (var i = 0; i < this.posObj.tags.length;i++) {
                    if (this.posObj.tags[i].added) {
                        return true;
                    }
                }
                
                return false;
            };

            Sentences.prototype.toString = function() {
                return this.posObj.tags.map(function(t){return t.token}).join(' ');
            };

            // This is quick and incomplete.
            Sentences.prototype.type = function(callback) {
                var callback = callback || false;

                // Check for implicit you before popping a tag.
                var implicitYou = this.implicitYou();

                // FIXME - punct seems useless
                var lastElement = this.posObj.punct();
                lastElement = (lastElement.length != 0) ? lastElement.pop() : this.posObj.tags.pop();

                if (lastElement.pos !== ".") {
                    if (implicitYou) {
                        this.senType = "COMMAND";
                    } else if (_$3(["WDT","WP","WP$","WRB"]).contains(this.posObj.tags[0].pos)) {
                        // Sentences that start with: who, what where when why and how, then they are questions
                        this.senType = "INTERROGATIVE";
                    } else if (_$3(["PRP"]).contains(lastElement.pos)) {
                        // Sentences that end in a Personal pronoun are most likely questions
                        // eg. We should run away, should we [?]
                        // eg. You want to see that again, do you [?]
                        this.senType = "INTERROGATIVE";
                    } else {
                        this.senType = "UNKNOWN";
                    }
                        
                } else {
                    switch(lastElement.token) {
                        case "?": this.senType = "INTERROGATIVE"; break;
                        case "!": this.senType = (implicitYou) ? "COMMAND":"EXCLAMATORY"; break;
                        case ".": this.senType = (implicitYou) ? "COMMAND":"DECLARATIVE";	break;
                    }
                }
                
                if (callback && _$3(callback).isFunction()) {
                    callback(this);
                } else {
                    return this.senType;
                }
            };

            var sentence_analyzer = Sentences;

            /*
             Copyright (c) 2014, Lee Wenzhu

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */

            function Bag() {
                this.dictionary = [];
                this.nElement = 0;
            }
            Bag.prototype.add = function(element) {
                this.dictionary.push(element);
                this.nElement++;
                return this;
            };

            Bag.prototype.isEmpty = function() {
                return this.nElement > 0;
            };

            Bag.prototype.contains = function(item) {
                return this.dictionary.indexOf(item) >= 0;
            };

            /**
             * unpack the bag , and get all items
             */
            Bag.prototype.unpack = function() {
                // return a copy is better than original
                return this.dictionary.slice();
            };

            var bag = Bag;

            var DirectedEdge = function(start, end, weight) {
                this.start = start;
                this.end = end;
                this.weight = weight;
            };

            DirectedEdge.prototype.weight = function() {
                return this.weight;
            };

            DirectedEdge.prototype.from = function() {
                return this.start;
            };

            DirectedEdge.prototype.to = function() {
                return this.end;
            };

            DirectedEdge.prototype.toString = function() {
                return util$2.format('%s -> %s, %s', this.start, this.end, this.weight);
            };

            var EdgeWeightedDigraph = function() {
                this.edgesNum = 0;
                this.adj = []; // adjacency list
            };

            /**
             * the number of vertexs saved.
             */
            EdgeWeightedDigraph.prototype.v = function() {
                return this.adj.length;
            };

            /**
             * the number of edges saved.
             */
            EdgeWeightedDigraph.prototype.e = function() {
                return this.edgesNum;
            };

            EdgeWeightedDigraph.prototype.add = function(start, end, weight) {
                var e = new DirectedEdge(start, end, weight);
                this.addEdge(e);
            };

            EdgeWeightedDigraph.prototype.addEdge = function(e) {
                if(!this.adj[e.from()]) {
                    this.adj[e.from()] = new bag();
                }
                this.adj[e.from()].add(e);
                this.edgesNum++;
            };

            /**
             * use callback on all edges from v.
             */
            EdgeWeightedDigraph.prototype.getAdj = function(v) {
                if(!this.adj[v]) return [];
                return this.adj[v].unpack();
            };

            /**
             * use callback on all edges.
             */
            EdgeWeightedDigraph.prototype.edges = function() {
                var adj = this.adj;
                var list = new bag();
                for(var i in adj) {
                    adj[i].unpack().forEach(function(item) {
                        list.add(item);
                    });
                }
                return list.unpack();
            };

            EdgeWeightedDigraph.prototype.toString = function() {
                var result = [];
                var list = this.edges();
                list.forEach(function(edge) {
                    result.push(edge.toString());
                });
                return result.join('\n');
            };

            var edge_weighted_digraph = EdgeWeightedDigraph;

            /*
             Copyright (c) 2014, Lee Wenzhu

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */

            /**
             * a topo sort for a digraph
             * @param {Digraph}
             */
            var Topological = function(g) {
                this.isDag = true;
                this.sorted = topoSort(uniqueVertexs(g.edges()), g.edges());
            };

            Topological.prototype.isDAG = function() {
                return this.isDag;
            };

            /**
             * get ordered vertexs of digraph
             */
            Topological.prototype.order = function() {
                return this.sorted.slice();
            };

            /**
             * @param {Array} all vertex in digraph
             * @param {Object} all edges in the digraph
             */
            function topoSort(vertexs, edges) {
                var sorted = [];
                var cursor = vertexs.length,
                    visited = {},
                    i = cursor;
                while (i--) {
                    if (!visited[i]) visit(vertexs[i], i, []);
                }

                return sorted.reverse();

                function visit(vertex, i, predecessors) {
                    if(predecessors.indexOf(vertex) >= 0) {
                        throw new Error('Cyclic dependency:' + JSON.stringify(vertex));
                    }

                    if(visited[i]) return;
                    visited[i] = true;

                    var outgoing = edges.filter(function(edge) {
                        return edge.to() === vertex;
                    });

                    var preds = [];
                    if(outgoing.length > 0) {
                        preds = predecessors.concat(vertex);
                    }
                    var from;
                    outgoing.forEach(function(edge) {
                        from = edge.from();
                        visit(from, vertexs.indexOf(from), preds);
                    });

                    sorted[--cursor] = vertex;
                }}

            function uniqueVertexs(edges) {
                var vertexs = [];
                var from, to;
                edges.forEach(function(edge) {
                    from = edge.from();
                    to = edge.to();
                    if (vertexs.indexOf(from) < 0) vertexs.push(from);
                    if (vertexs.indexOf(to) < 0) vertexs.push(to);
                });
                return vertexs;
            }
            var topological = Topological;

            /**
              *  The ShortestPathTree represents a data type for solving the
              *  single-source shortest paths problem in edge-weighted directed
              *  acyclic graphs (DAGs). The edge weights can be positive, negative, or zero.
              *  This implementation uses a topological-sort based algorithm.
              *  the distTo() and hasPathTo() methods take
              *  constant time and the pathTo() method takes time proportional to the
              *  number of edges in the longest path returned.
              */
            var ShortestPathTree = function(digraph, start) {
                var _this = this;
                this.edgeTo = [];
                this.distTo = [];
                this.distTo[start] = 0.0;
                this.start = start;
                this.top = new topological(digraph);
                this.top.order().forEach(function(vertex){
                    _this.relaxVertex(digraph, vertex, _this);
                });
            };

            ShortestPathTree.prototype.relaxEdge = function(e) {
                var distTo = this.distTo,
                    edgeTo = this.edgeTo;
                var v = e.from(), w = e.to();
                if (distTo[w] > distTo[v] + e.weight) {
                    distTo[w] = distTo[v] + e.weight;
                    edgeTo[w] = e;
                }
            };

            /**
             * relax a vertex v in the specified digraph g
             * @param {EdgeWeightedDigraph} the apecified digraph
             * @param {Vertex} v vertex to be relaxed
             */
            ShortestPathTree.prototype.relaxVertex = function(digraph, vertex, tree) {
                var distTo = tree.distTo;
                var edgeTo = tree.edgeTo;
                digraph.getAdj(vertex).forEach(function(edge){
                    var w = edge.to();
                    distTo[w] = /\d/.test(distTo[w]) ? distTo[w] : Number.MAX_VALUE;
                    distTo[vertex] = distTo[vertex] || 0;
                    if (distTo[w] > distTo[vertex] + edge.weight) {
                        // in case of the result of 0.28+0.34 is 0.62000001
                        distTo[w] = parseFloat((distTo[vertex] + edge.weight).toFixed(2));
                        edgeTo[w] = edge;
                    }
                });

            };

            ShortestPathTree.prototype.getDistTo = function(v) {
                return this.distTo[v];
            };

            ShortestPathTree.prototype.hasPathTo = function(v) {
                var dist = this.distTo[v];
                if(v == this.start) return false;
                return /\d/.test(dist) ? dist != Number.MAX_VALUE : false;
            };

            ShortestPathTree.prototype.pathTo = function(v) {
                if (!this.hasPathTo(v) || v == this.start) return [];
                var path = [];
                var edgeTo = this.edgeTo;
                for (var e = edgeTo[v]; !!e; e = edgeTo[e.from()]) {
                    path.push(e.to());
                }
                path.push(this.start);
                return path.reverse();
            };

            var shortest_path_tree = ShortestPathTree;

            // Probabilistic spellchecker based on http://norvig.com/spell-correct.html
            // The general idea is simple. Given a word, the spellchecker calculates all strings that are some user-defined edit distance away. Of those many candidates, it filters the ones that are not words and then returns an array of possible corrections in order of decreasing probability, based on the edit distance and the candidate's frequency in the input corpus
            // Words that are an edit distance of n away from the mispelled word are considered infinitely more probable than words that are of an edit distance >n

            // wordlist is a corpus (an array) from which word probabilities are calculated (so something like /usr/share/dict/words (on OSX) will work okay, but real world text will work better)
            function Spellcheck(wordlist) {
                this.trie = new trie();
                this.trie.addStrings(wordlist);
                this.word2frequency = {};
                for(var i in wordlist) {
                    if(!this.word2frequency[wordlist[i]]) {
                        this.word2frequency[wordlist[i]] = 0;
                    }
                    this.word2frequency[wordlist[i]]++;
                }
            }

            Spellcheck.prototype.isCorrect = function(word) {
                return this.trie.contains(word);
            };

            // Returns a list of suggested corrections, from highest to lowest probability 
            // maxDistance is the maximum edit distance 
            // According to Norvig, literature suggests that 80% to 95% of spelling errors are an edit distance of 1 away from the correct word. This is good, because there are roughly 54n+25 strings 1 edit distance away from any given string of length n. So after maxDistance = 2, this becomes very slow.
            Spellcheck.prototype.getCorrections = function(word, maxDistance) {
                var self = this;
                if(!maxDistance) maxDistance = 1;
                var edits = this.editsWithMaxDistance(word, maxDistance);
                edits = edits.slice(1,edits.length);
                edits = edits.map(function(editList) {
                   return editList.filter(function(word) { return self.isCorrect(word); })
                                  .map(function(word) { return [word, self.word2frequency[word]]; })
                                  .sort(function(a,b) { return a[1] > b[1] ? -1 : 1; })
                                  .map(function(wordscore) { return wordscore[0]; });
                });
                var flattened = [];
                for(var i in edits) {
                    if(edits[i].length) flattened = flattened.concat(edits[i]);
                }
                return flattened.filter(function (v, i, a) { return a.indexOf(v) == i });
            };

            // Returns all edits that are 1 edit-distance away from the input word
            Spellcheck.prototype.edits = function(word) {
                var alphabet = 'abcdefghijklmnopqrstuvwxyz';
                var edits = [];
                for(var i=0; i<word.length+1; i++) {
                    if(i>0) edits.push(word.slice(0,i-1)+word.slice(i,word.length)); // deletes
                    if(i>0 && i<word.length+1) edits.push(word.slice(0,i-1) + word.slice(i,i+1) + word.slice(i-1, i) + word.slice(i+1,word.length)); // transposes
                    for(var k=0; k<alphabet.length; k++) {
                        if(i>0) edits.push(word.slice(0,i-1)+alphabet[k]+word.slice(i,word.length)); // replaces
                        edits.push(word.slice(0,i)+alphabet[k]+word.slice(i,word.length)); // inserts
                    }
                }
                // Deduplicate edits
                edits = edits.filter(function (v, i, a) { return a.indexOf(v) == i });
                return edits;
            };

            // Returns all edits that are up to "distance" edit distance away from the input word
            Spellcheck.prototype.editsWithMaxDistance = function(word, distance) { 
                return this.editsWithMaxDistanceHelper(distance, [[word]]);
            };

            Spellcheck.prototype.editsWithMaxDistanceHelper = function(distanceCounter, distance2edits) {
                if(distanceCounter == 0) return distance2edits;
                var currentDepth = distance2edits.length-1;
                var words = distance2edits[currentDepth];
                var edits = this.edits(words[0]);
                distance2edits[currentDepth+1] = [];
                for(var i in words) {
                    distance2edits[currentDepth+1] = distance2edits[currentDepth+1].concat(this.edits(words[i]));
                }
                return this.editsWithMaxDistanceHelper(distanceCounter-1, distance2edits);
            };

            var spellcheck = Spellcheck;

            /**
              *  The LongestPathTree represents a data type for solving the
              *  single-source longest paths problem in edge-weighted directed
              *  acyclic graphs (DAGs). The edge weights can be positive, negative, or zero.
              *  This implementation uses a topological-sort based algorithm.
              *  the distTo() and hasPathTo() methods take
              *  constant time and the pathTo() method takes time proportional to the
              *  number of edges in the longest path returned.
              */
            var LongestPathTree = function(digraph, start) {
                var _this = this;
                this.edgeTo = [];
                this.distTo = [];
                this.distTo[start] = 0.0;
                this.start = start;
                this.top = new topological(digraph);
                this.top.order().forEach(function(vertex){
                    _this.relaxVertex(digraph, vertex, _this);
                });
            };

            LongestPathTree.prototype.relaxEdge = function(e) {
                var distTo = this.distTo,
                    edgeTo = this.edgeTo;
                var v = e.from(), w = e.to();
                if (distTo[w] < distTo[v] + e.weight) {
                    distTo[w] = distTo[v] + e.weight;
                    edgeTo[w] = e;
                }
            };

            /**
             * relax a vertex v in the specified digraph g
             * @param {EdgeWeightedDigraph} the apecified digraph
             * @param {Vertex} v vertex to be relaxed
             */
            LongestPathTree.prototype.relaxVertex = function(digraph, vertex, tree) {
                var distTo = tree.distTo;
                var edgeTo = tree.edgeTo;

                digraph.getAdj(vertex).forEach(function(edge){
                    var w = edge.to();
                    distTo[w] = distTo[w] || 0.0;
                    distTo[vertex] = distTo[vertex] || 0.0;
                    if (distTo[w] < distTo[vertex] + edge.weight) {
                        // in case of the result of 0.28+0.34 is 0.62000001
                        distTo[w] = parseFloat((distTo[vertex] + edge.weight).toFixed(2));
                        edgeTo[w] = edge;
                    }
                });

            };

            LongestPathTree.prototype.getDistTo = function(v) {
                return this.distTo[v];
            };

            LongestPathTree.prototype.hasPathTo = function(v) {
                return !!this.distTo[v];
            };

            LongestPathTree.prototype.pathTo = function(v) {
                if (!this.hasPathTo(v)) return [];
                var path = [];
                var edgeTo = this.edgeTo;
                for (var e = edgeTo[v]; !!e; e = edgeTo[e.from()]) {
                    path.push(e.to());
                }
                path.push(this.start);
                return path.reverse();
            };

            var longest_path_tree = LongestPathTree;

            /*
            Copyright (c) 2011, Rob Ellis, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var _$4 = underscore._,
                Tokenizer$2 = regexp_tokenizer.WordTokenizer,
                tokenizer$3 = new Tokenizer$2();

            var setTokenizer = function(t) {
                if(!_$4.isFunction(t.tokenize))
                    throw new Error('Expected a valid Tokenizer');
                tokenizer$3 = t;
            };

            var ngrams_2 = function(sequence, n, startSymbol, endSymbol) {
                return ngrams(sequence, n, startSymbol, endSymbol);
            };

            var bigrams = function(sequence, startSymbol, endSymbol) {
                return ngrams(sequence, 2, startSymbol, endSymbol);
            };

            var trigrams = function(sequence, startSymbol, endSymbol) {
                return ngrams(sequence, 3, startSymbol, endSymbol);
            };

            var multrigrams = function(sequence, n, startSymbol, endSymbol) {
                return ngrams(sequence, n, startSymbol, endSymbol);
            };

            var ngrams = function(sequence, n, startSymbol, endSymbol) {
                var result = [];
                
                if (!_$4(sequence).isArray()) {
                    sequence = tokenizer$3.tokenize(sequence);
                }

                var count = _$4.max([0, sequence.length - n + 1]);

                // Check for left padding    
                if(typeof startSymbol !== "undefined" && startSymbol !== null) {
                    // Create an array of (n) start symbols
                    var blanks = [];
                    for(var i = 0 ; i < n ; i++) {
                        blanks.push(startSymbol);
                    }

                    // Create the left padding
                    for(var p = n - 1 ; p > 0 ; p--) {
                        // Create a tuple of (p) start symbols and (n - p) words
                        result.push(blanks.slice(0, p).concat(sequence.slice(0, n - p)));
                    }
                }

                // Build the complete ngrams
                for (var i = 0; i < count; i++) {
                    result.push(sequence.slice(i, i + n));
                }

                // Check for right padding
                if(typeof endSymbol !== "undefined" && endSymbol !== null) {
                    // Create an array of (n) end symbols
                    var blanks = [];
                    for(var i = 0 ; i < n ; i++) {
                        blanks.push(endSymbol);
                    }

                    // create the right padding
                    for(var p = n - 1 ; p > 0 ; p--) {
                        // Create a tuple of (p) start symbols and (n - p) words
                        result.push(sequence.slice(sequence.length - p, sequence.length).concat(blanks.slice(0, n - p)));
                    }
                }
                
                return result;
            };

            var ngrams_1 = {
            	setTokenizer: setTokenizer,
            	ngrams: ngrams_2,
            	bigrams: bigrams,
            	trigrams: trigrams,
            	multrigrams: multrigrams
            };

            /*
            Copyright (c) 2014, Lee Wenzhu

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var _$5 = underscore._;

            var ngrams_1$1 = function(sequence, n, startSymbol, endSymbol) {
                return ngrams$1(sequence, n, startSymbol, endSymbol);
            };

            var bigrams$1 = function(sequence, startSymbol, endSymbol) {
                return ngrams$1(sequence, 2, startSymbol, endSymbol);
            };

            var trigrams$1 = function(sequence, startSymbol, endSymbol) {
                return ngrams$1(sequence, 3, startSymbol, endSymbol);
            };

            var ngrams$1 = function(sequence, n, startSymbol, endSymbol) {
                var result = [], i;
                
                if (!_$5(sequence).isArray()) {
                    sequence = sequence.split('');
                }

                var count = _$5.max([0, sequence.length - n + 1]);

                // Check for left padding    
                if(typeof startSymbol !== "undefined" && startSymbol !== null) {
                    // Create an array of (n) start symbols
                    var blanks = [];
                    for(i = 0 ; i < n ; i++) {
                        blanks.push(startSymbol);
                    }

                    // Create the left padding
                    for(var p = n - 1 ; p > 0 ; p--) {
                        // Create a tuple of (p) start symbols and (n - p) words
                        result.push(blanks.slice(0, p).concat(sequence.slice(0, n - p)));
                    }
                }

                // Build the complete ngrams
                for (i = 0; i < count; i++) {
                    result.push(sequence.slice(i, i + n));
                }

                // Check for right padding
                if(typeof endSymbol !== "undefined" && endSymbol !== null) {
                    // Create an array of (n) end symbols
                    var blanks = [];
                    for(var i = 0 ; i < n ; i++) {
                        blanks.push(endSymbol);
                    }

                    // create the right padding
                    for(var p = n - 1 ; p > 0 ; p--) {
                        // Create a tuple of (p) start symbols and (n - p) words
                        result.push(sequence.slice(sequence.length - p, sequence.length).concat(blanks.slice(0, n - p)));
                    }
                }
                
                return result;
            };

            var ngrams_zh = {
            	ngrams: ngrams_1$1,
            	bigrams: bigrams$1,
            	trigrams: trigrams$1
            };

            /*
            Copyright (c) 2012, Adam Phillabaum, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            Unless otherwise stated by a specific section of code

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // Computes the Jaro distance between two string -- intrepreted from:
            // http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance
            // s1 is the first string to compare
            // s2 is the second string to compare
            function distance$1(s1, s2) {
                if (typeof(s1) !== "string" || typeof(s2) !== "string") {
                    return 0;
                }

                if (s1.length === 0 || s2.length === 0) {
                    return 0;
                }

                s1 = s1.toLowerCase(), s2 = s2.toLowerCase();

                var matchWindow = (Math.floor(Math.max(s1.length, s2.length) / 2.0)) - 1;
                var matches1 = new Array(s1.length);
                var matches2 = new Array(s2.length);
                var m = 0; // number of matches
                var t = 0; // number of transpositions
                var i = 0; // index for string 1
                var k = 0; // index for string 2

                //debug helpers
                //console.log("s1: " + s1 + "; s2: " + s2);
                //console.log(" - matchWindow: " + matchWindow);

                for (i = 0; i < s1.length; i++) { // loop to find matched characters
                    var start = Math.max(0, (i - matchWindow)); // use the higher of the window diff
                    var end = Math.min((i + matchWindow + 1), s2.length); // use the min of the window and string 2 length

                    for (k = start; k < end; k++) { // iterate second string index
                        if (matches2[k]) { // if second string character already matched
                            continue;
                        }
                        if (s1[i] !== s2[k]) { // characters don't match
                            continue;
                        }

                        // assume match if the above 2 checks don't continue
                        matches1[i] = true;
                        matches2[k] = true;
                        m++;
                        break;
                    }
                }

                // nothing matched
                if (m === 0) {
                    return 0.0;
                }

                k = 0; // reset string 2 index
                for(i = 0; i < s1.length; i++) { // loop to find transpositions
                    if (!matches1[i]) { // non-matching character
                        continue;
                    }
                    while(!matches2[k]) { // move k index to the next match
                        k++;
                    }
                    if (s1[i] !== s2[k]) { // if the characters don't match, increase transposition
                        t++;
                    }
                    k++; // iterate k index normally
                }

                // transpositions divided by 2
                t = t / 2.0;

                return ((m / s1.length) + (m / s2.length) + ((m - t) / m)) / 3.0;
            }

            // Computes the Winkler distance between two string -- intrepreted from:
            // http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance
            // s1 is the first string to compare
            // s2 is the second string to compare
            // dj is the Jaro Distance (if you've already computed it), leave blank and the method handles it
            function JaroWinklerDistance(s1, s2, dj) {
                if (s1 === s2) {
                    return 1;
                } else {
                    var jaro = (typeof(dj) === 'undefined') ? distance$1(s1,s2) : dj;
                    var p = 0.1; // default scaling factor
                    var l = 0; // length of the matching prefix
                    while(s1[l] === s2[l] && l < 4) {
                        l++;
                    }

                    return jaro + l * p * (1 - jaro);
                }
            }
            var jaroWinkler_distance = JaroWinklerDistance;

            /*
            Copyright (c) 2012, Sid Nallu, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            /*
             * contribution by sidred123
             */

            /*
             * Compute the Levenshtein distance between two strings.
             * Algorithm based from Speech and Language Processing - Daniel Jurafsky and James H. Martin.
             */



            // Walk the path back from the matchEnd to the beginning of the match.
            // Do this by traversing the distanceMatrix as you would a linked list,
            // following going from cell child to parent until reach row 0.
            function _getMatchStart(distanceMatrix, matchEnd, sourceLength) {
              var row = sourceLength;
              var column = matchEnd;
              var tmpRow;
              var tmpColumn;

              // match will be empty string
              if (matchEnd === 0) { return 0; }

              while(row > 1 && column > 1) {
               tmpRow = row;
               tmpColumn = column;
               row = distanceMatrix[tmpRow][tmpColumn].parentCell.row;
               column = distanceMatrix[tmpRow][tmpColumn].parentCell.column;
              }

              return column-1;
            }

            function getMinCostSubstring(distanceMatrix, source, target) {
              var sourceLength = source.length;
              var targetLength = target.length;
              var minDistance = sourceLength + targetLength;
              var matchEnd = targetLength;

              // Find minimum value in last row of the cost matrix. This cell marks the
              // end of the match string.
              for (var column = 0; column <= targetLength; column++) {
                if (minDistance > distanceMatrix[sourceLength][column].cost) {
                  minDistance = distanceMatrix[sourceLength][column].cost;
                  matchEnd = column;
                }
              }

              matchStart = _getMatchStart(distanceMatrix, matchEnd, sourceLength);
              return {substring: target.slice(matchStart, matchEnd), distance: minDistance};
            }

            /*
            * Returns the Damerau-Levenshtein distance between strings. Counts the distance
            * between two strings by returning the number of edit operations required to
            * convert `source` into `target`.
            *
            * Valid edit operations are:
            *  - transposition, insertion, deletion, and substitution
            *
            * Options:
            *  insertion_cost: (default: 1)
            *  deletion_cost: number (default: 1)
            *  substitution_cost: number (default: 1)
            *  transposition_cost: number (default: 1)
            *  search: boolean (default: false)
            *  restricted: boolean (default: false)
            */
            function DamerauLevenshteinDistance(source, target, options) {
                var damLevOptions = underscore.assign(
                    { transposition_cost: 1, restricted: false },
                    options || {},
                    { damerau: true }
                );
                return levenshteinDistance(source, target, damLevOptions);
            }

            function LevenshteinDistance(source, target, options) {
                var levOptions = underscore.assign({}, options || {}, { damerau: false });
                return levenshteinDistance(source, target, levOptions);
            }


            function levenshteinDistance (source, target, options) {
                if(isNaN(options.insertion_cost)) options.insertion_cost = 1;
                if(isNaN(options.deletion_cost)) options.deletion_cost = 1;
                if(isNaN(options.substitution_cost)) options.substitution_cost = 1;

                if(typeof options.search !== 'boolean') options.search = false;

                var isUnrestrictedDamerau = options.damerau && !options.restricted;
                var isRestrictedDamerau = options.damerau && options.restricted;

                if (isUnrestrictedDamerau) {
                    var lastRowMap = {};
                }

                var sourceLength = source.length;
                var targetLength = target.length;
                var distanceMatrix = [[{cost: 0}]]; //the root, has no parent cell

                for (var row =  1; row <= sourceLength; row++) {
                    distanceMatrix[row] = [];
                    distanceMatrix[row][0] = {cost: distanceMatrix[row-1][0].cost + options.deletion_cost, parentCell: {row: row-1, column: 0}};
                }

                for (var column = 1; column <= targetLength; column++) {
                    if (options.search) {
                      distanceMatrix[0][column] = {cost: 0};
                    } else {
                      distanceMatrix[0][column] = {cost: distanceMatrix[0][column-1].cost + options.insertion_cost, parentCell: {row: 0, column: column-1}};
                    }
                }

                for (var row = 1; row <= sourceLength; row++) {
                    if (isUnrestrictedDamerau) {
                        var lastColMatch = null;
                    }
                    for (var column = 1; column <= targetLength; column++) {
                        var costToInsert = distanceMatrix[row][column-1].cost + options.insertion_cost;
                        var costToDelete = distanceMatrix[row-1][column].cost + options.deletion_cost;

                        var sourceElement = source[row-1];
                        var targetElement = target[column-1];
                        var costToSubstitute = distanceMatrix[row-1][column-1].cost;
                        if (sourceElement !== targetElement) {
                            costToSubstitute = costToSubstitute + options.substitution_cost;
                        }

                        var possibleParents = [
                          {cost: costToInsert, coordinates: {row: row, column: column-1}},
                          {cost: costToDelete, coordinates: {row: row-1, column: column}},
                          {cost: costToSubstitute, coordinates: {row: row-1, column: column-1}}
                        ];

                        // We can add damerau to the possibleParents if the current
                        // target-letter has been encountered in our lastRowMap,
                        // and if there exists a previous column in this row where the
                        // row & column letters matched
                        var canDamerau = isUnrestrictedDamerau
                            && row > 1 && column > 1
                            && lastColMatch
                            && targetElement in lastRowMap;

                        if (canDamerau) {
                            var lastRowMatch = lastRowMap[targetElement];
                            var costBeforeTransposition =
                                distanceMatrix[lastRowMatch - 1][lastColMatch - 1].cost;
                            var costToTranspose = costBeforeTransposition
                                + ((row - lastRowMatch - 1) * options.deletion_cost)
                                + ((column - lastColMatch - 1) * options.insertion_cost)
                                + options.transposition_cost;
                            possibleParents.push({
                                cost: costToTranspose,
                                coordinates: {
                                    row: lastRowMatch - 1,
                                    column: lastColMatch - 1,
                                },
                            });
                        }
                        // Source and target chars are 1-indexed in the distanceMatrix so previous
                        // source/target element is (col/row - 2)
                        var canDoRestrictedDamerau = isRestrictedDamerau
                            && row > 1 && column > 1
                            && sourceElement === target[column - 2]
                            && source[row - 2] === targetElement;

                        if (canDoRestrictedDamerau) {
                            var costBeforeTransposition = distanceMatrix[row - 2][column - 2].cost;
                            possibleParents.push({
                                cost: costBeforeTransposition + options.transposition_cost,
                                coordinates: { row: row - 2, column: column - 2 },
                            });
                        }

                        var minCostParent = underscore.min(possibleParents, function(p) { return p.cost; });

                        distanceMatrix[row][column] = {cost: minCostParent.cost, parentCell: minCostParent.coordinates};

                        if (isUnrestrictedDamerau) {
                            lastRowMap[sourceElement] = row;
                            if (sourceElement === targetElement) {
                                lastColMatch = column;
                            }
                        }
                    }
                }

                if (!options.search) {
                    return distanceMatrix[sourceLength][targetLength].cost;
                }

                return getMinCostSubstring(distanceMatrix, source, target);
            }

            var levenshtein_distance = {
                LevenshteinDistance: LevenshteinDistance,
                DamerauLevenshteinDistance: DamerauLevenshteinDistance,
            };

            /*
            Copyright (c) 2011, John Crepezzi, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            // Get all of the pairs of letters for a string
            var letterPairs = function (str) {
              var numPairs = str.length - 1;
              var pairs = new Array(numPairs);
              for (var i = 0; i < numPairs; i++) {
                pairs[i] = str.substring(i, i + 2);
              }
              return pairs;
            };

            // Get all of the pairs in all of the words for a string
            var wordLetterPairs = function (str) {
              var allPairs = [], pairs;
              var words = str.split(/\s+/);
              for (var i = 0; i < words.length; i++) {
                pairs = letterPairs(words[i]);
                allPairs.push.apply(allPairs, pairs);
              }
              return allPairs;
            };

            // Perform some sanitization steps
            var sanitize = function (str) {
              return str.toLowerCase().replace(/^\s+|\s+$/g, '');
            };

            // Compare two strings, and spit out a number from 0-1
            var compare$1 = function (str1, str2) {
              var sanitized_str1 = sanitize(str1);
              var sanitized_str2 = sanitize(str2);
              var pairs1 = wordLetterPairs(sanitized_str1);
              var pairs2 = wordLetterPairs(sanitized_str2);
              var intersection = 0, union = pairs1.length + pairs2.length;
              if (union === 0) {
                  if (sanitized_str1 === sanitized_str2) {
                      return 1;
                  } else {
                      return 0;
                  }
              } else {
                var i, j, pair1, pair2;
                for (i = 0; i < pairs1.length; i++) {
                  pair1 = pairs1[i];
                  for (j = 0; j < pairs2.length; j++) {
                    pair2 = pairs2[j];
                    if (pair1 == pair2) {
                      intersection ++;
                      delete pairs2[j];
                      break;
                    }
                  }
                }
                return 2 * intersection / union;
              }
            };

            var dice_coefficient = compare$1;

            var conversionTable = {
            	"can't":"can not",
            	"won't":"will not",
            	"couldn't've":"could not have",
            	"i'm":"I am",
            	"how'd":"how did"
            };

            var rules$3 = [
            	{ regex: /([azAZ]*)n\'[tT]/g, output: "$1 not" },
            	{ regex: /([azAZ]*)\'[sS]/g, output: "$1 is" },
            	{ regex: /([azAZ]*)\'[lL][lL]/g, output: "$1 will" },
            	{ regex: /([azAZ]*)\'[rR][eE]/g, output: "$1 are" },
            	{ regex: /([azAZ]*)\'[vV][eE]/g, output: "$1 have" },
            	{ regex: /([azAZ]*)\'[dD]/g, output: "$1 would" }
            ];

            // Accepts a list of tokens to expand.
            var normalize_tokens = function(tokens) {
            	if(typeof tokens === "string") {
            		tokens = [tokens];
            	}
                    var results = [];
            	var rule_count = rules$3.length;
            	var num_tokens = tokens.length;
                    var i, token, r, rule;
                
                    for (i = 0; i < num_tokens; i++) {
                        token = tokens[i];
                        // Check the conversion table
                        if (conversionTable[token.toLowerCase()]) {
                            results = results.concat(conversionTable[token.toLowerCase()].split(/\W+/));
                        }
                        
                        // Apply the rules
                        else {
                            var matched = false;
                            for ( r = 0; r < rule_count; r++) {
                                rule = rules$3[r];
                                if (token.match(rule.regex)) {
                                    results = results.concat(token.replace(rule.regex, rule.output).split(/\W+/));
                                    matched = true;
                                    break;
                                }
                            }
                            if (!matched) {
                                results.push(token);
                            }
                        }
                    }

            	return results;
            };





            // export the relevant stuff.
            var normalize_tokens_1 = normalize_tokens;

            var normalizer = {
            	normalize_tokens: normalize_tokens_1
            };

            /*
             Copyright (c) 2012, Alexy Maslennikov

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */

            /**
             * Script to remove diacritics. Original source was taken from
             * http://lehelk.com/2011/05/06/script-to-remove-diacritics/
             */
            var diacriticsRemovalMap = [
                {'base':'A', 'letters':/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},
                {'base':'AA','letters':/[\uA732]/g},
                {'base':'AE','letters':/[\u00C6\u01FC\u01E2]/g},
                {'base':'AO','letters':/[\uA734]/g},
                {'base':'AU','letters':/[\uA736]/g},
                {'base':'AV','letters':/[\uA738\uA73A]/g},
                {'base':'AY','letters':/[\uA73C]/g},
                {'base':'B', 'letters':/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},
                {'base':'C', 'letters':/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},
                {'base':'D', 'letters':/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},
                {'base':'DZ','letters':/[\u01F1\u01C4]/g},
                {'base':'Dz','letters':/[\u01F2\u01C5]/g},
                {'base':'E', 'letters':/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},
                {'base':'F', 'letters':/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},
                {'base':'G', 'letters':/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},
                {'base':'H', 'letters':/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},
                {'base':'I', 'letters':/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},
                {'base':'J', 'letters':/[\u004A\u24BF\uFF2A\u0134\u0248]/g},
                {'base':'K', 'letters':/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},
                {'base':'L', 'letters':/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},
                {'base':'LJ','letters':/[\u01C7]/g},
                {'base':'Lj','letters':/[\u01C8]/g},
                {'base':'M', 'letters':/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},
                {'base':'N', 'letters':/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},
                {'base':'NJ','letters':/[\u01CA]/g},
                {'base':'Nj','letters':/[\u01CB]/g},
                {'base':'O', 'letters':/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},
                {'base':'OE','letters':/[\u0152]/g},
                {'base':'OI','letters':/[\u01A2]/g},
                {'base':'OO','letters':/[\uA74E]/g},
                {'base':'OU','letters':/[\u0222]/g},
                {'base':'P', 'letters':/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},
                {'base':'Q', 'letters':/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},
                {'base':'R', 'letters':/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},
                {'base':'S', 'letters':/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},
                {'base':'T', 'letters':/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},
                {'base':'TZ','letters':/[\uA728]/g},
                {'base':'U', 'letters':/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},
                {'base':'V', 'letters':/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},
                {'base':'VY','letters':/[\uA760]/g},
                {'base':'W', 'letters':/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},
                {'base':'X', 'letters':/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},
                {'base':'Y', 'letters':/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},
                {'base':'Z', 'letters':/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},
                {'base':'a', 'letters':/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},
                {'base':'aa','letters':/[\uA733]/g},
                {'base':'ae','letters':/[\u00E6\u01FD\u01E3]/g},
                {'base':'ao','letters':/[\uA735]/g},
                {'base':'au','letters':/[\uA737]/g},
                {'base':'av','letters':/[\uA739\uA73B]/g},
                {'base':'ay','letters':/[\uA73D]/g},
                {'base':'b', 'letters':/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},
                {'base':'c', 'letters':/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},
                {'base':'d', 'letters':/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},
                {'base':'dz','letters':/[\u01F3\u01C6]/g},
                {'base':'e', 'letters':/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},
                {'base':'f', 'letters':/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},
                {'base':'g', 'letters':/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},
                {'base':'h', 'letters':/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},
                {'base':'hv','letters':/[\u0195]/g},
                {'base':'i', 'letters':/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},
                {'base':'j', 'letters':/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},
                {'base':'k', 'letters':/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},
                {'base':'l', 'letters':/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},
                {'base':'lj','letters':/[\u01C9]/g},
                {'base':'m', 'letters':/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},
                {'base':'n', 'letters':/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},
                {'base':'nj','letters':/[\u01CC]/g},
                {'base':'o', 'letters':/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},
                {'base':'oe','letters':/[\u0153]/g},
                {'base':'oi','letters':/[\u01A3]/g},
                {'base':'ou','letters':/[\u0223]/g},
                {'base':'oo','letters':/[\uA74F]/g},
                {'base':'p','letters':/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},
                {'base':'q','letters':/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},
                {'base':'r','letters':/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},
                {'base':'s','letters':/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},
                {'base':'t','letters':/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},
                {'base':'tz','letters':/[\uA729]/g},
                {'base':'u','letters':/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},
                {'base':'v','letters':/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},
                {'base':'vy','letters':/[\uA761]/g},
                {'base':'w','letters':/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},
                {'base':'x','letters':/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},
                {'base':'y','letters':/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},
                {'base':'z','letters':/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}
            ];


            var remove_diacritics$2 = function(str) {
            	var rules = diacriticsRemovalMap;
            	for (var i = 0; i < rules.length; i++) {
            		str = str.replace(rules[i].letters, rules[i].base);
            	}
            	return str;
            };

            /*
             Copyright (c) 2012, Guillaume Marty

             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to deal
             in the Software without restriction, including without limitation the rights
             to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
             copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:

             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.

             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
             OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
             THE SOFTWARE.
             */

            /**
             * A transliteration of Katakana & Hiragana to roman characters using the
             * modified Hepburn system.
             * Rules based on CLDR transform rule set `Katakana-Latin-BGN.xml` but with
             * several bugs fixed:
             *  * Missing ū
             *  * Missing tsu + voiced kana
             *  * typos on my~ transliterations
             *  * support for long vowel sign
             *  * support for final small tsu
             *  * support for u + small vowels
             *  * support for su/shi/ji + small vowels
             *  * support for tchi/tsu/te/to + small vowels
             *  * support for fu + small vowels
             *  * support for katakana middle dot
             *
             * \@todo Take iteration marks into account.
             */

            var replacer$3 = utils$2.replacer;

            var transliterationTable1 = {
              'ウァ': 'wa', // KATAKANA LETTER U + SMALL A
              'ウィ': 'wi', // KATAKANA LETTER U + SMALL I
              'ウェ': 'we', // KATAKANA LETTER U + SMALL E
              'ウォ': 'wo', // KATAKANA LETTER U + SMALL O
              'ウー': 'ū', // KATAKANA LETTER VU + PROLONGED SOUND MARK

              'ヴァ': 'va', // KATAKANA LETTER VU + SMALL A
              'ヴィ': 'vi', // KATAKANA LETTER VU + SMALL I
              'ヴェ': 've', // KATAKANA LETTER VU + SMALL E
              'ヴォ': 'vo', // KATAKANA LETTER VU + SMALL O
              'ヴュ': 'vyu', // KATAKANA LETTER VU + SMALL YU

              'うぁ': 'wa', // HIRAGANA LETTER U + SMALL A
              'うぃ': 'wi', // HIRAGANA LETTER U + SMALL I
              'うぇ': 'we', // HIRAGANA LETTER U + SMALL E
              'うぉ': 'wo', // HIRAGANA LETTER U + SMALL O
              'うー': 'ū', // HIRAGANA LETTER VU + PROLONGED SOUND MARK

              'ゔぁ': 'va', // HIRAGANA LETTER VU + SMALL A
              'ゔぃ': 'vi', // HIRAGANA LETTER VU + SMALL I
              'ゔぇ': 've', // HIRAGANA LETTER VU + SMALL E
              'ゔぉ': 'vo', // HIRAGANA LETTER VU + SMALL O
              'ゔゅ': 'vyu' // HIRAGANA LETTER VU + SMALL YU
            };

            var transliterationTable2 = {
              'イェ': 'ye', // KATAKANA LETTER I + SMALL E

              'ア': 'a', // KATAKANA LETTER A
              'イ': 'i', // KATAKANA LETTER I
              'ウウ': 'ū', // KATAKANA LETTER U + U
              'ウ': 'u', // KATAKANA LETTER U
              'エ': 'e', // KATAKANA LETTER E
              'オウ': 'ō', // KATAKANA LETTER O + U
              'オ': 'o', // KATAKANA LETTER O

              'クァ': 'kwa', // KATAKANA LETTER KU + SMALL A
              'クィ': 'kwi', // KATAKANA LETTER KU + SMALL I
              'クェ': 'kwe', // KATAKANA LETTER KU + SMALL E
              'クォ': 'kwo', // KATAKANA LETTER KU + SMALL O

              'カ': 'ka', // KATAKANA LETTER KA
              'キョウ': 'kyō', // KATAKANA LETTER KI + SMALL YO + U
              'キュウ': 'kyū', // KATAKANA LETTER KI + SMALL YU + U
              'キャ': 'kya', // KATAKANA LETTER KI + SMALL YA
              'キョ': 'kyo', // KATAKANA LETTER KI + SMALL YO
              'キュ': 'kyu', // KATAKANA LETTER KI + SMALL YU
              'キ': 'ki', // KATAKANA LETTER KI
              'ク': 'ku', // KATAKANA LETTER KU
              'ケ': 'ke', // KATAKANA LETTER KE
              'コウ': 'kō', // KATAKANA LETTER KO + U
              'コ': 'ko', // KATAKANA LETTER KO

              'シェ': 'she', // KATAKANA LETTER SI + SMALL E
              'スィ': 'si', // KATAKANA LETTER SU + SMALL I

              'サ': 'sa', // KATAKANA LETTER SA
              'ショウ': 'shō', // KATAKANA LETTER SI + SMALL YO + U
              'シュウ': 'shū', // KATAKANA LETTER SI + SMALL YU + U
              'シャ': 'sha', // KATAKANA LETTER SI + SMALL YA
              'ショ': 'sho', // KATAKANA LETTER SI + SMALL YO
              'シュ': 'shu', // KATAKANA LETTER SI + SMALL YU
              'シ': 'shi', // KATAKANA LETTER SI
              'スウ': 'sū', // KATAKANA LETTER SU + U
              'ス': 'su', // KATAKANA LETTER SU
              'セ': 'se', // KATAKANA LETTER SE
              'ソウ': 'sō', // KATAKANA LETTER SO + U
              'ソ': 'so', // KATAKANA LETTER SO

              'チェ': 'che', // KATAKANA LETTER TI + SMALL E
              'ツァ': 'tsa', // KATAKANA LETTER TU + SMALL A
              'ツィ': 'tsi', // KATAKANA LETTER TU + SMALL I
              'ツェ': 'tse', // KATAKANA LETTER TU + SMALL E
              'ツォ': 'tso', // KATAKANA LETTER TU + SMALL O
              'ティ': 'ti', // KATAKANA LETTER TE + SMALL I
              'ディ': 'di', // KATAKANA LETTER DE + SMALL I
              'テュ': 'tyu', // KATAKANA LETTER TE + SMALL YU
              'デュ': 'dyu', // KATAKANA LETTER DE + SMALL YU
              'トィ': 'twi', // KATAKANA LETTER TO + SMALL I
              'トゥ': 'tu', // KATAKANA LETTER TO + SMALL U
              'ドィ': 'dwi', // KATAKANA LETTER DO + SMALL I
              'ドゥ': 'du', // KATAKANA LETTER DO + SMALL U

              'タ': 'ta', // KATAKANA LETTER TA
              'チョウ': 'chō', // KATAKANA LETTER TI + SMALL YO + U
              'チュウ': 'chū', // KATAKANA LETTER TI + SMALL YU + U
              'チャ': 'cha', // KATAKANA LETTER TI + SMALL YA
              'チョ': 'cho', // KATAKANA LETTER TI + SMALL YO
              'チュ': 'chu', // KATAKANA LETTER TI + SMALL YU
              'チ': 'chi', // KATAKANA LETTER TI
              'ツウ': 'tsū', // KATAKANA LETTER TU + U
              'ツ': 'tsu', // KATAKANA LETTER TU
              'テ': 'te', // KATAKANA LETTER TE
              'トウ': 'tō', // KATAKANA LETTER TO + U
              'ト': 'to', // KATAKANA LETTER TO

              'ナ': 'na', // KATAKANA LETTER NA
              'ニョウ': 'nyō', // KATAKANA LETTER NI + SMALL YO + U
              'ニュウ': 'nyū', // KATAKANA LETTER NI + SMALL YU + U
              'ニャ': 'nya', // KATAKANA LETTER NI + SMALL YA
              'ニョ': 'nyo', // KATAKANA LETTER NI + SMALL YO
              'ニュ': 'nyu', // KATAKANA LETTER NI + SMALL YU
              'ニ': 'ni', // KATAKANA LETTER NI
              'ヌウ': 'nū', // KATAKANA LETTER NU + U
              'ヌ': 'nu', // KATAKANA LETTER NU
              'ネ': 'ne', // KATAKANA LETTER NE
              'ノウ': 'nō', // KATAKANA LETTER NO + U
              'ノ': 'no', // KATAKANA LETTER NO

              'ファ': 'fa', // KATAKANA LETTER HU + SMALL A
              'フィ': 'fi', // KATAKANA LETTER HU + SMALL I
              //'フゥ': 'fu', // KATAKANA LETTER HU + SMALL U
              'フェ': 'fe', // KATAKANA LETTER HU + SMALL E
              'フォ': 'fo', // KATAKANA LETTER HU + SMALL O
              'フュ': 'fyu', // KATAKANA LETTER HU + SMALL YU
              'ホェ': 'hwe', // KATAKANA LETTER HO + SMALL E

              'ハ': 'ha', // KATAKANA LETTER HA
              'ヒョウ': 'hyō', // KATAKANA LETTER HI + SMALL YO + U
              'ヒュウ': 'hyū', // KATAKANA LETTER HI + SMALL YU + U
              'ヒャ': 'hya', // KATAKANA LETTER HI + SMALL YA
              'ヒョ': 'hyo', // KATAKANA LETTER HI + SMALL YO
              'ヒュ': 'hyu', // KATAKANA LETTER HI + SMALL YU
              'ヒ': 'hi', // KATAKANA LETTER HI
              'フウ': 'fū', // KATAKANA LETTER HU + U
              'フ': 'fu', // KATAKANA LETTER HU
              'ヘ': 'he', // KATAKANA LETTER HE
              'ホウ': 'hō', // KATAKANA LETTER HO + U
              'ホ': 'ho', // KATAKANA LETTER HO

              'マ': 'ma', // KATAKANA LETTER MA
              'ミョウ': 'myō', // KATAKANA LETTER MI + SMALL YO + U
              'ミュウ': 'myū', // KATAKANA LETTER MI + SMALL YU + U
              'ミャ': 'mya', // KATAKANA LETTER MI + SMALL YA
              'ミョ': 'myo', // KATAKANA LETTER MI + SMALL YO
              'ミュ': 'myu', // KATAKANA LETTER MI + SMALL YU
              'ミ': 'mi', // KATAKANA LETTER MI
              'ムウ': 'mū', // KATAKANA LETTER MU + U
              'ム': 'mu', // KATAKANA LETTER MU
              'メ': 'me', // KATAKANA LETTER ME
              'モウ': 'mō', // KATAKANA LETTER MO + U
              'モ': 'mo', // KATAKANA LETTER MO

              'ヤ': 'ya', // KATAKANA LETTER YA
              'ユウ': 'yū', // KATAKANA LETTER YU + U
              'ユ': 'yu', // KATAKANA LETTER YU
              'ヨウ': 'yō', // KATAKANA LETTER YO + U
              'ヨ': 'yo', // KATAKANA LETTER YO

              'リェ': 'rye', // KATAKANA LETTER RI + SMALL E

              'ラ': 'ra', // KATAKANA LETTER RA
              'リョウ': 'ryō', // KATAKANA LETTER RI + SMALL YO + U
              'リュウ': 'ryū', // KATAKANA LETTER RI + SMALL YU + U
              'リャ': 'rya', // KATAKANA LETTER RI + SMALL YA
              'リョ': 'ryo', // KATAKANA LETTER RI + SMALL YO
              'リュ': 'ryu', // KATAKANA LETTER RI + SMALL YU
              'リ': 'ri', // KATAKANA LETTER RI
              'ルウ': 'rū', // KATAKANA LETTER RU + U
              'ル': 'ru', // KATAKANA LETTER RU
              'レ': 're', // KATAKANA LETTER RE
              'ロウ': 'rō', // KATAKANA LETTER RO + U
              'ロ': 'ro', // KATAKANA LETTER RO

              'ワ': 'wa', // KATAKANA LETTER WA
              'ヰ': 'i', // KATAKANA LETTER WI
              'ヱ': 'e', // KATAKANA LETTER WE
              'ヲ': 'o', // KATAKANA LETTER WO

              'ン': 'n', // KATAKANA LETTER N

              'グァ': 'gwa', // KATAKANA LETTER GU + SMALL A
              'グィ': 'gwi', // KATAKANA LETTER GU + SMALL I
              'グェ': 'gwe', // KATAKANA LETTER GU + SMALL E
              'グォ': 'gwo', // KATAKANA LETTER GU + SMALL O

              'ガ': 'ga', // KATAKANA LETTER GA
              'ギョウ': 'gyō', // KATAKANA LETTER GI + SMALL YO + U
              'ギュウ': 'gyū', // KATAKANA LETTER GI + SMALL YU + U
              'ギャ': 'gya', // KATAKANA LETTER GI + SMALL YA
              'ギョ': 'gyo', // KATAKANA LETTER GI + SMALL YO
              'ギュ': 'gyu', // KATAKANA LETTER GI + SMALL YU
              'ギ': 'gi', // KATAKANA LETTER GI
              'グウ': 'gū', // KATAKANA LETTER GU + U
              'グ': 'gu', // KATAKANA LETTER GU
              'ゲ': 'ge', // KATAKANA LETTER GE
              'ゴウ': 'gō', // KATAKANA LETTER GO + U
              'ゴ': 'go', // KATAKANA LETTER GO

              'ジェ': 'je', // KATAKANA LETTER ZI + SMALL E
              'ズィ': 'zi', // KATAKANA LETTER ZU + SMALL I

              'ザ': 'za', // KATAKANA LETTER ZA
              'ジョウ': 'jō', // KATAKANA LETTER ZI + SMALL YO + U
              'ジュウ': 'jū', // KATAKANA LETTER ZI + SMALL YU + U
              'ジャ': 'ja', // KATAKANA LETTER ZI + SMALL YA
              'ジョ': 'jo', // KATAKANA LETTER ZI + SMALL YO
              'ジュ': 'ju', // KATAKANA LETTER ZI + SMALL YU
              'ジ': 'ji', // KATAKANA LETTER ZI
              'ズウ': 'zū', // KATAKANA LETTER ZU + U
              'ズ': 'zu', // KATAKANA LETTER ZU
              'ゼ': 'ze', // KATAKANA LETTER ZE
              'ゾウ': 'zō', // KATAKANA LETTER ZO + U
              'ゾ': 'zo', // KATAKANA LETTER ZO

              'ダ': 'da', // KATAKANA LETTER DA
              'ヂ': 'ji', // KATAKANA LETTER DI
              'ヅウ': 'zū', // KATAKANA LETTER DU + U
              'ヅ': 'zu', // KATAKANA LETTER DU
              'デ': 'de', // KATAKANA LETTER DE
              'ドウ': 'dō', // KATAKANA LETTER DO + U
              'ド': 'do', // KATAKANA LETTER DO

              'ブュ': 'byu', // KATAKANA LETTER BU + SMALL YU

              'バ': 'ba', // KATAKANA LETTER BA
              'ビョウ': 'byō', // KATAKANA LETTER BI + SMALL YO + U
              'ビュウ': 'byū', // KATAKANA LETTER BI + SMALL YU + U
              'ビャ': 'bya', // KATAKANA LETTER BI + SMALL YA
              'ビョ': 'byo', // KATAKANA LETTER BI + SMALL YO
              'ビュ': 'byu', // KATAKANA LETTER BI + SMALL YU
              'ビ': 'bi', // KATAKANA LETTER BI
              'ブウ': 'bū', // KATAKANA LETTER BU + U
              'ブ': 'bu', // KATAKANA LETTER BU
              'ベ': 'be', // KATAKANA LETTER BE
              'ボウ': 'bō', // KATAKANA LETTER BO + U
              'ボ': 'bo', // KATAKANA LETTER BO

              'パ': 'pa', // KATAKANA LETTER PA
              'ピョウ': 'pyō', // KATAKANA LETTER PI + SMALL YO + U
              'ピュウ': 'pyū', // KATAKANA LETTER PI + SMALL YU + U
              'ピャ': 'pya', // KATAKANA LETTER PI + SMALL YA
              'ピョ': 'pyo', // KATAKANA LETTER PI + SMALL YO
              'ピュ': 'pyu', // KATAKANA LETTER PI + SMALL YU
              'ピ': 'pi', // KATAKANA LETTER PI
              'プウ': 'pū', // KATAKANA LETTER PU + U
              'プ': 'pu', // KATAKANA LETTER PU
              'ペ': 'pe', // KATAKANA LETTER PE
              'ポウ': 'pō', // KATAKANA LETTER PO + U
              'ポ': 'po', // KATAKANA LETTER PO

              'ヴ': 'v', // KATAKANA LETTER VU

              '・': ' ', // KATAKANA MIDDLE DOT

              'いぇ': 'ye', // HIRAGANA LETTER I + SMALL E

              'あ': 'a', // HIRAGANA LETTER A
              'い': 'i', // HIRAGANA LETTER I
              'うう': 'ū', // HIRAGANA LETTER U + U
              'う': 'u', // HIRAGANA LETTER U
              'え': 'e', // HIRAGANA LETTER E
              'おう': 'ō', // HIRAGANA LETTER O + U
              'お': 'o', // HIRAGANA LETTER O

              'くぁ': 'kwa', // HIRAGANA LETTER KU + SMALL A
              'くぃ': 'kwi', // HIRAGANA LETTER KU + SMALL I
              'くぇ': 'kwe', // HIRAGANA LETTER KU + SMALL E
              'くぉ': 'kwo', // HIRAGANA LETTER KU + SMALL O

              'か': 'ka', // HIRAGANA LETTER KA
              'きょう': 'kyō', // HIRAGANA LETTER KI + SMALL YO + U
              'きゅう': 'kyū', // HIRAGANA LETTER KI + SMALL YU + U
              'きゃ': 'kya', // HIRAGANA LETTER KI + SMALL YA
              'きょ': 'kyo', // HIRAGANA LETTER KI + SMALL YO
              'きゅ': 'kyu', // HIRAGANA LETTER KI + SMALL YU
              'き': 'ki', // HIRAGANA LETTER KI
              'くう': 'kū', // HIRAGANA LETTER KU + U
              'く': 'ku', // HIRAGANA LETTER KU
              'け': 'ke', // HIRAGANA LETTER KE
              'こう': 'kō', // HIRAGANA LETTER KO + U
              'こ': 'ko', // HIRAGANA LETTER KO

              'しぇ': 'she', // HIRAGANA LETTER SI + SMALL E
              'すぃ': 'si', // HIRAGANA LETTER SU + SMALL I

              'さ': 'sa', // HIRAGANA LETTER SA
              'しょう': 'shō', // HIRAGANA LETTER SI + SMALL YO + U
              'しゅう': 'shū', // HIRAGANA LETTER SI + SMALL YU + U
              'しゃ': 'sha', // HIRAGANA LETTER SI + SMALL YA
              'しょ': 'sho', // HIRAGANA LETTER SI + SMALL YO
              'しゅ': 'shu', // HIRAGANA LETTER SI + SMALL YU
              'し': 'shi', // HIRAGANA LETTER SI
              'すう': 'sū', // HIRAGANA LETTER SU + U
              'す': 'su', // HIRAGANA LETTER SU
              'せ': 'se', // HIRAGANA LETTER SE
              'そう': 'sō', // HIRAGANA LETTER SO + U
              'そ': 'so', // HIRAGANA LETTER SO

              'ちぇ': 'che', // HIRAGANA LETTER TI + SMALL E
              'つぁ': 'tsa', // HIRAGANA LETTER TU + SMALL A
              'つぃ': 'tsi', // HIRAGANA LETTER TU + SMALL I
              'つぇ': 'tse', // HIRAGANA LETTER TU + SMALL E
              'つぉ': 'tso', // HIRAGANA LETTER TU + SMALL O
              'てぃ': 'ti', // HIRAGANA LETTER TE + SMALL I
              'でぃ': 'di', // HIRAGANA LETTER DE + SMALL I
              'てゅ': 'tyu', // HIRAGANA LETTER TE + SMALL YU
              'でゅ': 'dyu', // HIRAGANA LETTER DE + SMALL YU
              'とぃ': 'twi', // HIRAGANA LETTER TO + SMALL I
              'とぅ': 'tu', // HIRAGANA LETTER TO + SMALL U
              'どぃ': 'dwi', // HIRAGANA LETTER DO + SMALL I
              'どぅ': 'du', // HIRAGANA LETTER DO + SMALL U

              'た': 'ta', // HIRAGANA LETTER TA
              'ちょう': 'chō', // HIRAGANA LETTER TI + SMALL YO + U
              'ちゅう': 'chū', // HIRAGANA LETTER TI + SMALL YU + U
              'ちゃ': 'cha', // HIRAGANA LETTER TI + SMALL YA
              'ちょ': 'cho', // HIRAGANA LETTER TI + SMALL YO
              'ちゅ': 'chu', // HIRAGANA LETTER TI + SMALL YU
              'ち': 'chi', // HIRAGANA LETTER TI
              'つう': 'tsū', // HIRAGANA LETTER TU + U
              'つ': 'tsu', // HIRAGANA LETTER TU
              'て': 'te', // HIRAGANA LETTER TE
              'とう': 'tō', // HIRAGANA LETTER TO + U
              'と': 'to', // HIRAGANA LETTER TO

              'な': 'na', // HIRAGANA LETTER NA
              'にょう': 'nyō', // HIRAGANA LETTER NI + SMALL YO + U
              'にゅう': 'nyū', // HIRAGANA LETTER NI + SMALL YU + U
              'にゃ': 'nya', // HIRAGANA LETTER NI + SMALL YA
              'にょ': 'nyo', // HIRAGANA LETTER NI + SMALL YO
              'にゅ': 'nyu', // HIRAGANA LETTER NI + SMALL YU
              'に': 'ni', // HIRAGANA LETTER NI
              'ぬう': 'nū', // HIRAGANA LETTER NU + U
              'ぬ': 'nu', // HIRAGANA LETTER NU
              'ね': 'ne', // HIRAGANA LETTER NE
              'のう': 'nō', // HIRAGANA LETTER NO + U
              'の': 'no', // HIRAGANA LETTER NO

              'ふぁ': 'fa', // HIRAGANA LETTER HU + SMALL A
              'ふぃ': 'fi', // HIRAGANA LETTER HU + SMALL I
              //'ふぅ': 'fu', // HIRAGANA LETTER HU + SMALL U
              'ふぇ': 'fe', // HIRAGANA LETTER HU + SMALL E
              'ふぉ': 'fo', // HIRAGANA LETTER HU + SMALL O
              'ふゅ': 'fyu', // HIRAGANA LETTER HU + SMALL YU
              'ほぇ': 'hwe', // HIRAGANA LETTER HO + SMALL E

              'は': 'ha', // HIRAGANA LETTER HA
              'ひょう': 'hyō', // HIRAGANA LETTER HI + SMALL YO + U
              'ひゅう': 'hyū', // HIRAGANA LETTER HI + SMALL YU + U
              'ひゃ': 'hya', // HIRAGANA LETTER HI + SMALL YA
              'ひょ': 'hyo', // HIRAGANA LETTER HI + SMALL YO
              'ひゅ': 'hyu', // HIRAGANA LETTER HI + SMALL YU
              'ひ': 'hi', // HIRAGANA LETTER HI
              'ふう': 'fū', // HIRAGANA LETTER HU + U
              'ふ': 'fu', // HIRAGANA LETTER HU
              'へ': 'he', // HIRAGANA LETTER HE
              'ほう': 'hō', // HIRAGANA LETTER HO + U
              'ほ': 'ho', // HIRAGANA LETTER HO

              'ま': 'ma', // HIRAGANA LETTER MA
              'みょう': 'myō', // HIRAGANA LETTER MI + SMALL YO + U
              'みゅう': 'myū', // HIRAGANA LETTER MI + SMALL YU + U
              'みゃ': 'mya', // HIRAGANA LETTER MI + SMALL YA
              'みょ': 'myo', // HIRAGANA LETTER MI + SMALL YO
              'みゅ': 'myu', // HIRAGANA LETTER MI + SMALL YU
              'み': 'mi', // HIRAGANA LETTER MI
              'むう': 'mū', // HIRAGANA LETTER MU + U
              'む': 'mu', // HIRAGANA LETTER MU
              'め': 'me', // HIRAGANA LETTER ME
              'もう': 'mō', // HIRAGANA LETTER MO + U
              'も': 'mo', // HIRAGANA LETTER MO

              'や': 'ya', // HIRAGANA LETTER YA
              'ゆう': 'yū', // HIRAGANA LETTER YU + U
              'ゆ': 'yu', // HIRAGANA LETTER YU
              'よう': 'yō', // HIRAGANA LETTER YO + U
              'よ': 'yo', // HIRAGANA LETTER YO

              'りぇ': 'rye', // HIRAGANA LETTER RI + SMALL E

              'ら': 'ra', // HIRAGANA LETTER RA
              'りょう': 'ryō', // HIRAGANA LETTER RI + SMALL YO + U
              'りゅう': 'ryū', // HIRAGANA LETTER RI + SMALL YU + U
              'りゃ': 'rya', // HIRAGANA LETTER RI + SMALL YA
              'りょ': 'ryo', // HIRAGANA LETTER RI + SMALL YO
              'りゅ': 'ryu', // HIRAGANA LETTER RI + SMALL YU
              'り': 'ri', // HIRAGANA LETTER RI
              'るう': 'rū', // HIRAGANA LETTER RU + U
              'る': 'ru', // HIRAGANA LETTER RU
              'れ': 're', // HIRAGANA LETTER RE
              'ろう': 'rō', // HIRAGANA LETTER RO + U
              'ろ': 'ro', // HIRAGANA LETTER RO

              'わ': 'wa', // HIRAGANA LETTER WA
              'ゐ': 'i', // HIRAGANA LETTER WI
              'ゑ': 'e', // HIRAGANA LETTER WE
              'を': 'o', // HIRAGANA LETTER WO

              'ん': 'n', // HIRAGANA LETTER N

              'ぐぁ': 'gwa', // HIRAGANA LETTER GU + SMALL A
              'ぐぃ': 'gwi', // HIRAGANA LETTER GU + SMALL I
              'ぐぇ': 'gwe', // HIRAGANA LETTER GU + SMALL E
              'ぐぉ': 'gwo', // HIRAGANA LETTER GU + SMALL O

              'が': 'ga', // HIRAGANA LETTER GA
              'ぎょう': 'gyō', // HIRAGANA LETTER GI + SMALL YO + U
              'ぎゅう': 'gyū', // HIRAGANA LETTER GI + SMALL YU + U
              'ぎゃ': 'gya', // HIRAGANA LETTER GI + SMALL YA
              'ぎょ': 'gyo', // HIRAGANA LETTER GI + SMALL YO
              'ぎゅ': 'gyu', // HIRAGANA LETTER GI + SMALL YU
              'ぎ': 'gi', // HIRAGANA LETTER GI
              'ぐう': 'gū', // HIRAGANA LETTER GU + U
              'ぐ': 'gu', // HIRAGANA LETTER GU
              'げ': 'ge', // HIRAGANA LETTER GE
              'ごう': 'gō', // HIRAGANA LETTER GO + U
              'ご': 'go', // HIRAGANA LETTER GO

              'じぇ': 'je', // HIRAGANA LETTER ZI + SMALL E
              'ずぃ': 'zi', // HIRAGANA LETTER ZU + SMALL I

              'ざ': 'za', // HIRAGANA LETTER ZA
              'じょう': 'jō', // HIRAGANA LETTER ZI + SMALL YO + U
              'じゅう': 'jū', // HIRAGANA LETTER ZI + SMALL YU + U
              'じゃ': 'ja', // HIRAGANA LETTER ZI + SMALL YA
              'じょ': 'jo', // HIRAGANA LETTER ZI + SMALL YO
              'じゅ': 'ju', // HIRAGANA LETTER ZI + SMALL YU
              'じ': 'ji', // HIRAGANA LETTER ZI
              'ずう': 'zū', // HIRAGANA LETTER ZU + U
              'ず': 'zu', // HIRAGANA LETTER ZU
              'ぜ': 'ze', // HIRAGANA LETTER ZE
              'ぞう': 'zō', // HIRAGANA LETTER ZO + U
              'ぞ': 'zo', // HIRAGANA LETTER ZO

              'だ': 'da', // HIRAGANA LETTER DA
              'ぢ': 'ji', // HIRAGANA LETTER DI
              'づう': 'zū', // HIRAGANA LETTER DU + U
              'づ': 'zu', // HIRAGANA LETTER DU
              'で': 'de', // HIRAGANA LETTER DE
              'どう': 'dō', // HIRAGANA LETTER DO + U
              'ど': 'do', // HIRAGANA LETTER DO

              'ぶゅ': 'byu', // HIRAGANA LETTER BU + SMALL YU

              'ば': 'ba', // HIRAGANA LETTER BA
              'びょう': 'byō', // HIRAGANA LETTER BI + SMALL YO + U
              'びゅう': 'byū', // HIRAGANA LETTER BI + SMALL YU + U
              'びゃ': 'bya', // HIRAGANA LETTER BI + SMALL YA
              'びょ': 'byo', // HIRAGANA LETTER BI + SMALL YO
              'びゅ': 'byu', // HIRAGANA LETTER BI + SMALL YU
              'び': 'bi', // HIRAGANA LETTER BI
              'ぶう': 'bū', // HIRAGANA LETTER BU + U
              'ぶ': 'bu', // HIRAGANA LETTER BU
              'べ': 'be', // HIRAGANA LETTER BE
              'ぼう': 'bō', // HIRAGANA LETTER BO + U
              'ぼ': 'bo', // HIRAGANA LETTER BO

              'ぱ': 'pa', // HIRAGANA LETTER PA
              'ぴょう': 'pyō', // HIRAGANA LETTER PI + SMALL YO + U
              'ぴゅう': 'pyū', // HIRAGANA LETTER PI + SMALL YU + U
              'ぴゃ': 'pya', // HIRAGANA LETTER PI + SMALL YA
              'ぴょ': 'pyo', // HIRAGANA LETTER PI + SMALL YO
              'ぴゅ': 'pyu', // HIRAGANA LETTER PI + SMALL YU
              'ぴ': 'pi', // HIRAGANA LETTER PI
              'ぷう': 'pū', // HIRAGANA LETTER PU + U
              'ぷ': 'pu', // HIRAGANA LETTER PU
              'ぺ': 'pe', // HIRAGANA LETTER PE
              'ぽう': 'pō', // HIRAGANA LETTER PO + U
              'ぽ': 'po', // HIRAGANA LETTER PO

              'ゔ': 'v' // HIRAGANA LETTER VU
            };

            var transliterationTable3 = {
              'aァ': 'ā',
              'aぁ': 'ā',
              'iィー': 'ī',
              'iィ': 'ī',
              'iぃー': 'ī',
              'iぃ': 'ī',
              'aー': 'ā',
              'iー': 'ī',
              'uー': 'ū',
              'eー': 'ē',
              'oー': 'ō',

              // Fallback for small vowels
              'ァ': 'a',
              'ィ': 'i',
              'ゥ': 'u',
              'ェ': 'e',
              'ォ': 'o',
              'ぁ': 'a',
              'ぃ': 'i',
              'ぅ': 'u',
              'ぇ': 'e',
              'ぉ': 'o'
            };

            var replace1 = replacer$3(transliterationTable1);
            var replace2 = replacer$3(transliterationTable2);
            var replace3 = replacer$3(transliterationTable3);

            var ja = function(str) {
              str = replace1(str);

              str = str
                .replace(/ッ(?=[ン])/g, 'n')// KATAKANA LETTER SMALL TU
                .replace(/っ(?=[ん])/g, 'n')// HIRAGANA LETTER SMALL TU
                .replace(/ン(?=[バビブベボパピプペポマミムメモ])/g, 'm')// KATAKANA LETTER N
                .replace(/ん(?=[ばびぶべぼぱぴぷぺぽまみむめも])/g, 'm')// HIRAGANA LETTER N
                .replace(/ン(?=[ヤユヨアイウエオ])/g, "n'")// KATAKANA LETTER N
                .replace(/ん(?=[やゆよあいうえお])/g, "n'");// HIRAGANA LETTER N
              str = str
                .replace(/ッ(?=[カキクケコ])/g, 'k')// KATAKANA LETTER SMALL TU
                .replace(/っ(?=[かきくけこ])/g, 'k')// HIRAGANA LETTER SMALL TU
                .replace(/ッ(?=[ガギグゲゴ])/g, 'g')// KATAKANA LETTER SMALL TU
                .replace(/っ(?=[がぎぐげご])/g, 'g')// HIRAGANA LETTER SMALL TU
                .replace(/ッ(?=[サシスセソ])/g, 's')// KATAKANA LETTER SMALL TU
                .replace(/っ(?=[さしすせそ])/g, 's')// HIRAGANA LETTER SMALL TU
                .replace(/ッ(?=[ザズゼゾ])/g, 'z')// KATAKANA LETTER SMALL TU
                .replace(/っ(?=[ざずぜぞ])/g, 'z')// HIRAGANA LETTER SMALL TU
                .replace(/ッ(?=[ジ])/g, 'j')// KATAKANA LETTER SMALL TU
                .replace(/っ(?=[じ])/g, 'j')// HIRAGANA LETTER SMALL TU
                .replace(/ッ(?=[タチツテト])/g, 't')// KATAKANA LETTER SMALL TU
                .replace(/っ(?=[たちつてと])/g, 't')// HIRAGANA LETTER SMALL TU
                .replace(/ッ(?=[ダヂヅデド])/g, 't')// KATAKANA LETTER SMALL TU
                .replace(/っ(?=[だぢづでど])/g, 't')// HIRAGANA LETTER SMALL TU
                .replace(/ッ(?=[ハヒヘホ])/g, 'h')// KATAKANA LETTER SMALL TU
                .replace(/っ(?=[はひへほ])/g, 'h')// HIRAGANA LETTER SMALL TU
                .replace(/ッ(?=[フ])/g, 'f')// KATAKANA LETTER SMALL TU
                .replace(/っ(?=[ふ])/g, 'f')// HIRAGANA LETTER SMALL TU
                .replace(/ッ(?=[バビブベボ])/g, 'b')// KATAKANA LETTER SMALL TU
                .replace(/っ(?=[ばびぶべぼ])/g, 'b')// HIRAGANA LETTER SMALL TU
                .replace(/ッ(?=[パピプペポ])/g, 'p')// KATAKANA LETTER SMALL TU
                .replace(/っ(?=[ぱぴぷぺぽ])/g, 'p')// HIRAGANA LETTER SMALL TU
                .replace(/ッ(?=[ラリルレロ])/g, 'r')// KATAKANA LETTER SMALL TU
                .replace(/っ(?=[らりるれろ])/g, 'r');// HIRAGANA LETTER SMALL TU

              str = replace2(str);
              str = replace3(str);

              str = str
                .replace(/(ッ|っ)\B/g, 't');// FINAL KATAKANA LETTER SMALL TU

              return str;
            };

            /*
              Rule templates that provide metadata for generating transformation rules
              Copyright (C) 2017 Hugo W.L. ter Doest

              This program is free software: you can redistribute it and/or modify
              it under the terms of the GNU General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.

              This program is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU General Public License for more details.

              You should have received a copy of the GNU General Public License
              along with this program.  If not, see <http://www.gnu.org/licenses/>.
            */

            var ruleTemplates = {
              // Predicates as used in the English rules in data/English/tr_from_posjs.txt
              "NEXT-TAG": {
                // maps to the predicate function
                "function": next_tag_is,
                // Minimum required space before or after current position to be a relevant predicate
                "window": [0, 1],
                // The number of parameters the predicate takes
                "nrParameters": 1,
                // Function that returns relevant values for parameter 1
                "parameter1Values": nextTagParameterValues
              },
              "NEXT-WORD-IS-CAP": {
                "function": next_word_is_cap,
                "window": [0, 1],
                "nrParameters" : 0
              },
              "PREV-1-OR-2-OR-3-TAG": {
                "function": prev_1_or_2_or_3_tag,
                "window" : [-1, 0],
                "nrParameters" : 1,
                "parameter1Values": prev1Or2Or3TagParameterValues
              },
              "PREV-1-OR-2-TAG": {
                "function": prev_1_or_2_tag,
                "window": [-1, 0],
                "nrParameters": 1,
                "parameter1Values": prev1Or2TagParameterValues
              },
              "NEXT-WORD-IS-TAG": {
                "function": next_tag_is,
                "window": [0, 1],
                "nrParameters": 1,
                "parameter1Values": nextTagParameterValues
              },
              "PREV-TAG": {
                "function": prev_tag_is,
                "window": [-1, 0],
                "nrParameters": 1,
                "parameter1Values": prevTagParameterValues
              },
              /*
             "CURRENT-WORD-IS-TAG": {
               "function": current_word_is_tag,
               "window": [0],
               "nrParameter": 1,
               "parameter1Values": currentTagParameterValues
               },
              */
              "PREV-WORD-IS-CAP": {
                "function": prev_word_is_cap,
                "window": [-1, 0],
                "nrParameters": 0
              },
              "CURRENT-WORD-IS-CAP": {
                "function": current_word_is_cap,
                "window": [0, 0],
                "nrParameters": 0
              },
              "CURRENT-WORD-IS-NUMBER": {
                "function": current_word_is_number,
                "window": [0, 0],
                "nrParameters": 0
              },
              "CURRENT-WORD-IS-URL": {
                "function": current_word_is_url,
                "window": [0, 0],
                "nrParameters": 0
              },
              "CURRENT-WORD-ENDS-WITH": {
                "function": current_word_ends_with,
                "window": [0, 0],
                "nrParameters": 1,
                "parameter1Values": currentWordEndsWithParameterValues
              },
              "PREV-WORD-IS": {
                "function": prev_word_is,
                "window": [-1, 0],
                "nrParameters": 1,
                "parameter1Values": prevWordParameterValues
              },

              // Predicates as used in the Dutch rules in data/Dutch/brill_CONTEXTRULES.jg
              "PREVTAG": {
                "function": prev_tag_is,
                "window": [-1, 0],
                "nrParameters": 1,
                "parameter1Values": prevTagParameterValues
              },
              "NEXT1OR2TAG": {
                "function": next_1_or_2_tag_is,
                "window": [0, 1],
                "nrParameters": 1,
                "parameter1Values": next1Or2TagIsParameterValues
              },
              "NEXTTAG": {
                "function": next_tag_is,
                "window": [0, 1],
                "nrParameters": 1,
                "parameter1Values": nextTagParameterValues
              },
              "PREV1OR2TAG": {
                "function": prev_1_or_2_tag,
                "window": [-1, 0],
                "nrParameters": 1,
                "parameter1Values": prev1Or2TagParameterValues
              },
              "WDAND2TAGAFT": {
                "function": current_word_and_2_tag_after_are,
                "window": [0, 2],
                "nrParameters": 2,
                "parameter1Values": currentWordParameterValues,
                "parameter2Values": twoTagAfterParameterValues
              },
              "NEXT1OR2OR3TAG": {
                "function": next_1_or_2_or_3_tag,
                // Minimum required window to apply this template is one tag to the right
                "window": [0, 1],
                "nrParameters": 1,
                "parameter1Values": next1Or2Or3TagParameterValues
              },
              "CURWD": {
                "function": current_word_is,
                "window": [0, 0],
                "nrParameters": 1,
                "parameter1Values": currentWordParameterValues
              },
              "SURROUNDTAG": {
                "function": surrounded_by_tags,
                "window": [-1, 1],
                "nrParameters": 2,
                "parameter1Values": prevTagParameterValues,
                "parameter2Values": nextTagParameterValues
              },
              "PREV1OR2OR3TAG": {
                "function": prev_1_or_2_or_3_tag,
                // Minimum required window to apply this template is one tag to the left
                "window": [-1, 0],
                "nrParameters": 1,
                "parameter1Values": prev1Or2Or3TagParameterValues
              },
              "WDNEXTTAG": {
                "function": current_word_and_next_tag_are,
                "window": [0, 1],
                "nrParameters": 2,
                "parameter1Values": currentWordParameterValues,
                "parameter2Values": nextTagParameterValues
              },
              "PREV1OR2WD": {
                "function": prev_1_or_2_word_is,
                "window": [-1, 0],
                "nrParameters": 1,
                "parameter1Values": prev1Or2WordParameterValues
              },
              "NEXTWD": {
                "function": next_word_is,
                "window": [0, 1],
                "nrParameters": 1,
                "parameter1Values": nextWordParameterValues
              },
              "PREVWD": {
                "function": prev_word_is,
                "window": [-1, 0],
                "nrParameters": 1,
                "parameter1Values": prevWordParameterValues
              },
              "NEXT2TAG": {
                "function": next_2_tag_is,
                "window": [0, 2],
                "nrParameters": 1,
                "parameter1Values": next2TagParameterValues
              },
              "WDAND2TAGBFR": {
                "function": current_word_and_2_tag_before_are,
                "window": [-2, 0],
                "nrParameters": 2,
                "parameter1Values": currentWordParameterValues,
                "parameter2Values": twoTagBeforeParameterValues
              },
              "WDAND2AFT": {
                "function": current_word_and_2_after_are,
                "window": [0, 2],
                "nrParameters": 2,
                "parameter1Values": currentWordParameterValues,
                "parameter2Values": twoTagAfterParameterValues
              },
              "WDPREVTAG": {
                "function": current_word_and_prev_tag_are,
                "window": [-1, 0],
                "nrParameters": 2,
                "parameter1Values": currentWordParameterValues,
                "parameter2Values": prevTagParameterValues
              },
              "RBIGRAM": {
                "function": right_bigram_is,
                "window": [0, 1],
                "nrParameters": 2,
                "parameter1Values": currentWordParameterValues,
                "parameter2Values": nextWordParameterValues
              },
              "LBIGRAM": {
                "function": left_bigram_is,
                "window": [-1, 0],
                "nrParameters": 2,
                "parameter1Values": prevWordParameterValues,
                "parameter2Values": currentWordParameterValues
              },
              "NEXTBIGRAM": {
                "function": next_bigram_is,
                "window": [0, 2],
                "nrParameters": 2,
                "parameter1Values": nextWordParameterValues,
                "parameter2Values": twoWordAfterParameterValues
              },
              "PREVBIGRAM": {
                "function": prev_bigram_is,
                "window": [-2, 0],
                "nrParameters": 2,
                "parameter1Values": twoWordBeforeParameterValues,
                "parameter2Values": prevWordParameterValues
              },
              "PREV2TAG": {
                "function": prev_2_tag_is,
                "window": [-2, 0],
                "nrParameters": 2,
                "parameter1Values": twoTagBeforeParameterValues,
                "parameter2Values": prevTagParameterValues
              },
              "NEXT1OR2WD": {
                "function": next_1_or_2_word_is,
                "window": [0, 1],
                "nrParameters": 1,
                "parameter1Values": next1Or2WordParameterValues
              },
              "DEFAULT": {
                "function": default_predicate,
                "window": [0, 0],
                "nrParameters": 0
              }
            };


            // ==================================
            // Predicates that start with words
            // ==================================
            function next_word_is_cap(tagged_sentence, i, parameter) {
              if (i < tagged_sentence.length - 1) {
                var next_word = tagged_sentence[i+1][0];
                return(next_word[0] === next_word[0].toUpperCase());
              }
              else {
                return(false);
              }
            }

            /*
            function next_word_is_cap(sentence, i, parameter) {
              if (i < sentence.length - 1) {
                var next_word = tagged_sentence[i+1].token;
                return(next_word[0] === next_word[0].toUpperCase());
              }
              else {
                return(false);
              }
            }
            */

            function next_word_is(tagged_sentence, i, parameter) {
              if (i < tagged_sentence.length - 1) {
                return(tagged_sentence[i + 1][0] === parameter);
              }
            }

            function nextWordParameterValues(sentence, i) {
              if (i < sentence.length - 1) {
                return [sentence[i + 1].token];
              }
              else {
                return [];
              }
            }

            function prev_word_is_cap(tagged_sentence, i, parameter) {
              var prev_word = null;
              if (i > 0) {
                prev_word = tagged_sentence[i-1][0];
                return(prev_word[0] === prev_word[0].toUpperCase());
              }
              return(false);
            }

            function current_word_is_cap(tagged_sentence, i, parameter) {
              var current_word = tagged_sentence[i][0];
              return(current_word[0] === current_word[0].toUpperCase());
            }

            function currentWordParameterValues(sentence, i) {
              return [sentence[i].token];
            }

            function current_word_is(tagged_sentence, i, parameter) {
              return(tagged_sentence[i][0] === parameter);
            }

            function isNumeric(num) {
              return (!isNaN(num));
            }

            function current_word_is_number(tagged_sentence, i, parameter) {
              var is_number = isNumeric(tagged_sentence[i][0]);
              // Attempt to parse it as a float
              if (!is_number) {
                is_number = parseFloat(tagged_sentence[i][0]);
              }
              return((parameter === "YES") ? is_number : !is_number);
            }

            // Checks if the current word is a url
            // Adapted from the original Javascript Brill tagger
            function current_word_is_url(tagged_sentence, i, parameter) {
              var is_url = false;
              if (tagged_sentence[i][0].indexOf(".") > -1) {
                // url if there are two contiguous alpha characters
                if (/[a-zA-Z]{2}/.test(tagged_sentence[i][0])) {
                  is_url = true;
                }
              }
              return((parameter === "YES") ? is_url : !is_url);
            }

            function current_word_and_2_tag_after_are(tagged_sentence, i, parameter1, parameter2) {
              if (i < tagged_sentence.length - 2) {
                if (tagged_sentence[i+2][1] === parameter2) {
                  return(tagged_sentence[i][0] === parameter1);
                }
                else {
                  return(false);
                }
              }
              else {
                return(false);
              }
            }

            function twoTagAfterParameterValues(sentence, i) {
              if (i < sentence.length - 2) {
                return [sentence[i + 2].tag];
              }
              else {
                return [];
              }
            }

            function current_word_and_next_tag_are(tagged_sentence, i, parameter1, parameter2) {
              var next_tag = false;
              // check current word
              var current_word = (tagged_sentence[i][0] === parameter1);
              // check next tag
              if (i < tagged_sentence.length - 1) {
                next_tag = (tagged_sentence[i+1][1] === parameter2);
              }
              return(current_word && next_tag);
            }

            function current_word_and_prev_tag_are(tagged_sentence, i, parameter1, parameter2) {
              var prev_tag = false;
              // check current word
              var current_word = (tagged_sentence[i][0] === parameter2);
              // check prev tag
              if (i > 0) {
                prev_tag = (tagged_sentence[i-1][1] === parameter1);
              }
              return(current_word && prev_tag);
            }

            function current_word_and_2_tag_before_are(tagged_sentence, i, parameter1, parameter2) {
              var two_tags_before = false;
              // check current word
              var current_word = (tagged_sentence[i][0] === parameter2);
              if (i > 1) {
                // check two tags before
                two_tags_before = (tagged_sentence[i-2][1] === parameter1);
              }
              return(current_word && two_tags_before);
            }

            function twoTagBeforeParameterValues(sentence, i) {
              if (i > 1) {
                return [sentence[i - 2].tag];
              }
              else {
                return [];
              }
            }

            function current_word_and_2_after_are(tagged_sentence, i, parameter1, parameter2) {
              var two_words_after = false;
              // check current word
              var current_word = (tagged_sentence[i][0] === parameter1);
              if (i < tagged_sentence - 2) {
                two_words_after = (tagged_sentence[i+2][0] === parameter2);
              }
              return(current_word && two_words_after);
            }

            function prev_word_is(tagged_sentence, i, parameter) {
              if (i > 0) {
                return(tagged_sentence[i-1][0].toLowerCase() === parameter.toLowerCase());
              }
              else {
                return(false);
              }
            }

            // Returns the right value for parameter 1 of prev_word_is
            function prevWordParameterValues(sentence, i) {
              if (i > 0) {
                return [sentence[i - 1].token];
              }
              else {
                return [];
              }
            }

            function prev_1_or_2_word_is(tagged_sentence, i, parameter) {
              var prev_1 = false;
              var prev_2 = false;
              if (i > 0) {
                prev_1 = (tagged_sentence[i-1][0].toLowerCase() === parameter.toLowerCase());
              }
              if (i > 1) {
                prev_2 = (tagged_sentence[i-2][0].toLowerCase() === parameter.toLowerCase());
              }
              return(prev_1 || prev_2);
            }

            function prev1Or2WordParameterValues(sentence, i) {
              var values = [];
              if (i > 0) {
                values.push(sentence[i - 1].token);
              }
              if (i > 1) {
                values.push(sentence[i - 2].token);
              }
              return values;
            }

            // Indicates whether or not this string ends with the specified string.
            // Adapted from the original Javascript Brill tagger
            function current_word_ends_with(tagged_sentence, i, parameter) {
              var word = tagged_sentence[i][0];
              if (!parameter || (parameter.length > word.length)) {
                return false;
              }
              return(word.indexOf(parameter) === (word.length - parameter.length));
            }

            // sentence is an array of token records
            function currentWordEndsWithParameterValues(sentence, i) {
              var values = ["ing"];

              return values;
            }

            function right_bigram_is(tagged_sentence, i, parameter1, parameter2) {
              var word_1 = (tagged_sentence[i][0] === parameter1);
              var word_2 = false;
              if (i < tagged_sentence.length - 1) {
                word_2 = (tagged_sentence[i+1][0] === parameter2);
              }
              return(word_1 && word_2);
            }

            function left_bigram_is(tagged_sentence, i, parameter1, parameter2) {
              var word_1 = false;
              var word_2 = (tagged_sentence[i][0] === parameter2);
              if (i > 0) {
                word_1 = (tagged_sentence[i-1][0] === parameter1);
              }
              return(word_1 && word_2);
            }

            function next_bigram_is(tagged_sentence, i, parameter1, parameter2) {
              var word_1 = false;
              var word_2 = false;
              if (i < tagged_sentence.length - 1) {
                word_1 = (tagged_sentence[i+1][0] === parameter1);
              }
              if (i < tagged_sentence.length - 2) {
                word_2 = (tagged_sentence[i+2][0] === parameter2);
              }
              return(word_1 && word_2);
            }

            function twoWordAfterParameterValues(sentence, i) {
              if (i < sentence.length - 2) {
                return [sentence[i + 2].token];
              }
              else {
                return [];
              }
            }

            function prev_bigram_is(tagged_sentence, i, parameter1, parameter2) {
              var word_1 = false;
              var word_2 = false;
              if (i >  1) {
                word_1 = (tagged_sentence[i-2][0] === parameter1);
              }
              if (i > 0) {
                word_2 = (tagged_sentence[i-1][0] === parameter2);
              }
              return(word_1 && word_2);
            }

            function twoWordBeforeParameterValues(sentence, i) {
              if (i >  1) {
                return [sentence[i - 2].token];
              }
              else {
                return [];
              }
            }

            function next_1_or_2_word_is(tagged_sentence, i, parameter1, parameter2) {
              next_1 = false;
              next_2 = false;
              if (i < tagged_sentence.length - 1) {
                next_1 = (tagged_sentence[i+1][0] === parameter1);
              }
              if (i < tagged_sentence.length - 2) {
                next_2 = (tagged_sentence[i+2][0] === parameter2);
              }
              return(next_1 || next_2);
            }

            function next1Or2WordParameterValues(sentence, i) {
              var values = [];
              if (i < sentence.length - 1) {
                values.push(sentence[i + 1].token);
              }
              if (i < sentence.length - 2) {
                values.push(sentence[i + 2].token);
              }
              return values;
            }

            // ==================================
            // Predicates about tags
            // ==================================
            function next_tag_is(tagged_sentence, i, parameter) {
              if (i < tagged_sentence.length - 1) {
                return(tagged_sentence[i+1][1] === parameter);
              }
              else {
                return(false);
              }
            }

            function nextTagParameterValues(sentence, i) {
              if (i < sentence.length - 1) {
                return [sentence[i + 1].tag];
              }
              else {
                return [];
              }
            }

            function next_2_tag_is(tagged_sentence, i, parameter) {
              if (i < tagged_sentence.length - 2) {
                return(tagged_sentence[i+2][1] === parameter);
              }
              else {
                return(false);
              }
            }

            function next2TagParameterValues(sentence, i) {
              if (i < sentence.length - 2) {
                return [sentence[i+2].tag];
              }
              else {
                return [];
              }
            }

            function next_1_or_2_tag_is(tagged_sentence, i, parameter) {
              var next_1 = false;
              var next_2 = false;
              if (i < tagged_sentence.length - 1) {
                next_1 = (tagged_sentence[i+1][1] === parameter);
              }
              if (i < tagged_sentence.length - 2) {
                next_2 = (tagged_sentence[i+2][1] === parameter);
              }
              return(next_1 || next_2);
            }

            function next1Or2TagIsParameterValues(sentence, i) {
              var values = [];
              if (i < sentence.length - 1) {
                values.push(sentence[i + 1].tag);
              }
              if (i < sentence.length - 2) {
                values.push(sentence[i + 2].tag);
              }
              return values;
            }

            function next_1_or_2_or_3_tag(tagged_sentence, i, parameter) {
              var next_1 = false;
              var next_2 = false;
              var next_3 = false;
              if (i < tagged_sentence.length - 1) {
                next_1 = (tagged_sentence[i+1][1] === parameter);
              }
              if (i < tagged_sentence.length - 2) {
                next_2 = (tagged_sentence[i+2][1] === parameter);
              }
              if (i < tagged_sentence.length - 3) {
                next_3 = (tagged_sentence[i+3][1] === parameter);
              }
              return(next_1 || next_2 || next_3);
            }

            function next1Or2Or3TagParameterValues(sentence, i) {
              var values = [];
              if (i < sentence.length - 1) {
                values.push(sentence[i + 1].tag);
              }
              if (i < sentence.length - 2) {
                values.push(sentence[i + 2].tag);
              }
              if (i < sentence.length - 3) {
                values.push(sentence[i + 3].tag);
              }
              return values;
            }

            function surrounded_by_tags(tagged_sentence, i, parameter1, parameter2) {
              if (i < tagged_sentence.length - 1) {
                // check next tag
                if (tagged_sentence[i+1][1] === parameter2) {
                  // check previous tag
                  if (i > 0) {
                    return(tagged_sentence[i-1][1] === parameter1)
                  }
                  else {
                    return(false);
                  }
                }
                else {
                  return(false);
                }
              }
              else {
                return(false);
              }
            }

            function prev_1_or_2_or_3_tag(tagged_sentence, i, parameter) {
              var prev_1 = null;
              if (i > 0) {
                prev_1 = tagged_sentence[i-1][1];
              }
              var prev_2 = null;
              if (i > 1) {
                prev_2 = tagged_sentence[i-2][1];
              }
              var prev_3 = null;
              if (i > 2) {
                prev_3 = tagged_sentence[i-3][1];
              }
              return((prev_1 === parameter) || (prev_2 === parameter) || (prev_3 === parameter));
            }

            function prev1Or2Or3TagParameterValues(sentence, i) {
              var values = [];
              if (i > 0) {
                values.push(sentence[i - 1].tag);
              }
              if (i > 1) {
                values.push(sentence[i - 2].tag);
              }
              if (i > 2) {
                values.push(sentence[i - 3].tag);
              }
              return values;
            }

            function prev_1_or_2_tag(tagged_sentence, i, parameter) {
              var prev_1 = null;
              if (i > 0) {
                prev_1 = tagged_sentence[i-1][1];
              }
              var prev_2 = null;
              if (i > 1) {
                prev_2 = tagged_sentence[i-2][1];
              }
              return((prev_1 === parameter) || (prev_2 === parameter));
            }

            function prev1Or2TagParameterValues(sentence, i) {
              values = [];
              if (i > 0) {
                values.push(sentence[i - 1].tag);
              }
              if (i > 1) {
                values.push(sentence[i - 2].tag);
              }
              return values;
            }

            function prev_tag_is(tagged_sentence, i, parameter) {
              var prev = false;
              if (i > 0) {
                prev = (tagged_sentence[i-1][1] === parameter);
              }
              return(prev);
            }

            function prevTagParameterValues(sentence, i) {
              if (i > 0) {
                return [sentence[i - 1].tag];
              }
              else {
                return [];
              }
            }

            function prev_2_tag_is(tagged_sentence, i, parameter) {
              var prev_2 = false;
              if (i > 1) {
                prev_2 = (tagged_sentence[i-2][1] === parameter);
              }
              return(prev_2);
            }

            function default_predicate(tagged_sentence, i, parameter) {
              return(false);
            }

            var RuleTemplates = ruleTemplates;

            /*
              Predicates for the Brill tagger
              Copyright (C) 2017 Hugo W.L. ter Doest

              This program is free software: you can redistribute it and/or modify
              it under the terms of the GNU General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.

              This program is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU General Public License for more details.

              You should have received a copy of the GNU General Public License
              along with this program.  If not, see <http://www.gnu.org/licenses/>.
            */

            //var log4js = require('log4js');
            //var logger = log4js.getLogger();
            //logger.setLevel('INFO');


            //logger.debug(predicates);

            function Predicate(name, parameter1, parameter2) {
              this.name = name;
              this.meta = RuleTemplates[name];
              if (!this.meta) {
                this.meta = RuleTemplates["DEFAULT"];
              }
              //if (this.meta.nrParameters > 0) {
                this.parameter1 = parameter1;
              //}
              //if (this.meta.nrParameters > 1) {
                this.parameter2 = parameter2;
              //}
              //logger.debug('Predicate\n' + JSON.toString(this.meta, null, 2));
            }

            Predicate.prototype.evaluate = function(tagged_sentence, position) {
              //logger.debug('Predicate.evalute ' + this.name);
              var predicate = this.meta.function;
              return (predicate(tagged_sentence, position, this.parameter1, this.parameter2));
            };

            var Predicate_1 = Predicate;

            /*
              Transformation rules for the Brill tagger
              Copyright (C) 2017 Hugo W.L. ter Doest

              This program is free software: you can redistribute it and/or modify
              it under the terms of the GNU General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.

              This program is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU General Public License for more details.

              You should have received a copy of the GNU General Public License
              along with this program.  If not, see <http://www.gnu.org/licenses/>.
            */

            //var log4js = require('log4js');
            //var logger = log4js.getLogger();



            //logger.setLevel('INFO');

            var category_wild_card = "*";

            function TransformationRule(c1, c2, predicate, parameter1, parameter2) {
              this.literal = [c1, c2, predicate, parameter1, parameter2];
              this.predicate = new Predicate_1(predicate, parameter1, parameter2);
              this.old_category = c1;
              this.new_category = c2;
              // These members are for the learning algorithm
              this.neutral = 0;
              this.negative = 0;
              this.positive = 0;
              this.hasBeenSelectedAsHighRuleBefore = false;
              //logger.debug('TransformationRule constructor: ' + this.literal);
            }

            TransformationRule.prototype.key = function() {
              return(this.literal.toString());
            };

            TransformationRule.prototype.apply = function(tagged_sentence, position) {
              if ((tagged_sentence[position][1] === this.old_category) ||
                  (this.old_category === category_wild_card)) {
                if (this.predicate.evaluate(tagged_sentence, position)) {
                  tagged_sentence[position][1] = this.new_category;
                  //logger.debug('TransformationRule.apply: changed category ' +
                    //this.old_category + ' to ' + this.new_category +
                    //' at position ' + position);
                }
              }
            };

            //
            // Methods for processing sentences from a corpus that consist of an array of tokens
            //

            // Returns true if the rule applies at site. As a side effect it assigns the new
            // category to newTag
            TransformationRule.prototype.isApplicableAt = function(sentence, taggedSentence, i) {
              //logger.debug("TransformationRule.prototype.isApplicableAt: " + taggedSentence);
              var applies = (taggedSentence[i][1] === this.old_category) &&
                this.predicate.evaluate(taggedSentence, i);
              //logger.debug("TransformationRule.prototype.isApplicableAt: " + applies);

              // Set newTag to let the trainer know what the new tag would become
              if (applies) {
                sentence[i].newTag = this.new_category;
              }
              return(applies);
            };

            TransformationRule.prototype.prettyPrint = function() {
              var result = "";
              // Old category and new category
              result += this.old_category + " " + this.new_category;
              // Predicate name
              result += " " + this.predicate.name;
              // Parameter 1 and 2
              if (this.predicate.parameter1) {
                result += " " + this.predicate.parameter1;
                if (this.predicate.parameter2) {
                  result += " " + this.predicate.parameter2;
                }
              }
              return result;
            };


            // Applies the rule the given location (if it applies)
            TransformationRule.prototype.applyAt = function(sentence, i) {
              var taggedSentence = sentence.map(function(token) {
                return [token.token, token.tag];
              });

              //logger.debug("TransformationRule.prototype.applyAt: input sentence length: " + sentence.length);
              //logger.debug("TransformationRule.prototype.applyAt: tagged sentence length: " + taggedSentence.length);

              this.apply(taggedSentence, i);
              // Assign the new tag to the corpus site
              sentence[i].testTag = taggedSentence[i][1];
            };

            // Calculate the net score of this rule
            TransformationRule.prototype.score = function() {
              return (this.positive - this.negative);
            };

            var TransformationRule_1 = TransformationRule;

            var TF_Parser = (function() {
              /*
               * Generated by PEG.js 0.8.0.
               *
               * http://pegjs.majda.cz/
               */

              function peg$subclass(child, parent) {
                function ctor() { this.constructor = child; }
                ctor.prototype = parent.prototype;
                child.prototype = new ctor();
              }

              function SyntaxError(message, expected, found, offset, line, column) {
                this.message  = message;
                this.expected = expected;
                this.found    = found;
                this.offset   = offset;
                this.line     = line;
                this.column   = column;

                this.name     = "SyntaxError";
              }

              peg$subclass(SyntaxError, Error);

              function parse(input) {
                var options = arguments.length > 1 ? arguments[1] : {},

                    peg$FAILED = {},

                    peg$startRuleFunctions = { transformation_rules: peg$parsetransformation_rules },
                    peg$startRuleFunction  = peg$parsetransformation_rules,

                    peg$c1 = peg$FAILED,
                    peg$c2 = function(rules) {
                      var result = {};

                      for (var i = 0; i < rules.length; i++) {
                        var rule = rules[i][1];
                        result[rule.key()] = rule;
                      }
                      return(result);
                    },
                    peg$c3 = function(c1, c2, pred, pars) {
                      var result = null;

                      // Construct rule
                      if (pars.length === 1) {
                        result = new TransformationRule(c1, c2, pred, pars[0]);
                      }
                      else {
                        if (pars.length === 2) {
                          result = new TransformationRule(c1, c2, pred, pars[0], pars[1]);
                        }
                        else {
                          result = new TransformationRule(c1, c2, pred);
                        }
                      }
                      return(result);
                    },
                    peg$c4 = /^[!-~\xA1-\xFF]/,
                    peg$c5 = { type: "class", value: "[!-~\\xA1-\\xFF]", description: "[!-~\\xA1-\\xFF]" },
                    peg$c6 = function(characters) {
                       var s = "";
                       for (var i = 0; i < characters.length; i++) {
                         s += characters[i];
                       }
                       return(s);
                      },
                    peg$c7 = "*",
                    peg$c8 = { type: "literal", value: "*", description: "\"*\"" },
                    peg$c9 = function(wc) {
                       return(wc)
                      },
                    peg$c10 = "\r\n",
                    peg$c11 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
                    peg$c12 = "\n",
                    peg$c13 = { type: "literal", value: "\n", description: "\"\\n\"" },
                    peg$c14 = "\r",
                    peg$c15 = { type: "literal", value: "\r", description: "\"\\r\"" },
                    peg$c16 = "//",
                    peg$c17 = { type: "literal", value: "//", description: "\"//\"" },
                    peg$c18 = void 0,
                    peg$c19 = { type: "any", description: "any character" },
                    peg$c20 = " ",
                    peg$c21 = { type: "literal", value: " ", description: "\" \"" },
                    peg$c22 = "\t",
                    peg$c23 = { type: "literal", value: "\t", description: "\"\\t\"" },

                    peg$currPos          = 0,
                    peg$cachedPos        = 0,
                    peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
                    peg$maxFailPos       = 0,
                    peg$maxFailExpected  = [],
                    peg$silentFails      = 0,

                    peg$result;

                if ("startRule" in options) {
                  if (!(options.startRule in peg$startRuleFunctions)) {
                    throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
                  }

                  peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
                }

                function peg$computePosDetails(pos) {
                  function advance(details, startPos, endPos) {
                    var p, ch;

                    for (p = startPos; p < endPos; p++) {
                      ch = input.charAt(p);
                      if (ch === "\n") {
                        if (!details.seenCR) { details.line++; }
                        details.column = 1;
                        details.seenCR = false;
                      } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        details.line++;
                        details.column = 1;
                        details.seenCR = true;
                      } else {
                        details.column++;
                        details.seenCR = false;
                      }
                    }
                  }

                  if (peg$cachedPos !== pos) {
                    if (peg$cachedPos > pos) {
                      peg$cachedPos = 0;
                      peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
                    }
                    advance(peg$cachedPosDetails, peg$cachedPos, pos);
                    peg$cachedPos = pos;
                  }

                  return peg$cachedPosDetails;
                }

                function peg$fail(expected) {
                  if (peg$currPos < peg$maxFailPos) { return; }

                  if (peg$currPos > peg$maxFailPos) {
                    peg$maxFailPos = peg$currPos;
                    peg$maxFailExpected = [];
                  }

                  peg$maxFailExpected.push(expected);
                }

                function peg$buildException(message, expected, pos) {
                  function cleanupExpected(expected) {
                    var i = 1;

                    expected.sort(function(a, b) {
                      if (a.description < b.description) {
                        return -1;
                      } else if (a.description > b.description) {
                        return 1;
                      } else {
                        return 0;
                      }
                    });

                    while (i < expected.length) {
                      if (expected[i - 1] === expected[i]) {
                        expected.splice(i, 1);
                      } else {
                        i++;
                      }
                    }
                  }

                  function buildMessage(expected, found) {
                    function stringEscape(s) {
                      function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

                      return s
                        .replace(/\\/g,   '\\\\')
                        .replace(/"/g,    '\\"')
                        .replace(/\x08/g, '\\b')
                        .replace(/\t/g,   '\\t')
                        .replace(/\n/g,   '\\n')
                        .replace(/\f/g,   '\\f')
                        .replace(/\r/g,   '\\r')
                        .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
                        .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
                        .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
                        .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
                    }

                    var expectedDescs = new Array(expected.length),
                        expectedDesc, foundDesc, i;

                    for (i = 0; i < expected.length; i++) {
                      expectedDescs[i] = expected[i].description;
                    }

                    expectedDesc = expected.length > 1
                      ? expectedDescs.slice(0, -1).join(", ")
                          + " or "
                          + expectedDescs[expected.length - 1]
                      : expectedDescs[0];

                    foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

                    return "Expected " + expectedDesc + " but " + foundDesc + " found.";
                  }

                  var posDetails = peg$computePosDetails(pos),
                      found      = pos < input.length ? input.charAt(pos) : null;

                  if (expected !== null) {
                    cleanupExpected(expected);
                  }

                  return new SyntaxError(
                    message !== null ? message : buildMessage(expected, found),
                    expected,
                    found,
                    pos,
                    posDetails.line,
                    posDetails.column
                  );
                }

                function peg$parsetransformation_rules() {
                  var s0, s1, s2, s3, s4, s5;

                  s0 = peg$currPos;
                  s1 = [];
                  s2 = peg$currPos;
                  s3 = peg$parseS();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsetransformation_rule();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseS();
                      if (s5 !== peg$FAILED) {
                        s3 = [s3, s4, s5];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c1;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c1;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c1;
                  }
                  if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                      s1.push(s2);
                      s2 = peg$currPos;
                      s3 = peg$parseS();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsetransformation_rule();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseS();
                          if (s5 !== peg$FAILED) {
                            s3 = [s3, s4, s5];
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$c1;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c1;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c1;
                      }
                    }
                  } else {
                    s1 = peg$c1;
                  }
                  if (s1 !== peg$FAILED) {
                    s1 = peg$c2(s1);
                  }
                  s0 = s1;

                  return s0;
                }

                function peg$parsetransformation_rule() {
                  var s0, s1, s2, s3, s4, s5;

                  s0 = peg$currPos;
                  s1 = peg$parsecategory1();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseidentifier();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseidentifier();
                      if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parseidentifier();
                        while (s5 !== peg$FAILED) {
                          s4.push(s5);
                          s5 = peg$parseidentifier();
                        }
                        if (s4 !== peg$FAILED) {
                          s1 = peg$c3(s1, s2, s3, s4);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c1;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }

                  return s0;
                }

                function peg$parsecategory1() {
                  var s0;

                  s0 = peg$parsewild_card();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseidentifier();
                  }

                  return s0;
                }

                function peg$parseidentifier() {
                  var s0, s1, s2;

                  s0 = peg$currPos;
                  s1 = [];
                  if (peg$c4.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                  if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                      s1.push(s2);
                      if (peg$c4.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c5); }
                      }
                    }
                  } else {
                    s1 = peg$c1;
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseS_no_eol();
                    if (s2 !== peg$FAILED) {
                      s1 = peg$c6(s1);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }

                  return s0;
                }

                function peg$parsewild_card() {
                  var s0, s1, s2;

                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 42) {
                    s1 = peg$c7;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c8); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseS_no_eol();
                    if (s2 !== peg$FAILED) {
                      s1 = peg$c9(s1);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }

                  return s0;
                }

                function peg$parseEOL() {
                  var s0;

                  if (input.substr(peg$currPos, 2) === peg$c10) {
                    s0 = peg$c10;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c11); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 10) {
                      s0 = peg$c12;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c13); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 13) {
                        s0 = peg$c14;
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c15); }
                      }
                    }
                  }

                  return s0;
                }

                function peg$parseComment() {
                  var s0, s1, s2, s3, s4, s5;

                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c16) {
                    s1 = peg$c16;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c17); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$currPos;
                    peg$silentFails++;
                    s5 = peg$parseEOL();
                    peg$silentFails--;
                    if (s5 === peg$FAILED) {
                      s4 = peg$c18;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c1;
                    }
                    if (s4 !== peg$FAILED) {
                      if (input.length > peg$currPos) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c19); }
                      }
                      if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c1;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c1;
                    }
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$currPos;
                      s4 = peg$currPos;
                      peg$silentFails++;
                      s5 = peg$parseEOL();
                      peg$silentFails--;
                      if (s5 === peg$FAILED) {
                        s4 = peg$c18;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c1;
                      }
                      if (s4 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                          s5 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c19); }
                        }
                        if (s5 !== peg$FAILED) {
                          s4 = [s4, s5];
                          s3 = s4;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$c1;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c1;
                      }
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseEOL();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parseEOI();
                      }
                      if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }

                  return s0;
                }

                function peg$parseS() {
                  var s0, s1;

                  s0 = [];
                  if (input.charCodeAt(peg$currPos) === 32) {
                    s1 = peg$c20;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c21); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 9) {
                      s1 = peg$c22;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c23); }
                    }
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseEOL();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseComment();
                      }
                    }
                  }
                  while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    if (input.charCodeAt(peg$currPos) === 32) {
                      s1 = peg$c20;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c21); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 9) {
                        s1 = peg$c22;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c23); }
                      }
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseEOL();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseComment();
                        }
                      }
                    }
                  }

                  return s0;
                }

                function peg$parseS_no_eol() {
                  var s0, s1;

                  s0 = [];
                  if (input.charCodeAt(peg$currPos) === 32) {
                    s1 = peg$c20;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c21); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 9) {
                      s1 = peg$c22;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c23); }
                    }
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseComment();
                    }
                  }
                  while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    if (input.charCodeAt(peg$currPos) === 32) {
                      s1 = peg$c20;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c21); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 9) {
                        s1 = peg$c22;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c23); }
                      }
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseComment();
                      }
                    }
                  }

                  return s0;
                }

                function peg$parseEOI() {
                  var s0, s1;

                  s0 = peg$currPos;
                  peg$silentFails++;
                  if (input.length > peg$currPos) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c19); }
                  }
                  peg$silentFails--;
                  if (s1 === peg$FAILED) {
                    s0 = peg$c18;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c1;
                  }

                  return s0;
                }


                  var TransformationRule = TransformationRule_1;


                peg$result = peg$startRuleFunction();

                if (peg$result !== peg$FAILED && peg$currPos === input.length) {
                  return peg$result;
                } else {
                  if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                    peg$fail({ type: "end", description: "end of input" });
                  }

                  throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
                }
              }

              return {
                SyntaxError: SyntaxError,
                parse:       parse
              };
            })();

            /*
              Brill's POS Tagger
              Copyright (C) 2016 Hugo W.L. ter Doest

              This program is free software: you can redistribute it and/or modify
              it under the terms of the GNU General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.

              This program is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU General Public License for more details.

              You should have received a copy of the GNU General Public License
              along with this program.  If not, see <http://www.gnu.org/licenses/>.
            */





            function Brill_POS_Tagger(lexicon, ruleSet) {
              this.lexicon = lexicon;
              this.ruleSet = ruleSet;
            }

            // Tags a sentence, sentence is an array of words
            // Returns an array of tagged words; a tagged words is an array consisting of
            // the word itself followed by its lexical category
            Brill_POS_Tagger.prototype.tag = function(sentence) {
              var taggedSentence = this.tagWithLexicon(sentence);
              return this.applyRules(taggedSentence);
            };

            Brill_POS_Tagger.prototype.tagWithLexicon = function(sentence) {
              var taggedSentence = new Array(sentence.length);

              var that = this;
              sentence.forEach(function(word, index) {
                taggedSentence[index] = [];
                taggedSentence[index][0] = word;
                var categories = that.lexicon.tagWord(word);
                taggedSentence[index][1] = categories[0];
              });
              return(taggedSentence);
            };

            // Applies the transformation rules to an initially tagged sentence.
            // taggedSentence is an array of tagged words.
            // A tagged word is an array consisting of the word itself followed by its lexical category.
            // Returns an array of tagged words as well
            Brill_POS_Tagger.prototype.applyRules = function(taggedSentence) {
              // Apply transformation rules
              for (var i = 0, size = taggedSentence.length; i < size; i++) {
                this.ruleSet.getRules().forEach(function(rule) {
                  rule.apply(taggedSentence, i);
                });
              }
              return(taggedSentence);
            };

            var Brill_POS_Tagger_1 = Brill_POS_Tagger;

            /*
               Set of transformation rules
               Copyright (C) 2017 Hugo W.L. ter Doest

               This program is free software: you can redistribute it and/or modify
               it under the terms of the GNU General Public License as published by
               the Free Software Foundation, either version 3 of the License, or
               (at your option) any later version.

               This program is distributed in the hope that it will be useful,
               but WITHOUT ANY WARRANTY; without even the implied warranty of
               MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
               GNU General Public License for more details.

               You should have received a copy of the GNU General Public License
               along with this program.  If not, see <http://www.gnu.org/licenses/>.
            */




            function RuleSet(filename) {
              //this.rules = [];
              this.rules = {};

              if (filename) {
                // Read transformation rules
                try {
                  var data = fs.readFileSync(filename, 'utf8');
                  this.rules = TF_Parser.parse(data);
                  // console.log(this.rules);
                  // console.log('Brill_POS_Tagger.read_transformation_rules: number of transformation rules read: ' + this.rules.length);
                }
                catch (error) {
                  console.error(error);
                }
              }
            }

            RuleSet.prototype.addRule = function(rule) {
              //this.rules.push(rule);
              if (!this.rules[rule.key()]) {
                this.rules[rule.key()] = rule;
                return true;
              }
              else {
                return false;
              }
            };

            RuleSet.prototype.removeRule = function(rule) {
              if (this.rules[rule.key()]) {
                delete this.rules[rule.key()];
              }
            };

            RuleSet.prototype.getRules = function() {
              var that = this;
              return Object.keys(this.rules).map(function(key) {
                return that.rules[key];
              });
            };

            RuleSet.prototype.nrRules = function() {
              return Object.keys(this.rules).length;
            };

            RuleSet.prototype.hasRule = function(rule) {
              if (this.rules[rule.key()]) {
                return true;
              }
              else {
                return false;
              }
            };

            RuleSet.prototype.prettyPrint = function() {
              var result = "";
              //this.rules.forEach(function(rule) {
              var that = this;
              Object.keys(this.rules).forEach(function(key) {
                var rule = that.rules[key];
                result += rule.prettyPrint() + "\n";
              });
              return result;
            };

            var RuleSet_1 = RuleSet;

            /*
              Brill POS Trainer class
              Copyright (C) 2017 Hugo W.L. ter Doest

              This program is free software: you can redistribute it and/or modify
              it under the terms of the GNU General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.

              This program is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU General Public License for more details.

              You should have received a copy of the GNU General Public License
              along with this program.  If not, see <http://www.gnu.org/licenses/>.
            */

            // Algorithm is based on:
            // Exploring the Statistical Derivation of Transformational Rule Sequences
            // for Part-of-Speech Tagging, Lance A. Ramshaw and Mitchell P. Marcus
            // http://acl-arc.comp.nus.edu.sg/archives/acl-arc-090501d4/data/pdf/anthology-PDF/W/W94/W94-0111.pdf

            //var log4js = require('log4js');
            //var logger = log4js.getLogger('Brill_POS_Trainer');
            //logger.setLevel('OFF');




            // Training continues as long as there are rules with a positive score
            // that have not been selected before
            var minScore = 0;

            // After training rules with a score below scoreThreshold are pruned
            function Brill_POS_Trainer(ruleScoreThreshold) {
              if (ruleScoreThreshold) {
                this.ruleScoreThreshold = ruleScoreThreshold;
              }
              else {
                this.ruleScoreThreshold = 1;
              }
            }

            // Return the highest scoring rule from the rule set
            Brill_POS_Trainer.prototype.selectHighRule = function() {
              var highestRule = null;

              // Walk through the map and find the rule with highest score
              this.positiveRules.getRules().forEach(function(rule){
                if (highestRule === null) {
                  if (!rule.hasBeenSelectedAsHighRuleBefore) {
                    highestRule = rule;
                  }
                }
                else {
                  if ((rule.score() > highestRule.score()) &&
                    !rule.hasBeenSelectedAsHighRuleBefore) {
                    highestRule = rule;
                  }
                }
              });

              if (highestRule !== null) {
                highestRule.hasBeenSelectedAsHighRuleBefore = true;
              }
              // Return the rule with the highest score
              return highestRule;
            };

            Brill_POS_Trainer.prototype.mapRuleToSite = function(rule, i, j) {
              if (!this.mapRuleToSites[rule.key()]) {
                this.mapRuleToSites[rule.key()] = {};
              }
              if (!this.mapRuleToSites[rule.key()][i]) {
                this.mapRuleToSites[rule.key()][i] = {};
              }
              this.mapRuleToSites[rule.key()][i][j] = true;
            };

            Brill_POS_Trainer.prototype.mapSiteToRule = function(i, j, rule) {
              if (!this.mapSiteToRules[i]) {
                this.mapSiteToRules[i] = {};
              }
              if (!this.mapSiteToRules[i][j]) {
                this.mapSiteToRules[i][j] = {};
              }
              this.mapSiteToRules[i][j][rule.key()] = rule;
            };

            Brill_POS_Trainer.prototype.associateSiteWithRule = function(i, j, rule) {
              this.mapRuleToSite(rule, i, j);
              this.mapSiteToRule(i, j, rule);
            };

            Brill_POS_Trainer.prototype.siteIsAssociatedWithRule = function(i, j, rule) {
              if (this.mapSiteToRules[i]) {
                if (this.mapSiteToRules[i][j]) {
                  if (this.mapSiteToRules[i][j][rule.key()]) {
                    return true;
                  }
                }
              }
              return false;
            };

            // Returns an array of all sites associated with rule
            Brill_POS_Trainer.prototype.getSites = function(rule) {
              var that = this;
              var result = [];
              Object.keys(this.mapRuleToSites[rule.key()]).forEach(function(i) {
                Object.keys(that.mapRuleToSites[rule.key()][i]).forEach(function(j) {
                  // Unary plus the convert hash keys i and j to integer
                  result.push([+i, +j]);
                });
              });
              //logger.debug("Brill_POS_Trainer.prototype.getSites: sites " + JSON.stringify(result));
              return(result);
            };

            // Returns an array of all rules associated with the site
            Brill_POS_Trainer.prototype.getRules = function(i, j) {
              var result = [];
              var that = this;

              if (this.mapSiteToRules[i]) {
                if (this.mapSiteToRules[i][j]) {
                  result = Object.keys(this.mapSiteToRules[i][j]).map(function(key) {
                    return that.mapSiteToRules[i][j][key];
                  });
                }
              }
              return result;
            };

            Brill_POS_Trainer.prototype.disconnectSiteFromRule = function(i, j, rule) {
              // mapRuleToSites
              if (this.mapRuleToSites[rule.key()]) {
                if (this.mapRuleToSites[rule.key()][i]) {
                  if (this.mapRuleToSites[rule.key()][i][j]) {
                    delete this.mapRuleToSites[rule.key()][i][j];
                  }
                }
              }

              // mapSiteToRules
              if (this.mapSiteToRules[i]) {
                if (this.mapSiteToRules[i][j]) {
                  if (this.mapSiteToRules[i][j][rule.key()]) {
                    delete this.mapSiteToRules[i][j][rule.key()];
                  }
                }
              }
            };

            // Adjusts the score of the rule at position i, j of the corpus
            Brill_POS_Trainer.prototype.scoreRule = function(rule, i, j) {
              //logger.debug("Brill_POS_Trainer.prototype.scoreRule: entry");
              var token = this.corpus.sentences[i][j];
              var rightTag = token.tag;
              var oldTag = token.testTag;
              var newTag = token.newTag;
              if (rightTag !== oldTag) {
                // Old tag is wrong
                if (newTag === rightTag) {
                  // New tag is right
                  rule.positive++;
                  // If the score changes, it may be selected again as highest scoring rule
                  rule.hasBeenSelectedAsHighRuleBefore = false;
                  //logger.debug("Brill_POS_Trainer.prototype.scoreRule: positive: " + rule.key() + "\t score: " + rule.positive);
                }
                else {
                  // New tag is wrong as well --> neutral
                  rule.neutral++;
                  //logger.debug("Brill_POS_Trainer.prototype.scoreRule: neutral: " + rule.key() + "\t score: " + rule.neutral);
                }
              }
              else {
                // Old tag is right
                if (newTag === rightTag) {
                  // New tag is right --> neutral
                  rule.neutral++;
                  //logger.debug("Brill_POS_Trainer.prototype.scoreRule: neutral: " + rule.key() + "\t score: " + rule.neutral);


                }
                else {
                  // New tag is false
                  rule.negative++;
                  // If the score changes, it may be selected again as highest scoring rule
                  rule.hasBeenSelectedAsHighRuleBefore = false;
                  //logger.debug("Brill_POS_Trainer.prototype.scoreRule: negative: " + rule.key() + "\t score: " + rule.negative);
                }
              }
              //logger.debug("Brill_POS_Trainer.prototype.scoreRule: exit");
            };

            // Generate positive rules for this given site using templates
            Brill_POS_Trainer.prototype.generatePositiveRules = function(i, j) {
              var sentence = this.corpus.sentences[i];
              var token = sentence[j];
              // A positive rule should trigger on the currently assigned testTag
              var oldTag = token.testTag;
              //logger.debug("Brill_POS_Trainer.prototype.generatePositiveRules: oldTag " + oldTag);
              // It should assign the right tag as given by the corpus
              var newTag = token.tag;
              //logger.debug("Brill_POS_Trainer.prototype.generatePositiveRules: newTag " + newTag);

              var newRules = new RuleSet_1();
              // Exit if testTag already is the right tag --> will not result in positive rules
              if (oldTag === newTag) {
                return newRules;
              }

              this.templates.forEach(function(template) {
                if (template.windowFitsSite(sentence, j)) {
                  if (template.meta.nrParameters === 1) {
                    template.meta.parameter1Values(sentence, j).forEach(function (value) {
                      newRules.addRule(new TransformationRule_1(oldTag, newTag, template.predicateName, value));
                    });
                  }
                  else {
                    if (template.meta.nrParameters === 2) {
                      template.meta.parameter1Values(sentence, j).forEach(function (value1) {
                        template.meta.parameter2Values(sentence, j).forEach(function (value2) {
                          newRules.addRule(new TransformationRule_1(oldTag, newTag, template.predicateName, value1, value2));
                        });
                      });
                    }
                    else {
                      // 0 paramaters
                      newRules.addRule(new TransformationRule_1(oldTag, newTag, template.predicateName));
                    }
                  }
                }
              });
              return newRules;
            };

            // Finds all rules that are applicable at some site
            Brill_POS_Trainer.prototype.scanForPositiveRules = function() {
              //logger.debug("Brill_POS_Trainer.prototype.scanForPositiveRules: entry");
              var that = this;
              this.corpus.sentences.forEach(function(sentence, i) {
                sentence.forEach(function(token, j) {
                  //logger.debug("Brill_POS_Trainer.prototype.scanForPositiveRules: sentence no " + i);
                  var newRules = that.generatePositiveRules(i, j);
                  newRules.getRules().forEach(function(rule) {
                    that.positiveRules.addRule(rule);
                    //logger.debug("Brill_POS_Trainer.prototype.scanForPositiveRules: nrRules " + that.positiveRules.nrRules());
                  });
                });
              });
              //logger.debug("Brill_POS_Trainer.prototype.scanForPositiveRules: exit, number of rules: " + this.positiveRules.nrRules());
            };

            // Find all sites where the rules can be applied, register these sites and
            // update the scores
            Brill_POS_Trainer.prototype.scanForSites = function() {
              //logger.debug("Brill_POS_Trainer.prototype.scanForSites: entry");
              var that = this;

              // Scan the corpus
              this.corpus.sentences.forEach(function(sentence, i) {
                var taggedSentence = sentence.map(function(token) {
                  return [token.token, token.testTag];
                });
                sentence.forEach(function(token, j) {
                  that.positiveRules.getRules().forEach(function(rule) {
                    if (rule.isApplicableAt(sentence, taggedSentence, j)) {
                      that.associateSiteWithRule(i, j, rule);
                      that.scoreRule(rule, i, j);
                      //logger.debug("Brill_POS_Trainer.prototype.scanForSites: (sentence, token, rule): (" + i + ", " + j + ", " + rule.prettyPrint() + ")");
                    }
                  });
                });
              });

              //logger.debug("Brill_POS_Trainer.prototype.scanForSites: exit");
            };

            // Returns a list of sites that may have been touched by a changing tag
            Brill_POS_Trainer.prototype.neighbourhood = function(i, j) {
              var sentenceLength = this.corpus.sentences[i].length;
              var list = [];

              if (this.index > 2) {
                list.push([i, j - 3]);
              }
              if (this.index > 1) {
                list.push([i, j - 2]);
              }
              if (this.index > 0) {
                list.push([i, j - 1]);
              }
              if (this.index < sentenceLength - 1) {
                list.push([i, j + 1]);
              }
              if (this.index < sentenceLength - 2) {
                list.push([i, j + 2]);
              }
              if (this.index > sentenceLength - 3) {
                list.push([i, j + 3]);
              }
              return list;
            };

            // corpus: an array of token arrays
            // templates: an array of rule templates
            // lexicon: lexicon that provides method tagWord(word)
            Brill_POS_Trainer.prototype.train = function(corpus, templates, lexicon) {
              this.corpus = corpus;
              this.templates = templates;
              this.positiveRules = new RuleSet_1();
              this.mapRuleToSites = {};
              this.mapSiteToRules = {};

              //logger.debug("Brill_POS_Trainer.prototype.train: entry");
              this.corpus.tag(lexicon);
              this.scanForPositiveRules();
              //logger.info("Brill_POS_Trainer.prototype.train: initial number of rules: " + this.positiveRules.nrRules());
              this.scanForSites();

              var highRule = this.selectHighRule();
              var that = this;
              while ((highRule !== null) && (highRule.score() > minScore)) {
                //logger.debug("Brill_POS_Trainer.prototype.train: highRule selected: " + highRule.key());
                //logger.debug("Brill_POS_Trainer.prototype.train: number of rules: " + this.positiveRules.nrRules());
                //logger.debug("Brill_POS_Trainer.prototype.train: score of highRule: " + highRule.score());

                // Apply the high rule to each change site on its site list
                this.getSites(highRule).forEach(function(site) {
                  //logger.debug("Brill_POS_Trainer.prototype.train: apply highRule to: " + site);
                  //logger.debug("Brill_POS_Trainer.prototype.train: sentence length: " + that.corpus.sentences[site[0]].length);
                  highRule.applyAt(that.corpus.sentences[site[0]], site[1]);
                });

                var unseenRules = new RuleSet_1();
                this.getSites(highRule).forEach(function(site) {
                  that.neighbourhood(site[0], site[1]).forEach(function(testSite) {
                    // Generate positive rules for testSite
                    var newRules = that.generatePositiveRules(testSite[0], testSite[1]);

                    // Disconnect test site from its rules
                    // because highrule has been applied
                    that.getRules(testSite[0], testSite[1]).forEach(function(rule) {
                      if (!newRules.hasRule(rule)) {
                        that.disconnectSiteFromRule(testSite[0], testSite[1], rule);
                      }
                    });

                    // Connect new rules not already connected to the test site
                    newRules.getRules().forEach(function(rule) {
                      if (!that.siteIsAssociatedWithRule(testSite[0]. testSite[1], rule)) {
                        if (that.positiveRules.hasRule(rule)) {
                          that.associateSiteWithRule(testSite[0], testSite[1], rule);
                        }
                        else {
                          unseenRules.addRule(rule);
                        }
                      }
                    });

                    // Process unseen rules
                    if (unseenRules.nrRules() > 0) {
                      unseenRules.getRules().forEach(function(rule) {
                        that.positiveRules.addRule(rule);
                      });
                      that.corpus.sentences.forEach(function (sentence, i) {
                        var taggedSentence = sentence.map(function(token) {
                          return [token.token, token.testTag];
                        });
                        sentence.forEach(function(token, j) {
                          unseenRules.getRules().forEach(function(rule) {
                            if (rule.isApplicableAt(sentence, taggedSentence, j)) {
                              that.associateSiteWithRule(i, j, rule);
                              that.scoreRule(rule, i, j);
                            }
                          });
                        });
                      });
                    }

                  });
                });

                // Select next highest scoring rule
                highRule = this.selectHighRule();
              }
              //logger.info("Brill_POS_Trainer.prototype.train: number of iterations: " + iterationNumber);
              //logger.info("Brill_POS_Trainer.prototype.train: number of rules: " + this.positiveRules.nrRules());

              // Remove rules having a non-positive score
              this.positiveRules.getRules().forEach(function(rule) {
                if (rule.score() < that.ruleScoreThreshold) {
                  that.positiveRules.removeRule(rule);
                }
              });

              //logger.info("Brill_POS_Trainer.prototype.train: number of rules after pruning: " + this.positiveRules.nrRules());
              //logger.debug("Brill_POS_Trainer.prototype.train: exit");
              return this.positiveRules;
            };

            Brill_POS_Trainer.prototype.printRulesWithScores = function() {
              var result = "";

              function compareRules(a, b) {
                if (a.score() > b.score()) {
                  return -1;
                }
                else {
                  if (a.score() < b.score()) {
                    return 1;
                  }
                  else {
                    return 0;
                  }
                }
              }

              var rules = this.positiveRules.getRules();
              var sortedRules = rules.sort(compareRules);

              sortedRules.forEach(function(rule) {
                //if (rule.score() > 0) {
                  result += rule.score() + '\t' + rule.positive + '\t' + rule.negative + '\t' + rule.neutral + '\t' + rule.prettyPrint() + "\n";
                //}
              });
              return result;
            };

            var Brill_POS_Trainer_1 = Brill_POS_Trainer;

            /*
              Brill's POS Testing class
              Copyright (C) 2017 Hugo W.L. ter Doest

              This program is free software: you can redistribute it and/or modify
              it under the terms of the GNU General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.

              This program is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU General Public License for more details.

              You should have received a copy of the GNU General Public License
              along with this program.  If not, see <http://www.gnu.org/licenses/>.
            */

            function Brill_POS_Tester() {

            }

            Brill_POS_Tester.prototype.test = function(corpus, tagger) {
              var totalWords = 0;
              var correctTagsLexicon = 0;
              var correctTagsAfterRules = 0;

              // Tag the corpus using the tagger
              corpus.sentences.forEach(function(sentence) {
                var s = sentence.map(function(token) {
                  return token.token;
                });

                // Use the lexicon to tag the sentence
                var taggedSentence = tagger.tagWithLexicon(s);
                // Count the right tags
                sentence.forEach(function(token, i) {
                  totalWords++;
                  if (token.tag === taggedSentence[i][1]) {
                    correctTagsLexicon++;
                  }
                });

                // Use the rule set to tag the sentence
                var taggedSentenceAfterRules = tagger.applyRules(taggedSentence);
                // Count the right tags
                sentence.forEach(function(token, i) {
                  if (token.tag === taggedSentenceAfterRules[i][1]) {
                    correctTagsAfterRules++;
                  }
                });
              });

              // Return percentage right
              return [100 * correctTagsLexicon/ totalWords, 100 * correctTagsAfterRules / totalWords];
            };

            var Brill_POS_Tester_1 = Brill_POS_Tester;

            /*
              Lexicon class
              Copyright (C) 2016 Hugo W.L. ter Doest

              This program is free software: you can redistribute it and/or modify
              it under the terms of the GNU General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.

              This program is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU General Public License for more details.

              You should have received a copy of the GNU General Public License
              along with this program.  If not, see <http://www.gnu.org/licenses/>.
            */



            // Parses a lexicon in JSON or text format
            function Lexicon(filename, defaultCategory, defaultCategoryCapitalised) {
              this.lexicon = {};

              if (filename) {
                this.defaultCategory = defaultCategory;
                // Read lexicon
                try {
                  var data = fs.readFileSync(filename, 'utf8');
                  if (data[0] === "{") {
                    // Lexicon is in JSON format
                    this.lexicon = JSON.parse(data);
                  }
                  else {
                    // Lexicon is plain text
                    this.parseLexicon(data);
                  }
                  // console.log('Brill_POS_Tagger.read_lexicon: number of lexicon entries read: ' + Object.keys(that.lexicon).length);
                }
                catch (error) {
                  console.error(error);
                }
                if (defaultCategory) {
                  this.defaultCategory = defaultCategory;
                  if (defaultCategoryCapitalised) {
                    this.defaultCategoryCapitalised = defaultCategoryCapitalised;
                  }
                }
              }
            }

            // Parses a lexicon in text format: word cat1 cat2 ... catn
            Lexicon.prototype.parseLexicon = function(data) {
              // Split into an array of non-empty lines
              var arrayOfLines = data.match(/[^\r\n]+/g);
              this.lexicon = {};
              var that = this;
              arrayOfLines.forEach(function(line) {
                // Split line by whitespace
                var elements = line.trim().split(/\s+/);
                if (elements.length > 0) {
                  that.lexicon[elements[0]] = elements.slice(1);
                }
              });
            };

            // Returns a list of categories for word
            Lexicon.prototype.tagWord = function(word) {
              var categories = this.lexicon[word];
              if (!categories) {
                categories = this.lexicon[word.toLowerCase()];
              }
              if (!categories) {
                if (/[A-Z]/.test(word[0]) && this.defaultCategoryCapitalised) {
                  // Capitalised
                  categories = [this.defaultCategoryCapitalised];
                }
                else {
                  // If not found assign default_category
                  categories = [this.defaultCategory];
                }
              }
              return(categories);
            };

            // Adds a word to the lexicon. NB simply replaces the entry
            Lexicon.prototype.addWord = function(word, categories) {
              this.lexicon[word] = categories;
            };

            Lexicon.prototype.prettyPrint = function() {
              var result = "";
              var that = this;
              Object.keys(this.lexicon).forEach(function(token) {
                result += token + "\t";
                that.lexicon[token].forEach(function(cat) {
                  result += cat + "\t";
                });
                result += "\n";
              });
              return result;
            };

            Lexicon.prototype.nrEntries = function() {
              return Object.keys(this.lexicon).length;
            };

            Lexicon.prototype.setDefaultCategories = function(category, categoryCapitalised) {
              this.defaultCategory = category;
              if (categoryCapitalised) {
                this.defaultCategoryCapitalised = categoryCapitalised;
              }
            };

            var Lexicon_1 = Lexicon;

            /*
              Rule Template class for deriving transformation rules.
              Copyright (C) 2017 Hugo W.L. ter Doest

              This program is free software: you can redistribute it and/or modify
              it under the terms of the GNU General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.

              This program is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU General Public License for more details.

              You should have received a copy of the GNU General Public License
              along with this program.  If not, see <http://www.gnu.org/licenses/>.
            */

            function RuleTemplate(templateName, metadata) {
              this.predicateName = templateName;
              this.meta = metadata;
            }

            RuleTemplate.prototype.windowFitsSite = function(sentence, i) {
              return ((i + this.meta.window[0] >= 0) &&
                (i + this.meta.window[0] < sentence.length) &&
                (i + this.meta.window[1] >= 0) &&
                (i + this.meta.window[1] < sentence.length));
            };

            var RuleTemplate_1 = RuleTemplate;

            /*
              Corpus class for parsing and analysing corpora
              Copyright (C) 2017 Hugo W.L. ter Doest

              This program is free software: you can redistribute it and/or modify
              it under the terms of the GNU General Public License as published by
              the Free Software Foundation, either version 3 of the License, or
              (at your option) any later version.

              This program is distributed in the hope that it will be useful,
              but WITHOUT ANY WARRANTY; without even the implied warranty of
              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
              GNU General Public License for more details.

              You should have received a copy of the GNU General Public License
              along with this program.  If not, see <http://www.gnu.org/licenses/>.
            */

            //var log4js = require('log4js');
            //var logger = log4js.getLogger();
            //logger.setLevel('INFO');


            const BROWN = 1;

            // sentences: an array of annotated sentences
            // A sentence is an array of annotated tokens
            // A token is an object with (token, tag, testTag, ruleList)
            function Corpus(data, typeOfCorpus) {
              this.wordCount = 0;
              this.sentences = [];
              if (data && typeOfCorpus) {
                // For other types of corpora add a case here and supply a parsing method
                switch (typeOfCorpus) {
                  case BROWN:
                    this.parseBrownCorpus(data);
                    break;
                  default:
                    // Assume it is an array of tagged sentences
                    this.sentences = data;
                }
              }
            }

            // data is raw text
            // A corpus parsing method should split the corpus in sentences each of which
            // consist of an array of tokens.
            Corpus.prototype.parseBrownCorpus = function(data) {
              var that = this;

              var lines = data.split('\n');
              lines.forEach(function(line) {
                var trimmedLine = line.trim();
                // Only parse lines that contain characters
                if (trimmedLine != "") {
                  var taggedSentence = [];
                  var tokens = line.trim().split(/\s+/);
                  tokens.forEach(function (token) {
                    that.wordCount++;
                    // Create a tagged sentences consisting of tokens
                    var wordPlusTag = token.split('_');
                    taggedSentence.push({
                      "token": wordPlusTag[0],
                      "tag": wordPlusTag[1]
                    });
                  });

                  // Add the sentence to the corpus
                  that.sentences.push(taggedSentence);
                }
              });
            };

            // Returns an array of all POS tags used in the corpus
            Corpus.prototype.getTags = function() {
              return Object.keys(this.posTags);
            };

            // Splits the corpus in a training and testing set.
            // percentageTrain is the size of the training corpus in percent
            // Returns an array with two elements: training corpus, testing corpus
            Corpus.prototype.splitInTrainAndTest = function(percentageTrain) {
              var corpusTrain = new Corpus();
              var corpusTest = new Corpus();

              var p = percentageTrain / 100;
              this.sentences.forEach(function(sentence, i) {
                if (Math.random() < p) {
                  corpusTrain.sentences.push(sentence);
                }
                else {
                  corpusTest.sentences.push(sentence);
                }
              });
              return [corpusTrain, corpusTest];
            };

            // Analyses the corpus:
            // - registers used PS tags
            // - records the frequency of POS tag for each word
            Corpus.prototype.analyse = function() {
              this.tagFrequencies = {};
              this.posTags = {};
              this.wordCount = 0;

              var that = this;
              this.sentences.forEach(function(sentence) {
                sentence.forEach(function(token) {
                  that.wordCount++;

                  // Register the tags used in the corpus
                  that.posTags[token.tag] = true;

                  // Register the frequency of the tag
                  if (!that.tagFrequencies[token.token]) {
                    that.tagFrequencies[token.token] = {};
                  }
                  if (!that.tagFrequencies[token.token][token.tag]) {
                    that.tagFrequencies[token.token][token.tag] = 0;
                  }
                  that.tagFrequencies[token.token][token.tag]++;
                });
              });
            };

            // Creates a lexicon by taking the most frequently occurring tag of a word
            // as the right tag
            Corpus.prototype.buildLexicon = function() {
              var lexicon = new Lexicon_1();
              var that = this;

              this.analyse();
              Object.keys(this.tagFrequencies).forEach(function(token) {
                var catToFreq = that.tagFrequencies[token];
                var categories = Object.keys(catToFreq);

                function compareByFrequency(a, b) {
                  if (catToFreq[a] > catToFreq[b]) {
                    return -1;
                  }
                  else {
                    if (catToFreq[a] < catToFreq[b]) {
                      return 1;
                    }
                    else {
                      return 0;
                    }
                  }
                }

                var sortedCategories = categories.sort(compareByFrequency);
                lexicon.addWord(token, sortedCategories);
              });
              return lexicon;
            };

            Corpus.prototype.tag = function(lexicon) {
              this.sentences.forEach(function(sentence) {
                sentence.forEach(function(token) {
                  // tagWord returns a list of categories, take the first category
                  token.testTag = lexicon.tagWord(token.token)[0];
                });
              });
            };

            Corpus.prototype.nrSentences = function() {
              return this.sentences.length;
            };

            Corpus.prototype.nrWords = function() {
              return this.wordCount;
            };

            Corpus.prototype.prettyPrint = function() {
              this.sentences.forEach(function(sentence, index) {
                //logger.debug("sentence no " + index + "\n" +
                //  JSON.stringify(sentence, null, 2));
              });
            };

            var Corpus_1 = Corpus;

            /*
            Copyright (c) 2011, Chris Umbel

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE.
            */

            var SoundEx$1 = soundex;
            var Metaphone$1 = metaphone;
            var DoubleMetaphone$1 = double_metaphone;
            var SoundExDM = dm_soundex;
            var PorterStemmer$8 = porter_stemmer;
            var PorterStemmerFa = porter_stemmer_fa;
            var PorterStemmerFr = porter_stemmer_fr;
            var PorterStemmerRu = porter_stemmer_ru;
            var PorterStemmerEs = porter_stemmer_es;
            var PorterStemmerIt = porter_stemmer_it;
            var PorterStemmerNo = porter_stemmer_no;
            var PorterStemmerSv = porter_stemmer_sv;
            var PorterStemmerPt = porter_stemmer_pt;
            var LancasterStemmer$1 = lancaster_stemmer;
            var StemmerFr = stemmer_fr;
            var StemmerPl = stemmer_pl;
            var StemmerJa$1 = stemmer_ja;
            var StemmerId = stemmer_id;
            var AggressiveTokenizerNl = aggressive_tokenizer_nl;
            var AggressiveTokenizerFa = aggressive_tokenizer_fa;
            var AggressiveTokenizerFr = aggressive_tokenizer_fr;
            var AggressiveTokenizerRu = aggressive_tokenizer_ru;
            var AggressiveTokenizerEs = aggressive_tokenizer_es;
            var AggressiveTokenizerIt = aggressive_tokenizer_it;
            var AggressiveTokenizerPl = aggressive_tokenizer_pl;
            var AggressiveTokenizerPt = aggressive_tokenizer_pt;
            var AggressiveTokenizerNo = aggressive_tokenizer_no;
            var AggressiveTokenizerSv = aggressive_tokenizer_sv;
            var AggressiveTokenizer$c = aggressive_tokenizer;
            var CaseTokenizer$1 = tokenizer_case;
            var RegexpTokenizer$1 = regexp_tokenizer.RegexpTokenizer;
            var WordTokenizer$1 = regexp_tokenizer.WordTokenizer;
            var WordPunctTokenizer$1 = regexp_tokenizer.WordPunctTokenizer;
            var TreebankWordTokenizer$1 = treebank_word_tokenizer;
            var TokenizerJa$1 = tokenizer_ja;
            var SentenceTokenizer$1 = sentence_tokenizer;
            var BayesClassifier$3 = bayes_classifier$1;
            var LogisticRegressionClassifier$3 = logistic_regression_classifier$1;
            var NounInflector$3 = noun_inflector;
            var NounInflectorFr = noun_inflector$1;
            var NounInflectorJa = noun_inflector$2;
            var PresentVerbInflector = present_verb_inflector;
            var CountInflector$1 = count_inflector;
            var WordNet$1 = wordnet;
            var TfIdf$1 = tfidf;
            var Trie$1 = trie;
            var SentenceAnalyzer = sentence_analyzer;
            var stopwords$2 = stopwords.words;
            var ShortestPathTree$1 = shortest_path_tree;
            var Spellcheck$1 = spellcheck;
            var LongestPathTree$1 = longest_path_tree;
            var EdgeWeightedDigraph$1 = edge_weighted_digraph;
            var NGrams = ngrams_1;
            var NGramsZH = ngrams_zh;
            var JaroWinklerDistance$1 = jaroWinkler_distance;
            var LevenshteinDistance$1 = levenshtein_distance.LevenshteinDistance;
            var DamerauLevenshteinDistance$1 = levenshtein_distance.DamerauLevenshteinDistance;
            var DiceCoefficient = dice_coefficient;
            var normalize$2 = normalizer.normalize_tokens;
            var normalize_ja$1 = normalizer_ja.normalize_ja;
            var removeDiacritics = remove_diacritics$2;
            var transliterate_ja = ja;
            var BrillPOSTagger = Brill_POS_Tagger_1;
            var BrillPOSTrainer = Brill_POS_Trainer_1;
            var BrillPOSTester = Brill_POS_Tester_1;
            var Lexicon$1 = Lexicon_1;
            var RuleSet$1 = RuleSet_1;
            var RuleTemplates$1 = RuleTemplates;
            var RuleTemplate$1 = RuleTemplate_1;
            var Corpus$1 = Corpus_1;

            var natural = {
            	SoundEx: SoundEx$1,
            	Metaphone: Metaphone$1,
            	DoubleMetaphone: DoubleMetaphone$1,
            	SoundExDM: SoundExDM,
            	PorterStemmer: PorterStemmer$8,
            	PorterStemmerFa: PorterStemmerFa,
            	PorterStemmerFr: PorterStemmerFr,
            	PorterStemmerRu: PorterStemmerRu,
            	PorterStemmerEs: PorterStemmerEs,
            	PorterStemmerIt: PorterStemmerIt,
            	PorterStemmerNo: PorterStemmerNo,
            	PorterStemmerSv: PorterStemmerSv,
            	PorterStemmerPt: PorterStemmerPt,
            	LancasterStemmer: LancasterStemmer$1,
            	StemmerFr: StemmerFr,
            	StemmerPl: StemmerPl,
            	StemmerJa: StemmerJa$1,
            	StemmerId: StemmerId,
            	AggressiveTokenizerNl: AggressiveTokenizerNl,
            	AggressiveTokenizerFa: AggressiveTokenizerFa,
            	AggressiveTokenizerFr: AggressiveTokenizerFr,
            	AggressiveTokenizerRu: AggressiveTokenizerRu,
            	AggressiveTokenizerEs: AggressiveTokenizerEs,
            	AggressiveTokenizerIt: AggressiveTokenizerIt,
            	AggressiveTokenizerPl: AggressiveTokenizerPl,
            	AggressiveTokenizerPt: AggressiveTokenizerPt,
            	AggressiveTokenizerNo: AggressiveTokenizerNo,
            	AggressiveTokenizerSv: AggressiveTokenizerSv,
            	AggressiveTokenizer: AggressiveTokenizer$c,
            	CaseTokenizer: CaseTokenizer$1,
            	RegexpTokenizer: RegexpTokenizer$1,
            	WordTokenizer: WordTokenizer$1,
            	WordPunctTokenizer: WordPunctTokenizer$1,
            	TreebankWordTokenizer: TreebankWordTokenizer$1,
            	TokenizerJa: TokenizerJa$1,
            	SentenceTokenizer: SentenceTokenizer$1,
            	BayesClassifier: BayesClassifier$3,
            	LogisticRegressionClassifier: LogisticRegressionClassifier$3,
            	NounInflector: NounInflector$3,
            	NounInflectorFr: NounInflectorFr,
            	NounInflectorJa: NounInflectorJa,
            	PresentVerbInflector: PresentVerbInflector,
            	CountInflector: CountInflector$1,
            	WordNet: WordNet$1,
            	TfIdf: TfIdf$1,
            	Trie: Trie$1,
            	SentenceAnalyzer: SentenceAnalyzer,
            	stopwords: stopwords$2,
            	ShortestPathTree: ShortestPathTree$1,
            	Spellcheck: Spellcheck$1,
            	LongestPathTree: LongestPathTree$1,
            	EdgeWeightedDigraph: EdgeWeightedDigraph$1,
            	NGrams: NGrams,
            	NGramsZH: NGramsZH,
            	JaroWinklerDistance: JaroWinklerDistance$1,
            	LevenshteinDistance: LevenshteinDistance$1,
            	DamerauLevenshteinDistance: DamerauLevenshteinDistance$1,
            	DiceCoefficient: DiceCoefficient,
            	normalize: normalize$2,
            	normalize_ja: normalize_ja$1,
            	removeDiacritics: removeDiacritics,
            	transliterate_ja: transliterate_ja,
            	BrillPOSTagger: BrillPOSTagger,
            	BrillPOSTrainer: BrillPOSTrainer,
            	BrillPOSTester: BrillPOSTester,
            	Lexicon: Lexicon$1,
            	RuleSet: RuleSet$1,
            	RuleTemplates: RuleTemplates$1,
            	RuleTemplate: RuleTemplate$1,
            	Corpus: Corpus$1
            };

            const transformConfigMap = {
              scale: 'scaleOptions',
              descale: 'descaleOptions',
              label: 'labelOptions',
              labelEncoder: 'labelOptions',
              labeldecode: 'labelOptions',
              labelDecode: 'labelOptions',
              labelDecoder: 'labelOptions',
              onehot: 'oneHotOptions',
              oneHot: 'oneHotOptions',
              oneHotEncode: 'oneHotOptions',
              oneHotEncoder: 'oneHotOptions',
              reducer: 'reducerOptions',
              reduce: 'reducerOptions',
              merge: 'mergeData',
            };

            /**
             * class for manipulating an array of objects, typically from CSV data
             * @class DataSet
             * @memberOf preprocessing
             */
            class DataSet {
              /**
               * Allows for fit transform short hand notation
               * @example
            DataSet.getTransforms({
              Age: ['scale',],
              Rating: ['label',],  }); //=> [
            //   {
            //    name: 'Age', options: { strategy: 'scale', }, },
            //   },
            //   { 
            //    name: 'Rating', options: { strategy: 'label', }, 
            //   },
            // ];
               * @param {Object} transforms 
               * @returns {Array<Object>} returns fit columns, columns property
               */
              static getTransforms(transforms = {}) {
                return Object.keys(transforms).reduce((result, columnName) => {
                  const transformColumnObject = transforms[ columnName ];
                  const transformObject = {
                    name: columnName,
                    options: {
                      strategy: (Array.isArray(transformColumnObject))
                        ? transformColumnObject[0]
                        : transformColumnObject,
                    },
                  };
                  if (Array.isArray(transformColumnObject) && transformColumnObject.length > 1) {
                    transformObject.options[ transformConfigMap[transformColumnObject[ 0 ]] ] = transformColumnObject[ 1 ];
                  }
                  result.push(transformObject);
                  return result;
                }, []);
              }
              /**
               * returns an array of objects by applying labels to matrix of columns
               * @example
            const data = [{ Age: '44', Salary: '44' },
            { Age: '27', Salary: '27' }]
            const AgeDataSet = new MS.DataSet(data);
            const dependentVariables = [ [ 'Age', ], [ 'Salary', ], ];
            const AgeSalMatrix = AgeDataSet.columnMatrix(dependentVariables); // =>
            //  [ [ '44', '72000' ],
            //  [ '27', '48000' ] ];
            MS.DataSet.reverseColumnMatrix({vectors:AgeSalMatrix,labels:dependentVariables}); // => [{ Age: '44', Salary: '44' },
            { Age: '27', Salary: '27' }]
               * 
               * @param {*} options 
               * @param {Array[]} options.vectors - array of vectors
               * @param {String[]} options.labels - array of labels
               * @returns {Object[]} an array of objects with properties derived from options.labels
               */
              static reverseColumnMatrix(options = {}) {
                const { vectors, labels, } = options;
                const features = (Array.isArray(labels) && Array.isArray(labels[ 0 ]))
                  ? labels
                  : labels.map(label => [label, ]);
                return vectors.reduce((result, val) => { 
                  result.push(val.reduce((prop, value, index) => { 
                    prop[ features[ index ][ 0 ] ] = val[index];
                    return prop;
                  }, {}));
                  return result;
                }, []);
              }
              static reverseColumnVector(options = {}) {
                const { vector, labels, } = options;
                const features = (Array.isArray(labels) && Array.isArray(labels[ 0 ]))
                  ? labels
                  : labels.map(label => [label, ]);
                return vector.reduce((result, val) => {
                  result.push(
                    { [ features[ 0 ][ 0 ] ]: val, }
                  );
                  return result;
                }, []);
              }
              /**
               * Returns an object into an one hot encoded object
               * @example
            const labels = ['apple', 'orange', 'banana',];
            const prefix = 'fruit_';
            const name = 'fruit';
            const options = { labels, prefix, name, };
            const data = {
              fruit: 'apple',
            };
            EncodedCSVDataSet.encodeObject(data, options); // => { fruit_apple: 1, fruit_orange: 0, fruit_banana: 0, }
               * @param {Object} data - object to encode 
               * @param {{labels:Array<String>,prefix:String,name:String}} options - encoded object options
               * @returns {Object} one hot encoded object
               */
              static encodeObject(data, options) {
                const { labels, prefix, name,  } = options;
                const encodedData = labels.reduce((encodedObj, label) => { 
                  const oneHotLabelArrayName = `${prefix}${label}`;
                  encodedObj[oneHotLabelArrayName] = (data[name].toString() === label.toString()) ? 1 : 0;
                  return encodedObj;
                }, {});
                return encodedData;
              }
              /**
             * returns a new object of one hot encoded values
             * @example
             * // [ 'Brazil','Mexico','Ghana','Mexico','Ghana','Brazil','Mexico','Brazil','Ghana', 'Brazil' ]
            const originalCountry = dataset.columnArray('Country'); 

            // { originalCountry:
            //    { Country_Brazil: [ 1, 0, 0, 0, 0, 1, 0, 1, 0, 1 ],
            //      Country_Mexico: [ 0, 1, 0, 1, 0, 0, 1, 0, 0, 0 ],
            //      Country_Ghana: [ 0, 0, 1, 0, 1, 0, 0, 0, 1, 0 ] },
            //     }
            const oneHotCountryColumn = dataset.oneHotEncoder('Country'); 
              * @param {string} name - csv column header, or JSON object property name 
              * @param options 
              * @see {@link http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html}
              * @return {Object}
              */
              static oneHotEncoder(name, options) {
                const config = Object.assign({
                }, options);
                const labelData = config.data || this.columnArray(name, config.columnArrayOptions);
                const labels = Array.from(new Set(labelData).values());
                const prefix = config.prefix||`${name}_`;
                const encodedData = labelData.reduce(
                  (result, val, index, arr) => {
                    labels.forEach(encodedLabel => {
                      const oneHotLabelArrayName = `${prefix}${encodedLabel}`;
                      const oneHotVal = (val === encodedLabel) ? 1 : 0;
                      if (Array.isArray(result[oneHotLabelArrayName])) {
                        result[oneHotLabelArrayName].push(oneHotVal);
                      } else {
                        result[oneHotLabelArrayName] = [oneHotVal,];
                      }
                    });
                    return result;
                  }, {});
                this.encoders.set(name, {
                  name,
                  labels,
                  prefix,
                });
                return encodedData;
              }
              /**
               * Return one hot encoded data
               * @example
            const csvData = [{
                'Country': 'Brazil',
                'Age': '44',
                'Salary': '72000',
                'Purchased': 'N',
              },
              {
                'Country': 'Mexico',
                'Age': '27',
                'Salary': '48000',
                'Purchased': 'Yes',
              },
              ...
            ];
            const EncodedCSVDataSet = new ms.preprocessing.DataSet(csvData);
            EncodedCSVDataSet.fitColumns({
              columns: [
                {
                  name: 'Country',
                  options: { strategy: 'onehot', },
                },
              ],
            });

            EncodedCSVDataSet.oneHotDecoder('Country);// =>
            // [ { Country: 'Brazil' },
            //  { Country: 'Mexico' },
            //  { Country: 'Ghana' },
            //  { Country: 'Mexico' },
            //   ...]
               * @param {string} name - column name 
               * @param options 
               * @returns {Array<Object>} returns an array of objects from an one hot encoded column
               */
              static oneHotDecoder(name, options) {
                const config = Object.assign({
                  // handle_unknown: 'error'
                }, options);
                const encoderMap = config.encoders || this.encoders;
                const prefix = config.prefix || encoderMap.get(name).prefix;
                const labels = config.labels || encoderMap.get(name).labels;
                const encodedData = config.data || this.oneHotColumnArray(name, config.oneHotColumnArrayOptions);
                // console.log({ encodedData, encoderMap, prefix });
                return encodedData.reduce((result, val) => {
                  const columnNames = Object.keys(val).filter(prop => val[ prop ] === 1 && (labels.indexOf(prop.replace(prefix, ''))!==-1 || labels.map(label=>String(label)).indexOf(prop.replace(prefix, ''))!==-1));
                  const columnName = columnNames[ 0 ]||''; 
                  // console.log({ columnName, columnNames, labels, val},Object.keys(val));
                  const datum = {
                    [ name ]: columnName.replace(prefix, ''),
                  };
                  result.push(datum);
                  return result;
                }, []);
              }
              /**
               * returns a list of objects with only selected columns as properties
             * @example
            const data = [{ Age: '44', Salary: '44' , Height: '34' },
            { Age: '27', Salary: '44' , Height: '50'  }]
            const AgeDataSet = new MS.DataSet(data);
            const cols = [ 'Age', 'Salary' ];
            const selectedCols = CSVDataSet.selectColumns(cols); // => [{ Age: '44', Salary: '44' },
            { Age: '27', Salary: '27' }]
               * 
               * @param {String[]} names - array of selected columns
               * @param {*} options 
               * @returns {Object[]} an array of objects with properties derived from names
               */
              static selectColumns(names, options = {}) {
                const config = Object.assign({}, options);
                const data = config.data || this.data;
                return data.reduce((result, val) => {
                  const selectedData = {};
                  names.forEach(name => {
                    selectedData[ name ] = val[ name ];
                  });
                  result.push(selectedData);
                  return result;
                }, []);
              }
              /**
               * returns a new array of a selected column from an array of objects, can filter, scale and replace values
               * @example 
               * //column Array returns column of data by name
            // [ '44','27','30','38','40','35','','48','50', '37' ]
            const OringalAgeColumn = dataset.columnArray('Age'); 
              * @param {string} name - csv column header, or JSON object property name 
              * @param options 
              * @param {function} [options.prefilter=(arr[val])=>true] - prefilter values to return
              * @param {function} [options.filter=(arr[val])=>true] - filter values to return
              * @param {function} [options.replace.test=undefined] - test function for replacing values (arr[val])
              * @param {(string|number|function)} [options.replace.value=undefined] - value to replace (arr[val]) if replace test is true, if a function (result,val,index,arr,name)=>your custom value
              * @param {number} [options.parseIntBase=10] - radix value for parseInt
              * @param {boolean} [options.parseFloat=false] - convert values to floats 
              * @param {boolean} [options.parseInt=false] - converts values to ints 
              * @param {boolean} [options.scale=false] - standard or minmax feature scale values 
              * @returns {array}
              */
              static columnArray(name, options = {}) {
                const config = Object.assign({
                  prefilter: () => true,
                  filter: () => true,
                  replace: {
                    test: undefined,
                    value: undefined,
                  },
                  parseInt: false,
                  parseIntBase: 10,
                  parseFloat: (options.scale) ? true : false,
                  scale: false,
                }, options);
                const data = config.data || this.data;
                const modifiedColumn = data
                  .filter(config.prefilter)
                  .reduce((result, val, index, arr) => {
                    let objVal = val[ name ];
                    let returnVal = (typeof config.replace.test === 'function') ?
                      config.replace.test(objVal) ?
                        typeof config.replace.value === 'function' ?
                          config.replace.value(result, val, index, arr, name) :
                          config.replace.value :
                        objVal :
                      objVal;
                    if (config.filter(returnVal)) {
                      if (config.parseInt) result.push(parseInt(returnVal, config.parseIntBase));
                      else if (config.parseFloat) result.push(parseFloat(returnVal));
                      else result.push(returnVal);
                    }
                    return result;
                  }, []);
                if (typeof config.scale==='function') {
                  return modifiedColumn.map(config.scale);
                } else if (config.scale) {
                  switch (config.scale) {
                  case 'standard':
                    return util$3.StandardScaler(modifiedColumn);
                  case 'log':
                    return util$3.LogScaler(modifiedColumn);
                  case 'exp':
                    return util$3.ExpScaler(modifiedColumn);
                  case 'normalize':
                  default:
                    return util$3.MinMaxScaler(modifiedColumn);
                  }
                } else {
                  return modifiedColumn;
                }
              }
              
              /**
               * returns a matrix of values by combining column arrays into a matrix
               * @example const csvObj = new DataSet([{col1:1,col2:5},{col1:2,col2:6}]);
            csvObj.columnMatrix([['col1',{parseInt:true}],['col2']]); // =>
            //[ 
            //  [1,5], 
            //  [2,6], 
            //]
              * @param {Array} [vectors=[]] - array of arguments for columnArray to merge columns into a matrix
              * @param {Array} [data=[]] - array of data to convert to matrix
              * @returns {Array} a matrix of column values 
              */
              static columnMatrix(vectors = [], data = []) {
                const options = (data.length) ? { data, } : {};
                const columnVectors = (Array.isArray(vectors) && Array.isArray(vectors[ 0 ]))
                  ? vectors
                  : vectors.map(vector => [vector, options,]);
                const vectorArrays = columnVectors
                  .map(vec => DataSet.columnArray.call(this, ...vec));
                    
                return util$3.pivotArrays(vectorArrays);
              }
              /**
               * creates a new raw data instance for preprocessing data for machine learning
               * @example
               * const dataset = new ms.DataSet(csvData);
               * @param {Object[]} dataset
               * @returns {this} 
               */
              constructor(data = [], options) {
                this.config = Object.assign({
                  debug: true,
                }, options);
                this.data = [...data,];
                this.labels = new Map();
                this.encoders = new Map();
                this.scalers = new Map();
                this.selectColumns = DataSet.selectColumns;
                this.columnArray = DataSet.columnArray;
                this.encodeObject = DataSet.encodeObject;
                this.oneHotEncoder = DataSet.oneHotEncoder;
                this.oneHotDecoder = DataSet.oneHotDecoder;
                this.columnMatrix = DataSet.columnMatrix;
                this.reverseColumnMatrix = DataSet.reverseColumnMatrix;
                this.reverseColumnVector = DataSet.reverseColumnVector;
                this.getTransforms = DataSet.getTransforms;
                return this;
              }
              /**
               * returns filtered rows of data 
               * @example const csvObj = new DataSet([{col1:1,col2:5},{col1:2,col2:6}]);
            csvObj.filterColumn((row)=>row.col1>=2); // =>
            //[ 
            //  [2,6], 
            //]
              * @param {Function} [filter=()=>true] - filter function
              * @returns {Array} filtered array of data 
              */
              filterColumn(filter = () => true) {
                return this.data.filter(filter);
              }
              /**
               * Returns a new array of scaled values which can be reverse (descaled). The scaling transformations are stored on the DataSet
               * @example
            //dataset.columnArray('Age') => [ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]
            dataset.columnScale('Age',{strategy:'log'}) // => [ 3.784189633918261,
              3.295836866004329, 3.4011973816621555, 3.6375861597263857, 3.6888794541139363, 3.5553480614894135, 3.657847344866208, 3.8712010109078907, 3.912023005428146, 3.6109179126442243 ]
            dataset.scalers.get('Age').scale(45) // => 3.8066624897703196
            dataset.scalers.get('Age').descale(3.8066624897703196) // => 45
            //this supports, log/exponent, minmax/normalization and standardscaling
               * @param {string} name - name - csv column header, or JSON object property name 
               * @param {string} [options.strategy="log"] - strategy for scaling values 
               * @returns {number[]} returns an array of scaled values
               */
              columnScale(name, options = {}) {
                const input = (typeof options === 'string')
                  ? { strategy: options, }
                  : options;
                const config = Object.assign({
                  strategy: 'log',
                }, input);
                let scaleData = config.data || this.columnArray(name, config.columnArrayOptions);
                let scaledData;
                let transforms;
                  
                scaleData = scaleData.filter(datum => typeof datum !== 'undefined')
                  .map((datum, i) => {
                    if (typeof datum !== 'number') {
                      if (this.config.debug) {
                        console.error(TypeError(`Each value must be a number, error at index [${i}]`));
                      }
                      const num = Number(datum);
                      if (isNaN(num)) throw TypeError('Only numerical values can be scaled i: ' + i + ' datum:' + datum);
                      return num;
                    } else return datum;
                  });
                switch (config.strategy) {
                case 'standard':
                  transforms = util$3.StandardScalerTransforms(scaleData);     
                  this.scalers.set(name, {
                    name,
                    scale: transforms.scale,
                    descale: transforms.descale,
                    components: transforms.components,
                  });
                  scaledData = transforms.values;
                  break;
                case 'normalize':
                case 'minmax':
                  transforms = util$3.MinMaxScalerTransforms(scaleData);     
                  this.scalers.set(name, {
                    name,
                    scale: transforms.scale,
                    descale: transforms.descale,
                    components: transforms.components,
                  });
                  scaledData = transforms.values;
                  break;
                case 'log':
                default:
                  this.scalers.set(name, {
                    name,
                    scale: Math.log,
                    descale: Math.exp,
                    components: {
                      average : util$3.avg(scaleData),
                      standard_dev : util$3.sd(scaleData),
                      maximum : util$3.max(scaleData),
                      minimum : util$3.min(scaleData),
                    },
                  });
                  scaledData = util$3.LogScaler(scaleData);
                  break;
                }
                return scaledData;
              }
              /**
               * Returns a new array of descaled values
               * @example
            //dataset.columnArray('Age') => [ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]
            const scaledData = [ 3.784189633918261,
              3.295836866004329, 3.4011973816621555, 3.6375861597263857, 3.6888794541139363, 3.5553480614894135, 3.657847344866208, 3.8712010109078907, 3.912023005428146, 3.6109179126442243 ]
            dataset.columnDescale('Age') // => [ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]
               * @param {string} name - name - csv column header, or JSON object property name 
               * @param {string} [options.strategy="log"] - strategy for scaling values 
               * @returns {number[]} returns an array of scaled values
               */
              columnDescale(name, options) {
                const config = Object.assign({ }, options);
                const scaledData = config.data || this.columnArray(name, config.columnArrayOptions);
                const descaleFunction = this.scalers.get(name).descale;
                return scaledData.map(descaleFunction);
              }
              /**
               * returns a new array and label encodes a selected column
               * @example
               * const oneHotCountryColumn = dataset.oneHotEncoder('Country'); 

            // [ 'N', 'Yes', 'No', 'f', 'Yes', 'Yes', 'false', 'Yes', 'No', 'Yes' ] 
            const originalPurchasedColumn = dataset.labelEncoder('Purchased');
            // [ 0, 1, 0, 0, 1, 1, 1, 1, 0, 1 ]
            const encodedBinaryPurchasedColumn = dataset.labelEncoder('Purchased',{ binary:true });
            // [ 0, 1, 2, 3, 1, 1, 4, 1, 2, 1 ]
            const encodedPurchasedColumn = dataset.labelEncoder('Purchased'); 
              * @param {string} name - csv column header, or JSON object property name 
              * @param options
              * @param {boolean} [options.binary=false] - only replace with (0,1) with binary values 
              * @see {@link http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html} 
              * @returns {array}
              */
              labelEncoder(name, options) {
                const config = Object.assign({
                  binary: false,
                }, options);
                const labelData = config.data || this.columnArray(name, config.columnArrayOptions);
                const labels = new Map(
                  Array.from(new Set(labelData).values())
                    .reduce((result, val, i, arr) => {
                      result.push([val, i,]);
                      result.push([i, val,]);
                      return result;
                    }, [])
                );
                this.labels.set(name, labels);
                const labeledData = (config.binary) ?
                  labelData.map(label => {
                    // console.log(label);
                    if (!label) return 0;
                    switch (label) {
                    case false:
                    case 'N':
                    case 'n':
                    case 'NO':
                    case 'No':
                    case 'no':
                    case 'False':
                    case 'F':
                    case 'f':
                      return 0;
                    default:
                      return 1;
                    }
                  }) :
                  labelData.map(label => labels.get(label));
                return labeledData;
              }
              /**
                 * returns a new array and decodes an encoded column back to the original array values
                 * @param {string} name - csv column header, or JSON object property name 
                 * @param options
                 * @returns {array}
                 */
              labelDecode(name, options) {
                const config = Object.assign({}, options);
                const labelData = config.data || this.columnArray(name, config.columnArrayOptions);
                return labelData.map(val => this.labels.get(name).get(val));
              }
              /**
               * Return one hot encoded data
               * @example
            const csvData = [{
                'Country': 'Brazil',
                'Age': '44',
                'Salary': '72000',
                'Purchased': 'N',
              },
              {
                'Country': 'Mexico',
                'Age': '27',
                'Salary': '48000',
                'Purchased': 'Yes',
              },
              ...
            ];
            const EncodedCSVDataSet = new ms.preprocessing.DataSet(csvData);
            EncodedCSVDataSet.fitColumns({
              columns: [
                {
                  name: 'Country',
                  options: { strategy: 'onehot', },
                },
              ],
            });

            EncodedCSVDataSet.oneHotColumnArray('Country);// =>
            // [ { Country_Brazil: 1, Country_Mexico: 0, Country_Ghana: 0 },
            //   { Country_Brazil: 0, Country_Mexico: 1, Country_Ghana: 0 },
            //   { Country_Brazil: 0, Country_Mexico: 0, Country_Ghana: 1 },
            //   ...]
               * @param {string} name - column name 
               * @param options 
               * @returns {Array<Object>} returns an array of objects from an one hot encoded column
               */
              oneHotColumnArray(name, options) {
                const config = Object.assign({
                  // handle_unknown: 'error'
                }, options);
                const labels = config.labels || this.encoders.get(name).labels;
                const prefix = config.prefix || this.encoders.get(name).prefix;
                return this.selectColumns(labels.map(label => `${prefix}${label}`));
              }
              /**
             * it returns a new column that reduces a column into a new column object, this is used in data prep to create new calculated columns for aggregrate statistics
             * @example 
            const reducer = (result, value, index, arr) => {
            result.push(value * 2);
            return result;
            };
            CSVDataSet.columnReducer('DoubleAge', {
            columnName: 'Age',
            reducer,
            }); //=> { DoubleAge: [ 88, 54, 60, 76, 80, 70, 0, 96, 100, 74 ] }
              * @param {String} name - name of new Column 
              * @param {Object} options 
              * @param {String} options.columnName - name property for columnArray selection 
              * @param {Object} options.columnOptions - options property for columnArray  
              * @param {Function} options.reducer - reducer function to reduce into new array, it should push values into the resulting array  
              * @returns {Object} a new object that has reduced array as the value
              */
              columnReducer(name, options) {
                const newColumn = {
                  [ name ]: this.columnArray(options.columnName, options.columnOptions).reduce(options.reducer, []),
                };
                return newColumn;
              }
              /**
               * it returns a new column that is merged onto the data set
               * @example 
            CSVDataSet.columnMerge('DoubleAge', [ 88, 54, 60, 76, 80, 70, 0, 96, 100, 74 ]); //=> { DoubleAge: [ 88, 54, 60, 76, 80, 70, 0, 96, 100, 74 ] }
                * @param {String} name - name of new Column 
                * @param {Array} data - new dataset data  
                * @returns {Object} 
                */
              columnMerge(name, data=[]) {
                if (this.data.length !== data.length) throw new RangeError(`Merged data column must have the same length(${data.length}) as the DataSet's length (${this.data.length})`);
                return {
                  [name]: data,
                };
              }
              /**
               * Inverses transform on an object
               * @example
            DataSet.data; //[{
            //   Age: 0.6387122698222066,
            //   Salary: 72000,
            //   Purchased: 0,
            //   Country_Brazil: 1,
            //   Country_Mexico: 0,
            //   Country_Ghana: 0,
            // }, ...] 
            DataSet.inverseTransformObject(DataSet.data[0]); // => {
            //  Country: 'Brazil', 
            //  Age: 44, 
            //  Salary: 72000, 
            //  Purchased: 'N', 
            // };
               * @param data 
               * @param options 
               * @returns {Object} returns object with inverse transformed data
               */
              inverseTransformObject(data, options) {
                const config = Object.assign({
                  removeValues: false,
                }, options);
                const removedColumns = [];
                let transformedObject = Object.assign({}, data);
                const columnNames = Object.keys(this.data[ 0 ]);
                const scaledData = columnNames.reduce((scaleObject, columnName) => {
                  if (this.scalers.has(columnName)){
                    scaleObject[ columnName ] = this.scalers.get(columnName).descale(data[ columnName ]);
                  }
                  return scaleObject;
                }, {});
                const labeledData = columnNames.reduce((labelObject, columnName) => {
                  if (this.labels.has(columnName)){
                    labelObject[ columnName ] = this.labels.get(columnName).get(data[ columnName ]);
                  }
                  return labelObject;
                }, {});
                const encodedData = columnNames.reduce((encodedObject, columnName) => {
                  if (this.encoders.has(columnName)) {
                    const encoded = this.oneHotDecoder(columnName, {
                      data: [data,],
                    });
                    // console.log({encoded})
                    encodedObject = Object.assign({}, encodedObject, encoded[ 0 ]);
                    if (config.removeValues) {
                      removedColumns.push(...this.encoders.get(columnName).labels.map(label=>`${this.encoders.get(columnName).prefix}${label}`));
                    }
                  }
                  return encodedObject;
                }, {});
                transformedObject = Object.assign(transformedObject, scaledData, labeledData, encodedData);
                if (config.removeValues && removedColumns.length) {
                  transformedObject = Object.keys(transformedObject).reduce((removedObject, propertyName) => {
                    if (removedColumns.indexOf(propertyName) === -1) {
                      removedObject[ propertyName ] = transformedObject[ propertyName ];
                    }
                    return removedObject;
                  }, {});
                }
                return transformedObject;
              }
              /**
               * transforms an object and replaces values that have been scaled or encoded
               * @example
            DataSet.transformObject({
              'Country': 'Brazil',
              'Age': '44',
              'Salary': '72000',
              'Purchased': 'N',
            }); // =>
            // { 
            //  Country: 'Brazil',
            //  Age: 3.784189633918261,
            //  Salary: '72000',
            //  Purchased: 'N',
            //  Country_Brazil: 1,
            //  Country_Mexico: 0,
            //  Country_Ghana: 0
            // }
               * @param data 
               * @param options 
               * @returns {Object} 
               */
              transformObject(data, options) {
                const config = Object.assign({
                  removeValues: false,
                  checkColumnLength: true,
                }, options);
                const removedColumns = [];
                // if (Array.isArray(data)) return data.map(datum => this.transformObject);
                const encodedColumns = [].concat(...Array.from(this.encoders.keys())
                  .map(encodedColumn => this.encoders.get(encodedColumn).labels
                    .map(label=>`${this.encoders.get(encodedColumn).prefix}${label}`)
                  )
                );
                const currentColumns = Object.keys(this.data[ 0 ]);
                const objectColumns = Object.keys(data).concat(encodedColumns);
                // console.log({ encodedColumns,currentColumns,objectColumns });
                const differentKeys = objectColumns.reduce((diffKeys, val) => {
                  if (currentColumns.indexOf(val) === -1 && encodedColumns.indexOf(val) === -1) diffKeys.push(val);
                  return diffKeys;
                }, []);
                let transformedObject = Object.assign({}, data);
                if (config.checkColumnLength && currentColumns.length !== objectColumns.length && currentColumns.length+encodedColumns.length !== objectColumns.length ) {
                  throw new RangeError(`Object must have the same number of keys (${objectColumns.length}) as data in your dataset(${currentColumns.length})`);
                } else if (config.checkColumnLength && differentKeys.length) {
                  throw new ReferenceError(`Object must have identical keys as data in your DataSet. Invalid keys: ${differentKeys.join(',')}`);
                } else {
                  const scaledData = objectColumns.reduce((scaleObject, columnName) => {
                    if (this.scalers.has(columnName)){
                      scaleObject[ columnName ] = this.scalers.get(columnName).scale(data[ columnName ]);
                    }
                    return scaleObject;
                  }, {});
                  const labeledData = objectColumns.reduce((labelObject, columnName) => {
                    if (this.labels.has(columnName)){
                      labelObject[ columnName ] = this.labels.get(columnName).get(data[ columnName ]);
                    }
                    return labelObject;
                  }, {});
                  const encodedData = objectColumns.reduce((encodedObject, columnName) => {
                    if (this.encoders.has(columnName)) {
                      encodedObject = Object.assign({}, encodedObject, this.encodeObject(data, this.encoders.get(columnName)));
                      if (config.removeValues) {
                        removedColumns.push(columnName);
                      }
                    }
                    return encodedObject;
                  }, {});
                  transformedObject = Object.assign(transformedObject, scaledData, labeledData, encodedData);
                  if (config.removeValues && removedColumns.length) {
                    transformedObject = Object.keys(transformedObject).reduce((removedObject, propertyName) => {
                      if (removedColumns.indexOf(propertyName) === -1) removedObject[ propertyName ] = transformedObject[ propertyName ];
                      return removedObject;
                    }, {});
                  }
                }
                return transformedObject;
              } 
              /**
               * returns a new array of a selected column from an array of objects and replaces empty values, encodes values and scales values
               * @example
               * //column Replace returns new Array with replaced missing data
            //[ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]
            const ReplacedAgeMeanColumn = dataset.columnReplace('Age',{strategy:'mean'});
              * @param {string} name - csv column header, or JSON object property name 
              * @param options 
              * @param {boolean} [options.empty=true] - replace empty values 
              * @param {boolean} [options.strategy="mean"] - strategy for replacing value, any array stat method from ml.js (mean, standardDeviation, median) or (label,labelEncoder,onehot,oneHotEncoder)
              * @returns {array|Object[]}
              */
              columnReplace(name, options = {}) {
                const config = Object.assign({
                  strategy: 'mean',
                  empty: true,
                  arrayOptions: {
                    parseFloat: true,
                    filter: val => val,
                  },
                  labelOptions: {},
                }, options);
                let replaceVal;
                let replace = {
                  test: val => !val,
                  value: replaceVal,
                };
                switch (config.strategy) {
                case 'scale':
                  replaceVal = this.columnScale(name, config.scaleOptions);
                  replace = {
                    test: val => true,
                    value: (result, val, index, arr) => replaceVal[index],
                  };
                  break;
                case 'descale':
                  replaceVal = this.columnDescale(name, config.descaleOptions);
                  replace = {
                    test: val => true,
                    value: (result, val, index, arr) => replaceVal[index],
                  };
                  break;
                case 'label':
                case 'labelEncoder':
                  replaceVal = this.labelEncoder(name, config.labelOptions);
                  replace = {
                    test: val => true,
                    value: (result, val, index, arr) => replaceVal[index],
                  };
                  break;
                case 'labeldecode':
                case 'labelDecode':
                case 'labelDecoder':
                  replaceVal = this.labelDecode(name, config.labelOptions);
                  replace = {
                    test: val => true,
                    value: (result, val, index, arr) => replaceVal[index],
                  };
                  break;
                case 'onehot':
                case 'oneHot':
                case 'oneHotEncode':
                case 'oneHotEncoder':
                  replaceVal = this.oneHotEncoder(name, config.oneHotOptions);
                  replace = {
                    test: val => true,
                    value: (result, val, index, arr) => replaceVal[index],
                  };
                  return replaceVal;
                  // break;
                case 'reducer':
                case 'reduce':
                  replaceVal = this.columnReducer(name, config.reducerOptions); 
                  return replaceVal;  
                case 'merge':
                  replaceVal = this.columnMerge(name, config.mergeData); 
                  return replaceVal; 
                case 'parseNumber':
                  replaceVal = this.columnArray(name).map(num => Number(num)); 
                  return replaceVal; 
                default:
                  replaceVal = ml.ArrayStat[config.strategy](this.columnArray(name, config.arrayOptions));
                  replace.value = replaceVal;
                  break;
                }
                return this.columnArray(name,
                  Object.assign({}, {
                    replace,
                    scale: options.scale,
                  }, options.columnOptions));
              }
              /**
                 * mutates data property of DataSet by replacing multiple columns in a single command
                 * @example
                 * //fit Columns, mutates dataset
            dataset.fitColumns({
              columns:[{name:'Age',options:{ strategy:'mean'} }]
            });
            // dataset
            // class DataSet
            //   data:[
            //     {
            //       'Country': 'Brazil',
            //       'Age': '38.77777777777778',
            //       'Salary': '72000',
            //       'Purchased': 'N',
            //     }
            //     ...
            //   ]
              * @param {Boolean} options.returnData - return updated DataSet data property 
              * @param {Object[]} options.columns - {name:'columnName',options:{strategy:'mean',labelOoptions:{}},}
              * @returns {Object[]}
              */
              fitColumns(options = {}) {
                const config = Object.assign({
                  returnData:true,
                  columns: [],
                }, options);
                if ( !options.columns || Array.isArray(options.columns) ===false) {
                  config.columns = (options.columns)
                    ? DataSet.getTransforms(options.columns)
                    : DataSet.getTransforms(options);
                }

                const fittedColumns = config.columns
                  .reduce((result, val, index, arr) => {
                    let replacedColumn = this.columnReplace(val.name, val.options);
                    if (Array.isArray(replacedColumn)) {
                      replacedColumn = replacedColumn.map(columnVal => ({
                        [val.name]: columnVal,
                      }));
                      result[val.name] = replacedColumn;
                    } else {
                      Object.keys(replacedColumn).forEach(repColName => {
                        result[repColName] = replacedColumn[repColName].map(columnVal => ({
                          [repColName]: columnVal,
                        }));
                      });
                    }
                    return result;
                  }, {});
                if (Object.keys(fittedColumns) && Object.keys(fittedColumns).length) {
                  const columnNames = Object.keys(fittedColumns);
                  const fittedData = fittedColumns[columnNames[0]]
                    .reduce((result, val, index, arr) => {
                      const returnObj = {};
                      columnNames.forEach(colName => {
                        returnObj[colName] = fittedColumns[colName][index][colName];
                      });
                      result.push(returnObj);
                      return result;
                    }, []);
                  this.data = this.data.map((val, index) => Object.assign({}, val, fittedData[index]));
                }
                return config.returnData ? this.data : this;
              }
              /**
               * Mutate dataset data by inversing all transforms
               * @example
            DataSet.data;
            // [{ 
            //  Country: 'Brazil',
            //  Age: 3.784189633918261,
            //  Salary: '72000',
            //  Purchased: 'N',
            //  Country_Brazil: 1,
            //  Country_Mexico: 0,
            //  Country_Ghana: 0
            // },
            // ...
            // ]
            DataSet.fitInverseTransforms(); // =>
            // [{
            //   'Country': 'Brazil',
            //   'Age': '44',
            //   'Salary': '72000',
            //   'Purchased': 'N',
            // },
            // ...
            // ]
               * @param options 
               */
              fitInverseTransforms(options = {}) {
                const config = Object.assign({
                  returnData: true,
                }, options);
                this.data = this.data.map(val => {
                  return (options.removeValues)
                    ? this.inverseTransformObject(val, options)
                    : Object.assign({}, val, this.inverseTransformObject(val, options));
                });
                return config.returnData ? this.data : this;
              }
              /**
               * Mutate dataset data with all transforms
               * @param options
               * @example
            DataSet.data;
            // [{
            //   'Country': 'Brazil',
            //   'Age': '44',
            //   'Salary': '72000',
            //   'Purchased': 'N',
            // },
            // ...
            // ]
            DataSet.fitTransforms(); // =>
            // [{ 
            //  Country: 'Brazil',
            //  Age: 3.784189633918261,
            //  Salary: '72000',
            //  Purchased: 'N',
            //  Country_Brazil: 1,
            //  Country_Mexico: 0,
            //  Country_Ghana: 0
            // },
            // ...
            // ] 
               */
              fitTransforms(options = {}) {
                const config = Object.assign({
                  returnData: true,
                }, options);
                this.data = this.data.map(val => {
                  return (options.removeValues)
                    ? this.transformObject(val, options)
                    : Object.assign({}, val, this.transformObject(val, options));
                });
                return config.returnData ? this.data : this;
              }
            }

            // import { ml, } from './ml';

            /**
             * class creating sparse matrices from a corpus
             * @class ColumnVectorizer
             * @memberOf nlp
             */
            class ColumnVectorizer {
              /**
               * creates a new instance for classifying text data for machine learning
               * @example
               * const dataset = new ms.nlp.ColumnVectorizer(csvData);
               * @param {Object} [options={}]
               * @prop {Object[]} this.data - Array of strings
               * @prop {Set} this.tokens - Unique collection of all tokenized strings
               * @prop {Object[]} this.vectors - Array of tokenized words with value of count of appreance in string
               * @prop {Object} this.wordMap - Object of all unique words, with value of 0
               * @prop {Object} this.wordCountMap - Object of all unique words, with value as total count of appearances
               * @prop {number} this.maxFeatures - max number of features
               * @prop {String[]} this.sortedWordCount - list of words as tokens sorted by total appearances
               * @prop {String[]} this.limitedFeatures - subset list of maxFeatures words as tokens sorted by total appearances
               * @prop {Array[]} this.matrix - words in sparse matrix
               * @prop {Function} this.replacer - clean string function
               * @returns {this} 
               */
              constructor(options = {}) {
                this.data = options.data || [];
                this.tokens = new Set();
                this.vectors = [];
                this.wordMap = {};
                this.wordCountMap = {};
                this.maxFeatures = options.maxFeatures;
                this.sortedWordCount = [];
                this.limitedFeatures = [];
                this.matrix = [];
                this.replacer = (value='') => {
                  const cleanedValue = value
                    .toLowerCase()
                    .replace(/[^a-zA-Z]/gi, ' ');
                  return nlp.PorterStemmer
                    .tokenizeAndStem(cleanedValue)
                    .join(' ');
                };
                return this;
              }
              /** 
               * Returns a distinct array of all tokens
               * @return {String[]} returns a distinct array of all tokens
              */
              get_tokens() {
                return Array.from(this.tokens);
              }
              /** 
               * Returns array of arrays of strings for dependent features from sparse matrix word map
               * @return {String[]} returns array of dependent features for DataSet column matrics
              */
              get_vector_array() {
                return this.get_tokens().map(tok => [
                  tok,
                ]);
              }
              /**
               * Fits and transforms data by creating column vectors (a sparse matrix where each row has every word in the corpus as a column and the count of appearances in the corpus)
               * @param {Object} options 
               * @param {Object[]} options.data - array of corpus data 
               */
              fit_transform(options = {}) {
                const data = options.data || this.data;
                data.forEach(datum => {
                  const datums = {};
                  this.replacer(datum)
                    .split(' ')
                    .forEach(tok => {
                      const token = tok.toLowerCase();
                      datums[ token ] = (datums[ token ])
                        ? datums[ token ] + 1
                        : 1;
                      this.wordCountMap[token] = (this.wordCountMap[token])
                        ? this.wordCountMap[token] + 1
                        : 1;
                      this.tokens.add(token);
                    });
                  this.vectors.push(datums);
                });
                this.wordMap = Array.from(this.tokens).reduce((result, value) => { 
                  result[ value ] = 0;
                  return result;
                }, {});
                this.sortedWordCount = Object.keys(this.wordCountMap)
                  .sort((a, b) => this.wordCountMap[ b ] - this.wordCountMap[ a ]);
                this.vectors = this.vectors.map(vector => Object.assign({}, this.wordMap, vector));
                const vectorData = new DataSet(this.vectors);
                this.limitedFeatures = this.get_limited_features(options);
                this.matrix = vectorData.columnMatrix(this.limitedFeatures);
                return this.matrix;
              }
              /**
               * Returns limited sets of dependent features or all dependent features sorted by word count
               * @param {*} options 
               * @param {number} options.maxFeatures - max number of features 
               */
              get_limited_features(options = {}) {
                const maxFeatures = options.maxFeatures || this.maxFeatures || this.tokens.size;
             
                return this.sortedWordCount
                  .slice(0, maxFeatures)
                  .map(feature => [ feature, ]);
              }
              /**
               * returns word map with counts
               * @example 
            ColumnVectorizer.evaluateString('I would rate everything Great, views Great, food Great') => { realli: 0,
                 good: 0,
                 definit: 0,
                 recommend: 0,
                 wait: 0,
                 staff: 0,
                 rude: 0,
                 great: 3,
                 view: 1,
                 food: 1,
                 not: 0,
                 cold: 0,
                 took: 0,
                 forev: 0,
                 seat: 0,
                 time: 0,
                 prompt: 0,
                 attent: 0,
                 bland: 0,
                 flavor: 0,
                 kind: 0 }
               * @param {String} testString 
               * @return {Object} object of corpus words with accounts
               */
              evaluateString(testString = '') {
                const evalString = this.replacer(testString);
                const evalStringWordMap = evalString.split(' ').reduce((result, value) => { 
                  if (this.tokens.has(value)) {
                    result[ value ] = (result[ value ]!==undefined)
                      ? result[ value ] + 1
                      : 1;
                  }
                  return result;
                }, {});
                return Object.assign({}, this.wordMap, evalStringWordMap);
              }
              /**
               * returns new matrix of words with counts in columns
               * @example 
            ColumnVectorizer.evaluate('I would rate everything Great, views Great, food Great') => [ [ 0, 1, 3, 0, 0, 0, 0, 0, 1 ] ]
               * @param {String} testString 
               * @return {number[][]} sparse matrix row for new classification predictions
               */
              evaluate(testString='', options) {
                const stringObj = this.evaluateString(testString);
                const limitedFeatures = this.get_limited_features(options);
                const vectorData = new DataSet([
                  stringObj,
                ]);
                return vectorData.columnMatrix(limitedFeatures);
              }
            }

            /**
             * @namespace
             * @see {@link https://github.com/NaturalNode/natural} 
             */
            const nlp = Object.assign({
              ColumnVectorizer,
            }, natural);

            /** This class performs grid search - an exhaustive search through all parameter combinations.
             * It can then call custom result evaluation and display heat-map in console.
             */
            class GridSearch {

                /** Constructor for this object. Options must
                 * provide run callback and parameters object with each property listing its possible values.
                 * Run callback must return prediction metrics object.
                 */
                constructor(options) {
                    this._run_callback = options.run_callback;
                    this._params = [];
                    this._shades = [];
                    this._combinations = [];
                    this._results = [];
                    this._prepare(options.params);
                }

                /** Save this class to file */
                save(fname) {
                    let memento = {
                        results: this._results,
                        params: this._params,
                        combinations: this._combinations
                    };
                    fs.writeFileSync(fname, JSON.stringify(memento), { encoding: "utf8" });
                }

                /** Load this class from file */
                load(fname) {
                    let s = fs.readFileSync(fname, "utf8");
                    let memento = JSON.parse(s);
                    this._results = memento.results;
                    this._params = memento.params;
                    this._combinations = memento.combinations;
                }

                /** Shallow clones provided object. */
                clone(obj) {
                    return Object.assign({}, obj);
                }

                /** Prepares all combinations of input parameters */
                _prepare(params_orig) {
                    let pars = [];
                    for (let par in params_orig) {
                        if (params_orig.hasOwnProperty(par)) {
                            pars.push({ name: par, values: params_orig[par] });
                        }
                    }

                    this._combinations = [{}];
                    for (let i = 0; i < pars.length; i++) {
                        let collected_new = [];
                        for (let obj of this._combinations) {
                            for (let j = 0; j < pars[i].values.length; j++) {
                                let obj2 = this.clone(obj);
                                obj2[pars[i].name] = pars[i].values[j];
                                collected_new.push(obj2);
                            }
                        }
                        this._combinations = collected_new;
                    }
                    this._params = pars;
                }

                /** Creates all combinations of parameters and runs the callback for each one. */
                run() {
                    for (let par of this._combinations) {
                        this._results.push({
                            params: par,
                            results: this._run_callback(par)
                        });
                    }
                }

                /** Utility method that creates default value table. */
                _createDefaultTable(r, c, d) {
                    let res_table = [];
                    for (let i = 0; i < r; i++) {
                        let tmp = [];
                        for (let j = 0; j < c; j++) {
                            tmp.push(d);
                        }
                        res_table.push(tmp);
                    }
                    return res_table;
                }

                /** Utility method that will find the index inside the array of filter object.
                 * Filter means simply an object that contains some properties that target object must match.
                 */
                _findMatchForParam(filter_arr, obj) {
                    for (let i = 0; i < filter_arr.length; i++) {
                        let match = true;
                        for (let p in filter_arr[i]) {
                            if (filter_arr[i].hasOwnProperty(p)) {
                                match = match && obj[p] == filter_arr[i][p];
                            }
                        }
                        if (match) {
                            return i;
                        }
                    }
                    return -1;
                }

                /** Returns the table of best results.
                 * User specifies which parameter should be used
                 * for rows and which for columns. He also needs to
                 * provide callback that evaluates the results.
                 */
                getTableOfResults(colPars, rowPars, evalCallback) {
                    let combinations_rows = [{}];
                    let combinations_cols = [{}];
                    let pars_rows = this._params.filter(x => rowPars.indexOf(x.name) >= 0);
                    let pars_cols = this._params.filter(x => colPars.indexOf(x.name) >= 0);

                    for (let i = 0; i < pars_rows.length; i++) {
                        let collected_new = [];
                        for (let obj of combinations_rows) {
                            for (let j = 0; j < pars_rows[i].values.length; j++) {
                                let obj2 = this.clone(obj);
                                obj2[pars_rows[i].name] = pars_rows[i].values[j];
                                collected_new.push(obj2);
                            }
                        }
                        combinations_rows = collected_new;
                    }
                    for (let i = 0; i < pars_cols.length; i++) {
                        let collected_new = [];
                        for (let obj of combinations_cols) {
                            for (let j = 0; j < pars_cols[i].values.length; j++) {
                                let obj2 = this.clone(obj);
                                obj2[pars_cols[i].name] = pars_cols[i].values[j];
                                collected_new.push(obj2);
                            }
                        }
                        combinations_cols = collected_new;
                    }

                    let res_table = this._createDefaultTable(combinations_rows.length, combinations_cols.length, -1);

                    for (let res of this._results) {
                        let r = this._findMatchForParam(combinations_rows, res.params);
                        let c = this._findMatchForParam(combinations_cols, res.params);
                        if (r < 0 || c < 0) {
                            continue; // should not happen, really
                        }
                        let val = evalCallback(res);
                        if (res_table[r][c] < val) {
                            res_table[r][c] = val;
                        }
                    }
                    return {
                        rows: combinations_rows,
                        cols: combinations_cols,
                        results: res_table
                    };
                }

                /** Utility method for creating text display of parameter/filter object */
                _createTitle(obj) {
                    let res = "";
                    for (let p in obj) {
                        if (obj.hasOwnProperty(p)) {
                            res += `${p}=${obj[p]},`;
                        }
                    }
                    return res.substr(0, res.length - 1);
                }

                /** Utility function for padding given string to specified length */
                _padToWidth(s, width, c) {
                    c = c || " ";
                    while (s.length < width) { s += c; }
                    return s;
                }

                /** This method prepares output colors given max range */
                _prepareColorShades(min, max) {
                    let step = (max - min) / 5;
                    this._shades = [];
                    for (let i = 0; i < 5; i++) {
                        this._shades.push(max - i * step);
                    }
                }

                /** Outputs numeric values while producing mathing color for the value */
                _outputValue(val, width) {
                    let s = this._padToWidth("" + val, width);
                    return s;
                }

                /** Display table in friendly way */
                displayTableOfResults(colPars, rowPars, evalCallback) {
                    let tab = this.getTableOfResults(colPars, rowPars, evalCallback);
                    let col_titles = tab.cols.map(x => this._createTitle(x));
                    let row_titles = tab.rows.map(x => this._createTitle(x));
                    let col_widths = col_titles.map(x => Math.max(x.length + 4, 8));

                    let first_col_width = 0;
                    row_titles.forEach(x => { first_col_width = Math.max(first_col_width, x.length + 4); });

                    // calculate color ranges
                    let rmin = null, rmax = null;
                    tab.results.forEach(x => {
                        x.forEach(y => {
                            if (rmin === null || rmin > y) {
                                rmin = y;
                            }
                            if (rmax === null || rmax < y) {
                                rmax = y;
                            }
                        });
                    });
                    this._prepareColorShades(rmin, rmax);

                    // ok, start with display
                    let row = "", row2 = "";

                    row += "| " + this._padToWidth("", first_col_width);
                    row2 += "|-" + this._padToWidth("", first_col_width, "-");
                    for (let i = 0; i < col_titles.length; i++) {
                        row += "| " + this._padToWidth(col_titles[i], col_widths[i]);
                        row2 += "|-" + this._padToWidth("", col_widths[i], "-");
                    }
                    console.log(row);
                    console.log(row2);

                    for (let j = 0; j < row_titles.length; j++) {
                        row = "| ";
                        row += this._padToWidth(row_titles[j], first_col_width);
                        for (let i = 0; i < col_titles.length; i++) {
                            row += "| " + this._outputValue(tab.results[j][i], col_widths[i]);
                        }
                        console.log(row);
                    }
                }
            }

            var GridSearch_1 = GridSearch;

            var grid_search = {
            	GridSearch: GridSearch_1
            };

            const { GridSearch: GridSearch$1, } = grid_search;
            const Matrix$e = ml.Matrix;
            const ConfusionMatrix$1 = ml.ConfusionMatrix;

            /**
             * Split arrays into random train and test subsets
             * @memberOf cross_validation
             * @example
             * const testArray = [20, 25, 10, 33, 50, 42, 19, 34, 90, 23, ];
            // { train: [ 50, 20, 34, 33, 10, 23, 90, 42 ], test: [ 25, 19 ] }
            const trainTestSplit = ms.cross_validation.train_test_split(testArray,{ test_size:0.2, random_state: 0, });
             * @param {array} dataset - array of data to split
             * @param {object} options
             * @param {number} [options.test_size=0.2] - represent the proportion of the dataset to include in the test split, can be overwritten by the train_size 
             * @param {number} [options.train_size=0.8] - represent the proportion of the dataset to include in the train split 
             * @param {number} [options.random_state=0] - the seed used by the random number generator
             * @param {boolean} [options.return_array=false] - will return an object {train,test} of the split dataset by default or [train,test] if returned as an array
             * @returns {(Object|array)} returns training and test arrays either as an object or arrays
             */
            function train_test_split(dataset = [], options = {
              test_size: 0.2,
              train_size: 0.8,
              random_state: 0,
              return_array: false,
              parse_int_train_size: true,
            }) {
              const engine = random.engines.mt19937().seed(options.random_state || 0);
              const training_set = [];
              const parse_int_train_size = (typeof options.parse_int_train_size === 'boolean') ? options.parse_int_train_size : true;
              const train_size_length = (options.train_size)
                ? options.train_size * dataset.length
                : (1 - (options.test_size || 0.2)) * dataset.length;
              const train_size = parse_int_train_size
                ? parseInt(train_size_length, 10)
                : train_size_length;
              const dataset_copy = [].concat(dataset);

              while (training_set.length < train_size) {
                const index = random.integer(0, (dataset_copy.length - 1))(engine);
                // console.log({ index });
                training_set.push(dataset_copy.splice(index, 1)[0]);
              }
              return (options.return_array) ? [training_set, dataset_copy,] : {
                train: training_set,
                test: dataset_copy,
              };
            }

            /**
             * Provides train/test indices to split data in train/test sets. Split dataset into k consecutive folds.
            Each fold is then used once as a validation while the k - 1 remaining folds form the training set.
             * @memberOf cross_validation
             * @example
             * const testArray = [20, 25, 10, 33, 50, 42, 19, 34, 90, 23, ];
            // [ [ 50, 20, 34, 33, 10 ], [ 23, 90, 42, 19, 25 ] ] 
            const crossValidationArrayKFolds = ms.cross_validation.cross_validation_split(testArray, { folds: 2, random_state: 0, });
             * @param {array} dataset - array of data to split
             * @param {object} options
             * @param {number} [options.folds=3] - Number of folds 
             * @param {number} [options.random_state=0] - the seed used by the random number generator
             * @returns {array} returns  dataset split into k consecutive folds
             */
            function cross_validation_split(dataset = [], options = {
              folds: 3,
              random_state: 0,
            }) { //kfolds
              const engine = random.engines.mt19937().seed(options.random_state || 0);
              const folds = options.folds || 3;
              const dataset_split = [];
              const dataset_copy = [].concat(dataset);
              const foldsize = parseInt(dataset.length / (folds || 3), 10);
              for (let i in lodash_range(folds)) {
                const fold = [];
                while (fold.length < foldsize) {
                  const index = random.integer(0, (dataset_copy.length - 1))(engine);
                  fold.push(dataset_copy.splice(index, 1)[0]);
                }
                dataset_split.push(fold);
              }

              return dataset_split;
            }

            /**
             * Used to test variance and bias of a prediction
             * @memberOf cross_validation
             * @param {object} options
             * @param {function} options.classifier - instance of classification model used for training, or function to train a model. e.g. new DecisionTreeClassifier({ gainFunction: 'gini', }) or ml.KNN
             * @param {function} options.regression - instance of regression model used for training, or function to train a model. e.g. new RandomForestRegression({ nEstimators: 300, }) or ml.MultivariateLinearRegression
             * @return {number[]} Array of accucracy calculations 
             */
            function cross_validate_score(options = {}) {
              const config = Object.assign({}, {
                // classifier,
                // regression,
                // dataset,
                // testingset,
                dependentFeatures: [['X', ], ],
                independentFeatures: [['Y', ], ],
                // random_state,
                folds: 10,
                accuracy: 'standardError',
                use_train_x_matrix: true,
                use_train_y_matrix: false,
                use_train_y_vector: false,
                use_estimates_y_vector: false,
              }, options);
              const classifier = config.classifier;
              const regression = config.regression;
              const folds = cross_validation_split(config.dataset, {
                folds: config.folds,
                random_state: config.random_state,
              });
              const testingDataSet = new DataSet(config.testingset);
              const y_test_matrix = testingDataSet.columnMatrix(config.independentFeatures);
              const x_test_matrix = testingDataSet.columnMatrix(config.dependentFeatures);
              const actuals = util$3.pivotVector(y_test_matrix)[ 0 ];
              // console.log({ actuals });
              const prediction_accuracies = folds.map(fold => { 
                const trainingDataSet = new DataSet(fold);
                const x_train = trainingDataSet.columnMatrix(config.dependentFeatures);
                const y_train = trainingDataSet.columnMatrix(config.independentFeatures);
                const x_train_matrix = (config.use_train_x_matrix)
                  ? new Matrix$e(x_train)
                  : x_train;
                const y_train_matrix = (config.use_train_y_matrix)
                  ? new Matrix$e(y_train)
                  : (config.use_train_y_vector)
                    ? util$3.pivotVector(y_train)[0]
                    : y_train;
                if (regression) {
                  let regressor;
                  let pred_y_test;
                  if (typeof regression.train === 'function') {
                    regressor = regression.train(x_train_matrix, y_train_matrix, config.modelOptions);
                    pred_y_test = regression.predict(x_test_matrix);
                  } else {
                    regressor = new regression(x_train_matrix, y_train_matrix, config.modelOptions);
                    pred_y_test = regressor.predict(x_test_matrix);
                  }
                  // console.log({ x_test_matrix });
                  // console.log({ pred_y_test });
                  const estimates = pred_y_test;//util.pivotVector(pred_y_test)[0];
                  // console.log({ estimates, actuals });
                  return (config.accuracy === 'standardError')
                    ? util$3.standardError(actuals, estimates)
                    : util$3.rSquared(actuals, estimates);
                } else {
                  let classification;
                  let estimates;
                  if (typeof classifier.train === 'function') {
                    classifier.train(x_train_matrix, y_train_matrix, config.modelOptions);
                    estimates = classifier.predict(x_test_matrix);
                  } else {
                    classification = new classifier(x_train_matrix, y_train_matrix, config.modelOptions);
                    estimates = classification.predict(x_test_matrix);
                  }
                  // classification.train(x_train_matrix, y_train_matrix);
                  // classifier.train(x_train_matrix, y_train_matrix);
                  const compareEstimates = (config.use_estimates_y_vector)
                    ? util$3.pivotVector(estimates)[ 0 ]
                    : estimates;
                  const CM = ConfusionMatrix$1.fromLabels(actuals, compareEstimates);
                  return CM.getAccuracy();
                }
              });
              return prediction_accuracies;
            }

            /**
             * Used to test variance and bias of a prediction with parameter tuning
             * @memberOf cross_validation
             * @param {object} options
             * @param {function} options.classifier - instance of classification model used for training, or function to train a model. e.g. new DecisionTreeClassifier({ gainFunction: 'gini', }) or ml.KNN
             * @param {function} options.regression - instance of regression model used for training, or function to train a model. e.g. new RandomForestRegression({ nEstimators: 300, }) or ml.MultivariateLinearRegression
             * @return {number[]} Array of accucracy calculations 
             */
            function grid_search$1(options = {}) {
              const config = Object.assign({}, {
                return_parameters: false,
                compare_score:'mean',
                sortAccuracyScore:'desc',
                parameters: {},
              }, options);
              const regressor = config.regression;
              const classification = config.classifier;
              const sortAccuracyScore = (!options.sortAccuracyScore && config.regression)
                ? 'asc'
                : config.sortAccuracyScore;
              
              // const scoreSorter = ;
              const gs = new GridSearch$1({
                params: config.parameters,
                run_callback: (params) => {
                  if (config.regression) {
                    config.regression = new regressor(params);
                  } else {
                    config.classifier = new classification(params);
                  }
                  const score = cross_validate_score(config);
                  return (config.compare_score)
                    ? util$3[config.compare_score](score)
                    : score;
                },
              });
              gs.run();
              const accuracySorter = (sortAccuracyScore === 'desc')
                ? (a, b) => b.results - a.results
                : (a, b) => a.results - b.results;
              const results = gs._results.sort(accuracySorter);
              // GridSearch;
              return config.return_parameters
                ? results
                : results[ 0 ];
            }

            /**
             * @namespace
             * @see {@link https://machinelearningmastery.com/implement-resampling-methods-scratch-python/}
             */
            const cross_validation = {
              train_test_split,
              cross_validation_split,
              kfolds: cross_validation_split,
              cross_validate_score,
              grid_search: grid_search$1,
              GridSearch: GridSearch$1,
            };

            const loadCSV$1 = loadCSV;
            const loadCSVURI$1 = loadCSVURI;

            /**
             * @namespace
             */
            const preprocessing = {
              DataSet,
            };
            const util$4 = util$3;
            const cross_validation$1 = cross_validation;
            const model_selection = cross_validation;
            const calc$1 = calc;
            const ml$1 = ml;
            const nlp$1 = nlp;
            const csv = csvUtils;
            const PD$1 = PD;

            exports.loadCSV = loadCSV$1;
            exports.loadCSVURI = loadCSVURI$1;
            exports.preprocessing = preprocessing;
            exports.util = util$4;
            exports.cross_validation = cross_validation$1;
            exports.model_selection = model_selection;
            exports.calc = calc$1;
            exports.ml = ml$1;
            exports.nlp = nlp$1;
            exports.csv = csv;
            exports.PD = PD$1;
            exports.DataSet = DataSet;

            Object.defineProperty(exports, '__esModule', { value: true });

})));
